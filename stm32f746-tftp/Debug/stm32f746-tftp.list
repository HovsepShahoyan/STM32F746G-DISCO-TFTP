
stm32f746-tftp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020668  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ea4  08020838  08020838  00030838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080236dc  080236dc  000401f4  2**0
                  CONTENTS
  4 .ARM          00000008  080236dc  080236dc  000336dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080236e4  080236e4  000401f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080236e4  080236e4  000336e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080236e8  080236e8  000336e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080236ec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000b4  080237a0  000400b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000154  08023840  00040154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000116e8  200001f4  080238e0  000401f4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200118dc  080238e0  000418dc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00055b07  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000be8c  00000000  00000000  00095d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004098  00000000  00000000  000a1bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003d30  00000000  00000000  000a5c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00045245  00000000  00000000  000a9980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000627ff  00000000  00000000  000eebc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00140f02  00000000  00000000  001513c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002922c6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000118a8  00000000  00000000  00292318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08020820 	.word	0x08020820

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	08020820 	.word	0x08020820

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <vApplicationGetIdleTaskMemory+0x30>)
 80005fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000210 	.word	0x20000210
 8000618:	20000268 	.word	0x20000268

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f002 fdbf 	bl	80031a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f86f 	bl	8000708 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800062a:	f000 f8df 	bl	80007ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f001 f863 	bl	80016f8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000632:	f000 f90d 	bl	8000850 <MX_ADC3_Init>
  MX_CRC_Init();
 8000636:	f000 f95d 	bl	80008f4 <MX_CRC_Init>
  MX_DCMI_Init();
 800063a:	f000 f97d 	bl	8000938 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800063e:	f000 f9af 	bl	80009a0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000642:	f001 f809 	bl	8001658 <MX_FMC_Init>
  MX_I2C1_Init();
 8000646:	f000 f9dd 	bl	8000a04 <MX_I2C1_Init>
  MX_I2C3_Init();
 800064a:	f000 fa1b 	bl	8000a84 <MX_I2C3_Init>
  MX_LTDC_Init();
 800064e:	f000 fa59 	bl	8000b04 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000652:	f000 fad9 	bl	8000c08 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000656:	f000 fb03 	bl	8000c60 <MX_RTC_Init>
  MX_SAI2_Init();
 800065a:	f000 fba5 	bl	8000da8 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800065e:	f000 fc4b 	bl	8000ef8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000662:	f000 fc69 	bl	8000f38 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000666:	f000 fc97 	bl	8000f98 <MX_SPI2_Init>
  MX_TIM1_Init();
 800066a:	f000 fcd3 	bl	8001014 <MX_TIM1_Init>
  MX_TIM2_Init();
 800066e:	f000 fd7d 	bl	800116c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000672:	f000 fdf1 	bl	8001258 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000676:	f000 fe67 	bl	8001348 <MX_TIM5_Init>
  MX_TIM8_Init();
 800067a:	f000 fedd 	bl	8001438 <MX_TIM8_Init>
  MX_TIM12_Init();
 800067e:	f000 ff2f 	bl	80014e0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000682:	f000 ff73 	bl	800156c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000686:	f000 ffb7 	bl	80015f8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800068a:	f00e fa0f 	bl	800eaac <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800068e:	2300      	movs	r3, #0
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
 8000692:	2300      	movs	r3, #0
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8000696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800069a:	4618      	mov	r0, r3
 800069c:	f011 fdb6 	bl	801220c <osMutexCreate>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <main+0xd8>)
 80006a4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <main+0xdc>)
 80006a8:	f107 041c 	add.w	r4, r7, #28
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f011 fd43 	bl	801214c <osThreadCreate>
 80006c6:	4603      	mov	r3, r0
 80006c8:	4a0c      	ldr	r2, [pc, #48]	; (80006fc <main+0xe0>)
 80006ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <main+0xe4>)
 80006ce:	463c      	mov	r4, r7
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80006de:	463b      	mov	r3, r7
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f011 fd32 	bl	801214c <osThreadCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <main+0xe8>)
 80006ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ee:	f011 fd0a 	bl	8012106 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0xd6>
 80006f4:	20000c70 	.word	0x20000c70
 80006f8:	08020850 	.word	0x08020850
 80006fc:	20000c68 	.word	0x20000c68
 8000700:	0802086c 	.word	0x0802086c
 8000704:	20000c6c 	.word	0x20000c6c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f01f f9ee 	bl	801faf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800072c:	f007 fb44 	bl	8007db8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <SystemClock_Config+0xdc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <SystemClock_Config+0xdc>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <SystemClock_Config+0xdc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xe0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <SystemClock_Config+0xe0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <SystemClock_Config+0xe0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000760:	2309      	movs	r3, #9
 8000762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000778:	2319      	movs	r3, #25
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800077c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000786:	2309      	movs	r3, #9
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f007 fc34 	bl	8007ffc <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079a:	f001 f9ed 	bl	8001b78 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800079e:	f007 fb1b 	bl	8007dd8 <HAL_PWREx_EnableOverDrive>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80007a8:	f001 f9e6 	bl	8001b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b0:	2302      	movs	r3, #2
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2106      	movs	r1, #6
 80007ca:	4618      	mov	r0, r3
 80007cc:	f007 feba 	bl	8008544 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007d6:	f001 f9cf 	bl	8001b78 <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	; 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0a2      	sub	sp, #136	; 0x88
 80007f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2284      	movs	r2, #132	; 0x84
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f01f f97d 	bl	801faf8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <PeriphCommonClock_Config+0x60>)
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000802:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000806:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000808:	2305      	movs	r3, #5
 800080a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000810:	2303      	movs	r3, #3
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000814:	2301      	movs	r3, #1
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800081c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800081e:	2300      	movs	r3, #0
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000826:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f008 f89e 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800083e:	f001 f99b 	bl	8001b78 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3788      	adds	r7, #136	; 0x88
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	00b00008 	.word	0x00b00008

08000850 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_ADC3_Init+0x98>)
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <MX_ADC3_Init+0x9c>)
 8000866:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MX_ADC3_Init+0x98>)
 800086a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800086e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_ADC3_Init+0x98>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <MX_ADC3_Init+0x98>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_ADC3_Init+0x98>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_ADC3_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_ADC3_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_ADC3_Init+0x98>)
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <MX_ADC3_Init+0xa0>)
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_ADC3_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_ADC3_Init+0x98>)
 800089e:	2201      	movs	r2, #1
 80008a0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_ADC3_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_ADC3_Init+0x98>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008b0:	480d      	ldr	r0, [pc, #52]	; (80008e8 <MX_ADC3_Init+0x98>)
 80008b2:	f002 fcc9 	bl	8003248 <HAL_ADC_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80008bc:	f001 f95c 	bl	8001b78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_ADC3_Init+0x98>)
 80008d2:	f002 fcfd 	bl	80032d0 <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008dc:	f001 f94c 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000468 	.word	0x20000468
 80008ec:	40012200 	.word	0x40012200
 80008f0:	0f000001 	.word	0x0f000001

080008f4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_CRC_Init+0x3c>)
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <MX_CRC_Init+0x40>)
 80008fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_CRC_Init+0x3c>)
 8000900:	2200      	movs	r2, #0
 8000902:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_CRC_Init+0x3c>)
 8000906:	2200      	movs	r2, #0
 8000908:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_CRC_Init+0x3c>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_CRC_Init+0x3c>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_CRC_Init+0x3c>)
 8000918:	2201      	movs	r2, #1
 800091a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_CRC_Init+0x3c>)
 800091e:	f003 f809 	bl	8003934 <HAL_CRC_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000928:	f001 f926 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200004b0 	.word	0x200004b0
 8000934:	40023000 	.word	0x40023000

08000938 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_DCMI_Init+0x60>)
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <MX_DCMI_Init+0x64>)
 8000940:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_DCMI_Init+0x60>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_DCMI_Init+0x60>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_DCMI_Init+0x60>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_DCMI_Init+0x60>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_DCMI_Init+0x60>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <MX_DCMI_Init+0x60>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_DCMI_Init+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <MX_DCMI_Init+0x60>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_DCMI_Init+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <MX_DCMI_Init+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_DCMI_Init+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_DCMI_Init+0x60>)
 8000986:	f003 f8bf 	bl	8003b08 <HAL_DCMI_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000990:	f001 f8f2 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200004d4 	.word	0x200004d4
 800099c:	50050000 	.word	0x50050000

080009a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009a6:	4a16      	ldr	r2, [pc, #88]	; (8000a00 <MX_DMA2D_Init+0x60>)
 80009a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009d4:	4809      	ldr	r0, [pc, #36]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009d6:	f003 f9ab 	bl	8003d30 <HAL_DMA2D_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009e0:	f001 f8ca 	bl	8001b78 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009e4:	2101      	movs	r1, #1
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_DMA2D_Init+0x5c>)
 80009e8:	f003 fafc 	bl	8003fe4 <HAL_DMA2D_ConfigLayer>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009f2:	f001 f8c1 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000524 	.word	0x20000524
 8000a00:	4002b000 	.word	0x4002b000

08000a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_I2C1_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <MX_I2C1_Init+0x7c>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3e:	480e      	ldr	r0, [pc, #56]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a40:	f006 fd28 	bl	8007494 <HAL_I2C_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f001 f895 	bl	8001b78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a52:	f006 fdaf 	bl	80075b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f001 f88c 	bl	8001b78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a60:	2100      	movs	r1, #0
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_I2C1_Init+0x74>)
 8000a64:	f006 fdf1 	bl	800764a <HAL_I2CEx_ConfigDigitalFilter>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f001 f883 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000564 	.word	0x20000564
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	00c0eaff 	.word	0x00c0eaff

08000a84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <MX_I2C3_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000a90:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <MX_I2C3_Init+0x7c>)
 8000a92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ac0:	f006 fce8 	bl	8007494 <HAL_I2C_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aca:	f001 f855 	bl	8001b78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ad2:	f006 fd6f 	bl	80075b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000adc:	f001 f84c 	bl	8001b78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_I2C3_Init+0x74>)
 8000ae4:	f006 fdb1 	bl	800764a <HAL_I2CEx_ConfigDigitalFilter>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000aee:	f001 f843 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200005b8 	.word	0x200005b8
 8000afc:	40005c00 	.word	0x40005c00
 8000b00:	00c0eaff 	.word	0x00c0eaff

08000b04 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2234      	movs	r2, #52	; 0x34
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f01e fff1 	bl	801faf8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b16:	4b3a      	ldr	r3, [pc, #232]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b18:	4a3a      	ldr	r2, [pc, #232]	; (8000c04 <MX_LTDC_Init+0x100>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b1c:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b22:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b36:	2228      	movs	r2, #40	; 0x28
 8000b38:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b3c:	2209      	movs	r2, #9
 8000b3e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b40:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b42:	2235      	movs	r2, #53	; 0x35
 8000b44:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b48:	220b      	movs	r2, #11
 8000b4a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b4e:	f240 2215 	movw	r2, #533	; 0x215
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b56:	f240 121b 	movw	r2, #283	; 0x11b
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b5e:	f240 2235 	movw	r2, #565	; 0x235
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b64:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b66:	f240 121d 	movw	r2, #285	; 0x11d
 8000b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b84:	481e      	ldr	r0, [pc, #120]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000b86:	f006 fdad 	bl	80076e4 <HAL_LTDC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b90:	f000 fff2 	bl	8001b78 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b98:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b9c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000ba2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000ba6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000bac:	23ff      	movs	r3, #255	; 0xff
 8000bae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bb4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bb8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000bbe:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000bc4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000bca:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_LTDC_Init+0xfc>)
 8000bea:	f006 ff0d 	bl	8007a08 <HAL_LTDC_ConfigLayer>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000bf4:	f000 ffc0 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3738      	adds	r7, #56	; 0x38
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2000060c 	.word	0x2000060c
 8000c04:	40016800 	.word	0x40016800

08000c08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_QUADSPI_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c20:	2210      	movs	r2, #16
 8000c22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c26:	2218      	movs	r2, #24
 8000c28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c2c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c30:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c46:	f007 f917 	bl	8007e78 <HAL_QSPI_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 ff92 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200006b4 	.word	0x200006b4
 8000c5c:	a0001000 	.word	0xa0001000

08000c60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b090      	sub	sp, #64	; 0x40
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2228      	movs	r2, #40	; 0x28
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f01e ff39 	bl	801faf8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c86:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <MX_RTC_Init+0x140>)
 8000c88:	4a46      	ldr	r2, [pc, #280]	; (8000da4 <MX_RTC_Init+0x144>)
 8000c8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c8c:	4b44      	ldr	r3, [pc, #272]	; (8000da0 <MX_RTC_Init+0x140>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c92:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <MX_RTC_Init+0x140>)
 8000c94:	227f      	movs	r2, #127	; 0x7f
 8000c96:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c98:	4b41      	ldr	r3, [pc, #260]	; (8000da0 <MX_RTC_Init+0x140>)
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c9e:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <MX_RTC_Init+0x140>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ca4:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <MX_RTC_Init+0x140>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <MX_RTC_Init+0x140>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cb0:	483b      	ldr	r0, [pc, #236]	; (8000da0 <MX_RTC_Init+0x140>)
 8000cb2:	f008 fb93 	bl	80093dc <HAL_RTC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000cbc:	f000 ff5c 	bl	8001b78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	482f      	ldr	r0, [pc, #188]	; (8000da0 <MX_RTC_Init+0x140>)
 8000ce4:	f008 fbfe 	bl	80094e4 <HAL_RTC_SetTime>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000cee:	f000 ff43 	bl	8001b78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4619      	mov	r1, r3
 8000d12:	4823      	ldr	r0, [pc, #140]	; (8000da0 <MX_RTC_Init+0x140>)
 8000d14:	f008 fc80 	bl	8009618 <HAL_RTC_SetDate>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000d1e:	f000 ff2b 	bl	8001b78 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	2201      	movs	r2, #1
 8000d56:	4619      	mov	r1, r3
 8000d58:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_RTC_Init+0x140>)
 8000d5a:	f008 fce1 	bl	8009720 <HAL_RTC_SetAlarm>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000d64:	f000 ff08 	bl	8001b78 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2201      	movs	r2, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	480a      	ldr	r0, [pc, #40]	; (8000da0 <MX_RTC_Init+0x140>)
 8000d76:	f008 fcd3 	bl	8009720 <HAL_RTC_SetAlarm>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000d80:	f000 fefa 	bl	8001b78 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d84:	2202      	movs	r2, #2
 8000d86:	2100      	movs	r1, #0
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_RTC_Init+0x140>)
 8000d8a:	f008 fe95 	bl	8009ab8 <HAL_RTCEx_SetTimeStamp>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000d94:	f000 fef0 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3740      	adds	r7, #64	; 0x40
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000700 	.word	0x20000700
 8000da4:	40002800 	.word	0x40002800

08000da8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000dac:	4b4d      	ldr	r3, [pc, #308]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dae:	4a4e      	ldr	r2, [pc, #312]	; (8000ee8 <MX_SAI2_Init+0x140>)
 8000db0:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000db2:	4b4c      	ldr	r3, [pc, #304]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000db8:	4b4a      	ldr	r3, [pc, #296]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000dbe:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dc0:	2240      	movs	r2, #64	; 0x40
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dc4:	4b47      	ldr	r3, [pc, #284]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dca:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000dd0:	4b44      	ldr	r3, [pc, #272]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dd6:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000ddc:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000de2:	4b40      	ldr	r3, [pc, #256]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dea:	4a40      	ldr	r2, [pc, #256]	; (8000eec <MX_SAI2_Init+0x144>)
 8000dec:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dee:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000df4:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e00:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000e06:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000e0c:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e12:	4b34      	ldr	r3, [pc, #208]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e1e:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000e3c:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <MX_SAI2_Init+0x13c>)
 8000e3e:	f008 fea3 	bl	8009b88 <HAL_SAI_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000e48:	f000 fe96 	bl	8001b78 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e4e:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <MX_SAI2_Init+0x14c>)
 8000e50:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e58:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e60:	2240      	movs	r2, #64	; 0x40
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e82:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ea6:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_SAI2_Init+0x148>)
 8000ed2:	f008 fe59 	bl	8009b88 <HAL_SAI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000edc:	f000 fe4c 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000720 	.word	0x20000720
 8000ee8:	40015c04 	.word	0x40015c04
 8000eec:	0002ee00 	.word	0x0002ee00
 8000ef0:	200007a4 	.word	0x200007a4
 8000ef4:	40015c24 	.word	0x40015c24

08000ef8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_SDMMC1_SD_Init+0x38>)
 8000efe:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <MX_SDMMC1_SD_Init+0x3c>)
 8000f00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_SDMMC1_SD_Init+0x38>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_SDMMC1_SD_Init+0x38>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_SDMMC1_SD_Init+0x38>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_SDMMC1_SD_Init+0x38>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <MX_SDMMC1_SD_Init+0x38>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <MX_SDMMC1_SD_Init+0x38>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20000828 	.word	0x20000828
 8000f34:	40012c00 	.word	0x40012c00

08000f38 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f3e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f42:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_SPDIFRX_Init+0x5c>)
 8000f82:	f00a f88d 	bl	800b0a0 <HAL_SPDIFRX_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f8c:	f000 fdf4 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200008ac 	.word	0x200008ac

08000f98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_SPI2_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_SPI2_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_SPI2_Init+0x74>)
 8000fa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_SPI2_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_SPI2_Init+0x74>)
 8000fb2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fb6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_SPI2_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_SPI2_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_SPI2_Init+0x74>)
 8000fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_SPI2_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_SPI2_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_SPI2_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_SPI2_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_SPI2_Init+0x74>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_SPI2_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_SPI2_Init+0x74>)
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_SPI2_Init+0x74>)
 8000ff8:	f00a f8ae 	bl	800b158 <HAL_SPI_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 fdb9 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200008f8 	.word	0x200008f8
 8001010:	40003800 	.word	0x40003800

08001014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09a      	sub	sp, #104	; 0x68
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	222c      	movs	r2, #44	; 0x2c
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f01e fd52 	bl	801faf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001054:	4b43      	ldr	r3, [pc, #268]	; (8001164 <MX_TIM1_Init+0x150>)
 8001056:	4a44      	ldr	r2, [pc, #272]	; (8001168 <MX_TIM1_Init+0x154>)
 8001058:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800105a:	4b42      	ldr	r3, [pc, #264]	; (8001164 <MX_TIM1_Init+0x150>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b40      	ldr	r3, [pc, #256]	; (8001164 <MX_TIM1_Init+0x150>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001066:	4b3f      	ldr	r3, [pc, #252]	; (8001164 <MX_TIM1_Init+0x150>)
 8001068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800106c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <MX_TIM1_Init+0x150>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001074:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_TIM1_Init+0x150>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <MX_TIM1_Init+0x150>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001080:	4838      	ldr	r0, [pc, #224]	; (8001164 <MX_TIM1_Init+0x150>)
 8001082:	f00a f914 	bl	800b2ae <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800108c:	f000 fd74 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800109a:	4619      	mov	r1, r3
 800109c:	4831      	ldr	r0, [pc, #196]	; (8001164 <MX_TIM1_Init+0x150>)
 800109e:	f00a fc5f 	bl	800b960 <HAL_TIM_ConfigClockSource>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010a8:	f000 fd66 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ac:	482d      	ldr	r0, [pc, #180]	; (8001164 <MX_TIM1_Init+0x150>)
 80010ae:	f00a f9cd 	bl	800b44c <HAL_TIM_PWM_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010b8:	f000 fd5e 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010cc:	4619      	mov	r1, r3
 80010ce:	4825      	ldr	r0, [pc, #148]	; (8001164 <MX_TIM1_Init+0x150>)
 80010d0:	f00b f8d0 	bl	800c274 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010da:	f000 fd4d 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e6:	2300      	movs	r3, #0
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	4818      	ldr	r0, [pc, #96]	; (8001164 <MX_TIM1_Init+0x150>)
 8001104:	f00a fb18 	bl	800b738 <HAL_TIM_PWM_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800110e:	f000 fd33 	bl	8001b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_TIM1_Init+0x150>)
 8001148:	f00b f922 	bl	800c390 <HAL_TIMEx_ConfigBreakDeadTime>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001152:	f000 fd11 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <MX_TIM1_Init+0x150>)
 8001158:	f001 fa7e 	bl	8002658 <HAL_TIM_MspPostInit>

}
 800115c:	bf00      	nop
 800115e:	3768      	adds	r7, #104	; 0x68
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000095c 	.word	0x2000095c
 8001168:	40010000 	.word	0x40010000

0800116c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011a6:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b29      	ldr	r3, [pc, #164]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c6:	4823      	ldr	r0, [pc, #140]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011c8:	f00a f871 	bl	800b2ae <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80011d2:	f000 fcd1 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e0:	4619      	mov	r1, r3
 80011e2:	481c      	ldr	r0, [pc, #112]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011e4:	f00a fbbc 	bl	800b960 <HAL_TIM_ConfigClockSource>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011ee:	f000 fcc3 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <MX_TIM2_Init+0xe8>)
 80011f4:	f00a f92a 	bl	800b44c <HAL_TIM_PWM_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011fe:	f000 fcbb 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4810      	ldr	r0, [pc, #64]	; (8001254 <MX_TIM2_Init+0xe8>)
 8001212:	f00b f82f 	bl	800c274 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800121c:	f000 fcac 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001220:	2360      	movs	r3, #96	; 0x60
 8001222:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	4619      	mov	r1, r3
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_TIM2_Init+0xe8>)
 8001238:	f00a fa7e 	bl	800b738 <HAL_TIM_PWM_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001242:	f000 fc99 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <MX_TIM2_Init+0xe8>)
 8001248:	f001 fa06 	bl	8002658 <HAL_TIM_MspPostInit>

}
 800124c:	bf00      	nop
 800124e:	3738      	adds	r7, #56	; 0x38
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200009a8 	.word	0x200009a8

08001258 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08e      	sub	sp, #56	; 0x38
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800125e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
 800126a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <MX_TIM3_Init+0xe8>)
 800128c:	4a2d      	ldr	r2, [pc, #180]	; (8001344 <MX_TIM3_Init+0xec>)
 800128e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <MX_TIM3_Init+0xe8>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <MX_TIM3_Init+0xe8>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <MX_TIM3_Init+0xe8>)
 800129e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_TIM3_Init+0xe8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <MX_TIM3_Init+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b0:	4823      	ldr	r0, [pc, #140]	; (8001340 <MX_TIM3_Init+0xe8>)
 80012b2:	f009 fffc 	bl	800b2ae <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012bc:	f000 fc5c 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ca:	4619      	mov	r1, r3
 80012cc:	481c      	ldr	r0, [pc, #112]	; (8001340 <MX_TIM3_Init+0xe8>)
 80012ce:	f00a fb47 	bl	800b960 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012d8:	f000 fc4e 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012dc:	4818      	ldr	r0, [pc, #96]	; (8001340 <MX_TIM3_Init+0xe8>)
 80012de:	f00a f8b5 	bl	800b44c <HAL_TIM_PWM_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80012e8:	f000 fc46 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <MX_TIM3_Init+0xe8>)
 80012fc:	f00a ffba 	bl	800c274 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001306:	f000 fc37 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130a:	2360      	movs	r3, #96	; 0x60
 800130c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	4619      	mov	r1, r3
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <MX_TIM3_Init+0xe8>)
 8001322:	f00a fa09 	bl	800b738 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800132c:	f000 fc24 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001330:	4803      	ldr	r0, [pc, #12]	; (8001340 <MX_TIM3_Init+0xe8>)
 8001332:	f001 f991 	bl	8002658 <HAL_TIM_MspPostInit>

}
 8001336:	bf00      	nop
 8001338:	3738      	adds	r7, #56	; 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200009f4 	.word	0x200009f4
 8001344:	40000400 	.word	0x40000400

08001348 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	; 0x38
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <MX_TIM5_Init+0xe8>)
 800137c:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <MX_TIM5_Init+0xec>)
 800137e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <MX_TIM5_Init+0xe8>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <MX_TIM5_Init+0xe8>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <MX_TIM5_Init+0xe8>)
 800138e:	f04f 32ff 	mov.w	r2, #4294967295
 8001392:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_TIM5_Init+0xe8>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <MX_TIM5_Init+0xe8>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013a0:	4823      	ldr	r0, [pc, #140]	; (8001430 <MX_TIM5_Init+0xe8>)
 80013a2:	f009 ff84 	bl	800b2ae <HAL_TIM_Base_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80013ac:	f000 fbe4 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ba:	4619      	mov	r1, r3
 80013bc:	481c      	ldr	r0, [pc, #112]	; (8001430 <MX_TIM5_Init+0xe8>)
 80013be:	f00a facf 	bl	800b960 <HAL_TIM_ConfigClockSource>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80013c8:	f000 fbd6 	bl	8001b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80013cc:	4818      	ldr	r0, [pc, #96]	; (8001430 <MX_TIM5_Init+0xe8>)
 80013ce:	f00a f83d 	bl	800b44c <HAL_TIM_PWM_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80013d8:	f000 fbce 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	4619      	mov	r1, r3
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <MX_TIM5_Init+0xe8>)
 80013ec:	f00a ff42 	bl	800c274 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80013f6:	f000 fbbf 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fa:	2360      	movs	r3, #96	; 0x60
 80013fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	220c      	movs	r2, #12
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM5_Init+0xe8>)
 8001412:	f00a f991 	bl	800b738 <HAL_TIM_PWM_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800141c:	f000 fbac 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM5_Init+0xe8>)
 8001422:	f001 f919 	bl	8002658 <HAL_TIM_MspPostInit>

}
 8001426:	bf00      	nop
 8001428:	3738      	adds	r7, #56	; 0x38
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000a40 	.word	0x20000a40
 8001434:	40000c00 	.word	0x40000c00

08001438 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <MX_TIM8_Init+0xa0>)
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <MX_TIM8_Init+0xa4>)
 800145a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800145c:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <MX_TIM8_Init+0xa0>)
 800145e:	2200      	movs	r2, #0
 8001460:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_TIM8_Init+0xa0>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <MX_TIM8_Init+0xa0>)
 800146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_TIM8_Init+0xa0>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_TIM8_Init+0xa0>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_TIM8_Init+0xa0>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001482:	4815      	ldr	r0, [pc, #84]	; (80014d8 <MX_TIM8_Init+0xa0>)
 8001484:	f009 ff13 	bl	800b2ae <HAL_TIM_Base_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800148e:	f000 fb73 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4619      	mov	r1, r3
 800149e:	480e      	ldr	r0, [pc, #56]	; (80014d8 <MX_TIM8_Init+0xa0>)
 80014a0:	f00a fa5e 	bl	800b960 <HAL_TIM_ConfigClockSource>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80014aa:	f000 fb65 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_TIM8_Init+0xa0>)
 80014c0:	f00a fed8 	bl	800c274 <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014ca:	f000 fb55 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000a8c 	.word	0x20000a8c
 80014dc:	40010400 	.word	0x40010400

080014e0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM12_Init+0x84>)
 80014fa:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <MX_TIM12_Init+0x88>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_TIM12_Init+0x84>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <MX_TIM12_Init+0x84>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_TIM12_Init+0x84>)
 800150c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001510:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_TIM12_Init+0x84>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <MX_TIM12_Init+0x84>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <MX_TIM12_Init+0x84>)
 8001520:	f009 ff94 	bl	800b44c <HAL_TIM_PWM_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800152a:	f000 fb25 	bl	8001b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152e:	2360      	movs	r3, #96	; 0x60
 8001530:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	4807      	ldr	r0, [pc, #28]	; (8001564 <MX_TIM12_Init+0x84>)
 8001546:	f00a f8f7 	bl	800b738 <HAL_TIM_PWM_ConfigChannel>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001550:	f000 fb12 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <MX_TIM12_Init+0x84>)
 8001556:	f001 f87f 	bl	8002658 <HAL_TIM_MspPostInit>

}
 800155a:	bf00      	nop
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000ad8 	.word	0x20000ad8
 8001568:	40001800 	.word	0x40001800

0800156c <MX_USART1_UART_Init>:
  * @param None
  * @retval None
  */

static void MX_USART1_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 8001572:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <MX_USART1_UART_Init+0x5c>)
 8001574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_USART1_UART_Init+0x58>)
 80015b0:	f00a ff8a 	bl	800c4c8 <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015ba:	f000 fadd 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000b24 	.word	0x20000b24
 80015c8:	40011000 	.word	0x40011000

080015cc <_write>:
  * @param None
  * @retval None
  */

int _write(int fd, char * ptr, int len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <_write+0x28>)
 80015e4:	f00a ffbe 	bl	800c564 <HAL_UART_Transmit>
  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000b24 	.word	0x20000b24

080015f8 <MX_USART6_UART_Init>:

static void MX_USART6_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USART6_UART_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <MX_USART6_UART_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART6_UART_Init+0x58>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART6_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USART6_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART6_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART6_UART_Init+0x58>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART6_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART6_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART6_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART6_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART6_UART_Init+0x58>)
 800163c:	f00a ff44 	bl	800c4c8 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 fa97 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000bac 	.word	0x20000bac
 8001654:	40011400 	.word	0x40011400

08001658 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]
 800166e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <MX_FMC_Init+0x98>)
 8001672:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <MX_FMC_Init+0x9c>)
 8001674:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <MX_FMC_Init+0x98>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MX_FMC_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_FMC_Init+0x98>)
 8001684:	2204      	movs	r2, #4
 8001686:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <MX_FMC_Init+0x98>)
 800168a:	2210      	movs	r2, #16
 800168c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_FMC_Init+0x98>)
 8001690:	2240      	movs	r2, #64	; 0x40
 8001692:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_FMC_Init+0x98>)
 8001696:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800169a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_FMC_Init+0x98>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_FMC_Init+0x98>)
 80016a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_FMC_Init+0x98>)
 80016ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_FMC_Init+0x98>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80016bc:	2307      	movs	r3, #7
 80016be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80016c0:	2304      	movs	r3, #4
 80016c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80016c4:	2307      	movs	r3, #7
 80016c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80016c8:	2303      	movs	r3, #3
 80016ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_FMC_Init+0x98>)
 80016da:	f009 fcac 	bl	800b036 <HAL_SDRAM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016e4:	f000 fa48 	bl	8001b78 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016e8:	bf00      	nop
 80016ea:	3720      	adds	r7, #32
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000c34 	.word	0x20000c34
 80016f4:	a0000140 	.word	0xa0000140

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b090      	sub	sp, #64	; 0x40
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	4bb0      	ldr	r3, [pc, #704]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4aaf      	ldr	r2, [pc, #700]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4bad      	ldr	r3, [pc, #692]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001726:	4baa      	ldr	r3, [pc, #680]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4aa9      	ldr	r2, [pc, #676]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800172c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4ba7      	ldr	r3, [pc, #668]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4ba4      	ldr	r3, [pc, #656]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4aa3      	ldr	r2, [pc, #652]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4ba1      	ldr	r3, [pc, #644]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	4b9e      	ldr	r3, [pc, #632]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a9d      	ldr	r2, [pc, #628]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b9b      	ldr	r3, [pc, #620]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	4b98      	ldr	r3, [pc, #608]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a97      	ldr	r2, [pc, #604]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b95      	ldr	r3, [pc, #596]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a91      	ldr	r2, [pc, #580]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b8f      	ldr	r3, [pc, #572]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800179e:	4b8c      	ldr	r3, [pc, #560]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a8b      	ldr	r2, [pc, #556]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017b6:	4b86      	ldr	r3, [pc, #536]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a85      	ldr	r2, [pc, #532]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b83      	ldr	r3, [pc, #524]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80017ce:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a7f      	ldr	r2, [pc, #508]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b7d      	ldr	r3, [pc, #500]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e6:	4b7a      	ldr	r3, [pc, #488]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a79      	ldr	r2, [pc, #484]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b77      	ldr	r3, [pc, #476]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fe:	4b74      	ldr	r3, [pc, #464]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a73      	ldr	r2, [pc, #460]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b71      	ldr	r3, [pc, #452]	; (80019d0 <MX_GPIO_Init+0x2d8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2120      	movs	r1, #32
 800181a:	486e      	ldr	r0, [pc, #440]	; (80019d4 <MX_GPIO_Init+0x2dc>)
 800181c:	f004 f8e6 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	210c      	movs	r1, #12
 8001824:	486c      	ldr	r0, [pc, #432]	; (80019d8 <MX_GPIO_Init+0x2e0>)
 8001826:	f004 f8e1 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2108      	movs	r1, #8
 800182e:	486b      	ldr	r0, [pc, #428]	; (80019dc <MX_GPIO_Init+0x2e4>)
 8001830:	f004 f8dc 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	4867      	ldr	r0, [pc, #412]	; (80019d8 <MX_GPIO_Init+0x2e0>)
 800183c:	f004 f8d6 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001846:	4866      	ldr	r0, [pc, #408]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 8001848:	f004 f8d0 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	21c8      	movs	r1, #200	; 0xc8
 8001850:	4864      	ldr	r0, [pc, #400]	; (80019e4 <MX_GPIO_Init+0x2ec>)
 8001852:	f004 f8cb 	bl	80059ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001856:	2308      	movs	r3, #8
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001866:	4619      	mov	r1, r3
 8001868:	485f      	ldr	r0, [pc, #380]	; (80019e8 <MX_GPIO_Init+0x2f0>)
 800186a:	f003 fefb 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800186e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001880:	230a      	movs	r3, #10
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001888:	4619      	mov	r1, r3
 800188a:	4858      	ldr	r0, [pc, #352]	; (80019ec <MX_GPIO_Init+0x2f4>)
 800188c:	f003 feea 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	4619      	mov	r1, r3
 80018a4:	4852      	ldr	r0, [pc, #328]	; (80019f0 <MX_GPIO_Init+0x2f8>)
 80018a6:	f003 fedd 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80018aa:	2340      	movs	r3, #64	; 0x40
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018bc:	4619      	mov	r1, r3
 80018be:	4845      	ldr	r0, [pc, #276]	; (80019d4 <MX_GPIO_Init+0x2dc>)
 80018c0:	f003 fed0 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80018c4:	2320      	movs	r3, #32
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d8:	4619      	mov	r1, r3
 80018da:	483e      	ldr	r0, [pc, #248]	; (80019d4 <MX_GPIO_Init+0x2dc>)
 80018dc:	f003 fec2 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80018e0:	f241 030c 	movw	r3, #4108	; 0x100c
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f6:	4619      	mov	r1, r3
 80018f8:	4837      	ldr	r0, [pc, #220]	; (80019d8 <MX_GPIO_Init+0x2e0>)
 80018fa:	f003 feb3 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	4838      	ldr	r0, [pc, #224]	; (80019f4 <MX_GPIO_Init+0x2fc>)
 8001914:	f003 fea6 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001918:	2308      	movs	r3, #8
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192c:	4619      	mov	r1, r3
 800192e:	482b      	ldr	r0, [pc, #172]	; (80019dc <MX_GPIO_Init+0x2e4>)
 8001930:	f003 fe98 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001934:	2310      	movs	r3, #16
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4823      	ldr	r0, [pc, #140]	; (80019d4 <MX_GPIO_Init+0x2dc>)
 8001948:	f003 fe8c 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800194c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	481f      	ldr	r0, [pc, #124]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 8001962:	f003 fe7f 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197c:	4619      	mov	r1, r3
 800197e:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 8001980:	f003 fe70 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800198a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	480f      	ldr	r0, [pc, #60]	; (80019d8 <MX_GPIO_Init+0x2e0>)
 800199c:	f003 fe62 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80019a0:	2310      	movs	r3, #16
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019b0:	230a      	movs	r3, #10
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b8:	4619      	mov	r1, r3
 80019ba:	4809      	ldr	r0, [pc, #36]	; (80019e0 <MX_GPIO_Init+0x2e8>)
 80019bc:	f003 fe52 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80019c0:	23c8      	movs	r3, #200	; 0xc8
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
 80019cc:	e014      	b.n	80019f8 <MX_GPIO_Init+0x300>
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40022000 	.word	0x40022000
 80019dc:	40022800 	.word	0x40022800
 80019e0:	40021c00 	.word	0x40021c00
 80019e4:	40021800 	.word	0x40021800
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40022400 	.word	0x40022400
 80019f4:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a00:	4619      	mov	r1, r3
 8001a02:	4819      	ldr	r0, [pc, #100]	; (8001a68 <MX_GPIO_Init+0x370>)
 8001a04:	f003 fe2e 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001a08:	2305      	movs	r3, #5
 8001a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a18:	230a      	movs	r3, #10
 8001a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a20:	4619      	mov	r1, r3
 8001a22:	4812      	ldr	r0, [pc, #72]	; (8001a6c <MX_GPIO_Init+0x374>)
 8001a24:	f003 fe1e 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480b      	ldr	r0, [pc, #44]	; (8001a68 <MX_GPIO_Init+0x370>)
 8001a3c:	f003 fe12 	bl	8005664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001a40:	2328      	movs	r3, #40	; 0x28
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a50:	230a      	movs	r3, #10
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_GPIO_Init+0x378>)
 8001a5c:	f003 fe02 	bl	8005664 <HAL_GPIO_Init>

}
 8001a60:	bf00      	nop
 8001a62:	3740      	adds	r7, #64	; 0x40
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021800 	.word	0x40021800
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020000 	.word	0x40020000

08001a74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001a7c:	f01d fb26 	bl	801f0cc <MX_USB_HOST_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8001a80:	f00d fa64 	bl	800ef4c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osMutexWait(myMutex01Handle, osWaitForever);
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <StartDefaultTask+0x60>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f010 fbd5 	bl	801223c <osMutexWait>
    printf("p1>\n\r");
 8001a92:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <StartDefaultTask+0x64>)
 8001a94:	f01e f918 	bl	801fcc8 <iprintf>
    fflush(stdin);
 8001a98:	4b10      	ldr	r3, [pc, #64]	; (8001adc <StartDefaultTask+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f01d fecc 	bl	801f83c <fflush>
	uint8_t Test1[] = "TaskNumber1\n\r"; //Data to send
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <StartDefaultTask+0x6c>)
 8001aa6:	f107 0408 	add.w	r4, r7, #8
 8001aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aac:	c407      	stmia	r4!, {r0, r1, r2}
 8001aae:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1,Test1,sizeof(Test1),HAL_MAX_DELAY);
 8001ab0:	f107 0108 	add.w	r1, r7, #8
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	220e      	movs	r2, #14
 8001aba:	480a      	ldr	r0, [pc, #40]	; (8001ae4 <StartDefaultTask+0x70>)
 8001abc:	f00a fd52 	bl	800c564 <HAL_UART_Transmit>
	osMutexRelease(myMutex01Handle);
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <StartDefaultTask+0x60>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f010 fc07 	bl	80122d8 <osMutexRelease>
	osDelay(1000);
 8001aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ace:	f010 fb89 	bl	80121e4 <osDelay>
  {
 8001ad2:	e7d7      	b.n	8001a84 <StartDefaultTask+0x10>
 8001ad4:	20000c70 	.word	0x20000c70
 8001ad8:	08020888 	.word	0x08020888
 8001adc:	20000050 	.word	0x20000050
 8001ae0:	08020890 	.word	0x08020890
 8001ae4:	20000b24 	.word	0x20000b24

08001ae8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
     osMutexWait(myMutex01Handle, osWaitForever);
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <StartTask02+0x58>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	4618      	mov	r0, r3
 8001afa:	f010 fb9f 	bl	801223c <osMutexWait>
     printf("p2>\n\r");
 8001afe:	4811      	ldr	r0, [pc, #68]	; (8001b44 <StartTask02+0x5c>)
 8001b00:	f01e f8e2 	bl	801fcc8 <iprintf>
     fflush(stdin);
 8001b04:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <StartTask02+0x60>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f01d fe96 	bl	801f83c <fflush>
	 uint8_t Test2[] = "TaskNumber2\n\r"; //Data to send
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <StartTask02+0x64>)
 8001b12:	f107 0408 	add.w	r4, r7, #8
 8001b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b18:	c407      	stmia	r4!, {r0, r1, r2}
 8001b1a:	8023      	strh	r3, [r4, #0]
	 HAL_UART_Transmit(&huart1,Test2,sizeof(Test2),HAL_MAX_DELAY);
 8001b1c:	f107 0108 	add.w	r1, r7, #8
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
 8001b24:	220e      	movs	r2, #14
 8001b26:	480a      	ldr	r0, [pc, #40]	; (8001b50 <StartTask02+0x68>)
 8001b28:	f00a fd1c 	bl	800c564 <HAL_UART_Transmit>
	 osMutexRelease(myMutex01Handle);
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <StartTask02+0x58>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f010 fbd1 	bl	80122d8 <osMutexRelease>
	 osDelay(1000);
 8001b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3a:	f010 fb53 	bl	80121e4 <osDelay>
  {
 8001b3e:	e7d7      	b.n	8001af0 <StartTask02+0x8>
 8001b40:	20000c70 	.word	0x20000c70
 8001b44:	080208a0 	.word	0x080208a0
 8001b48:	20000050 	.word	0x20000050
 8001b4c:	080208a8 	.word	0x080208a8
 8001b50:	20000b24 	.word	0x20000b24

08001b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b66:	f001 fb2b 	bl	80031c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40001000 	.word	0x40001000

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <Error_Handler+0x8>
	...

08001b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	603b      	str	r3, [r7, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	f06f 0001 	mvn.w	r0, #1
 8001bc2:	f001 fe8d 	bl	80038e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <HAL_ADC_MspInit+0xa4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d13c      	bne.n	8001c70 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a20      	ldr	r2, [pc, #128]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001bfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a1a      	ldr	r2, [pc, #104]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001c14:	f043 0320 	orr.w	r3, r3, #32
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0320 	and.w	r3, r3, #32
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_ADC_MspInit+0xa8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001c3e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c42:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c44:	2303      	movs	r3, #3
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	480b      	ldr	r0, [pc, #44]	; (8001c80 <HAL_ADC_MspInit+0xac>)
 8001c54:	f003 fd06 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <HAL_ADC_MspInit+0xb0>)
 8001c6c:	f003 fcfa 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	; 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40012200 	.word	0x40012200
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40021400 	.word	0x40021400
 8001c84:	40020000 	.word	0x40020000

08001c88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_CRC_MspInit+0x38>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10b      	bne.n	8001cb2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_CRC_MspInit+0x3c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_CRC_MspInit+0x3c>)
 8001ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_CRC_MspInit+0x3c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023000 	.word	0x40023000
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	; 0x38
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <HAL_DCMI_MspInit+0x160>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	f040 809a 	bne.w	8001e20 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	4a4e      	ldr	r2, [pc, #312]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6353      	str	r3, [r2, #52]	; 0x34
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	623b      	str	r3, [r7, #32]
 8001d02:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d04:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d0a:	f043 0310 	orr.w	r3, r3, #16
 8001d0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d10:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1c:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	4a42      	ldr	r2, [pc, #264]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d22:	f043 0308 	orr.w	r3, r3, #8
 8001d26:	6313      	str	r3, [r2, #48]	; 0x30
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d34:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	4a3c      	ldr	r2, [pc, #240]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4c:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	4a36      	ldr	r2, [pc, #216]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d56:	6313      	str	r3, [r2, #48]	; 0x30
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d64:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_DCMI_MspInit+0x164>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001d7c:	2360      	movs	r3, #96	; 0x60
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d8c:	230d      	movs	r3, #13
 8001d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d94:	4619      	mov	r1, r3
 8001d96:	4826      	ldr	r0, [pc, #152]	; (8001e30 <HAL_DCMI_MspInit+0x168>)
 8001d98:	f003 fc64 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da8:	2300      	movs	r3, #0
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dac:	230d      	movs	r3, #13
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db4:	4619      	mov	r1, r3
 8001db6:	481f      	ldr	r0, [pc, #124]	; (8001e34 <HAL_DCMI_MspInit+0x16c>)
 8001db8:	f003 fc54 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dce:	230d      	movs	r3, #13
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4817      	ldr	r0, [pc, #92]	; (8001e38 <HAL_DCMI_MspInit+0x170>)
 8001dda:	f003 fc43 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001dde:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001df0:	230d      	movs	r3, #13
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4810      	ldr	r0, [pc, #64]	; (8001e3c <HAL_DCMI_MspInit+0x174>)
 8001dfc:	f003 fc32 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001e00:	2350      	movs	r3, #80	; 0x50
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e10:	230d      	movs	r3, #13
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4809      	ldr	r0, [pc, #36]	; (8001e40 <HAL_DCMI_MspInit+0x178>)
 8001e1c:	f003 fc22 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3738      	adds	r7, #56	; 0x38
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	50050000 	.word	0x50050000
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40020c00 	.word	0x40020c00
 8001e38:	40021800 	.word	0x40021800
 8001e3c:	40021c00 	.word	0x40021c00
 8001e40:	40020000 	.word	0x40020000

08001e44 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <HAL_DMA2D_MspInit+0x44>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d113      	bne.n	8001e7e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_DMA2D_MspInit+0x48>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <HAL_DMA2D_MspInit+0x48>)
 8001e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_DMA2D_MspInit+0x48>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2105      	movs	r1, #5
 8001e72:	205a      	movs	r0, #90	; 0x5a
 8001e74:	f001 fd34 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e78:	205a      	movs	r0, #90	; 0x5a
 8001e7a:	f001 fd4d 	bl	8003918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	4002b000 	.word	0x4002b000
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0ac      	sub	sp, #176	; 0xb0
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	2284      	movs	r2, #132	; 0x84
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f01d fe21 	bl	801faf8 <memset>
  if(hi2c->Instance==I2C1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a44      	ldr	r2, [pc, #272]	; (8001fcc <HAL_I2C_MspInit+0x13c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d13d      	bne.n	8001f3c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ec0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ec4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f006 fd50 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eda:	f7ff fe4d 	bl	8001b78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001efa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efe:	2312      	movs	r3, #18
 8001f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f10:	2304      	movs	r3, #4
 8001f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	482d      	ldr	r0, [pc, #180]	; (8001fd4 <HAL_I2C_MspInit+0x144>)
 8001f1e:	f003 fba1 	bl	8005664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f3a:	e042      	b.n	8001fc2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <HAL_I2C_MspInit+0x148>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d13d      	bne.n	8001fc2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f52:	f107 0318 	add.w	r3, r7, #24
 8001f56:	4618      	mov	r0, r3
 8001f58:	f006 fd0c 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001f62:	f7ff fe09 	bl	8001b78 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f66:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a19      	ldr	r2, [pc, #100]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f7e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f86:	2312      	movs	r3, #18
 8001f88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f98:	2304      	movs	r3, #4
 8001f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480d      	ldr	r0, [pc, #52]	; (8001fdc <HAL_I2C_MspInit+0x14c>)
 8001fa6:	f003 fb5d 	bl	8005664 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001fb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_I2C_MspInit+0x140>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
}
 8001fc2:	bf00      	nop
 8001fc4:	37b0      	adds	r7, #176	; 0xb0
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40005400 	.word	0x40005400
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40005c00 	.word	0x40005c00
 8001fdc:	40021c00 	.word	0x40021c00

08001fe0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08e      	sub	sp, #56	; 0x38
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a55      	ldr	r2, [pc, #340]	; (8002154 <HAL_LTDC_MspInit+0x174>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	f040 80a3 	bne.w	800214a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002004:	4b54      	ldr	r3, [pc, #336]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	4a53      	ldr	r2, [pc, #332]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800200a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800200e:	6453      	str	r3, [r2, #68]	; 0x44
 8002010:	4b51      	ldr	r3, [pc, #324]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800201c:	4b4e      	ldr	r3, [pc, #312]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	6313      	str	r3, [r2, #48]	; 0x30
 8002028:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002034:	4b48      	ldr	r3, [pc, #288]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4a47      	ldr	r2, [pc, #284]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6313      	str	r3, [r2, #48]	; 0x30
 8002040:	4b45      	ldr	r3, [pc, #276]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b3f      	ldr	r3, [pc, #252]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002064:	4b3c      	ldr	r3, [pc, #240]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	4a3b      	ldr	r2, [pc, #236]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800206a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206e:	6313      	str	r3, [r2, #48]	; 0x30
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800207c:	4b36      	ldr	r3, [pc, #216]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a35      	ldr	r2, [pc, #212]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 8002082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b33      	ldr	r3, [pc, #204]	; (8002158 <HAL_LTDC_MspInit+0x178>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002094:	2310      	movs	r3, #16
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a4:	230e      	movs	r3, #14
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	482b      	ldr	r0, [pc, #172]	; (800215c <HAL_LTDC_MspInit+0x17c>)
 80020b0:	f003 fad8 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020b4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	2302      	movs	r3, #2
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c6:	230e      	movs	r3, #14
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	4823      	ldr	r0, [pc, #140]	; (8002160 <HAL_LTDC_MspInit+0x180>)
 80020d2:	f003 fac7 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020d6:	23f7      	movs	r3, #247	; 0xf7
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020e6:	230e      	movs	r3, #14
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	481c      	ldr	r0, [pc, #112]	; (8002164 <HAL_LTDC_MspInit+0x184>)
 80020f2:	f003 fab7 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002108:	2309      	movs	r3, #9
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4815      	ldr	r0, [pc, #84]	; (8002168 <HAL_LTDC_MspInit+0x188>)
 8002114:	f003 faa6 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002118:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800212a:	230e      	movs	r3, #14
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800212e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002132:	4619      	mov	r1, r3
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <HAL_LTDC_MspInit+0x18c>)
 8002136:	f003 fa95 	bl	8005664 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2105      	movs	r1, #5
 800213e:	2058      	movs	r0, #88	; 0x58
 8002140:	f001 fbce 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002144:	2058      	movs	r0, #88	; 0x58
 8002146:	f001 fbe7 	bl	8003918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3738      	adds	r7, #56	; 0x38
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40016800 	.word	0x40016800
 8002158:	40023800 	.word	0x40023800
 800215c:	40021000 	.word	0x40021000
 8002160:	40022400 	.word	0x40022400
 8002164:	40022800 	.word	0x40022800
 8002168:	40021800 	.word	0x40021800
 800216c:	40022000 	.word	0x40022000

08002170 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	; 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3b      	ldr	r2, [pc, #236]	; (800227c <HAL_QSPI_MspInit+0x10c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d170      	bne.n	8002274 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	6393      	str	r3, [r2, #56]	; 0x38
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021aa:	4b35      	ldr	r3, [pc, #212]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a34      	ldr	r2, [pc, #208]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021b0:	f043 0310 	orr.w	r3, r3, #16
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a2e      	ldr	r2, [pc, #184]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a28      	ldr	r2, [pc, #160]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_QSPI_MspInit+0x110>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80021f2:	2304      	movs	r3, #4
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002202:	2309      	movs	r3, #9
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	481d      	ldr	r0, [pc, #116]	; (8002284 <HAL_QSPI_MspInit+0x114>)
 800220e:	f003 fa29 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002212:	2340      	movs	r3, #64	; 0x40
 8002214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002222:	230a      	movs	r3, #10
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	4816      	ldr	r0, [pc, #88]	; (8002288 <HAL_QSPI_MspInit+0x118>)
 800222e:	f003 fa19 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002232:	2304      	movs	r3, #4
 8002234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002242:	2309      	movs	r3, #9
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002246:	f107 031c 	add.w	r3, r7, #28
 800224a:	4619      	mov	r1, r3
 800224c:	480e      	ldr	r0, [pc, #56]	; (8002288 <HAL_QSPI_MspInit+0x118>)
 800224e:	f003 fa09 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002252:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002264:	2309      	movs	r3, #9
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4807      	ldr	r0, [pc, #28]	; (800228c <HAL_QSPI_MspInit+0x11c>)
 8002270:	f003 f9f8 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3730      	adds	r7, #48	; 0x30
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	a0001000 	.word	0xa0001000
 8002280:	40023800 	.word	0x40023800
 8002284:	40021000 	.word	0x40021000
 8002288:	40020400 	.word	0x40020400
 800228c:	40020c00 	.word	0x40020c00

08002290 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0a4      	sub	sp, #144	; 0x90
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	2284      	movs	r2, #132	; 0x84
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f01d fc29 	bl	801faf8 <memset>
  if(hrtc->Instance==RTC)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_RTC_MspInit+0x54>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d114      	bne.n	80022da <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022b0:	2320      	movs	r3, #32
 80022b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	4618      	mov	r0, r3
 80022c0:	f006 fb58 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022ca:	f7ff fc55 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RTC_MspInit+0x58>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <HAL_RTC_MspInit+0x58>)
 80022d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022da:	bf00      	nop
 80022dc:	3790      	adds	r7, #144	; 0x90
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40002800 	.word	0x40002800
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	; 0x28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <HAL_SD_MspInit+0xb4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d144      	bne.n	8002398 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800230e:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a24      	ldr	r2, [pc, #144]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 8002314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_SD_MspInit+0xb8>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002356:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800235a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002364:	2303      	movs	r3, #3
 8002366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002368:	230c      	movs	r3, #12
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	480d      	ldr	r0, [pc, #52]	; (80023a8 <HAL_SD_MspInit+0xbc>)
 8002374:	f003 f976 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002378:	2304      	movs	r3, #4
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002388:	230c      	movs	r3, #12
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4619      	mov	r1, r3
 8002392:	4806      	ldr	r0, [pc, #24]	; (80023ac <HAL_SD_MspInit+0xc0>)
 8002394:	f003 f966 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002398:	bf00      	nop
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40012c00 	.word	0x40012c00
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00

080023b0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b0aa      	sub	sp, #168	; 0xa8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	2284      	movs	r2, #132	; 0x84
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f01d fb91 	bl	801faf8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80023de:	d143      	bne.n	8002468 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80023e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80023e6:	2364      	movs	r3, #100	; 0x64
 80023e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80023f2:	2302      	movs	r3, #2
 80023f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	4618      	mov	r0, r3
 8002400:	f006 fab8 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800240a:	f7ff fbb5 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800240e:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_SPDIFRX_MspInit+0xc0>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_SPDIFRX_MspInit+0xc0>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_SPDIFRX_MspInit+0xc0>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_SPDIFRX_MspInit+0xc0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_SPDIFRX_MspInit+0xc0>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <HAL_SPDIFRX_MspInit+0xc0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002456:	2308      	movs	r3, #8
 8002458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002460:	4619      	mov	r1, r3
 8002462:	4804      	ldr	r0, [pc, #16]	; (8002474 <HAL_SPDIFRX_MspInit+0xc4>)
 8002464:	f003 f8fe 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002468:	bf00      	nop
 800246a:	37a8      	adds	r7, #168	; 0xa8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40020c00 	.word	0x40020c00

08002478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	; 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a25      	ldr	r2, [pc, #148]	; (800252c <HAL_SPI_MspInit+0xb4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d144      	bne.n	8002524 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80024b2:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b16      	ldr	r3, [pc, #88]	; (8002530 <HAL_SPI_MspInit+0xb8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80024e2:	2302      	movs	r3, #2
 80024e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f2:	2305      	movs	r3, #5
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024f6:	f107 0314 	add.w	r3, r7, #20
 80024fa:	4619      	mov	r1, r3
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <HAL_SPI_MspInit+0xbc>)
 80024fe:	f003 f8b1 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002502:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002514:	2305      	movs	r3, #5
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	4619      	mov	r1, r3
 800251e:	4806      	ldr	r0, [pc, #24]	; (8002538 <HAL_SPI_MspInit+0xc0>)
 8002520:	f003 f8a0 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002524:	bf00      	nop
 8002526:	3728      	adds	r7, #40	; 0x28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40003800 	.word	0x40003800
 8002530:	40023800 	.word	0x40023800
 8002534:	40022000 	.word	0x40022000
 8002538:	40020400 	.word	0x40020400

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_TIM_Base_MspInit+0xc8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10c      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254e:	4b2e      	ldr	r3, [pc, #184]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002566:	e046      	b.n	80025f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d10c      	bne.n	800258c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	69bb      	ldr	r3, [r7, #24]
}
 800258a:	e034      	b.n	80025f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <HAL_TIM_Base_MspInit+0xd0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10c      	bne.n	80025b0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
}
 80025ae:	e022      	b.n	80025f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a16      	ldr	r2, [pc, #88]	; (8002610 <HAL_TIM_Base_MspInit+0xd4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10c      	bne.n	80025d4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a12      	ldr	r2, [pc, #72]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
}
 80025d2:	e010      	b.n	80025f6 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <HAL_TIM_Base_MspInit+0xd8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10b      	bne.n	80025f6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_TIM_Base_MspInit+0xcc>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
}
 80025f6:	bf00      	nop
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40010000 	.word	0x40010000
 8002608:	40023800 	.word	0x40023800
 800260c:	40000400 	.word	0x40000400
 8002610:	40000c00 	.word	0x40000c00
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_TIM_PWM_MspInit+0x38>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10b      	bne.n	8002642 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_TIM_PWM_MspInit+0x3c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_TIM_PWM_MspInit+0x3c>)
 8002630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_TIM_PWM_MspInit+0x3c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40001800 	.word	0x40001800
 8002654:	40023800 	.word	0x40023800

08002658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a56      	ldr	r2, [pc, #344]	; (80027d0 <HAL_TIM_MspPostInit+0x178>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d11d      	bne.n	80026b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a55      	ldr	r2, [pc, #340]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 031c 	add.w	r3, r7, #28
 80026ac:	4619      	mov	r1, r3
 80026ae:	484a      	ldr	r0, [pc, #296]	; (80027d8 <HAL_TIM_MspPostInit+0x180>)
 80026b0:	f002 ffd8 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80026b4:	e087      	b.n	80027c6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026be:	d11d      	bne.n	80026fc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c0:	4b44      	ldr	r3, [pc, #272]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4a43      	ldr	r2, [pc, #268]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6313      	str	r3, [r2, #48]	; 0x30
 80026cc:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80026d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026ea:	2301      	movs	r3, #1
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	4838      	ldr	r0, [pc, #224]	; (80027d8 <HAL_TIM_MspPostInit+0x180>)
 80026f6:	f002 ffb5 	bl	8005664 <HAL_GPIO_Init>
}
 80026fa:	e064      	b.n	80027c6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_TIM_MspPostInit+0x184>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d11c      	bne.n	8002740 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a32      	ldr	r2, [pc, #200]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b30      	ldr	r3, [pc, #192]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800271e:	2310      	movs	r3, #16
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800272e:	2302      	movs	r3, #2
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 031c 	add.w	r3, r7, #28
 8002736:	4619      	mov	r1, r3
 8002738:	4829      	ldr	r0, [pc, #164]	; (80027e0 <HAL_TIM_MspPostInit+0x188>)
 800273a:	f002 ff93 	bl	8005664 <HAL_GPIO_Init>
}
 800273e:	e042      	b.n	80027c6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <HAL_TIM_MspPostInit+0x18c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d11c      	bne.n	8002784 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002762:	2301      	movs	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002772:	2302      	movs	r3, #2
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	4619      	mov	r1, r3
 800277c:	481a      	ldr	r0, [pc, #104]	; (80027e8 <HAL_TIM_MspPostInit+0x190>)
 800277e:	f002 ff71 	bl	8005664 <HAL_GPIO_Init>
}
 8002782:	e020      	b.n	80027c6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a18      	ldr	r2, [pc, #96]	; (80027ec <HAL_TIM_MspPostInit+0x194>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d11b      	bne.n	80027c6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 8002794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_TIM_MspPostInit+0x17c>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80027a6:	2340      	movs	r3, #64	; 0x40
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80027b6:	2309      	movs	r3, #9
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	4619      	mov	r1, r3
 80027c0:	480b      	ldr	r0, [pc, #44]	; (80027f0 <HAL_TIM_MspPostInit+0x198>)
 80027c2:	f002 ff4f 	bl	8005664 <HAL_GPIO_Init>
}
 80027c6:	bf00      	nop
 80027c8:	3730      	adds	r7, #48	; 0x30
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40020400 	.word	0x40020400
 80027e4:	40000c00 	.word	0x40000c00
 80027e8:	40022000 	.word	0x40022000
 80027ec:	40001800 	.word	0x40001800
 80027f0:	40021c00 	.word	0x40021c00

080027f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b0ae      	sub	sp, #184	; 0xb8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800280c:	f107 0320 	add.w	r3, r7, #32
 8002810:	2284      	movs	r2, #132	; 0x84
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f01d f96f 	bl	801faf8 <memset>
  if(huart->Instance==USART1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a53      	ldr	r2, [pc, #332]	; (800296c <HAL_UART_MspInit+0x178>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d15d      	bne.n	80028e0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002824:	2340      	movs	r3, #64	; 0x40
 8002826:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002828:	2300      	movs	r3, #0
 800282a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800282c:	f107 0320 	add.w	r3, r7, #32
 8002830:	4618      	mov	r0, r3
 8002832:	f006 f89f 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800283c:	f7ff f99c 	bl	8001b78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002840:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <HAL_UART_MspInit+0x17c>)
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	4a4a      	ldr	r2, [pc, #296]	; (8002970 <HAL_UART_MspInit+0x17c>)
 8002846:	f043 0310 	orr.w	r3, r3, #16
 800284a:	6453      	str	r3, [r2, #68]	; 0x44
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_UART_MspInit+0x17c>)
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	4b45      	ldr	r3, [pc, #276]	; (8002970 <HAL_UART_MspInit+0x17c>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a44      	ldr	r2, [pc, #272]	; (8002970 <HAL_UART_MspInit+0x17c>)
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b42      	ldr	r3, [pc, #264]	; (8002970 <HAL_UART_MspInit+0x17c>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_UART_MspInit+0x17c>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	4a3e      	ldr	r2, [pc, #248]	; (8002970 <HAL_UART_MspInit+0x17c>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6313      	str	r3, [r2, #48]	; 0x30
 800287c:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <HAL_UART_MspInit+0x17c>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a0:	2307      	movs	r3, #7
 80028a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4831      	ldr	r0, [pc, #196]	; (8002974 <HAL_UART_MspInit+0x180>)
 80028ae:	f002 fed9 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80028b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028cc:	2307      	movs	r3, #7
 80028ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4827      	ldr	r0, [pc, #156]	; (8002978 <HAL_UART_MspInit+0x184>)
 80028da:	f002 fec3 	bl	8005664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028de:	e040      	b.n	8002962 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_UART_MspInit+0x188>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d13b      	bne.n	8002962 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80028f0:	2300      	movs	r3, #0
 80028f2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028f4:	f107 0320 	add.w	r3, r7, #32
 80028f8:	4618      	mov	r0, r3
 80028fa:	f006 f83b 	bl	8008974 <HAL_RCCEx_PeriphCLKConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002904:	f7ff f938 	bl	8001b78 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_UART_MspInit+0x17c>)
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	4a18      	ldr	r2, [pc, #96]	; (8002970 <HAL_UART_MspInit+0x17c>)
 800290e:	f043 0320 	orr.w	r3, r3, #32
 8002912:	6453      	str	r3, [r2, #68]	; 0x44
 8002914:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_UART_MspInit+0x17c>)
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <HAL_UART_MspInit+0x17c>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a12      	ldr	r2, [pc, #72]	; (8002970 <HAL_UART_MspInit+0x17c>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b10      	ldr	r3, [pc, #64]	; (8002970 <HAL_UART_MspInit+0x17c>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002938:	23c0      	movs	r3, #192	; 0xc0
 800293a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002950:	2308      	movs	r3, #8
 8002952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002956:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800295a:	4619      	mov	r1, r3
 800295c:	4808      	ldr	r0, [pc, #32]	; (8002980 <HAL_UART_MspInit+0x18c>)
 800295e:	f002 fe81 	bl	8005664 <HAL_GPIO_Init>
}
 8002962:	bf00      	nop
 8002964:	37b8      	adds	r7, #184	; 0xb8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40011000 	.word	0x40011000
 8002970:	40023800 	.word	0x40023800
 8002974:	40020400 	.word	0x40020400
 8002978:	40020000 	.word	0x40020000
 800297c:	40011400 	.word	0x40011400
 8002980:	40020800 	.word	0x40020800

08002984 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002998:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <HAL_FMC_MspInit+0x100>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d16d      	bne.n	8002a7c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80029a0:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <HAL_FMC_MspInit+0x100>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <HAL_FMC_MspInit+0x104>)
 80029a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029aa:	4a37      	ldr	r2, [pc, #220]	; (8002a88 <HAL_FMC_MspInit+0x104>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6393      	str	r3, [r2, #56]	; 0x38
 80029b2:	4b35      	ldr	r3, [pc, #212]	; (8002a88 <HAL_FMC_MspInit+0x104>)
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80029be:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029c2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029d0:	230c      	movs	r3, #12
 80029d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	482c      	ldr	r0, [pc, #176]	; (8002a8c <HAL_FMC_MspInit+0x108>)
 80029da:	f002 fe43 	bl	8005664 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80029de:	f248 1333 	movw	r3, #33075	; 0x8133
 80029e2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029f0:	230c      	movs	r3, #12
 80029f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	4825      	ldr	r0, [pc, #148]	; (8002a90 <HAL_FMC_MspInit+0x10c>)
 80029fa:	f002 fe33 	bl	8005664 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80029fe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002a02:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a10:	230c      	movs	r3, #12
 8002a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	481e      	ldr	r0, [pc, #120]	; (8002a94 <HAL_FMC_MspInit+0x110>)
 8002a1a:	f002 fe23 	bl	8005664 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002a1e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002a22:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a30:	230c      	movs	r3, #12
 8002a32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4817      	ldr	r0, [pc, #92]	; (8002a98 <HAL_FMC_MspInit+0x114>)
 8002a3a:	f002 fe13 	bl	8005664 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a3e:	2328      	movs	r3, #40	; 0x28
 8002a40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a4e:	230c      	movs	r3, #12
 8002a50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4811      	ldr	r0, [pc, #68]	; (8002a9c <HAL_FMC_MspInit+0x118>)
 8002a58:	f002 fe04 	bl	8005664 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a6c:	230c      	movs	r3, #12
 8002a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	4619      	mov	r1, r3
 8002a74:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <HAL_FMC_MspInit+0x11c>)
 8002a76:	f002 fdf5 	bl	8005664 <HAL_GPIO_Init>
 8002a7a:	e000      	b.n	8002a7e <HAL_FMC_MspInit+0xfa>
    return;
 8002a7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20000c74 	.word	0x20000c74
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40021800 	.word	0x40021800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40021400 	.word	0x40021400
 8002a9c:	40021c00 	.word	0x40021c00
 8002aa0:	40020800 	.word	0x40020800

08002aa4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002aac:	f7ff ff6a 	bl	8002984 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a2b      	ldr	r2, [pc, #172]	; (8002b74 <HAL_SAI_MspInit+0xbc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d124      	bne.n	8002b14 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002aca:	4b2b      	ldr	r3, [pc, #172]	; (8002b78 <HAL_SAI_MspInit+0xc0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_SAI_MspInit+0xc4>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad6:	4a29      	ldr	r2, [pc, #164]	; (8002b7c <HAL_SAI_MspInit+0xc4>)
 8002ad8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002adc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ade:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_SAI_MspInit+0xc4>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_SAI_MspInit+0xc0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_SAI_MspInit+0xc0>)
 8002af2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002af4:	23f0      	movs	r3, #240	; 0xf0
 8002af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b04:	230a      	movs	r3, #10
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	481c      	ldr	r0, [pc, #112]	; (8002b80 <HAL_SAI_MspInit+0xc8>)
 8002b10:	f002 fda8 	bl	8005664 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_SAI_MspInit+0xcc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d125      	bne.n	8002b6a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_SAI_MspInit+0xc0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b26:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_SAI_MspInit+0xc4>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_SAI_MspInit+0xc4>)
 8002b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_SAI_MspInit+0xc4>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_SAI_MspInit+0xc0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <HAL_SAI_MspInit+0xc0>)
 8002b46:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b5a:	230a      	movs	r3, #10
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4808      	ldr	r0, [pc, #32]	; (8002b88 <HAL_SAI_MspInit+0xd0>)
 8002b66:	f002 fd7d 	bl	8005664 <HAL_GPIO_Init>

    }
}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	; 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40015c04 	.word	0x40015c04
 8002b78:	20000c78 	.word	0x20000c78
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40022000 	.word	0x40022000
 8002b84:	40015c24 	.word	0x40015c24
 8002b88:	40021800 	.word	0x40021800

08002b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b9c:	4b33      	ldr	r3, [pc, #204]	; (8002c6c <HAL_InitTick+0xe0>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba0:	4a32      	ldr	r2, [pc, #200]	; (8002c6c <HAL_InitTick+0xe0>)
 8002ba2:	f043 0310 	orr.w	r3, r3, #16
 8002ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_InitTick+0xe0>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bb4:	f107 0210 	add.w	r2, r7, #16
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f005 fea6 	bl	8008910 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bce:	f005 fe77 	bl	80088c0 <HAL_RCC_GetPCLK1Freq>
 8002bd2:	6378      	str	r0, [r7, #52]	; 0x34
 8002bd4:	e004      	b.n	8002be0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bd6:	f005 fe73 	bl	80088c0 <HAL_RCC_GetPCLK1Freq>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <HAL_InitTick+0xe4>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	0c9b      	lsrs	r3, r3, #18
 8002bea:	3b01      	subs	r3, #1
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bee:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <HAL_InitTick+0xe8>)
 8002bf0:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <HAL_InitTick+0xec>)
 8002bf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_InitTick+0xe8>)
 8002bf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bfa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_InitTick+0xe8>)
 8002bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c00:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_InitTick+0xe8>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_InitTick+0xe8>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_InitTick+0xe8>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c14:	4817      	ldr	r0, [pc, #92]	; (8002c74 <HAL_InitTick+0xe8>)
 8002c16:	f008 fb4a 	bl	800b2ae <HAL_TIM_Base_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11b      	bne.n	8002c60 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c28:	4812      	ldr	r0, [pc, #72]	; (8002c74 <HAL_InitTick+0xe8>)
 8002c2a:	f008 fb97 	bl	800b35c <HAL_TIM_Base_Start_IT>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d111      	bne.n	8002c60 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c3c:	2036      	movs	r0, #54	; 0x36
 8002c3e:	f000 fe6b 	bl	8003918 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b0f      	cmp	r3, #15
 8002c46:	d808      	bhi.n	8002c5a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	2036      	movs	r0, #54	; 0x36
 8002c4e:	f000 fe47 	bl	80038e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <HAL_InitTick+0xf0>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	e002      	b.n	8002c60 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3738      	adds	r7, #56	; 0x38
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	431bde83 	.word	0x431bde83
 8002c74:	20000c7c 	.word	0x20000c7c
 8002c78:	40001000 	.word	0x40001000
 8002c7c:	20000004 	.word	0x20000004

08002c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <NMI_Handler+0x4>

08002c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8a:	e7fe      	b.n	8002c8a <HardFault_Handler+0x4>

08002c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <MemManage_Handler+0x4>

08002c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <BusFault_Handler+0x4>

08002c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <UsageFault_Handler+0x4>

08002c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <TIM6_DAC_IRQHandler+0x10>)
 8002cb2:	f008 fc22 	bl	800b4fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000c7c 	.word	0x20000c7c

08002cc0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <ETH_IRQHandler+0x10>)
 8002cc6:	f001 fdf9 	bl	80048bc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200056bc 	.word	0x200056bc

08002cd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <OTG_FS_IRQHandler+0x10>)
 8002cda:	f003 f90b 	bl	8005ef4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200115cc 	.word	0x200115cc

08002ce8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <LTDC_IRQHandler+0x10>)
 8002cee:	f004 fdc9 	bl	8007884 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000060c 	.word	0x2000060c

08002cfc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <DMA2D_IRQHandler+0x10>)
 8002d02:	f001 f85f 	bl	8003dc4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000524 	.word	0x20000524

08002d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
	return 1;
 8002d14:	2301      	movs	r3, #1
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_kill>:

int _kill(int pid, int sig)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <_kill+0x20>)
 8002d2c:	2216      	movs	r2, #22
 8002d2e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	200111dc 	.word	0x200111dc

08002d44 <_exit>:

void _exit (int status)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ffe5 	bl	8002d20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d56:	e7fe      	b.n	8002d56 <_exit+0x12>

08002d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e00a      	b.n	8002d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d6a:	f3af 8000 	nop.w
 8002d6e:	4601      	mov	r1, r0
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	60ba      	str	r2, [r7, #8]
 8002d76:	b2ca      	uxtb	r2, r1
 8002d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dbf0      	blt.n	8002d6a <_read+0x12>
	}

return len;
 8002d88:	687b      	ldr	r3, [r7, #4]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <_close>:
//	}
//	return len;
//}

int _close(int file)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
	return -1;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dba:	605a      	str	r2, [r3, #4]
	return 0;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <_isatty>:

int _isatty(int file)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
	return 1;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
	return 0;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e04:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <_sbrk+0x5c>)
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <_sbrk+0x60>)
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <_sbrk+0x64>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <_sbrk+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d205      	bcs.n	8002e38 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <_sbrk+0x6c>)
 8002e2e:	220c      	movs	r2, #12
 8002e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	e009      	b.n	8002e4c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <_sbrk+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <_sbrk+0x64>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <_sbrk+0x64>)
 8002e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	20050000 	.word	0x20050000
 8002e5c:	00000400 	.word	0x00000400
 8002e60:	20000cc8 	.word	0x20000cc8
 8002e64:	200118e0 	.word	0x200118e0
 8002e68:	200111dc 	.word	0x200111dc

08002e6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <SystemInit+0x20>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <SystemInit+0x20>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e94:	480d      	ldr	r0, [pc, #52]	; (8002ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e96:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e9c:	e002      	b.n	8002ea4 <LoopCopyDataInit>

08002e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea2:	3304      	adds	r3, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea8:	d3f9      	bcc.n	8002e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002eac:	4c0b      	ldr	r4, [pc, #44]	; (8002edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb0:	e001      	b.n	8002eb6 <LoopFillZerobss>

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb4:	3204      	adds	r2, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eba:	f7ff ffd7 	bl	8002e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ebe:	f01c fdc5 	bl	801fa4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec2:	f7fd fbab 	bl	800061c <main>
  bx  lr    
 8002ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ec8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002ed4:	080236ec 	.word	0x080236ec
  ldr r2, =_sbss
 8002ed8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002edc:	200118dc 	.word	0x200118dc

08002ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC_IRQHandler>

08002ee2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <LAN8742_RegisterBusIO+0x28>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <LAN8742_RegisterBusIO+0x28>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <LAN8742_RegisterBusIO+0x28>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f0e:	e014      	b.n	8002f3a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d17c      	bne.n	8003060 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	e01c      	b.n	8002fba <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f107 0208 	add.w	r2, r7, #8
 8002f88:	2112      	movs	r1, #18
 8002f8a:	6978      	ldr	r0, [r7, #20]
 8002f8c:	4798      	blx	r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	da03      	bge.n	8002f9c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002f94:	f06f 0304 	mvn.w	r3, #4
 8002f98:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002f9a:	e00b      	b.n	8002fb4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d105      	bne.n	8002fb4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
         break;
 8002fb2:	e005      	b.n	8002fc0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b1f      	cmp	r3, #31
 8002fbe:	d9df      	bls.n	8002f80 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b1f      	cmp	r3, #31
 8002fc6:	d902      	bls.n	8002fce <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002fc8:	f06f 0302 	mvn.w	r3, #2
 8002fcc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d145      	bne.n	8003060 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6810      	ldr	r0, [r2, #0]
 8002fdc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4798      	blx	r3
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db37      	blt.n	800305a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6810      	ldr	r0, [r2, #0]
 8002ff2:	f107 0208 	add.w	r2, r7, #8
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4798      	blx	r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db28      	blt.n	8003052 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4798      	blx	r3
 8003006:	4603      	mov	r3, r0
 8003008:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800300a:	e01c      	b.n	8003046 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4798      	blx	r3
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800301e:	d80e      	bhi.n	800303e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6810      	ldr	r0, [r2, #0]
 8003028:	f107 0208 	add.w	r2, r7, #8
 800302c:	2100      	movs	r1, #0
 800302e:	4798      	blx	r3
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	da07      	bge.n	8003046 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003036:	f06f 0304 	mvn.w	r3, #4
 800303a:	613b      	str	r3, [r7, #16]
                 break;
 800303c:	e010      	b.n	8003060 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800303e:	f06f 0301 	mvn.w	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
               break;
 8003044:	e00c      	b.n	8003060 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1dd      	bne.n	800300c <LAN8742_Init+0xc6>
 8003050:	e006      	b.n	8003060 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003052:	f06f 0304 	mvn.w	r3, #4
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	e002      	b.n	8003060 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800305a:	f06f 0303 	mvn.w	r3, #3
 800305e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d112      	bne.n	800308c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	4798      	blx	r3
 800306c:	4603      	mov	r3, r0
 800306e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003070:	bf00      	nop
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4798      	blx	r3
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003084:	d9f5      	bls.n	8003072 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800308c:	693b      	ldr	r3, [r7, #16]
 }
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6810      	ldr	r0, [r2, #0]
 80030aa:	f107 020c 	add.w	r2, r7, #12
 80030ae:	2101      	movs	r1, #1
 80030b0:	4798      	blx	r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da02      	bge.n	80030be <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80030b8:	f06f 0304 	mvn.w	r3, #4
 80030bc:	e06e      	b.n	800319c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6810      	ldr	r0, [r2, #0]
 80030c6:	f107 020c 	add.w	r2, r7, #12
 80030ca:	2101      	movs	r1, #1
 80030cc:	4798      	blx	r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da02      	bge.n	80030da <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80030d4:	f06f 0304 	mvn.w	r3, #4
 80030d8:	e060      	b.n	800319c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80030e4:	2301      	movs	r3, #1
 80030e6:	e059      	b.n	800319c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6810      	ldr	r0, [r2, #0]
 80030f0:	f107 020c 	add.w	r2, r7, #12
 80030f4:	2100      	movs	r1, #0
 80030f6:	4798      	blx	r3
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da02      	bge.n	8003104 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80030fe:	f06f 0304 	mvn.w	r3, #4
 8003102:	e04b      	b.n	800319c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11b      	bne.n	8003146 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d006      	beq.n	8003126 <LAN8742_GetLinkState+0x90>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003122:	2302      	movs	r3, #2
 8003124:	e03a      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003130:	2303      	movs	r3, #3
 8003132:	e033      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800313e:	2304      	movs	r3, #4
 8003140:	e02c      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003142:	2305      	movs	r3, #5
 8003144:	e02a      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6810      	ldr	r0, [r2, #0]
 800314e:	f107 020c 	add.w	r2, r7, #12
 8003152:	211f      	movs	r1, #31
 8003154:	4798      	blx	r3
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	da02      	bge.n	8003162 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800315c:	f06f 0304 	mvn.w	r3, #4
 8003160:	e01c      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800316c:	2306      	movs	r3, #6
 800316e:	e015      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 031c 	and.w	r3, r3, #28
 8003176:	2b18      	cmp	r3, #24
 8003178:	d101      	bne.n	800317e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800317a:	2302      	movs	r3, #2
 800317c:	e00e      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 031c 	and.w	r3, r3, #28
 8003184:	2b08      	cmp	r3, #8
 8003186:	d101      	bne.n	800318c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003188:	2303      	movs	r3, #3
 800318a:	e007      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 031c 	and.w	r3, r3, #28
 8003192:	2b14      	cmp	r3, #20
 8003194:	d101      	bne.n	800319a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003196:	2304      	movs	r3, #4
 8003198:	e000      	b.n	800319c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800319a:	2305      	movs	r3, #5
    }				
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031a8:	2003      	movs	r0, #3
 80031aa:	f000 fb8e 	bl	80038ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7ff fcec 	bl	8002b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b4:	f7fe fce6 	bl	8001b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_IncTick+0x20>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_IncTick+0x24>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_IncTick+0x24>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000008 	.word	0x20000008
 80031e4:	20000ccc 	.word	0x20000ccc

080031e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return uwTick;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_GetTick+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000ccc 	.word	0x20000ccc

08003200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff ffee 	bl	80031e8 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d005      	beq.n	8003226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_Delay+0x44>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003226:	bf00      	nop
 8003228:	f7ff ffde 	bl	80031e8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d8f7      	bhi.n	8003228 <HAL_Delay+0x28>
  {
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000008 	.word	0x20000008

08003248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e031      	b.n	80032c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe fcb4 	bl	8001bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d116      	bne.n	80032b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_ADC_Init+0x84>)
 800328c:	4013      	ands	r3, r2
 800328e:	f043 0202 	orr.w	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f970 	bl	800357c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	f043 0201 	orr.w	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
 80032b2:	e001      	b.n	80032b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	ffffeefd 	.word	0xffffeefd

080032d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1c>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e136      	b.n	800355a <HAL_ADC_ConfigChannel+0x28a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b09      	cmp	r3, #9
 80032fa:	d93a      	bls.n	8003372 <HAL_ADC_ConfigChannel+0xa2>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003304:	d035      	beq.n	8003372 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68d9      	ldr	r1, [r3, #12]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	3b1e      	subs	r3, #30
 800331c:	2207      	movs	r2, #7
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43da      	mvns	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	400a      	ands	r2, r1
 800332a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a8d      	ldr	r2, [pc, #564]	; (8003568 <HAL_ADC_ConfigChannel+0x298>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10a      	bne.n	800334c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	061a      	lsls	r2, r3, #24
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800334a:	e035      	b.n	80033b8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68d9      	ldr	r1, [r3, #12]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	4618      	mov	r0, r3
 800335e:	4603      	mov	r3, r0
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4403      	add	r3, r0
 8003364:	3b1e      	subs	r3, #30
 8003366:	409a      	lsls	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003370:	e022      	b.n	80033b8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6919      	ldr	r1, [r3, #16]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	b29b      	uxth	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	2207      	movs	r2, #7
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43da      	mvns	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	400a      	ands	r2, r1
 8003394:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6919      	ldr	r1, [r3, #16]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	4603      	mov	r3, r0
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4403      	add	r3, r0
 80033ae:	409a      	lsls	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b06      	cmp	r3, #6
 80033be:	d824      	bhi.n	800340a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	3b05      	subs	r3, #5
 80033d2:	221f      	movs	r2, #31
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43da      	mvns	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	400a      	ands	r2, r1
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	3b05      	subs	r3, #5
 80033fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	635a      	str	r2, [r3, #52]	; 0x34
 8003408:	e04c      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d824      	bhi.n	800345c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	3b23      	subs	r3, #35	; 0x23
 8003424:	221f      	movs	r2, #31
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	400a      	ands	r2, r1
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	4618      	mov	r0, r3
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	3b23      	subs	r3, #35	; 0x23
 800344e:	fa00 f203 	lsl.w	r2, r0, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
 800345a:	e023      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	3b41      	subs	r3, #65	; 0x41
 800346e:	221f      	movs	r2, #31
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43da      	mvns	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	400a      	ands	r2, r1
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	4618      	mov	r0, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	3b41      	subs	r3, #65	; 0x41
 8003498:	fa00 f203 	lsl.w	r2, r0, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a30      	ldr	r2, [pc, #192]	; (800356c <HAL_ADC_ConfigChannel+0x29c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10a      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x1f4>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b6:	d105      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80034b8:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 80034be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80034c2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a28      	ldr	r2, [pc, #160]	; (800356c <HAL_ADC_ConfigChannel+0x29c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10f      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x21e>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b12      	cmp	r3, #18
 80034d4:	d10b      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80034d6:	4b26      	ldr	r3, [pc, #152]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a25      	ldr	r2, [pc, #148]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 80034dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034e0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80034e2:	4b23      	ldr	r3, [pc, #140]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4a22      	ldr	r2, [pc, #136]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 80034e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <HAL_ADC_ConfigChannel+0x29c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d12b      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x280>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1a      	ldr	r2, [pc, #104]	; (8003568 <HAL_ADC_ConfigChannel+0x298>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <HAL_ADC_ConfigChannel+0x23a>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b11      	cmp	r3, #17
 8003508:	d122      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4a18      	ldr	r2, [pc, #96]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 8003510:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003514:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003516:	4b16      	ldr	r3, [pc, #88]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4a15      	ldr	r2, [pc, #84]	; (8003570 <HAL_ADC_ConfigChannel+0x2a0>)
 800351c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003520:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <HAL_ADC_ConfigChannel+0x298>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d111      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <HAL_ADC_ConfigChannel+0x2a4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_ADC_ConfigChannel+0x2a8>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	0c9a      	lsrs	r2, r3, #18
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003542:	e002      	b.n	800354a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3b01      	subs	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f9      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	10000012 	.word	0x10000012
 800356c:	40012000 	.word	0x40012000
 8003570:	40012300 	.word	0x40012300
 8003574:	20000000 	.word	0x20000000
 8003578:	431bde83 	.word	0x431bde83

0800357c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003584:	4b78      	ldr	r3, [pc, #480]	; (8003768 <ADC_Init+0x1ec>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a77      	ldr	r2, [pc, #476]	; (8003768 <ADC_Init+0x1ec>)
 800358a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800358e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003590:	4b75      	ldr	r3, [pc, #468]	; (8003768 <ADC_Init+0x1ec>)
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4973      	ldr	r1, [pc, #460]	; (8003768 <ADC_Init+0x1ec>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	021a      	lsls	r2, r3, #8
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360a:	4a58      	ldr	r2, [pc, #352]	; (800376c <ADC_Init+0x1f0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d022      	beq.n	8003656 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800361e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6899      	ldr	r1, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	e00f      	b.n	8003676 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003674:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0202 	bic.w	r2, r2, #2
 8003684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6899      	ldr	r1, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	005a      	lsls	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	3b01      	subs	r3, #1
 80036d0:	035a      	lsls	r2, r3, #13
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	e007      	b.n	80036ec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	3b01      	subs	r3, #1
 8003708:	051a      	lsls	r2, r3, #20
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6899      	ldr	r1, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800372e:	025a      	lsls	r2, r3, #9
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	029a      	lsls	r2, r3, #10
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40012300 	.word	0x40012300
 800376c:	0f000001 	.word	0x0f000001

08003770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800378c:	4013      	ands	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <__NVIC_SetPriorityGrouping+0x44>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <__NVIC_SetPriorityGrouping+0x40>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00
 80037b4:	05fa0000 	.word	0x05fa0000

080037b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037bc:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <__NVIC_GetPriorityGrouping+0x18>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 0307 	and.w	r3, r3, #7
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	db0b      	blt.n	80037fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	f003 021f 	and.w	r2, r3, #31
 80037ec:	4907      	ldr	r1, [pc, #28]	; (800380c <__NVIC_EnableIRQ+0x38>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	095b      	lsrs	r3, r3, #5
 80037f4:	2001      	movs	r0, #1
 80037f6:	fa00 f202 	lsl.w	r2, r0, r2
 80037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000e100 	.word	0xe000e100

08003810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	6039      	str	r1, [r7, #0]
 800381a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db0a      	blt.n	800383a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	490c      	ldr	r1, [pc, #48]	; (800385c <__NVIC_SetPriority+0x4c>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	440b      	add	r3, r1
 8003834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003838:	e00a      	b.n	8003850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4908      	ldr	r1, [pc, #32]	; (8003860 <__NVIC_SetPriority+0x50>)
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3b04      	subs	r3, #4
 8003848:	0112      	lsls	r2, r2, #4
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	440b      	add	r3, r1
 800384e:	761a      	strb	r2, [r3, #24]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000e100 	.word	0xe000e100
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	; 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f1c3 0307 	rsb	r3, r3, #7
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf28      	it	cs
 8003882:	2304      	movcs	r3, #4
 8003884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3304      	adds	r3, #4
 800388a:	2b06      	cmp	r3, #6
 800388c:	d902      	bls.n	8003894 <NVIC_EncodePriority+0x30>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3b03      	subs	r3, #3
 8003892:	e000      	b.n	8003896 <NVIC_EncodePriority+0x32>
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	f04f 32ff 	mov.w	r2, #4294967295
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ac:	f04f 31ff 	mov.w	r1, #4294967295
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43d9      	mvns	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	4313      	orrs	r3, r2
         );
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	; 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff4c 	bl	8003770 <__NVIC_SetPriorityGrouping>
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f2:	f7ff ff61 	bl	80037b8 <__NVIC_GetPriorityGrouping>
 80038f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	6978      	ldr	r0, [r7, #20]
 80038fe:	f7ff ffb1 	bl	8003864 <NVIC_EncodePriority>
 8003902:	4602      	mov	r2, r0
 8003904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff ff80 	bl	8003810 <__NVIC_SetPriority>
}
 8003910:	bf00      	nop
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff ff54 	bl	80037d4 <__NVIC_EnableIRQ>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e054      	b.n	80039f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7f5b      	ldrb	r3, [r3, #29]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe f996 	bl	8001c88 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	791b      	ldrb	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10c      	bne.n	8003984 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a22      	ldr	r2, [pc, #136]	; (80039f8 <HAL_CRC_Init+0xc4>)
 8003970:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0218 	bic.w	r2, r2, #24
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	e00c      	b.n	800399e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6899      	ldr	r1, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	461a      	mov	r2, r3
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f834 	bl	80039fc <HAL_CRCEx_Polynomial_Set>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e028      	b.n	80039f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	795b      	ldrb	r3, [r3, #5]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d105      	bne.n	80039b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295
 80039ae:	611a      	str	r2, [r3, #16]
 80039b0:	e004      	b.n	80039bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6912      	ldr	r2, [r2, #16]
 80039ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	04c11db7 	.word	0x04c11db7

080039fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a0c:	231f      	movs	r3, #31
 8003a0e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a10:	bf00      	nop
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1e5a      	subs	r2, r3, #1
 8003a16:	613a      	str	r2, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <HAL_CRCEx_Polynomial_Set+0x34>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b18      	cmp	r3, #24
 8003a34:	d846      	bhi.n	8003ac4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003a36:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003acb 	.word	0x08003acb
 8003a40:	08003ac5 	.word	0x08003ac5
 8003a44:	08003ac5 	.word	0x08003ac5
 8003a48:	08003ac5 	.word	0x08003ac5
 8003a4c:	08003ac5 	.word	0x08003ac5
 8003a50:	08003ac5 	.word	0x08003ac5
 8003a54:	08003ac5 	.word	0x08003ac5
 8003a58:	08003ac5 	.word	0x08003ac5
 8003a5c:	08003ab9 	.word	0x08003ab9
 8003a60:	08003ac5 	.word	0x08003ac5
 8003a64:	08003ac5 	.word	0x08003ac5
 8003a68:	08003ac5 	.word	0x08003ac5
 8003a6c:	08003ac5 	.word	0x08003ac5
 8003a70:	08003ac5 	.word	0x08003ac5
 8003a74:	08003ac5 	.word	0x08003ac5
 8003a78:	08003ac5 	.word	0x08003ac5
 8003a7c:	08003aad 	.word	0x08003aad
 8003a80:	08003ac5 	.word	0x08003ac5
 8003a84:	08003ac5 	.word	0x08003ac5
 8003a88:	08003ac5 	.word	0x08003ac5
 8003a8c:	08003ac5 	.word	0x08003ac5
 8003a90:	08003ac5 	.word	0x08003ac5
 8003a94:	08003ac5 	.word	0x08003ac5
 8003a98:	08003ac5 	.word	0x08003ac5
 8003a9c:	08003aa1 	.word	0x08003aa1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d913      	bls.n	8003ace <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003aaa:	e010      	b.n	8003ace <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b07      	cmp	r3, #7
 8003ab0:	d90f      	bls.n	8003ad2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ab6:	e00c      	b.n	8003ad2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0f      	cmp	r3, #15
 8003abc:	d90b      	bls.n	8003ad6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ac2:	e008      	b.n	8003ad6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac8:	e006      	b.n	8003ad8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003aca:	bf00      	nop
 8003acc:	e004      	b.n	8003ad8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e002      	b.n	8003ad8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ad6:	bf00      	nop
  }
  if (status == HAL_OK)
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10d      	bne.n	8003afa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f023 0118 	bic.w	r1, r3, #24
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e069      	b.n	8003bee <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe f8ce 	bl	8001cc8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	; (8003bf8 <HAL_DCMI_Init+0xf0>)
 8003b4e:	400b      	ands	r3, r1
 8003b50:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003b66:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003b72:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003b7e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b8a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b96:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b10      	cmp	r3, #16
 8003ba6:	d112      	bne.n	8003bce <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7f1b      	ldrb	r3, [r3, #28]
 8003bac:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	7f5b      	ldrb	r3, [r3, #29]
 8003bb2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003bb4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	7f9b      	ldrb	r3, [r3, #30]
 8003bba:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003bbc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7fdb      	ldrb	r3, [r3, #31]
 8003bc4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003bca:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003bcc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 021e 	orr.w	r2, r2, #30
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	ffe0f007 	.word	0xffe0f007

08003bfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA_Start_IT+0x26>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e048      	b.n	8003cb4 <HAL_DMA_Start_IT+0xb8>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d137      	bne.n	8003ca6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68b9      	ldr	r1, [r7, #8]
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f842 	bl	8003cd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	223f      	movs	r2, #63	; 0x3f
 8003c56:	409a      	lsls	r2, r3
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0216 	orr.w	r2, r2, #22
 8003c6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c7a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e005      	b.n	8003cb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d108      	bne.n	8003d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d12:	e007      	b.n	8003d24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e039      	b.n	8003db6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe f874 	bl	8001e44 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	f023 0107 	bic.w	r1, r3, #7
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d96:	4b0a      	ldr	r3, [pc, #40]	; (8003dc0 <HAL_DMA2D_Init+0x90>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68d1      	ldr	r1, [r2, #12]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	430b      	orrs	r3, r1
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	ffffc000 	.word	0xffffc000

08003dc4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d026      	beq.n	8003e34 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d021      	beq.n	8003e34 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2201      	movs	r2, #1
 8003e12:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2204      	movs	r2, #4
 8003e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d026      	beq.n	8003e8c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e56:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	f043 0202 	orr.w	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2204      	movs	r2, #4
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d026      	beq.n	8003ee4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d021      	beq.n	8003ee4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eae:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d013      	beq.n	8003f16 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f853 	bl	8003fbc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d024      	beq.n	8003f6a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01f      	beq.n	8003f6a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f38:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01f      	beq.n	8003fb4 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01a      	beq.n	8003fb4 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2210      	movs	r2, #16
 8003f94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f80e 	bl	8003fd0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_DMA2D_ConfigLayer+0x20>
 8004000:	2302      	movs	r3, #2
 8004002:	e079      	b.n	80040f8 <HAL_DMA2D_ConfigLayer+0x114>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	3318      	adds	r3, #24
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800402e:	4b35      	ldr	r3, [pc, #212]	; (8004104 <HAL_DMA2D_ConfigLayer+0x120>)
 8004030:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b0a      	cmp	r3, #10
 8004038:	d003      	beq.n	8004042 <HAL_DMA2D_ConfigLayer+0x5e>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b09      	cmp	r3, #9
 8004040:	d107      	bne.n	8004052 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	e005      	b.n	800405e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	061b      	lsls	r3, r3, #24
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d120      	bne.n	80040a6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	43db      	mvns	r3, r3
 800406e:	ea02 0103 	and.w	r1, r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	430a      	orrs	r2, r1
 800407a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b0a      	cmp	r3, #10
 800408c:	d003      	beq.n	8004096 <HAL_DMA2D_ConfigLayer+0xb2>
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b09      	cmp	r3, #9
 8004094:	d127      	bne.n	80040e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80040a2:	629a      	str	r2, [r3, #40]	; 0x28
 80040a4:	e01f      	b.n	80040e6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	ea02 0103 	and.w	r1, r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b0a      	cmp	r3, #10
 80040ce:	d003      	beq.n	80040d8 <HAL_DMA2D_ConfigLayer+0xf4>
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b09      	cmp	r3, #9
 80040d6:	d106      	bne.n	80040e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80040e4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	ff03000f 	.word	0xff03000f

08004108 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e06a      	b.n	80041f0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2223      	movs	r2, #35	; 0x23
 8004128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f00b fb25 	bl	800f77c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004132:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <HAL_ETH_Init+0xf0>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	4a30      	ldr	r2, [pc, #192]	; (80041f8 <HAL_ETH_Init+0xf0>)
 8004138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800413c:	6453      	str	r3, [r2, #68]	; 0x44
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_ETH_Init+0xf0>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800414a:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <HAL_ETH_Init+0xf4>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <HAL_ETH_Init+0xf4>)
 8004150:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004154:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004156:	4b29      	ldr	r3, [pc, #164]	; (80041fc <HAL_ETH_Init+0xf4>)
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4927      	ldr	r1, [pc, #156]	; (80041fc <HAL_ETH_Init+0xf4>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_ETH_Init+0xf4>)
 8004166:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800417e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004180:	f7ff f832 	bl	80031e8 <HAL_GetTick>
 8004184:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004186:	e011      	b.n	80041ac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004188:	f7ff f82e 	bl	80031e8 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004196:	d909      	bls.n	80041ac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2204      	movs	r2, #4
 800419c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	22e0      	movs	r2, #224	; 0xe0
 80041a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e021      	b.n	80041f0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e4      	bne.n	8004188 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 ffac 	bl	800511c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f001 f853 	bl	8005270 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f001 f8a9 	bl	8005322 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	461a      	mov	r2, r3
 80041d6:	2100      	movs	r1, #0
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f001 f811 	bl	8005200 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2210      	movs	r2, #16
 80041ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	40013800 	.word	0x40013800

08004200 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420e:	2b10      	cmp	r3, #16
 8004210:	d150      	bne.n	80042b4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2223      	movs	r2, #35	; 0x23
 8004216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2204      	movs	r2, #4
 800421e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fa7b 	bl	800471c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0208 	orr.w	r2, r2, #8
 8004234:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800423e:	2001      	movs	r0, #1
 8004240:	f7fe ffde 	bl	8003200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0204 	orr.w	r2, r2, #4
 800425a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004264:	2001      	movs	r0, #1
 8004266:	f7fe ffcb 	bl	8003200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fdf3 	bl	8004e5e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800428a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800428e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	f043 0302 	orr.w	r3, r3, #2
 80042a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042a6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2223      	movs	r2, #35	; 0x23
 80042ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d17b      	bne.n	80043ca <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2223      	movs	r2, #35	; 0x23
 80042d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <HAL_ETH_Start_IT+0x114>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8004314:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2204      	movs	r2, #4
 800431c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f9fc 	bl	800471c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0208 	orr.w	r2, r2, #8
 8004332:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800433c:	2001      	movs	r0, #1
 800433e:	f7fe ff5f 	bl	8003200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0204 	orr.w	r2, r2, #4
 8004358:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004362:	2001      	movs	r0, #1
 8004364:	f7fe ff4c 	bl	8003200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fd74 	bl	8004e5e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004388:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800438c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043a4:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ae:	69d9      	ldr	r1, [r3, #28]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_ETH_Start_IT+0x118>)
 80043b6:	430b      	orrs	r3, r1
 80043b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043bc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2223      	movs	r2, #35	; 0x23
 80043c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e000      	b.n	80043cc <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	00020060 	.word	0x00020060
 80043d8:	0001a0c1 	.word	0x0001a0c1

080043dc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ea:	2b23      	cmp	r3, #35	; 0x23
 80043ec:	d16e      	bne.n	80044cc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2223      	movs	r2, #35	; 0x23
 80043f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b34      	ldr	r3, [pc, #208]	; (80044d8 <HAL_ETH_Stop_IT+0xfc>)
 8004406:	400b      	ands	r3, r1
 8004408:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800440c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004420:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004424:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	f023 0302 	bic.w	r3, r3, #2
 8004438:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800443c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0204 	bic.w	r2, r2, #4
 800444c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004456:	2001      	movs	r0, #1
 8004458:	f7fe fed2 	bl	8003200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fcfa 	bl	8004e5e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0208 	bic.w	r2, r2, #8
 8004478:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004482:	2001      	movs	r0, #1
 8004484:	f7fe febc 	bl	8003200 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e00e      	b.n	80044b4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	3212      	adds	r2, #18
 800449c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	3301      	adds	r3, #1
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d9ed      	bls.n	8004496 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2210      	movs	r2, #16
 80044c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	fffe5f3e 	.word	0xfffe5f3e

080044dc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d109      	bne.n	8004500 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f043 0201 	orr.w	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e045      	b.n	800458c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004506:	2b23      	cmp	r3, #35	; 0x23
 8004508:	d13f      	bne.n	800458a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004512:	2201      	movs	r2, #1
 8004514:	6839      	ldr	r1, [r7, #0]
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 ff70 	bl	80053fc <ETH_Prepare_Tx_Descriptors>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f043 0202 	orr.w	r2, r3, #2
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e02a      	b.n	800458c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004536:	f3bf 8f4f 	dsb	sy
}
 800453a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	2b03      	cmp	r3, #3
 800454c:	d904      	bls.n	8004558 <HAL_ETH_Transmit_IT+0x7c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	1f1a      	subs	r2, r3, #4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0304 	and.w	r3, r3, #4
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00d      	beq.n	8004586 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004572:	461a      	mov	r2, r3
 8004574:	2304      	movs	r3, #4
 8004576:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004580:	461a      	mov	r2, r3
 8004582:	2300      	movs	r3, #0
 8004584:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d109      	bne.n	80045c0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f043 0201 	orr.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0a8      	b.n	8004712 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c6:	2b23      	cmp	r3, #35	; 0x23
 80045c8:	d001      	beq.n	80045ce <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0a1      	b.n	8004712 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	3212      	adds	r2, #18
 80045da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045de:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e4:	f1c3 0304 	rsb	r3, r3, #4
 80045e8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80045ea:	e06a      	b.n	80046c2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004610:	2b00      	cmp	r3, #0
 8004612:	d103      	bne.n	800461c <HAL_ETH_ReadData+0x88>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d040      	beq.n	800469e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004650:	3b04      	subs	r3, #4
 8004652:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004678:	461a      	mov	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f00b fa2b 	bl	800fad8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	441a      	add	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2200      	movs	r2, #0
 800469c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3301      	adds	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d902      	bls.n	80046b0 <HAL_ETH_ReadData+0x11c>
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	3212      	adds	r2, #18
 80046b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ba:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	3301      	adds	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	db06      	blt.n	80046d8 <HAL_ETH_ReadData+0x144>
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d202      	bcs.n	80046d8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d089      	beq.n	80045ec <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	441a      	add	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f815 	bl	800471c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d108      	bne.n	8004710 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800470c:	2300      	movs	r3, #0
 800470e:	e000      	b.n	8004712 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004730:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69fa      	ldr	r2, [r7, #28]
 8004736:	3212      	adds	r2, #18
 8004738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004742:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004744:	e040      	b.n	80047c8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d112      	bne.n	8004774 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800474e:	f107 030c 	add.w	r3, r7, #12
 8004752:	4618      	mov	r0, r3
 8004754:	f00b f990 	bl	800fa78 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	74fb      	strb	r3, [r7, #19]
 8004762:	e007      	b.n	8004774 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	461a      	mov	r2, r3
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d026      	beq.n	80047c8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <ETH_UpdateDescriptor+0xe4>)
 8004786:	605a      	str	r2, [r3, #4]
 8004788:	e003      	b.n	8004792 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004790:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004792:	f3bf 8f5f 	dmb	sy
}
 8004796:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	3301      	adds	r3, #1
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d902      	bls.n	80047b6 <ETH_UpdateDescriptor+0x9a>
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	3b04      	subs	r3, #4
 80047b4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	3212      	adds	r2, #18
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	617b      	str	r3, [r7, #20]
      desccount--;
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <ETH_UpdateDescriptor+0xb8>
 80047ce:	7cfb      	ldrb	r3, [r7, #19]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1b8      	bne.n	8004746 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d00c      	beq.n	80047f8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e6:	461a      	mov	r2, r3
 80047e8:	2300      	movs	r3, #0
 80047ea:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80047f8:	bf00      	nop
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	800045f8 	.word	0x800045f8

08004804 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3318      	adds	r3, #24
 8004810:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004822:	e03f      	b.n	80048a4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004824:	2301      	movs	r3, #1
 8004826:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	3b01      	subs	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	3304      	adds	r3, #4
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	3301      	adds	r3, #1
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800484c:	7bbb      	ldrb	r3, [r7, #14]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d028      	beq.n	80048a4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68d9      	ldr	r1, [r3, #12]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	440b      	add	r3, r1
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	db1b      	blt.n	80048a0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3304      	adds	r3, #4
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4618      	mov	r0, r3
 8004876:	f00b f971 	bl	800fb5c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	3304      	adds	r3, #4
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3301      	adds	r3, #1
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c
 800489e:	e001      	b.n	80048a4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_ETH_ReleaseTxPacket+0xac>
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1b9      	bne.n	8004824 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d112      	bne.n	80048fc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d109      	bne.n	80048fc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f0:	461a      	mov	r2, r3
 80048f2:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <HAL_ETH_IRQHandler+0x178>)
 80048f4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f00a fca4 	bl	800f244 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d113      	bne.n	8004936 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d10a      	bne.n	8004936 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004928:	461a      	mov	r2, r3
 800492a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800492e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f00a fc97 	bl	800f264 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004948:	d14c      	bne.n	80049e4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495c:	d142      	bne.n	80049e4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	f043 0208 	orr.w	r2, r3, #8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800497c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004980:	d11a      	bne.n	80049b8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <HAL_ETH_IRQHandler+0x17c>)
 800498e:	4013      	ands	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80049a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049ac:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	22e0      	movs	r2, #224	; 0xe0
 80049b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80049b6:	e012      	b.n	80049de <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c0:	695a      	ldr	r2, [r3, #20]
 80049c2:	f248 6380 	movw	r3, #34432	; 0x8680
 80049c6:	4013      	ands	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d6:	461a      	mov	r2, r3
 80049d8:	f248 6380 	movw	r3, #34432	; 0x8680
 80049dc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f00a fc50 	bl	800f284 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d10e      	bne.n	8004a10 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f81c 	bl	8004a40 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <HAL_ETH_IRQHandler+0x180>)
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d006      	beq.n	8004a2a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <HAL_ETH_IRQHandler+0x180>)
 8004a1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a22:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f815 	bl	8004a54 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	00010040 	.word	0x00010040
 8004a38:	007e2000 	.word	0x007e2000
 8004a3c:	40013c00 	.word	0x40013c00

08004a40 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 031c 	and.w	r3, r3, #28
 8004a84:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	02db      	lsls	r3, r3, #11
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	019b      	lsls	r3, r3, #6
 8004a96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f023 0302 	bic.w	r3, r3, #2
 8004aa6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004ab8:	f7fe fb96 	bl	80031e8 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004abe:	e00d      	b.n	8004adc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004ac0:	f7fe fb92 	bl	80031e8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d301      	bcc.n	8004ad4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e010      	b.n	8004af6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1ec      	bne.n	8004ac0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f003 031c 	and.w	r3, r3, #28
 8004b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	02db      	lsls	r3, r3, #11
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	019b      	lsls	r3, r3, #6
 8004b2c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f043 0302 	orr.w	r3, r3, #2
 8004b3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b58:	f7fe fb46 	bl	80031e8 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b5e:	e00d      	b.n	8004b7c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004b60:	f7fe fb42 	bl	80031e8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d301      	bcc.n	8004b74 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e009      	b.n	8004b88 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1ec      	bne.n	8004b60 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0d9      	b.n	8004d58 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bf14      	ite	ne
 8004bb2:	2301      	movne	r3, #1
 8004bb4:	2300      	moveq	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	bf14      	ite	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	2300      	moveq	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	bf14      	ite	ne
 8004cbe:	2301      	movne	r3, #1
 8004cc0:	2300      	moveq	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	bf0c      	ite	eq
 8004cf4:	2301      	moveq	r3, #1
 8004cf6:	2300      	movne	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf14      	ite	ne
 8004d2c:	2301      	movne	r3, #1
 8004d2e:	2300      	moveq	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf14      	ite	ne
 8004d48:	2301      	movne	r3, #1
 8004d4a:	2300      	moveq	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e00b      	b.n	8004d90 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7e:	2b10      	cmp	r3, #16
 8004d80:	d105      	bne.n	8004d8e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f88f 	bl	8004ea8 <ETH_SetMACConfig>

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e000      	b.n	8004d90 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
  }
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 031c 	bic.w	r3, r3, #28
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004db0:	f003 fd7a 	bl	80088a8 <HAL_RCC_GetHCLKFreq>
 8004db4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d908      	bls.n	8004dd0 <HAL_ETH_SetMDIOClockRange+0x38>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d804      	bhi.n	8004dd0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f043 0308 	orr.w	r3, r3, #8
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	e027      	b.n	8004e20 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d908      	bls.n	8004dea <HAL_ETH_SetMDIOClockRange+0x52>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d204      	bcs.n	8004dea <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f043 030c 	orr.w	r3, r3, #12
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e01a      	b.n	8004e20 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d303      	bcc.n	8004dfa <HAL_ETH_SetMDIOClockRange+0x62>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d911      	bls.n	8004e1e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4a0f      	ldr	r2, [pc, #60]	; (8004e3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d908      	bls.n	8004e14 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d804      	bhi.n	8004e14 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f043 0304 	orr.w	r3, r3, #4
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e005      	b.n	8004e20 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f043 0310 	orr.w	r3, r3, #16
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e000      	b.n	8004e20 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004e1e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	611a      	str	r2, [r3, #16]
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	01312cff 	.word	0x01312cff
 8004e34:	02160ebf 	.word	0x02160ebf
 8004e38:	03938700 	.word	0x03938700
 8004e3c:	05f5e0ff 	.word	0x05f5e0ff
 8004e40:	08f0d17f 	.word	0x08f0d17f

08004e44 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b084      	sub	sp, #16
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e80:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e8e:	2001      	movs	r0, #1
 8004e90:	f7fe f9b6 	bl	8003200 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e9e:	6193      	str	r3, [r2, #24]
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4b51      	ldr	r3, [pc, #324]	; (8005004 <ETH_SetMACConfig+0x15c>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	7c1b      	ldrb	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <ETH_SetMACConfig+0x28>
 8004eca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ece:	e000      	b.n	8004ed2 <ETH_SetMACConfig+0x2a>
 8004ed0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	7c5b      	ldrb	r3, [r3, #17]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <ETH_SetMACConfig+0x38>
 8004eda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004ede:	e000      	b.n	8004ee2 <ETH_SetMACConfig+0x3a>
 8004ee0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ee2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004ee8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	7fdb      	ldrb	r3, [r3, #31]
 8004eee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004ef0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004ef6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	7f92      	ldrb	r2, [r2, #30]
 8004efc:	2a00      	cmp	r2, #0
 8004efe:	d102      	bne.n	8004f06 <ETH_SetMACConfig+0x5e>
 8004f00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f04:	e000      	b.n	8004f08 <ETH_SetMACConfig+0x60>
 8004f06:	2200      	movs	r2, #0
                        macconf->Speed |
 8004f08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	7f1b      	ldrb	r3, [r3, #28]
 8004f0e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f10:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	791b      	ldrb	r3, [r3, #4]
 8004f1c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004f1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	d102      	bne.n	8004f30 <ETH_SetMACConfig+0x88>
 8004f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2e:	e000      	b.n	8004f32 <ETH_SetMACConfig+0x8a>
 8004f30:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	7bdb      	ldrb	r3, [r3, #15]
 8004f38:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f3a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f40:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f48:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f62:	2001      	movs	r0, #1
 8004f64:	f7fe f94c 	bl	8003200 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f86:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	d101      	bne.n	8004f96 <ETH_SetMACConfig+0xee>
 8004f92:	2280      	movs	r2, #128	; 0x80
 8004f94:	e000      	b.n	8004f98 <ETH_SetMACConfig+0xf0>
 8004f96:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004f98:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004f9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004fa6:	2a01      	cmp	r2, #1
 8004fa8:	d101      	bne.n	8004fae <ETH_SetMACConfig+0x106>
 8004faa:	2208      	movs	r2, #8
 8004fac:	e000      	b.n	8004fb0 <ETH_SetMACConfig+0x108>
 8004fae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004fb0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004fb8:	2a01      	cmp	r2, #1
 8004fba:	d101      	bne.n	8004fc0 <ETH_SetMACConfig+0x118>
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	e000      	b.n	8004fc2 <ETH_SetMACConfig+0x11a>
 8004fc0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004fc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004fca:	2a01      	cmp	r2, #1
 8004fcc:	d101      	bne.n	8004fd2 <ETH_SetMACConfig+0x12a>
 8004fce:	2202      	movs	r2, #2
 8004fd0:	e000      	b.n	8004fd4 <ETH_SetMACConfig+0x12c>
 8004fd2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fec:	2001      	movs	r0, #1
 8004fee:	f7fe f907 	bl	8003200 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	619a      	str	r2, [r3, #24]
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	ff20810f 	.word	0xff20810f

08005008 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4b3d      	ldr	r3, [pc, #244]	; (8005118 <ETH_SetDMAConfig+0x110>)
 8005022:	4013      	ands	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	7b1b      	ldrb	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <ETH_SetDMAConfig+0x2c>
 800502e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005032:	e000      	b.n	8005036 <ETH_SetDMAConfig+0x2e>
 8005034:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	7b5b      	ldrb	r3, [r3, #13]
 800503a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800503c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	7f52      	ldrb	r2, [r2, #29]
 8005042:	2a00      	cmp	r2, #0
 8005044:	d102      	bne.n	800504c <ETH_SetDMAConfig+0x44>
 8005046:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800504a:	e000      	b.n	800504e <ETH_SetDMAConfig+0x46>
 800504c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800504e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	7b9b      	ldrb	r3, [r3, #14]
 8005054:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005056:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800505c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	7f1b      	ldrb	r3, [r3, #28]
 8005062:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005064:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	7f9b      	ldrb	r3, [r3, #30]
 800506a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800506c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005072:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800507a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800507c:	4313      	orrs	r3, r2
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508c:	461a      	mov	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800509e:	2001      	movs	r0, #1
 80050a0:	f7fe f8ae 	bl	8003200 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ac:	461a      	mov	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	791b      	ldrb	r3, [r3, #4]
 80050b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80050bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80050c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80050c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80050d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80050da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80050e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050fc:	2001      	movs	r0, #1
 80050fe:	f7fe f87f 	bl	8003200 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	f8de3f23 	.word	0xf8de3f23

0800511c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b0a6      	sub	sp, #152	; 0x98
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005130:	2300      	movs	r3, #0
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800513a:	2301      	movs	r3, #1
 800513c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005140:	2300      	movs	r3, #0
 8005142:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800514c:	2300      	movs	r3, #0
 800514e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005152:	2300      	movs	r3, #0
 8005154:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005158:	2300      	movs	r3, #0
 800515a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005162:	2300      	movs	r3, #0
 8005164:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005166:	2300      	movs	r3, #0
 8005168:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800516c:	2300      	movs	r3, #0
 800516e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800517e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005182:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005188:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800518a:	2300      	movs	r3, #0
 800518c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005190:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff fe86 	bl	8004ea8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800519c:	2301      	movs	r3, #1
 800519e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80051be:	2300      	movs	r3, #0
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80051c8:	2301      	movs	r3, #1
 80051ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80051cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051d0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80051d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051ec:	f107 0308 	add.w	r3, r7, #8
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ff08 	bl	8005008 <ETH_SetDMAConfig>
}
 80051f8:	bf00      	nop
 80051fa:	3798      	adds	r7, #152	; 0x98
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3305      	adds	r3, #5
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	3204      	adds	r2, #4
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <ETH_MACAddressConfig+0x68>)
 8005222:	4413      	add	r3, r2
 8005224:	461a      	mov	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3303      	adds	r3, #3
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	061a      	lsls	r2, r3, #24
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3302      	adds	r3, #2
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3301      	adds	r3, #1
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4313      	orrs	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <ETH_MACAddressConfig+0x6c>)
 8005252:	4413      	add	r3, r2
 8005254:	461a      	mov	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	6013      	str	r3, [r2, #0]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40028040 	.word	0x40028040
 800526c:	40028044 	.word	0x40028044

08005270 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e03e      	b.n	80052fc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68d9      	ldr	r1, [r3, #12]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	440b      	add	r3, r1
 800528e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2200      	movs	r2, #0
 80052a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	3206      	adds	r2, #6
 80052b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d80c      	bhi.n	80052e0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68d9      	ldr	r1, [r3, #12]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	440b      	add	r3, r1
 80052d8:	461a      	mov	r2, r3
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	e004      	b.n	80052ea <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	461a      	mov	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3301      	adds	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d9bd      	bls.n	800527e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005314:	611a      	str	r2, [r3, #16]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800532a:	2300      	movs	r3, #0
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e046      	b.n	80053be <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6919      	ldr	r1, [r3, #16]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	440b      	add	r3, r1
 8005340:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2200      	movs	r2, #0
 800534c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2200      	movs	r2, #0
 8005358:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2200      	movs	r2, #0
 800535e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2200      	movs	r2, #0
 8005364:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800536c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8005374:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	3212      	adds	r2, #18
 800538a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d80c      	bhi.n	80053ae <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6919      	ldr	r1, [r3, #16]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	4613      	mov	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	461a      	mov	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	60da      	str	r2, [r3, #12]
 80053ac:	e004      	b.n	80053b8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	461a      	mov	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	3301      	adds	r3, #1
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d9b5      	bls.n	8005330 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ee:	60da      	str	r2, [r3, #12]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b08d      	sub	sp, #52	; 0x34
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3318      	adds	r3, #24
 800540c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005426:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800543a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543e:	d007      	beq.n	8005450 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	3304      	adds	r3, #4
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005450:	2302      	movs	r3, #2
 8005452:	e0ff      	b.n	8005654 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	3301      	adds	r3, #1
 8005458:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	4b7d      	ldr	r3, [pc, #500]	; (8005660 <ETH_Prepare_Tx_Descriptors+0x264>)
 800546a:	4013      	ands	r3, r2
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	6852      	ldr	r2, [r2, #4]
 8005470:	431a      	orrs	r2, r3
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	431a      	orrs	r2, r3
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d008      	beq.n	80054b2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	431a      	orrs	r2, r3
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80054d6:	f3bf 8f5f 	dmb	sy
}
 80054da:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80054e8:	e082      	b.n	80055f0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d006      	beq.n	800550a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	e005      	b.n	8005516 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005518:	3301      	adds	r3, #1
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	2b03      	cmp	r3, #3
 8005520:	d902      	bls.n	8005528 <ETH_Prepare_Tx_Descriptors+0x12c>
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	3b04      	subs	r3, #4
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005530:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800554a:	d007      	beq.n	800555c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	3304      	adds	r3, #4
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d029      	beq.n	80055b0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005568:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800556a:	2300      	movs	r3, #0
 800556c:	62bb      	str	r3, [r7, #40]	; 0x28
 800556e:	e019      	b.n	80055a4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005570:	f3bf 8f5f 	dmb	sy
}
 8005574:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	3301      	adds	r3, #1
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	2b03      	cmp	r3, #3
 800558c:	d902      	bls.n	8005594 <ETH_Prepare_Tx_Descriptors+0x198>
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	3b04      	subs	r3, #4
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	3301      	adds	r3, #1
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d3e1      	bcc.n	8005570 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80055ac:	2302      	movs	r3, #2
 80055ae:	e051      	b.n	8005654 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	3301      	adds	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	4b25      	ldr	r3, [pc, #148]	; (8005660 <ETH_Prepare_Tx_Descriptors+0x264>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	6852      	ldr	r2, [r2, #4]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	3301      	adds	r3, #1
 80055dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80055de:	f3bf 8f5f 	dmb	sy
}
 80055e2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f47f af78 	bne.w	80054ea <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d006      	beq.n	800560e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	e005      	b.n	800561a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800562a:	6979      	ldr	r1, [r7, #20]
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	3304      	adds	r3, #4
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	440b      	add	r3, r1
 8005634:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800563a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800563c:	b672      	cpsid	i
}
 800563e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	4413      	add	r3, r2
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800564e:	b662      	cpsie	i
}
 8005650:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3734      	adds	r7, #52	; 0x34
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	ffffe000 	.word	0xffffe000

08005664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800567e:	2300      	movs	r3, #0
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	e175      	b.n	8005970 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005684:	2201      	movs	r2, #1
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4013      	ands	r3, r2
 8005696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	429a      	cmp	r2, r3
 800569e:	f040 8164 	bne.w	800596a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d005      	beq.n	80056ba <HAL_GPIO_Init+0x56>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d130      	bne.n	800571c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	2203      	movs	r2, #3
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	005b      	lsls	r3, r3, #1
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056f0:	2201      	movs	r2, #1
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	43db      	mvns	r3, r3
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	4013      	ands	r3, r2
 80056fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 0201 	and.w	r2, r3, #1
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4313      	orrs	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f003 0303 	and.w	r3, r3, #3
 8005724:	2b03      	cmp	r3, #3
 8005726:	d017      	beq.n	8005758 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	2203      	movs	r2, #3
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	43db      	mvns	r3, r3
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4013      	ands	r3, r2
 800573e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d123      	bne.n	80057ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	08da      	lsrs	r2, r3, #3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3208      	adds	r2, #8
 800576c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	220f      	movs	r2, #15
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	43db      	mvns	r3, r3
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4013      	ands	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	08da      	lsrs	r2, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3208      	adds	r2, #8
 80057a6:	69b9      	ldr	r1, [r7, #24]
 80057a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	2203      	movs	r2, #3
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f003 0203 	and.w	r2, r3, #3
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80be 	beq.w	800596a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ee:	4b66      	ldr	r3, [pc, #408]	; (8005988 <HAL_GPIO_Init+0x324>)
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	4a65      	ldr	r2, [pc, #404]	; (8005988 <HAL_GPIO_Init+0x324>)
 80057f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057f8:	6453      	str	r3, [r2, #68]	; 0x44
 80057fa:	4b63      	ldr	r3, [pc, #396]	; (8005988 <HAL_GPIO_Init+0x324>)
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005806:	4a61      	ldr	r2, [pc, #388]	; (800598c <HAL_GPIO_Init+0x328>)
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	089b      	lsrs	r3, r3, #2
 800580c:	3302      	adds	r3, #2
 800580e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005812:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	220f      	movs	r2, #15
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	43db      	mvns	r3, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4013      	ands	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a58      	ldr	r2, [pc, #352]	; (8005990 <HAL_GPIO_Init+0x32c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d037      	beq.n	80058a2 <HAL_GPIO_Init+0x23e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a57      	ldr	r2, [pc, #348]	; (8005994 <HAL_GPIO_Init+0x330>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d031      	beq.n	800589e <HAL_GPIO_Init+0x23a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a56      	ldr	r2, [pc, #344]	; (8005998 <HAL_GPIO_Init+0x334>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d02b      	beq.n	800589a <HAL_GPIO_Init+0x236>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a55      	ldr	r2, [pc, #340]	; (800599c <HAL_GPIO_Init+0x338>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d025      	beq.n	8005896 <HAL_GPIO_Init+0x232>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a54      	ldr	r2, [pc, #336]	; (80059a0 <HAL_GPIO_Init+0x33c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01f      	beq.n	8005892 <HAL_GPIO_Init+0x22e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a53      	ldr	r2, [pc, #332]	; (80059a4 <HAL_GPIO_Init+0x340>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d019      	beq.n	800588e <HAL_GPIO_Init+0x22a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a52      	ldr	r2, [pc, #328]	; (80059a8 <HAL_GPIO_Init+0x344>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_GPIO_Init+0x226>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a51      	ldr	r2, [pc, #324]	; (80059ac <HAL_GPIO_Init+0x348>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00d      	beq.n	8005886 <HAL_GPIO_Init+0x222>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a50      	ldr	r2, [pc, #320]	; (80059b0 <HAL_GPIO_Init+0x34c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <HAL_GPIO_Init+0x21e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a4f      	ldr	r2, [pc, #316]	; (80059b4 <HAL_GPIO_Init+0x350>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d101      	bne.n	800587e <HAL_GPIO_Init+0x21a>
 800587a:	2309      	movs	r3, #9
 800587c:	e012      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 800587e:	230a      	movs	r3, #10
 8005880:	e010      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 8005882:	2308      	movs	r3, #8
 8005884:	e00e      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 8005886:	2307      	movs	r3, #7
 8005888:	e00c      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 800588a:	2306      	movs	r3, #6
 800588c:	e00a      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 800588e:	2305      	movs	r3, #5
 8005890:	e008      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 8005892:	2304      	movs	r3, #4
 8005894:	e006      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 8005896:	2303      	movs	r3, #3
 8005898:	e004      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 800589a:	2302      	movs	r3, #2
 800589c:	e002      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <HAL_GPIO_Init+0x240>
 80058a2:	2300      	movs	r3, #0
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	f002 0203 	and.w	r2, r2, #3
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	4093      	lsls	r3, r2
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80058b4:	4935      	ldr	r1, [pc, #212]	; (800598c <HAL_GPIO_Init+0x328>)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	089b      	lsrs	r3, r3, #2
 80058ba:	3302      	adds	r3, #2
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058c2:	4b3d      	ldr	r3, [pc, #244]	; (80059b8 <HAL_GPIO_Init+0x354>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	43db      	mvns	r3, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4013      	ands	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058e6:	4a34      	ldr	r2, [pc, #208]	; (80059b8 <HAL_GPIO_Init+0x354>)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058ec:	4b32      	ldr	r3, [pc, #200]	; (80059b8 <HAL_GPIO_Init+0x354>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005910:	4a29      	ldr	r2, [pc, #164]	; (80059b8 <HAL_GPIO_Init+0x354>)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005916:	4b28      	ldr	r3, [pc, #160]	; (80059b8 <HAL_GPIO_Init+0x354>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	43db      	mvns	r3, r3
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4013      	ands	r3, r2
 8005924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800593a:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <HAL_GPIO_Init+0x354>)
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005940:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_GPIO_Init+0x354>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005964:	4a14      	ldr	r2, [pc, #80]	; (80059b8 <HAL_GPIO_Init+0x354>)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	f67f ae86 	bls.w	8005684 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	3724      	adds	r7, #36	; 0x24
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800
 800598c:	40013800 	.word	0x40013800
 8005990:	40020000 	.word	0x40020000
 8005994:	40020400 	.word	0x40020400
 8005998:	40020800 	.word	0x40020800
 800599c:	40020c00 	.word	0x40020c00
 80059a0:	40021000 	.word	0x40021000
 80059a4:	40021400 	.word	0x40021400
 80059a8:	40021800 	.word	0x40021800
 80059ac:	40021c00 	.word	0x40021c00
 80059b0:	40022000 	.word	0x40022000
 80059b4:	40022400 	.word	0x40022400
 80059b8:	40013c00 	.word	0x40013c00

080059bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
 80059d8:	e001      	b.n	80059de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059da:	2300      	movs	r3, #0
 80059dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	807b      	strh	r3, [r7, #2]
 80059f8:	4613      	mov	r3, r2
 80059fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059fc:	787b      	ldrb	r3, [r7, #1]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a02:	887a      	ldrh	r2, [r7, #2]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a08:	e003      	b.n	8005a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a0a:	887b      	ldrh	r3, [r7, #2]
 8005a0c:	041a      	lsls	r2, r3, #16
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	619a      	str	r2, [r3, #24]
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a20:	b08f      	sub	sp, #60	; 0x3c
 8005a22:	af0a      	add	r7, sp, #40	; 0x28
 8005a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e054      	b.n	8005ada <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f019 fb92 	bl	801f174 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2203      	movs	r2, #3
 8005a54:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d102      	bne.n	8005a6a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f008 f895 	bl	800db9e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	687e      	ldr	r6, [r7, #4]
 8005a7c:	466d      	mov	r5, sp
 8005a7e:	f106 0410 	add.w	r4, r6, #16
 8005a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a92:	1d33      	adds	r3, r6, #4
 8005a94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a96:	6838      	ldr	r0, [r7, #0]
 8005a98:	f008 f818 	bl	800dacc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f008 f88c 	bl	800dbc0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	603b      	str	r3, [r7, #0]
 8005aae:	687e      	ldr	r6, [r7, #4]
 8005ab0:	466d      	mov	r5, sp
 8005ab2:	f106 0410 	add.w	r4, r6, #16
 8005ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005abe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ac2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ac6:	1d33      	adds	r3, r6, #4
 8005ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005aca:	6838      	ldr	r0, [r7, #0]
 8005acc:	f008 fa34 	bl	800df38 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ae2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005ae2:	b590      	push	{r4, r7, lr}
 8005ae4:	b089      	sub	sp, #36	; 0x24
 8005ae6:	af04      	add	r7, sp, #16
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	461a      	mov	r2, r3
 8005af0:	4603      	mov	r3, r0
 8005af2:	70fb      	strb	r3, [r7, #3]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70bb      	strb	r3, [r7, #2]
 8005af8:	4613      	mov	r3, r2
 8005afa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d101      	bne.n	8005b0a <HAL_HCD_HC_Init+0x28>
 8005b06:	2302      	movs	r3, #2
 8005b08:	e076      	b.n	8005bf8 <HAL_HCD_HC_Init+0x116>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	212c      	movs	r1, #44	; 0x2c
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	333d      	adds	r3, #61	; 0x3d
 8005b20:	2200      	movs	r2, #0
 8005b22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	212c      	movs	r1, #44	; 0x2c
 8005b2a:	fb01 f303 	mul.w	r3, r1, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	3338      	adds	r3, #56	; 0x38
 8005b32:	787a      	ldrb	r2, [r7, #1]
 8005b34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	212c      	movs	r1, #44	; 0x2c
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	4413      	add	r3, r2
 8005b42:	3340      	adds	r3, #64	; 0x40
 8005b44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005b46:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	212c      	movs	r1, #44	; 0x2c
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	3339      	adds	r3, #57	; 0x39
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	212c      	movs	r1, #44	; 0x2c
 8005b60:	fb01 f303 	mul.w	r3, r1, r3
 8005b64:	4413      	add	r3, r2
 8005b66:	333f      	adds	r3, #63	; 0x3f
 8005b68:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005b6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	78ba      	ldrb	r2, [r7, #2]
 8005b72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b76:	b2d0      	uxtb	r0, r2
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	212c      	movs	r1, #44	; 0x2c
 8005b7c:	fb01 f303 	mul.w	r3, r1, r3
 8005b80:	4413      	add	r3, r2
 8005b82:	333a      	adds	r3, #58	; 0x3a
 8005b84:	4602      	mov	r2, r0
 8005b86:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005b88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	da09      	bge.n	8005ba4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	212c      	movs	r1, #44	; 0x2c
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	333b      	adds	r3, #59	; 0x3b
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e008      	b.n	8005bb6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	212c      	movs	r1, #44	; 0x2c
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	4413      	add	r3, r2
 8005bb0:	333b      	adds	r3, #59	; 0x3b
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005bb6:	78fb      	ldrb	r3, [r7, #3]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	212c      	movs	r1, #44	; 0x2c
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	333c      	adds	r3, #60	; 0x3c
 8005bc4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005bc8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	787c      	ldrb	r4, [r7, #1]
 8005bd0:	78ba      	ldrb	r2, [r7, #2]
 8005bd2:	78f9      	ldrb	r1, [r7, #3]
 8005bd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	4623      	mov	r3, r4
 8005be6:	f008 fb21 	bl	800e22c <USB_HC_Init>
 8005bea:	4603      	mov	r3, r0
 8005bec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd90      	pop	{r4, r7, pc}

08005c00 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_HCD_HC_Halt+0x1e>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e00f      	b.n	8005c3e <HAL_HCD_HC_Halt+0x3e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	78fa      	ldrb	r2, [r7, #3]
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f008 fd71 	bl	800e716 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	4608      	mov	r0, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	461a      	mov	r2, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	70fb      	strb	r3, [r7, #3]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	70bb      	strb	r3, [r7, #2]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	212c      	movs	r1, #44	; 0x2c
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	333b      	adds	r3, #59	; 0x3b
 8005c70:	78ba      	ldrb	r2, [r7, #2]
 8005c72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	212c      	movs	r1, #44	; 0x2c
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	333f      	adds	r3, #63	; 0x3f
 8005c82:	787a      	ldrb	r2, [r7, #1]
 8005c84:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005c86:	7c3b      	ldrb	r3, [r7, #16]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d112      	bne.n	8005cb2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	212c      	movs	r1, #44	; 0x2c
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	3342      	adds	r3, #66	; 0x42
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	212c      	movs	r1, #44	; 0x2c
 8005ca4:	fb01 f303 	mul.w	r3, r1, r3
 8005ca8:	4413      	add	r3, r2
 8005caa:	333d      	adds	r3, #61	; 0x3d
 8005cac:	7f3a      	ldrb	r2, [r7, #28]
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	e008      	b.n	8005cc4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	212c      	movs	r1, #44	; 0x2c
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	3342      	adds	r3, #66	; 0x42
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005cc4:	787b      	ldrb	r3, [r7, #1]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	f200 80c6 	bhi.w	8005e58 <HAL_HCD_HC_SubmitRequest+0x210>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005e45 	.word	0x08005e45
 8005cdc:	08005d49 	.word	0x08005d49
 8005ce0:	08005dc7 	.word	0x08005dc7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005ce4:	7c3b      	ldrb	r3, [r7, #16]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	f040 80b8 	bne.w	8005e5c <HAL_HCD_HC_SubmitRequest+0x214>
 8005cec:	78bb      	ldrb	r3, [r7, #2]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f040 80b4 	bne.w	8005e5c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005cf4:	8b3b      	ldrh	r3, [r7, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d108      	bne.n	8005d0c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	212c      	movs	r1, #44	; 0x2c
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	4413      	add	r3, r2
 8005d06:	3355      	adds	r3, #85	; 0x55
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	212c      	movs	r1, #44	; 0x2c
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	4413      	add	r3, r2
 8005d18:	3355      	adds	r3, #85	; 0x55
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d109      	bne.n	8005d34 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	212c      	movs	r1, #44	; 0x2c
 8005d26:	fb01 f303 	mul.w	r3, r1, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3342      	adds	r3, #66	; 0x42
 8005d2e:	2200      	movs	r2, #0
 8005d30:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005d32:	e093      	b.n	8005e5c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d34:	78fb      	ldrb	r3, [r7, #3]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	212c      	movs	r1, #44	; 0x2c
 8005d3a:	fb01 f303 	mul.w	r3, r1, r3
 8005d3e:	4413      	add	r3, r2
 8005d40:	3342      	adds	r3, #66	; 0x42
 8005d42:	2202      	movs	r2, #2
 8005d44:	701a      	strb	r2, [r3, #0]
      break;
 8005d46:	e089      	b.n	8005e5c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005d48:	78bb      	ldrb	r3, [r7, #2]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d11d      	bne.n	8005d8a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	212c      	movs	r1, #44	; 0x2c
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	4413      	add	r3, r2
 8005d5a:	3355      	adds	r3, #85	; 0x55
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	212c      	movs	r1, #44	; 0x2c
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3342      	adds	r3, #66	; 0x42
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005d74:	e073      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	212c      	movs	r1, #44	; 0x2c
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	3342      	adds	r3, #66	; 0x42
 8005d84:	2202      	movs	r2, #2
 8005d86:	701a      	strb	r2, [r3, #0]
      break;
 8005d88:	e069      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	212c      	movs	r1, #44	; 0x2c
 8005d90:	fb01 f303 	mul.w	r3, r1, r3
 8005d94:	4413      	add	r3, r2
 8005d96:	3354      	adds	r3, #84	; 0x54
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	212c      	movs	r1, #44	; 0x2c
 8005da4:	fb01 f303 	mul.w	r3, r1, r3
 8005da8:	4413      	add	r3, r2
 8005daa:	3342      	adds	r3, #66	; 0x42
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
      break;
 8005db0:	e055      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	212c      	movs	r1, #44	; 0x2c
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3342      	adds	r3, #66	; 0x42
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	701a      	strb	r2, [r3, #0]
      break;
 8005dc4:	e04b      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005dc6:	78bb      	ldrb	r3, [r7, #2]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d11d      	bne.n	8005e08 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	212c      	movs	r1, #44	; 0x2c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3355      	adds	r3, #85	; 0x55
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	212c      	movs	r1, #44	; 0x2c
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	4413      	add	r3, r2
 8005dec:	3342      	adds	r3, #66	; 0x42
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005df2:	e034      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	212c      	movs	r1, #44	; 0x2c
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	4413      	add	r3, r2
 8005e00:	3342      	adds	r3, #66	; 0x42
 8005e02:	2202      	movs	r2, #2
 8005e04:	701a      	strb	r2, [r3, #0]
      break;
 8005e06:	e02a      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	212c      	movs	r1, #44	; 0x2c
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	3354      	adds	r3, #84	; 0x54
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d109      	bne.n	8005e30 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	212c      	movs	r1, #44	; 0x2c
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	3342      	adds	r3, #66	; 0x42
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]
      break;
 8005e2e:	e016      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	212c      	movs	r1, #44	; 0x2c
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3342      	adds	r3, #66	; 0x42
 8005e3e:	2202      	movs	r2, #2
 8005e40:	701a      	strb	r2, [r3, #0]
      break;
 8005e42:	e00c      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	212c      	movs	r1, #44	; 0x2c
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	3342      	adds	r3, #66	; 0x42
 8005e52:	2200      	movs	r2, #0
 8005e54:	701a      	strb	r2, [r3, #0]
      break;
 8005e56:	e002      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005e58:	bf00      	nop
 8005e5a:	e000      	b.n	8005e5e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005e5c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	212c      	movs	r1, #44	; 0x2c
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	4413      	add	r3, r2
 8005e6a:	3344      	adds	r3, #68	; 0x44
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	8b3a      	ldrh	r2, [r7, #24]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	202c      	movs	r0, #44	; 0x2c
 8005e78:	fb00 f303 	mul.w	r3, r0, r3
 8005e7c:	440b      	add	r3, r1
 8005e7e:	334c      	adds	r3, #76	; 0x4c
 8005e80:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	212c      	movs	r1, #44	; 0x2c
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	3360      	adds	r3, #96	; 0x60
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	212c      	movs	r1, #44	; 0x2c
 8005e9a:	fb01 f303 	mul.w	r3, r1, r3
 8005e9e:	4413      	add	r3, r2
 8005ea0:	3350      	adds	r3, #80	; 0x50
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	212c      	movs	r1, #44	; 0x2c
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3339      	adds	r3, #57	; 0x39
 8005eb4:	78fa      	ldrb	r2, [r7, #3]
 8005eb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	212c      	movs	r1, #44	; 0x2c
 8005ebe:	fb01 f303 	mul.w	r3, r1, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	3361      	adds	r3, #97	; 0x61
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	222c      	movs	r2, #44	; 0x2c
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	3338      	adds	r3, #56	; 0x38
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	18d1      	adds	r1, r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f008 fac4 	bl	800e470 <USB_HC_StartXfer>
 8005ee8:	4603      	mov	r3, r0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop

08005ef4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f007 ffd2 	bl	800deb4 <USB_GetMode>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	f040 80f6 	bne.w	8006104 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f007 ff95 	bl	800de4c <USB_ReadInterrupts>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 80ec 	beq.w	8006102 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f007 ff8c 	bl	800de4c <USB_ReadInterrupts>
 8005f34:	4603      	mov	r3, r0
 8005f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f3e:	d104      	bne.n	8005f4a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f007 ff7c 	bl	800de4c <USB_ReadInterrupts>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f5e:	d104      	bne.n	8005f6a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f007 ff6c 	bl	800de4c <USB_ReadInterrupts>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f7e:	d104      	bne.n	8005f8a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005f88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f007 ff5c 	bl	800de4c <USB_ReadInterrupts>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d103      	bne.n	8005fa6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f007 ff4e 	bl	800de4c <USB_ReadInterrupts>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fba:	d11c      	bne.n	8005ff6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005fc4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10f      	bne.n	8005ff6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005fd6:	2110      	movs	r1, #16
 8005fd8:	6938      	ldr	r0, [r7, #16]
 8005fda:	f007 fe3d 	bl	800dc58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005fde:	6938      	ldr	r0, [r7, #16]
 8005fe0:	f007 fe6e 	bl	800dcc0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4618      	mov	r0, r3
 8005fec:	f008 f858 	bl	800e0a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f019 f931 	bl	801f258 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f007 ff26 	bl	800de4c <USB_ReadInterrupts>
 8006000:	4603      	mov	r3, r0
 8006002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006006:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800600a:	d102      	bne.n	8006012 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f9ce 	bl	80073ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f007 ff18 	bl	800de4c <USB_ReadInterrupts>
 800601c:	4603      	mov	r3, r0
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b08      	cmp	r3, #8
 8006024:	d106      	bne.n	8006034 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f019 f8fa 	bl	801f220 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2208      	movs	r2, #8
 8006032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4618      	mov	r0, r3
 800603a:	f007 ff07 	bl	800de4c <USB_ReadInterrupts>
 800603e:	4603      	mov	r3, r0
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b10      	cmp	r3, #16
 8006046:	d101      	bne.n	800604c <HAL_HCD_IRQHandler+0x158>
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <HAL_HCD_IRQHandler+0x15a>
 800604c:	2300      	movs	r3, #0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d012      	beq.n	8006078 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0210 	bic.w	r2, r2, #16
 8006060:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 f8d1 	bl	800720a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0210 	orr.w	r2, r2, #16
 8006076:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f007 fee5 	bl	800de4c <USB_ReadInterrupts>
 8006082:	4603      	mov	r3, r0
 8006084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800608c:	d13a      	bne.n	8006104 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f008 fb2e 	bl	800e6f4 <USB_HC_ReadInterrupt>
 8006098:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e025      	b.n	80060ec <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f003 030f 	and.w	r3, r3, #15
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d018      	beq.n	80060e6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ca:	d106      	bne.n	80060da <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8ab 	bl	800622e <HCD_HC_IN_IRQHandler>
 80060d8:	e005      	b.n	80060e6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fcc6 	bl	8006a72 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	3301      	adds	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d3d4      	bcc.n	80060a0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060fe:	615a      	str	r2, [r3, #20]
 8006100:	e000      	b.n	8006104 <HAL_HCD_IRQHandler+0x210>
      return;
 8006102:	bf00      	nop
    }
  }
}
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_HCD_Start+0x16>
 800611c:	2302      	movs	r3, #2
 800611e:	e013      	b.n	8006148 <HAL_HCD_Start+0x3e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2101      	movs	r1, #1
 800612e:	4618      	mov	r0, r3
 8006130:	f008 f81a 	bl	800e168 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f007 fd1f 	bl	800db7c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_HCD_Stop+0x16>
 8006162:	2302      	movs	r3, #2
 8006164:	e00d      	b.n	8006182 <HAL_HCD_Stop+0x32>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4618      	mov	r0, r3
 8006174:	f008 fc08 	bl	800e988 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f007 ffbc 	bl	800e114 <USB_ResetPort>
 800619c:	4603      	mov	r3, r0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	212c      	movs	r1, #44	; 0x2c
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	4413      	add	r3, r2
 80061be:	3360      	adds	r3, #96	; 0x60
 80061c0:	781b      	ldrb	r3, [r3, #0]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	212c      	movs	r1, #44	; 0x2c
 80061e0:	fb01 f303 	mul.w	r3, r1, r3
 80061e4:	4413      	add	r3, r2
 80061e6:	3350      	adds	r3, #80	; 0x50
 80061e8:	681b      	ldr	r3, [r3, #0]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f008 f800 	bl	800e208 <USB_GetCurrentFrame>
 8006208:	4603      	mov	r3, r0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b082      	sub	sp, #8
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f007 ffdb 	bl	800e1da <USB_GetHostSpeed>
 8006224:	4603      	mov	r3, r0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b086      	sub	sp, #24
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f007 fe0d 	bl	800de72 <USB_ReadChInterrupts>
 8006258:	4603      	mov	r3, r0
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b04      	cmp	r3, #4
 8006260:	d11a      	bne.n	8006298 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	461a      	mov	r2, r3
 8006270:	2304      	movs	r3, #4
 8006272:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	212c      	movs	r1, #44	; 0x2c
 800627a:	fb01 f303 	mul.w	r3, r1, r3
 800627e:	4413      	add	r3, r2
 8006280:	3361      	adds	r3, #97	; 0x61
 8006282:	2207      	movs	r2, #7
 8006284:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	4611      	mov	r1, r2
 8006290:	4618      	mov	r0, r3
 8006292:	f008 fa40 	bl	800e716 <USB_HC_Halt>
 8006296:	e0a2      	b.n	80063de <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f007 fde5 	bl	800de72 <USB_ReadChInterrupts>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b2:	d11b      	bne.n	80062ec <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c0:	461a      	mov	r2, r3
 80062c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	212c      	movs	r1, #44	; 0x2c
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	3361      	adds	r3, #97	; 0x61
 80062d6:	2208      	movs	r2, #8
 80062d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	4611      	mov	r1, r2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f008 fa16 	bl	800e716 <USB_HC_Halt>
 80062ea:	e078      	b.n	80063de <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f007 fdbb 	bl	800de72 <USB_ReadChInterrupts>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b08      	cmp	r3, #8
 8006304:	d11a      	bne.n	800633c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	461a      	mov	r2, r3
 8006314:	2308      	movs	r3, #8
 8006316:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	212c      	movs	r1, #44	; 0x2c
 800631e:	fb01 f303 	mul.w	r3, r1, r3
 8006322:	4413      	add	r3, r2
 8006324:	3361      	adds	r3, #97	; 0x61
 8006326:	2206      	movs	r2, #6
 8006328:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	4611      	mov	r1, r2
 8006334:	4618      	mov	r0, r3
 8006336:	f008 f9ee 	bl	800e716 <USB_HC_Halt>
 800633a:	e050      	b.n	80063de <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f007 fd93 	bl	800de72 <USB_ReadChInterrupts>
 800634c:	4603      	mov	r3, r0
 800634e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006356:	d11b      	bne.n	8006390 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006364:	461a      	mov	r2, r3
 8006366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	212c      	movs	r1, #44	; 0x2c
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	3361      	adds	r3, #97	; 0x61
 800637a:	2209      	movs	r2, #9
 800637c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	4611      	mov	r1, r2
 8006388:	4618      	mov	r0, r3
 800638a:	f008 f9c4 	bl	800e716 <USB_HC_Halt>
 800638e:	e026      	b.n	80063de <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f007 fd69 	bl	800de72 <USB_ReadChInterrupts>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a6:	2b80      	cmp	r3, #128	; 0x80
 80063a8:	d119      	bne.n	80063de <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	461a      	mov	r2, r3
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	212c      	movs	r1, #44	; 0x2c
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	3361      	adds	r3, #97	; 0x61
 80063ca:	2207      	movs	r2, #7
 80063cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	4611      	mov	r1, r2
 80063d8:	4618      	mov	r0, r3
 80063da:	f008 f99c 	bl	800e716 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	4611      	mov	r1, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f007 fd42 	bl	800de72 <USB_ReadChInterrupts>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d112      	bne.n	8006420 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	4611      	mov	r1, r2
 8006404:	4618      	mov	r0, r3
 8006406:	f008 f986 	bl	800e716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	461a      	mov	r2, r3
 8006418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800641c:	6093      	str	r3, [r2, #8]
 800641e:	e325      	b.n	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	4611      	mov	r1, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f007 fd21 	bl	800de72 <USB_ReadChInterrupts>
 8006430:	4603      	mov	r3, r0
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b01      	cmp	r3, #1
 8006438:	f040 80e8 	bne.w	800660c <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	461a      	mov	r2, r3
 800644a:	2320      	movs	r3, #32
 800644c:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d019      	beq.n	800648a <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	212c      	movs	r1, #44	; 0x2c
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	4413      	add	r3, r2
 8006462:	3348      	adds	r3, #72	; 0x48
 8006464:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	0159      	lsls	r1, r3, #5
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	440b      	add	r3, r1
 800646e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006478:	1ad2      	subs	r2, r2, r3
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	202c      	movs	r0, #44	; 0x2c
 8006480:	fb00 f303 	mul.w	r3, r0, r3
 8006484:	440b      	add	r3, r1
 8006486:	3350      	adds	r3, #80	; 0x50
 8006488:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	212c      	movs	r1, #44	; 0x2c
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	4413      	add	r3, r2
 8006496:	3361      	adds	r3, #97	; 0x61
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	212c      	movs	r1, #44	; 0x2c
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	335c      	adds	r3, #92	; 0x5c
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ba:	461a      	mov	r2, r3
 80064bc:	2301      	movs	r3, #1
 80064be:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	212c      	movs	r1, #44	; 0x2c
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	333f      	adds	r3, #63	; 0x3f
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	212c      	movs	r1, #44	; 0x2c
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	333f      	adds	r3, #63	; 0x3f
 80064e2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d111      	bne.n	800650c <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	4611      	mov	r1, r2
 80064f2:	4618      	mov	r0, r3
 80064f4:	f008 f90f 	bl	800e716 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006504:	461a      	mov	r2, r3
 8006506:	2310      	movs	r3, #16
 8006508:	6093      	str	r3, [r2, #8]
 800650a:	e03a      	b.n	8006582 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	212c      	movs	r1, #44	; 0x2c
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	4413      	add	r3, r2
 8006518:	333f      	adds	r3, #63	; 0x3f
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d009      	beq.n	8006534 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	212c      	movs	r1, #44	; 0x2c
 8006526:	fb01 f303 	mul.w	r3, r1, r3
 800652a:	4413      	add	r3, r2
 800652c:	333f      	adds	r3, #63	; 0x3f
 800652e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006530:	2b01      	cmp	r3, #1
 8006532:	d126      	bne.n	8006582 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4413      	add	r3, r2
 800653c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	440a      	add	r2, r1
 800654a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006552:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	212c      	movs	r1, #44	; 0x2c
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	4413      	add	r3, r2
 8006560:	3360      	adds	r3, #96	; 0x60
 8006562:	2201      	movs	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	b2d9      	uxtb	r1, r3
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	202c      	movs	r0, #44	; 0x2c
 8006570:	fb00 f303 	mul.w	r3, r0, r3
 8006574:	4413      	add	r3, r2
 8006576:	3360      	adds	r3, #96	; 0x60
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f018 fe79 	bl	801f274 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d12b      	bne.n	80065e2 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	212c      	movs	r1, #44	; 0x2c
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	3348      	adds	r3, #72	; 0x48
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	202c      	movs	r0, #44	; 0x2c
 80065a0:	fb00 f202 	mul.w	r2, r0, r2
 80065a4:	440a      	add	r2, r1
 80065a6:	3240      	adds	r2, #64	; 0x40
 80065a8:	8812      	ldrh	r2, [r2, #0]
 80065aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 825a 	beq.w	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	212c      	movs	r1, #44	; 0x2c
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	4413      	add	r3, r2
 80065c4:	3354      	adds	r3, #84	; 0x54
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f083 0301 	eor.w	r3, r3, #1
 80065cc:	b2d8      	uxtb	r0, r3
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	212c      	movs	r1, #44	; 0x2c
 80065d4:	fb01 f303 	mul.w	r3, r1, r3
 80065d8:	4413      	add	r3, r2
 80065da:	3354      	adds	r3, #84	; 0x54
 80065dc:	4602      	mov	r2, r0
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	e244      	b.n	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	212c      	movs	r1, #44	; 0x2c
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	3354      	adds	r3, #84	; 0x54
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	f083 0301 	eor.w	r3, r3, #1
 80065f6:	b2d8      	uxtb	r0, r3
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	212c      	movs	r1, #44	; 0x2c
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	3354      	adds	r3, #84	; 0x54
 8006606:	4602      	mov	r2, r0
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	e22f      	b.n	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f007 fc2b 	bl	800de72 <USB_ReadChInterrupts>
 800661c:	4603      	mov	r3, r0
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b20      	cmp	r3, #32
 8006624:	d109      	bne.n	800663a <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	461a      	mov	r2, r3
 8006634:	2320      	movs	r3, #32
 8006636:	6093      	str	r3, [r2, #8]
 8006638:	e218      	b.n	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f007 fc14 	bl	800de72 <USB_ReadChInterrupts>
 800664a:	4603      	mov	r3, r0
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	f040 816b 	bne.w	800692c <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4413      	add	r3, r2
 800665e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006662:	461a      	mov	r2, r3
 8006664:	2302      	movs	r3, #2
 8006666:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	212c      	movs	r1, #44	; 0x2c
 800666e:	fb01 f303 	mul.w	r3, r1, r3
 8006672:	4413      	add	r3, r2
 8006674:	3361      	adds	r3, #97	; 0x61
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d112      	bne.n	80066a2 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	212c      	movs	r1, #44	; 0x2c
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	4413      	add	r3, r2
 8006688:	3361      	adds	r3, #97	; 0x61
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	212c      	movs	r1, #44	; 0x2c
 8006694:	fb01 f303 	mul.w	r3, r1, r3
 8006698:	4413      	add	r3, r2
 800669a:	3360      	adds	r3, #96	; 0x60
 800669c:	2201      	movs	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e135      	b.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	212c      	movs	r1, #44	; 0x2c
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	4413      	add	r3, r2
 80066ae:	3361      	adds	r3, #97	; 0x61
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d112      	bne.n	80066dc <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	212c      	movs	r1, #44	; 0x2c
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	4413      	add	r3, r2
 80066c2:	3361      	adds	r3, #97	; 0x61
 80066c4:	2202      	movs	r2, #2
 80066c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	212c      	movs	r1, #44	; 0x2c
 80066ce:	fb01 f303 	mul.w	r3, r1, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	3360      	adds	r3, #96	; 0x60
 80066d6:	2205      	movs	r2, #5
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e118      	b.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	212c      	movs	r1, #44	; 0x2c
 80066e2:	fb01 f303 	mul.w	r3, r1, r3
 80066e6:	4413      	add	r3, r2
 80066e8:	3361      	adds	r3, #97	; 0x61
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	d009      	beq.n	8006704 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	212c      	movs	r1, #44	; 0x2c
 80066f6:	fb01 f303 	mul.w	r3, r1, r3
 80066fa:	4413      	add	r3, r2
 80066fc:	3361      	adds	r3, #97	; 0x61
 80066fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006700:	2b09      	cmp	r3, #9
 8006702:	d159      	bne.n	80067b8 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	212c      	movs	r1, #44	; 0x2c
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	4413      	add	r3, r2
 8006710:	3361      	adds	r3, #97	; 0x61
 8006712:	2202      	movs	r2, #2
 8006714:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	212c      	movs	r1, #44	; 0x2c
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	4413      	add	r3, r2
 8006722:	335c      	adds	r3, #92	; 0x5c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	202c      	movs	r0, #44	; 0x2c
 800672e:	fb00 f303 	mul.w	r3, r0, r3
 8006732:	440b      	add	r3, r1
 8006734:	335c      	adds	r3, #92	; 0x5c
 8006736:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	212c      	movs	r1, #44	; 0x2c
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	4413      	add	r3, r2
 8006744:	335c      	adds	r3, #92	; 0x5c
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d912      	bls.n	8006772 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	212c      	movs	r1, #44	; 0x2c
 8006752:	fb01 f303 	mul.w	r3, r1, r3
 8006756:	4413      	add	r3, r2
 8006758:	335c      	adds	r3, #92	; 0x5c
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	212c      	movs	r1, #44	; 0x2c
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	4413      	add	r3, r2
 800676a:	3360      	adds	r3, #96	; 0x60
 800676c:	2204      	movs	r2, #4
 800676e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006770:	e0cd      	b.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	212c      	movs	r1, #44	; 0x2c
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	4413      	add	r3, r2
 800677e:	3360      	adds	r3, #96	; 0x60
 8006780:	2202      	movs	r2, #2
 8006782:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4413      	add	r3, r2
 800678c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800679a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067a2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b0:	461a      	mov	r2, r3
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80067b6:	e0aa      	b.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	212c      	movs	r1, #44	; 0x2c
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	3361      	adds	r3, #97	; 0x61
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b05      	cmp	r3, #5
 80067ca:	d109      	bne.n	80067e0 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	212c      	movs	r1, #44	; 0x2c
 80067d2:	fb01 f303 	mul.w	r3, r1, r3
 80067d6:	4413      	add	r3, r2
 80067d8:	3361      	adds	r3, #97	; 0x61
 80067da:	2202      	movs	r2, #2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e096      	b.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	212c      	movs	r1, #44	; 0x2c
 80067e6:	fb01 f303 	mul.w	r3, r1, r3
 80067ea:	4413      	add	r3, r2
 80067ec:	3361      	adds	r3, #97	; 0x61
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d109      	bne.n	8006808 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	212c      	movs	r1, #44	; 0x2c
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	3361      	adds	r3, #97	; 0x61
 8006802:	2202      	movs	r2, #2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e082      	b.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	212c      	movs	r1, #44	; 0x2c
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	4413      	add	r3, r2
 8006814:	3361      	adds	r3, #97	; 0x61
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b04      	cmp	r3, #4
 800681a:	d13f      	bne.n	800689c <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	212c      	movs	r1, #44	; 0x2c
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	4413      	add	r3, r2
 8006828:	3361      	adds	r3, #97	; 0x61
 800682a:	2202      	movs	r2, #2
 800682c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	212c      	movs	r1, #44	; 0x2c
 8006834:	fb01 f303 	mul.w	r3, r1, r3
 8006838:	4413      	add	r3, r2
 800683a:	3360      	adds	r3, #96	; 0x60
 800683c:	2202      	movs	r2, #2
 800683e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	212c      	movs	r1, #44	; 0x2c
 8006846:	fb01 f303 	mul.w	r3, r1, r3
 800684a:	4413      	add	r3, r2
 800684c:	333f      	adds	r3, #63	; 0x3f
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	212c      	movs	r1, #44	; 0x2c
 800685a:	fb01 f303 	mul.w	r3, r1, r3
 800685e:	4413      	add	r3, r2
 8006860:	333f      	adds	r3, #63	; 0x3f
 8006862:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006864:	2b02      	cmp	r3, #2
 8006866:	d152      	bne.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800687e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006886:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006894:	461a      	mov	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e038      	b.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	212c      	movs	r1, #44	; 0x2c
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	4413      	add	r3, r2
 80068a8:	3361      	adds	r3, #97	; 0x61
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b08      	cmp	r3, #8
 80068ae:	d123      	bne.n	80068f8 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	212c      	movs	r1, #44	; 0x2c
 80068b6:	fb01 f303 	mul.w	r3, r1, r3
 80068ba:	4413      	add	r3, r2
 80068bc:	3361      	adds	r3, #97	; 0x61
 80068be:	2202      	movs	r2, #2
 80068c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	212c      	movs	r1, #44	; 0x2c
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	4413      	add	r3, r2
 80068ce:	335c      	adds	r3, #92	; 0x5c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	6879      	ldr	r1, [r7, #4]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	202c      	movs	r0, #44	; 0x2c
 80068da:	fb00 f303 	mul.w	r3, r0, r3
 80068de:	440b      	add	r3, r1
 80068e0:	335c      	adds	r3, #92	; 0x5c
 80068e2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	212c      	movs	r1, #44	; 0x2c
 80068ea:	fb01 f303 	mul.w	r3, r1, r3
 80068ee:	4413      	add	r3, r2
 80068f0:	3360      	adds	r3, #96	; 0x60
 80068f2:	2204      	movs	r2, #4
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	e00a      	b.n	800690e <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	212c      	movs	r1, #44	; 0x2c
 80068fe:	fb01 f303 	mul.w	r3, r1, r3
 8006902:	4413      	add	r3, r2
 8006904:	3361      	adds	r3, #97	; 0x61
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b02      	cmp	r3, #2
 800690a:	f000 80ae 	beq.w	8006a6a <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	b2d9      	uxtb	r1, r3
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	202c      	movs	r0, #44	; 0x2c
 8006918:	fb00 f303 	mul.w	r3, r0, r3
 800691c:	4413      	add	r3, r2
 800691e:	3360      	adds	r3, #96	; 0x60
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f018 fca5 	bl	801f274 <HAL_HCD_HC_NotifyURBChange_Callback>
 800692a:	e09f      	b.n	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f007 fa9b 	bl	800de72 <USB_ReadChInterrupts>
 800693c:	4603      	mov	r3, r0
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b40      	cmp	r3, #64	; 0x40
 8006944:	d123      	bne.n	800698e <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	461a      	mov	r2, r3
 8006954:	2340      	movs	r3, #64	; 0x40
 8006956:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	212c      	movs	r1, #44	; 0x2c
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	4413      	add	r3, r2
 8006964:	3361      	adds	r3, #97	; 0x61
 8006966:	2205      	movs	r2, #5
 8006968:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	212c      	movs	r1, #44	; 0x2c
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	4413      	add	r3, r2
 8006976:	335c      	adds	r3, #92	; 0x5c
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f007 fec5 	bl	800e716 <USB_HC_Halt>
 800698c:	e06e      	b.n	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	4611      	mov	r1, r2
 8006998:	4618      	mov	r0, r3
 800699a:	f007 fa6a 	bl	800de72 <USB_ReadChInterrupts>
 800699e:	4603      	mov	r3, r0
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d161      	bne.n	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	212c      	movs	r1, #44	; 0x2c
 80069ae:	fb01 f303 	mul.w	r3, r1, r3
 80069b2:	4413      	add	r3, r2
 80069b4:	333f      	adds	r3, #63	; 0x3f
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d11a      	bne.n	80069f2 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	212c      	movs	r1, #44	; 0x2c
 80069c2:	fb01 f303 	mul.w	r3, r1, r3
 80069c6:	4413      	add	r3, r2
 80069c8:	335c      	adds	r3, #92	; 0x5c
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	212c      	movs	r1, #44	; 0x2c
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	4413      	add	r3, r2
 80069da:	3361      	adds	r3, #97	; 0x61
 80069dc:	2204      	movs	r2, #4
 80069de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	4611      	mov	r1, r2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f007 fe93 	bl	800e716 <USB_HC_Halt>
 80069f0:	e031      	b.n	8006a56 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	212c      	movs	r1, #44	; 0x2c
 80069f8:	fb01 f303 	mul.w	r3, r1, r3
 80069fc:	4413      	add	r3, r2
 80069fe:	333f      	adds	r3, #63	; 0x3f
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	212c      	movs	r1, #44	; 0x2c
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	4413      	add	r3, r2
 8006a12:	333f      	adds	r3, #63	; 0x3f
 8006a14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d11d      	bne.n	8006a56 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	212c      	movs	r1, #44	; 0x2c
 8006a20:	fb01 f303 	mul.w	r3, r1, r3
 8006a24:	4413      	add	r3, r2
 8006a26:	335c      	adds	r3, #92	; 0x5c
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d110      	bne.n	8006a56 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	212c      	movs	r1, #44	; 0x2c
 8006a3a:	fb01 f303 	mul.w	r3, r1, r3
 8006a3e:	4413      	add	r3, r2
 8006a40:	3361      	adds	r3, #97	; 0x61
 8006a42:	2204      	movs	r2, #4
 8006a44:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f007 fe60 	bl	800e716 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a62:	461a      	mov	r2, r3
 8006a64:	2310      	movs	r3, #16
 8006a66:	6093      	str	r3, [r2, #8]
 8006a68:	e000      	b.n	8006a6c <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8006a6a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b088      	sub	sp, #32
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f007 f9eb 	bl	800de72 <USB_ReadChInterrupts>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	f003 0304 	and.w	r3, r3, #4
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d11a      	bne.n	8006adc <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	015a      	lsls	r2, r3, #5
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	4413      	add	r3, r2
 8006aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	212c      	movs	r1, #44	; 0x2c
 8006abe:	fb01 f303 	mul.w	r3, r1, r3
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3361      	adds	r3, #97	; 0x61
 8006ac6:	2207      	movs	r2, #7
 8006ac8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f007 fe1e 	bl	800e716 <USB_HC_Halt>
 8006ada:	e393      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f007 f9c3 	bl	800de72 <USB_ReadChInterrupts>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d137      	bne.n	8006b66 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b02:	461a      	mov	r2, r3
 8006b04:	2320      	movs	r3, #32
 8006b06:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	212c      	movs	r1, #44	; 0x2c
 8006b0e:	fb01 f303 	mul.w	r3, r1, r3
 8006b12:	4413      	add	r3, r2
 8006b14:	333d      	adds	r3, #61	; 0x3d
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 8373 	bne.w	8007204 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	212c      	movs	r1, #44	; 0x2c
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	333d      	adds	r3, #61	; 0x3d
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	212c      	movs	r1, #44	; 0x2c
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3360      	adds	r3, #96	; 0x60
 8006b3e:	2202      	movs	r2, #2
 8006b40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	212c      	movs	r1, #44	; 0x2c
 8006b48:	fb01 f303 	mul.w	r3, r1, r3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	3361      	adds	r3, #97	; 0x61
 8006b50:	2203      	movs	r2, #3
 8006b52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	b2d2      	uxtb	r2, r2
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f007 fdd9 	bl	800e716 <USB_HC_Halt>
 8006b64:	e34e      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	4611      	mov	r1, r2
 8006b70:	4618      	mov	r0, r3
 8006b72:	f007 f97e 	bl	800de72 <USB_ReadChInterrupts>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b80:	d112      	bne.n	8006ba8 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b94:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f007 fdb8 	bl	800e716 <USB_HC_Halt>
 8006ba6:	e32d      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f007 f95d 	bl	800de72 <USB_ReadChInterrupts>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d142      	bne.n	8006c48 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	212c      	movs	r1, #44	; 0x2c
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	335c      	adds	r3, #92	; 0x5c
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f007 f947 	bl	800de72 <USB_ReadChInterrupts>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d111      	bne.n	8006c12 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	212c      	movs	r1, #44	; 0x2c
 8006bf4:	fb01 f303 	mul.w	r3, r1, r3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	333d      	adds	r3, #61	; 0x3d
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	2340      	movs	r3, #64	; 0x40
 8006c10:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	461a      	mov	r2, r3
 8006c20:	2301      	movs	r3, #1
 8006c22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	212c      	movs	r1, #44	; 0x2c
 8006c2a:	fb01 f303 	mul.w	r3, r1, r3
 8006c2e:	4413      	add	r3, r2
 8006c30:	3361      	adds	r3, #97	; 0x61
 8006c32:	2201      	movs	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f007 fd68 	bl	800e716 <USB_HC_Halt>
 8006c46:	e2dd      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	4611      	mov	r1, r2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f007 f90d 	bl	800de72 <USB_ReadChInterrupts>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d12c      	bne.n	8006cbc <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	212c      	movs	r1, #44	; 0x2c
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3361      	adds	r3, #97	; 0x61
 8006c70:	2205      	movs	r2, #5
 8006c72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	212c      	movs	r1, #44	; 0x2c
 8006c7a:	fb01 f303 	mul.w	r3, r1, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	333d      	adds	r3, #61	; 0x3d
 8006c82:	2201      	movs	r2, #1
 8006c84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	212c      	movs	r1, #44	; 0x2c
 8006c8c:	fb01 f303 	mul.w	r3, r1, r3
 8006c90:	4413      	add	r3, r2
 8006c92:	335c      	adds	r3, #92	; 0x5c
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f007 fd37 	bl	800e716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	2340      	movs	r3, #64	; 0x40
 8006cb8:	6093      	str	r3, [r2, #8]
 8006cba:	e2a3      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f007 f8d3 	bl	800de72 <USB_ReadChInterrupts>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d11a      	bne.n	8006d0c <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	2308      	movs	r3, #8
 8006ce6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	212c      	movs	r1, #44	; 0x2c
 8006cee:	fb01 f303 	mul.w	r3, r1, r3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3361      	adds	r3, #97	; 0x61
 8006cf6:	2206      	movs	r2, #6
 8006cf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f007 fd06 	bl	800e716 <USB_HC_Halt>
 8006d0a:	e27b      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	b2d2      	uxtb	r2, r2
 8006d14:	4611      	mov	r1, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f007 f8ab 	bl	800de72 <USB_ReadChInterrupts>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b10      	cmp	r3, #16
 8006d24:	d140      	bne.n	8006da8 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	212c      	movs	r1, #44	; 0x2c
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	335c      	adds	r3, #92	; 0x5c
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	212c      	movs	r1, #44	; 0x2c
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	3361      	adds	r3, #97	; 0x61
 8006d46:	2204      	movs	r2, #4
 8006d48:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	212c      	movs	r1, #44	; 0x2c
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	4413      	add	r3, r2
 8006d56:	333d      	adds	r3, #61	; 0x3d
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d112      	bne.n	8006d84 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	212c      	movs	r1, #44	; 0x2c
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	333c      	adds	r3, #60	; 0x3c
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d108      	bne.n	8006d84 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	212c      	movs	r1, #44	; 0x2c
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	333d      	adds	r3, #61	; 0x3d
 8006d80:	2201      	movs	r2, #1
 8006d82:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	b2d2      	uxtb	r2, r2
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f007 fcc1 	bl	800e716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da0:	461a      	mov	r2, r3
 8006da2:	2310      	movs	r3, #16
 8006da4:	6093      	str	r3, [r2, #8]
 8006da6:	e22d      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	4611      	mov	r1, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f007 f85d 	bl	800de72 <USB_ReadChInterrupts>
 8006db8:	4603      	mov	r3, r0
 8006dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbe:	2b80      	cmp	r3, #128	; 0x80
 8006dc0:	d164      	bne.n	8006e8c <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d111      	bne.n	8006dee <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	212c      	movs	r1, #44	; 0x2c
 8006dd0:	fb01 f303 	mul.w	r3, r1, r3
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3361      	adds	r3, #97	; 0x61
 8006dd8:	2207      	movs	r2, #7
 8006dda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	4611      	mov	r1, r2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f007 fc95 	bl	800e716 <USB_HC_Halt>
 8006dec:	e044      	b.n	8006e78 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	212c      	movs	r1, #44	; 0x2c
 8006df4:	fb01 f303 	mul.w	r3, r1, r3
 8006df8:	4413      	add	r3, r2
 8006dfa:	335c      	adds	r3, #92	; 0x5c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	202c      	movs	r0, #44	; 0x2c
 8006e06:	fb00 f303 	mul.w	r3, r0, r3
 8006e0a:	440b      	add	r3, r1
 8006e0c:	335c      	adds	r3, #92	; 0x5c
 8006e0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	212c      	movs	r1, #44	; 0x2c
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
 8006e1a:	4413      	add	r3, r2
 8006e1c:	335c      	adds	r3, #92	; 0x5c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d920      	bls.n	8006e66 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	212c      	movs	r1, #44	; 0x2c
 8006e2a:	fb01 f303 	mul.w	r3, r1, r3
 8006e2e:	4413      	add	r3, r2
 8006e30:	335c      	adds	r3, #92	; 0x5c
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	212c      	movs	r1, #44	; 0x2c
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	4413      	add	r3, r2
 8006e42:	3360      	adds	r3, #96	; 0x60
 8006e44:	2204      	movs	r2, #4
 8006e46:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	b2d9      	uxtb	r1, r3
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	202c      	movs	r0, #44	; 0x2c
 8006e52:	fb00 f303 	mul.w	r3, r0, r3
 8006e56:	4413      	add	r3, r2
 8006e58:	3360      	adds	r3, #96	; 0x60
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f018 fa08 	bl	801f274 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006e64:	e008      	b.n	8006e78 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	212c      	movs	r1, #44	; 0x2c
 8006e6c:	fb01 f303 	mul.w	r3, r1, r3
 8006e70:	4413      	add	r3, r2
 8006e72:	3360      	adds	r3, #96	; 0x60
 8006e74:	2202      	movs	r2, #2
 8006e76:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e84:	461a      	mov	r2, r3
 8006e86:	2380      	movs	r3, #128	; 0x80
 8006e88:	6093      	str	r3, [r2, #8]
 8006e8a:	e1bb      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f006 ffeb 	bl	800de72 <USB_ReadChInterrupts>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea6:	d11b      	bne.n	8006ee0 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	212c      	movs	r1, #44	; 0x2c
 8006eae:	fb01 f303 	mul.w	r3, r1, r3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3361      	adds	r3, #97	; 0x61
 8006eb6:	2209      	movs	r2, #9
 8006eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f007 fc26 	bl	800e716 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006edc:	6093      	str	r3, [r2, #8]
 8006ede:	e191      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	b2d2      	uxtb	r2, r2
 8006ee8:	4611      	mov	r1, r2
 8006eea:	4618      	mov	r0, r3
 8006eec:	f006 ffc1 	bl	800de72 <USB_ReadChInterrupts>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	f040 8184 	bne.w	8007204 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	212c      	movs	r1, #44	; 0x2c
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	4413      	add	r3, r2
 8006f1a:	3361      	adds	r3, #97	; 0x61
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	f040 8087 	bne.w	8007032 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	212c      	movs	r1, #44	; 0x2c
 8006f2a:	fb01 f303 	mul.w	r3, r1, r3
 8006f2e:	4413      	add	r3, r2
 8006f30:	3361      	adds	r3, #97	; 0x61
 8006f32:	2202      	movs	r2, #2
 8006f34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	212c      	movs	r1, #44	; 0x2c
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	4413      	add	r3, r2
 8006f42:	3360      	adds	r3, #96	; 0x60
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	212c      	movs	r1, #44	; 0x2c
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	333f      	adds	r3, #63	; 0x3f
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d00a      	beq.n	8006f72 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	212c      	movs	r1, #44	; 0x2c
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	333f      	adds	r3, #63	; 0x3f
 8006f6a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	f040 8139 	bne.w	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d113      	bne.n	8006fa2 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	212c      	movs	r1, #44	; 0x2c
 8006f80:	fb01 f303 	mul.w	r3, r1, r3
 8006f84:	4413      	add	r3, r2
 8006f86:	3355      	adds	r3, #85	; 0x55
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	f083 0301 	eor.w	r3, r3, #1
 8006f8e:	b2d8      	uxtb	r0, r3
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	212c      	movs	r1, #44	; 0x2c
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	4413      	add	r3, r2
 8006f9c:	3355      	adds	r3, #85	; 0x55
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	f040 811c 	bne.w	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	212c      	movs	r1, #44	; 0x2c
 8006fb2:	fb01 f303 	mul.w	r3, r1, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	334c      	adds	r3, #76	; 0x4c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 8111 	beq.w	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	212c      	movs	r1, #44	; 0x2c
 8006fc8:	fb01 f303 	mul.w	r3, r1, r3
 8006fcc:	4413      	add	r3, r2
 8006fce:	334c      	adds	r3, #76	; 0x4c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	202c      	movs	r0, #44	; 0x2c
 8006fd8:	fb00 f202 	mul.w	r2, r0, r2
 8006fdc:	440a      	add	r2, r1
 8006fde:	3240      	adds	r2, #64	; 0x40
 8006fe0:	8812      	ldrh	r2, [r2, #0]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	202c      	movs	r0, #44	; 0x2c
 8006fec:	fb00 f202 	mul.w	r2, r0, r2
 8006ff0:	440a      	add	r2, r1
 8006ff2:	3240      	adds	r2, #64	; 0x40
 8006ff4:	8812      	ldrh	r2, [r2, #0]
 8006ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80ee 	beq.w	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	212c      	movs	r1, #44	; 0x2c
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	4413      	add	r3, r2
 8007014:	3355      	adds	r3, #85	; 0x55
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f083 0301 	eor.w	r3, r3, #1
 800701c:	b2d8      	uxtb	r0, r3
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	212c      	movs	r1, #44	; 0x2c
 8007024:	fb01 f303 	mul.w	r3, r1, r3
 8007028:	4413      	add	r3, r2
 800702a:	3355      	adds	r3, #85	; 0x55
 800702c:	4602      	mov	r2, r0
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	e0d8      	b.n	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	212c      	movs	r1, #44	; 0x2c
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	4413      	add	r3, r2
 800703e:	3361      	adds	r3, #97	; 0x61
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b03      	cmp	r3, #3
 8007044:	d109      	bne.n	800705a <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	212c      	movs	r1, #44	; 0x2c
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	4413      	add	r3, r2
 8007052:	3361      	adds	r3, #97	; 0x61
 8007054:	2202      	movs	r2, #2
 8007056:	701a      	strb	r2, [r3, #0]
 8007058:	e0c4      	b.n	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	212c      	movs	r1, #44	; 0x2c
 8007060:	fb01 f303 	mul.w	r3, r1, r3
 8007064:	4413      	add	r3, r2
 8007066:	3361      	adds	r3, #97	; 0x61
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b04      	cmp	r3, #4
 800706c:	d112      	bne.n	8007094 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	212c      	movs	r1, #44	; 0x2c
 8007074:	fb01 f303 	mul.w	r3, r1, r3
 8007078:	4413      	add	r3, r2
 800707a:	3361      	adds	r3, #97	; 0x61
 800707c:	2202      	movs	r2, #2
 800707e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	212c      	movs	r1, #44	; 0x2c
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	3360      	adds	r3, #96	; 0x60
 800708e:	2202      	movs	r2, #2
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	e0a7      	b.n	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	212c      	movs	r1, #44	; 0x2c
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	4413      	add	r3, r2
 80070a0:	3361      	adds	r3, #97	; 0x61
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b05      	cmp	r3, #5
 80070a6:	d112      	bne.n	80070ce <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	212c      	movs	r1, #44	; 0x2c
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	4413      	add	r3, r2
 80070b4:	3361      	adds	r3, #97	; 0x61
 80070b6:	2202      	movs	r2, #2
 80070b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	212c      	movs	r1, #44	; 0x2c
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	4413      	add	r3, r2
 80070c6:	3360      	adds	r3, #96	; 0x60
 80070c8:	2202      	movs	r2, #2
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e08a      	b.n	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	212c      	movs	r1, #44	; 0x2c
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	4413      	add	r3, r2
 80070da:	3361      	adds	r3, #97	; 0x61
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b06      	cmp	r3, #6
 80070e0:	d112      	bne.n	8007108 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	212c      	movs	r1, #44	; 0x2c
 80070e8:	fb01 f303 	mul.w	r3, r1, r3
 80070ec:	4413      	add	r3, r2
 80070ee:	3361      	adds	r3, #97	; 0x61
 80070f0:	2202      	movs	r2, #2
 80070f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	212c      	movs	r1, #44	; 0x2c
 80070fa:	fb01 f303 	mul.w	r3, r1, r3
 80070fe:	4413      	add	r3, r2
 8007100:	3360      	adds	r3, #96	; 0x60
 8007102:	2205      	movs	r2, #5
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e06d      	b.n	80071e4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	212c      	movs	r1, #44	; 0x2c
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	4413      	add	r3, r2
 8007114:	3361      	adds	r3, #97	; 0x61
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	2b07      	cmp	r3, #7
 800711a:	d009      	beq.n	8007130 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	212c      	movs	r1, #44	; 0x2c
 8007122:	fb01 f303 	mul.w	r3, r1, r3
 8007126:	4413      	add	r3, r2
 8007128:	3361      	adds	r3, #97	; 0x61
 800712a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800712c:	2b09      	cmp	r3, #9
 800712e:	d168      	bne.n	8007202 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	212c      	movs	r1, #44	; 0x2c
 8007136:	fb01 f303 	mul.w	r3, r1, r3
 800713a:	4413      	add	r3, r2
 800713c:	3361      	adds	r3, #97	; 0x61
 800713e:	2202      	movs	r2, #2
 8007140:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	212c      	movs	r1, #44	; 0x2c
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	4413      	add	r3, r2
 800714e:	335c      	adds	r3, #92	; 0x5c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	202c      	movs	r0, #44	; 0x2c
 800715a:	fb00 f303 	mul.w	r3, r0, r3
 800715e:	440b      	add	r3, r1
 8007160:	335c      	adds	r3, #92	; 0x5c
 8007162:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	212c      	movs	r1, #44	; 0x2c
 800716a:	fb01 f303 	mul.w	r3, r1, r3
 800716e:	4413      	add	r3, r2
 8007170:	335c      	adds	r3, #92	; 0x5c
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d912      	bls.n	800719e <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	212c      	movs	r1, #44	; 0x2c
 800717e:	fb01 f303 	mul.w	r3, r1, r3
 8007182:	4413      	add	r3, r2
 8007184:	335c      	adds	r3, #92	; 0x5c
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	212c      	movs	r1, #44	; 0x2c
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	4413      	add	r3, r2
 8007196:	3360      	adds	r3, #96	; 0x60
 8007198:	2204      	movs	r2, #4
 800719a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800719c:	e021      	b.n	80071e2 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	212c      	movs	r1, #44	; 0x2c
 80071a4:	fb01 f303 	mul.w	r3, r1, r3
 80071a8:	4413      	add	r3, r2
 80071aa:	3360      	adds	r3, #96	; 0x60
 80071ac:	2202      	movs	r2, #2
 80071ae:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071c6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ce:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071dc:	461a      	mov	r2, r3
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80071e2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	b2d9      	uxtb	r1, r3
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	202c      	movs	r0, #44	; 0x2c
 80071ee:	fb00 f303 	mul.w	r3, r0, r3
 80071f2:	4413      	add	r3, r2
 80071f4:	3360      	adds	r3, #96	; 0x60
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f018 f83a 	bl	801f274 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007200:	e000      	b.n	8007204 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8007202:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007204:	3720      	adds	r7, #32
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b08a      	sub	sp, #40	; 0x28
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	0c5b      	lsrs	r3, r3, #17
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	091b      	lsrs	r3, r3, #4
 800723a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800723e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d004      	beq.n	8007250 <HCD_RXQLVL_IRQHandler+0x46>
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b05      	cmp	r3, #5
 800724a:	f000 80a9 	beq.w	80073a0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800724e:	e0aa      	b.n	80073a6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 80a6 	beq.w	80073a4 <HCD_RXQLVL_IRQHandler+0x19a>
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	212c      	movs	r1, #44	; 0x2c
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	4413      	add	r3, r2
 8007264:	3344      	adds	r3, #68	; 0x44
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 809b 	beq.w	80073a4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	212c      	movs	r1, #44	; 0x2c
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	3350      	adds	r3, #80	; 0x50
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	441a      	add	r2, r3
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	202c      	movs	r0, #44	; 0x2c
 8007288:	fb00 f303 	mul.w	r3, r0, r3
 800728c:	440b      	add	r3, r1
 800728e:	334c      	adds	r3, #76	; 0x4c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d87a      	bhi.n	800738c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	212c      	movs	r1, #44	; 0x2c
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	4413      	add	r3, r2
 80072a6:	3344      	adds	r3, #68	; 0x44
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	b292      	uxth	r2, r2
 80072ae:	4619      	mov	r1, r3
 80072b0:	f006 fd74 	bl	800dd9c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	212c      	movs	r1, #44	; 0x2c
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	3344      	adds	r3, #68	; 0x44
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	441a      	add	r2, r3
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	202c      	movs	r0, #44	; 0x2c
 80072ce:	fb00 f303 	mul.w	r3, r0, r3
 80072d2:	440b      	add	r3, r1
 80072d4:	3344      	adds	r3, #68	; 0x44
 80072d6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	212c      	movs	r1, #44	; 0x2c
 80072de:	fb01 f303 	mul.w	r3, r1, r3
 80072e2:	4413      	add	r3, r2
 80072e4:	3350      	adds	r3, #80	; 0x50
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	441a      	add	r2, r3
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	202c      	movs	r0, #44	; 0x2c
 80072f2:	fb00 f303 	mul.w	r3, r0, r3
 80072f6:	440b      	add	r3, r1
 80072f8:	3350      	adds	r3, #80	; 0x50
 80072fa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	0cdb      	lsrs	r3, r3, #19
 800730c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007310:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	212c      	movs	r1, #44	; 0x2c
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	3340      	adds	r3, #64	; 0x40
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	4293      	cmp	r3, r2
 8007328:	d13c      	bne.n	80073a4 <HCD_RXQLVL_IRQHandler+0x19a>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d039      	beq.n	80073a4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	4413      	add	r3, r2
 8007338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007346:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800734e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	4413      	add	r3, r2
 8007358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735c:	461a      	mov	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	212c      	movs	r1, #44	; 0x2c
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	4413      	add	r3, r2
 800736e:	3354      	adds	r3, #84	; 0x54
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	f083 0301 	eor.w	r3, r3, #1
 8007376:	b2d8      	uxtb	r0, r3
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	212c      	movs	r1, #44	; 0x2c
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	4413      	add	r3, r2
 8007384:	3354      	adds	r3, #84	; 0x54
 8007386:	4602      	mov	r2, r0
 8007388:	701a      	strb	r2, [r3, #0]
      break;
 800738a:	e00b      	b.n	80073a4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	212c      	movs	r1, #44	; 0x2c
 8007392:	fb01 f303 	mul.w	r3, r1, r3
 8007396:	4413      	add	r3, r2
 8007398:	3360      	adds	r3, #96	; 0x60
 800739a:	2204      	movs	r2, #4
 800739c:	701a      	strb	r2, [r3, #0]
      break;
 800739e:	e001      	b.n	80073a4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80073a0:	bf00      	nop
 80073a2:	e000      	b.n	80073a6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80073a4:	bf00      	nop
  }
}
 80073a6:	bf00      	nop
 80073a8:	3728      	adds	r7, #40	; 0x28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b086      	sub	sp, #24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d10b      	bne.n	80073fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d102      	bne.n	80073f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f017 ff23 	bl	801f23c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f043 0302 	orr.w	r3, r3, #2
 80073fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b08      	cmp	r3, #8
 8007406:	d132      	bne.n	800746e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f043 0308 	orr.w	r3, r3, #8
 800740e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b04      	cmp	r3, #4
 8007418:	d126      	bne.n	8007468 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b02      	cmp	r3, #2
 8007420:	d113      	bne.n	800744a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800742c:	d106      	bne.n	800743c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2102      	movs	r1, #2
 8007434:	4618      	mov	r0, r3
 8007436:	f006 fe33 	bl	800e0a0 <USB_InitFSLSPClkSel>
 800743a:	e011      	b.n	8007460 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2101      	movs	r1, #1
 8007442:	4618      	mov	r0, r3
 8007444:	f006 fe2c 	bl	800e0a0 <USB_InitFSLSPClkSel>
 8007448:	e00a      	b.n	8007460 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d106      	bne.n	8007460 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007458:	461a      	mov	r2, r3
 800745a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800745e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f017 ff19 	bl	801f298 <HAL_HCD_PortEnabled_Callback>
 8007466:	e002      	b.n	800746e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f017 ff23 	bl	801f2b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b20      	cmp	r3, #32
 8007476:	d103      	bne.n	8007480 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f043 0320 	orr.w	r3, r3, #32
 800747e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007486:	461a      	mov	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6013      	str	r3, [r2, #0]
}
 800748c:	bf00      	nop
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e07f      	b.n	80075a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d106      	bne.n	80074c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fa fce8 	bl	8001e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2224      	movs	r2, #36	; 0x24
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0201 	bic.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d107      	bne.n	800750e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	e006      	b.n	800751c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800751a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d104      	bne.n	800752e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800752c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6859      	ldr	r1, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	4b1d      	ldr	r3, [pc, #116]	; (80075b0 <HAL_I2C_Init+0x11c>)
 800753a:	430b      	orrs	r3, r1
 800753c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800754c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691a      	ldr	r2, [r3, #16]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69d9      	ldr	r1, [r3, #28]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1a      	ldr	r2, [r3, #32]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	430a      	orrs	r2, r1
 8007576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	02008000 	.word	0x02008000

080075b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d138      	bne.n	800763c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e032      	b.n	800763e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2224      	movs	r2, #36	; 0x24
 80075e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007606:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6819      	ldr	r1, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	430a      	orrs	r2, r1
 8007616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2220      	movs	r2, #32
 800762c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e000      	b.n	800763e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
  }
}
 800763e:	4618      	mov	r0, r3
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b20      	cmp	r3, #32
 800765e:	d139      	bne.n	80076d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800766a:	2302      	movs	r3, #2
 800766c:	e033      	b.n	80076d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2224      	movs	r2, #36	; 0x24
 800767a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0201 	bic.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800769c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
	...

080076e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e0bf      	b.n	8007876 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d106      	bne.n	8007710 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fa fc68 	bl	8001fe0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007726:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6999      	ldr	r1, [r3, #24]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800773c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6899      	ldr	r1, [r3, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b4a      	ldr	r3, [pc, #296]	; (8007880 <HAL_LTDC_Init+0x19c>)
 8007758:	400b      	ands	r3, r1
 800775a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	041b      	lsls	r3, r3, #16
 8007762:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6899      	ldr	r1, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68d9      	ldr	r1, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	4b3e      	ldr	r3, [pc, #248]	; (8007880 <HAL_LTDC_Init+0x19c>)
 8007786:	400b      	ands	r3, r1
 8007788:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	041b      	lsls	r3, r3, #16
 8007790:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68d9      	ldr	r1, [r3, #12]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1a      	ldr	r2, [r3, #32]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6919      	ldr	r1, [r3, #16]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4b33      	ldr	r3, [pc, #204]	; (8007880 <HAL_LTDC_Init+0x19c>)
 80077b4:	400b      	ands	r3, r1
 80077b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	041b      	lsls	r3, r3, #16
 80077be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6919      	ldr	r1, [r3, #16]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6959      	ldr	r1, [r3, #20]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	4b27      	ldr	r3, [pc, #156]	; (8007880 <HAL_LTDC_Init+0x19c>)
 80077e2:	400b      	ands	r3, r1
 80077e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6959      	ldr	r1, [r3, #20]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007814:	041b      	lsls	r3, r3, #16
 8007816:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007826:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4313      	orrs	r3, r2
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0206 	orr.w	r2, r2, #6
 8007852:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	f000f800 	.word	0xf000f800

08007884 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007892:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d023      	beq.n	80078ee <HAL_LTDC_IRQHandler+0x6a>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01e      	beq.n	80078ee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0204 	bic.w	r2, r2, #4
 80078be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2204      	movs	r2, #4
 80078c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078ce:	f043 0201 	orr.w	r2, r3, #1
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2204      	movs	r2, #4
 80078dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f86f 	bl	80079cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d023      	beq.n	8007940 <HAL_LTDC_IRQHandler+0xbc>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01e      	beq.n	8007940 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0202 	bic.w	r2, r2, #2
 8007910:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2202      	movs	r2, #2
 8007918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007920:	f043 0202 	orr.w	r2, r3, #2
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2204      	movs	r2, #4
 800792e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f846 	bl	80079cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01b      	beq.n	8007982 <HAL_LTDC_IRQHandler+0xfe>
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d016      	beq.n	8007982 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0201 	bic.w	r2, r2, #1
 8007962:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2201      	movs	r2, #1
 800796a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f82f 	bl	80079e0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f003 0308 	and.w	r3, r3, #8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01b      	beq.n	80079c4 <HAL_LTDC_IRQHandler+0x140>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d016      	beq.n	80079c4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0208 	bic.w	r2, r2, #8
 80079a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2208      	movs	r2, #8
 80079ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f818 	bl	80079f4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a08:	b5b0      	push	{r4, r5, r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_LTDC_ConfigLayer+0x1a>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e02c      	b.n	8007a7c <HAL_LTDC_ConfigLayer+0x74>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2134      	movs	r1, #52	; 0x34
 8007a38:	fb01 f303 	mul.w	r3, r1, r3
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	4614      	mov	r4, r2
 8007a46:	461d      	mov	r5, r3
 8007a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f811 	bl	8007a84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2201      	movs	r2, #1
 8007a68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bdb0      	pop	{r4, r5, r7, pc}

08007a84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b089      	sub	sp, #36	; 0x24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	0c1b      	lsrs	r3, r3, #16
 8007a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa0:	4413      	add	r3, r2
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	01db      	lsls	r3, r3, #7
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3384      	adds	r3, #132	; 0x84
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	4611      	mov	r1, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	01d2      	lsls	r2, r2, #7
 8007ac0:	440a      	add	r2, r1
 8007ac2:	3284      	adds	r2, #132	; 0x84
 8007ac4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ac8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	0c1b      	lsrs	r3, r3, #16
 8007ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007ada:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007adc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	01db      	lsls	r3, r3, #7
 8007ae8:	440b      	add	r3, r1
 8007aea:	3384      	adds	r3, #132	; 0x84
 8007aec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007af2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b02:	4413      	add	r3, r2
 8007b04:	041b      	lsls	r3, r3, #16
 8007b06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	01db      	lsls	r3, r3, #7
 8007b12:	4413      	add	r3, r2
 8007b14:	3384      	adds	r3, #132	; 0x84
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	6812      	ldr	r2, [r2, #0]
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	01d2      	lsls	r2, r2, #7
 8007b22:	440a      	add	r2, r1
 8007b24:	3284      	adds	r2, #132	; 0x84
 8007b26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007b2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b3a:	4413      	add	r3, r2
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4619      	mov	r1, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	01db      	lsls	r3, r3, #7
 8007b48:	440b      	add	r3, r1
 8007b4a:	3384      	adds	r3, #132	; 0x84
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	01db      	lsls	r3, r3, #7
 8007b5e:	4413      	add	r3, r2
 8007b60:	3384      	adds	r3, #132	; 0x84
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	6812      	ldr	r2, [r2, #0]
 8007b68:	4611      	mov	r1, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	01d2      	lsls	r2, r2, #7
 8007b6e:	440a      	add	r2, r1
 8007b70:	3284      	adds	r2, #132	; 0x84
 8007b72:	f023 0307 	bic.w	r3, r3, #7
 8007b76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	01db      	lsls	r3, r3, #7
 8007b82:	4413      	add	r3, r2
 8007b84:	3384      	adds	r3, #132	; 0x84
 8007b86:	461a      	mov	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b94:	021b      	lsls	r3, r3, #8
 8007b96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007b9e:	041b      	lsls	r3, r3, #16
 8007ba0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	061b      	lsls	r3, r3, #24
 8007ba8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	01db      	lsls	r3, r3, #7
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3384      	adds	r3, #132	; 0x84
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	01db      	lsls	r3, r3, #7
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3384      	adds	r3, #132	; 0x84
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2300      	movs	r3, #0
 8007bcc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4619      	mov	r1, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	01db      	lsls	r3, r3, #7
 8007be8:	440b      	add	r3, r1
 8007bea:	3384      	adds	r3, #132	; 0x84
 8007bec:	4619      	mov	r1, r3
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	01db      	lsls	r3, r3, #7
 8007bfe:	4413      	add	r3, r2
 8007c00:	3384      	adds	r3, #132	; 0x84
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	6812      	ldr	r2, [r2, #0]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	01d2      	lsls	r2, r2, #7
 8007c0e:	440a      	add	r2, r1
 8007c10:	3284      	adds	r2, #132	; 0x84
 8007c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	01db      	lsls	r3, r3, #7
 8007c22:	4413      	add	r3, r2
 8007c24:	3384      	adds	r3, #132	; 0x84
 8007c26:	461a      	mov	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	01db      	lsls	r3, r3, #7
 8007c38:	4413      	add	r3, r2
 8007c3a:	3384      	adds	r3, #132	; 0x84
 8007c3c:	69da      	ldr	r2, [r3, #28]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4619      	mov	r1, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	01db      	lsls	r3, r3, #7
 8007c48:	440b      	add	r3, r1
 8007c4a:	3384      	adds	r3, #132	; 0x84
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4b58      	ldr	r3, [pc, #352]	; (8007db0 <LTDC_SetConfig+0x32c>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	69da      	ldr	r2, [r3, #28]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	68f9      	ldr	r1, [r7, #12]
 8007c5e:	6809      	ldr	r1, [r1, #0]
 8007c60:	4608      	mov	r0, r1
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	01c9      	lsls	r1, r1, #7
 8007c66:	4401      	add	r1, r0
 8007c68:	3184      	adds	r1, #132	; 0x84
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	01db      	lsls	r3, r3, #7
 8007c78:	4413      	add	r3, r2
 8007c7a:	3384      	adds	r3, #132	; 0x84
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	01db      	lsls	r3, r3, #7
 8007c88:	4413      	add	r3, r2
 8007c8a:	3384      	adds	r3, #132	; 0x84
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	2300      	movs	r3, #0
 8007c90:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	01db      	lsls	r3, r3, #7
 8007c9c:	4413      	add	r3, r2
 8007c9e:	3384      	adds	r3, #132	; 0x84
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007cb0:	2304      	movs	r3, #4
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	e01b      	b.n	8007cee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d102      	bne.n	8007cc4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	e014      	b.n	8007cee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d00b      	beq.n	8007ce4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d007      	beq.n	8007ce4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d003      	beq.n	8007ce4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007ce0:	2b07      	cmp	r3, #7
 8007ce2:	d102      	bne.n	8007cea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	61fb      	str	r3, [r7, #28]
 8007ce8:	e001      	b.n	8007cee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007cea:	2301      	movs	r3, #1
 8007cec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	01db      	lsls	r3, r3, #7
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3384      	adds	r3, #132	; 0x84
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	4611      	mov	r1, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	01d2      	lsls	r2, r2, #7
 8007d08:	440a      	add	r2, r1
 8007d0a:	3284      	adds	r2, #132	; 0x84
 8007d0c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007d10:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	6859      	ldr	r1, [r3, #4]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	1acb      	subs	r3, r1, r3
 8007d28:	69f9      	ldr	r1, [r7, #28]
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007d30:	68f9      	ldr	r1, [r7, #12]
 8007d32:	6809      	ldr	r1, [r1, #0]
 8007d34:	4608      	mov	r0, r1
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	01c9      	lsls	r1, r1, #7
 8007d3a:	4401      	add	r1, r0
 8007d3c:	3184      	adds	r1, #132	; 0x84
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	01db      	lsls	r3, r3, #7
 8007d4c:	4413      	add	r3, r2
 8007d4e:	3384      	adds	r3, #132	; 0x84
 8007d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4619      	mov	r1, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	01db      	lsls	r3, r3, #7
 8007d5c:	440b      	add	r3, r1
 8007d5e:	3384      	adds	r3, #132	; 0x84
 8007d60:	4619      	mov	r1, r3
 8007d62:	4b14      	ldr	r3, [pc, #80]	; (8007db4 <LTDC_SetConfig+0x330>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	01db      	lsls	r3, r3, #7
 8007d72:	4413      	add	r3, r2
 8007d74:	3384      	adds	r3, #132	; 0x84
 8007d76:	461a      	mov	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	461a      	mov	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	01db      	lsls	r3, r3, #7
 8007d88:	4413      	add	r3, r2
 8007d8a:	3384      	adds	r3, #132	; 0x84
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	4611      	mov	r1, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	01d2      	lsls	r2, r2, #7
 8007d98:	440a      	add	r2, r1
 8007d9a:	3284      	adds	r2, #132	; 0x84
 8007d9c:	f043 0301 	orr.w	r3, r3, #1
 8007da0:	6013      	str	r3, [r2, #0]
}
 8007da2:	bf00      	nop
 8007da4:	3724      	adds	r7, #36	; 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	fffff8f8 	.word	0xfffff8f8
 8007db4:	fffff800 	.word	0xfffff800

08007db8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007dbc:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a04      	ldr	r2, [pc, #16]	; (8007dd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dc6:	6013      	str	r3, [r2, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40007000 	.word	0x40007000

08007dd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007de2:	4b23      	ldr	r3, [pc, #140]	; (8007e70 <HAL_PWREx_EnableOverDrive+0x98>)
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	4a22      	ldr	r2, [pc, #136]	; (8007e70 <HAL_PWREx_EnableOverDrive+0x98>)
 8007de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dec:	6413      	str	r3, [r2, #64]	; 0x40
 8007dee:	4b20      	ldr	r3, [pc, #128]	; (8007e70 <HAL_PWREx_EnableOverDrive+0x98>)
 8007df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007dfa:	4b1e      	ldr	r3, [pc, #120]	; (8007e74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1d      	ldr	r2, [pc, #116]	; (8007e74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e06:	f7fb f9ef 	bl	80031e8 <HAL_GetTick>
 8007e0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007e0c:	e009      	b.n	8007e22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e0e:	f7fb f9eb 	bl	80031e8 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e1c:	d901      	bls.n	8007e22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e022      	b.n	8007e68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007e22:	4b14      	ldr	r3, [pc, #80]	; (8007e74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2e:	d1ee      	bne.n	8007e0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007e30:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a0f      	ldr	r2, [pc, #60]	; (8007e74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e3c:	f7fb f9d4 	bl	80031e8 <HAL_GetTick>
 8007e40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e42:	e009      	b.n	8007e58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007e44:	f7fb f9d0 	bl	80031e8 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e52:	d901      	bls.n	8007e58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e007      	b.n	8007e68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007e58:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e64:	d1ee      	bne.n	8007e44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	40023800 	.word	0x40023800
 8007e74:	40007000 	.word	0x40007000

08007e78 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007e80:	f7fb f9b2 	bl	80031e8 <HAL_GetTick>
 8007e84:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e067      	b.n	8007f60 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10b      	bne.n	8007eb4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7fa f963 	bl	8002170 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007eaa:	f241 3188 	movw	r1, #5000	; 0x1388
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f85e 	bl	8007f70 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	021a      	lsls	r2, r3, #8
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2120      	movs	r1, #32
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f856 	bl	8007f8c <QSPI_WaitFlagStateUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d135      	bne.n	8007f56 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	4b1d      	ldr	r3, [pc, #116]	; (8007f68 <HAL_QSPI_Init+0xf0>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6852      	ldr	r2, [r2, #4]
 8007ef8:	0611      	lsls	r1, r2, #24
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	68d2      	ldr	r2, [r2, #12]
 8007efe:	4311      	orrs	r1, r2
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	69d2      	ldr	r2, [r2, #28]
 8007f04:	4311      	orrs	r1, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6a12      	ldr	r2, [r2, #32]
 8007f0a:	4311      	orrs	r1, r2
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	6812      	ldr	r2, [r2, #0]
 8007f10:	430b      	orrs	r3, r1
 8007f12:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <HAL_QSPI_Init+0xf4>)
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6912      	ldr	r2, [r2, #16]
 8007f22:	0411      	lsls	r1, r2, #16
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	6952      	ldr	r2, [r2, #20]
 8007f28:	4311      	orrs	r1, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6992      	ldr	r2, [r2, #24]
 8007f2e:	4311      	orrs	r1, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	430b      	orrs	r3, r1
 8007f36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0201 	orr.w	r2, r2, #1
 8007f46:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	00ffff2f 	.word	0x00ffff2f
 8007f6c:	ffe0f8fe 	.word	0xffe0f8fe

08007f70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007f9c:	e01a      	b.n	8007fd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa4:	d016      	beq.n	8007fd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fa6:	f7fb f91f 	bl	80031e8 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d302      	bcc.n	8007fbc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10b      	bne.n	8007fd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2204      	movs	r2, #4
 8007fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc8:	f043 0201 	orr.w	r2, r3, #1
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e00e      	b.n	8007ff2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bf14      	ite	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	2300      	moveq	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	461a      	mov	r2, r3
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d1d6      	bne.n	8007f9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008004:	2300      	movs	r3, #0
 8008006:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e291      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 8087 	beq.w	800812e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008020:	4b96      	ldr	r3, [pc, #600]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 030c 	and.w	r3, r3, #12
 8008028:	2b04      	cmp	r3, #4
 800802a:	d00c      	beq.n	8008046 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800802c:	4b93      	ldr	r3, [pc, #588]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 030c 	and.w	r3, r3, #12
 8008034:	2b08      	cmp	r3, #8
 8008036:	d112      	bne.n	800805e <HAL_RCC_OscConfig+0x62>
 8008038:	4b90      	ldr	r3, [pc, #576]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008044:	d10b      	bne.n	800805e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008046:	4b8d      	ldr	r3, [pc, #564]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d06c      	beq.n	800812c <HAL_RCC_OscConfig+0x130>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d168      	bne.n	800812c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e26b      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008066:	d106      	bne.n	8008076 <HAL_RCC_OscConfig+0x7a>
 8008068:	4b84      	ldr	r3, [pc, #528]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a83      	ldr	r2, [pc, #524]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800806e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	e02e      	b.n	80080d4 <HAL_RCC_OscConfig+0xd8>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10c      	bne.n	8008098 <HAL_RCC_OscConfig+0x9c>
 800807e:	4b7f      	ldr	r3, [pc, #508]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a7e      	ldr	r2, [pc, #504]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	4b7c      	ldr	r3, [pc, #496]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a7b      	ldr	r2, [pc, #492]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	e01d      	b.n	80080d4 <HAL_RCC_OscConfig+0xd8>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080a0:	d10c      	bne.n	80080bc <HAL_RCC_OscConfig+0xc0>
 80080a2:	4b76      	ldr	r3, [pc, #472]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a75      	ldr	r2, [pc, #468]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	4b73      	ldr	r3, [pc, #460]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a72      	ldr	r2, [pc, #456]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e00b      	b.n	80080d4 <HAL_RCC_OscConfig+0xd8>
 80080bc:	4b6f      	ldr	r3, [pc, #444]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a6e      	ldr	r2, [pc, #440]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080c6:	6013      	str	r3, [r2, #0]
 80080c8:	4b6c      	ldr	r3, [pc, #432]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a6b      	ldr	r2, [pc, #428]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d013      	beq.n	8008104 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080dc:	f7fb f884 	bl	80031e8 <HAL_GetTick>
 80080e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080e4:	f7fb f880 	bl	80031e8 <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b64      	cmp	r3, #100	; 0x64
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e21f      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080f6:	4b61      	ldr	r3, [pc, #388]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0f0      	beq.n	80080e4 <HAL_RCC_OscConfig+0xe8>
 8008102:	e014      	b.n	800812e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fb f870 	bl	80031e8 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800810c:	f7fb f86c 	bl	80031e8 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b64      	cmp	r3, #100	; 0x64
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e20b      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800811e:	4b57      	ldr	r3, [pc, #348]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f0      	bne.n	800810c <HAL_RCC_OscConfig+0x110>
 800812a:	e000      	b.n	800812e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800812c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d069      	beq.n	800820e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800813a:	4b50      	ldr	r3, [pc, #320]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f003 030c 	and.w	r3, r3, #12
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008146:	4b4d      	ldr	r3, [pc, #308]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f003 030c 	and.w	r3, r3, #12
 800814e:	2b08      	cmp	r3, #8
 8008150:	d11c      	bne.n	800818c <HAL_RCC_OscConfig+0x190>
 8008152:	4b4a      	ldr	r3, [pc, #296]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d116      	bne.n	800818c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800815e:	4b47      	ldr	r3, [pc, #284]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d005      	beq.n	8008176 <HAL_RCC_OscConfig+0x17a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d001      	beq.n	8008176 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e1df      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008176:	4b41      	ldr	r3, [pc, #260]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	493d      	ldr	r1, [pc, #244]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008186:	4313      	orrs	r3, r2
 8008188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800818a:	e040      	b.n	800820e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d023      	beq.n	80081dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008194:	4b39      	ldr	r3, [pc, #228]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a38      	ldr	r2, [pc, #224]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a0:	f7fb f822 	bl	80031e8 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081a8:	f7fb f81e 	bl	80031e8 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e1bd      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ba:	4b30      	ldr	r3, [pc, #192]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0302 	and.w	r3, r3, #2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f0      	beq.n	80081a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081c6:	4b2d      	ldr	r3, [pc, #180]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	4929      	ldr	r1, [pc, #164]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	600b      	str	r3, [r1, #0]
 80081da:	e018      	b.n	800820e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081dc:	4b27      	ldr	r3, [pc, #156]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a26      	ldr	r2, [pc, #152]	; (800827c <HAL_RCC_OscConfig+0x280>)
 80081e2:	f023 0301 	bic.w	r3, r3, #1
 80081e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e8:	f7fa fffe 	bl	80031e8 <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081f0:	f7fa fffa 	bl	80031e8 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e199      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008202:	4b1e      	ldr	r3, [pc, #120]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1f0      	bne.n	80081f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d038      	beq.n	800828c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d019      	beq.n	8008256 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008222:	4b16      	ldr	r3, [pc, #88]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008226:	4a15      	ldr	r2, [pc, #84]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800822e:	f7fa ffdb 	bl	80031e8 <HAL_GetTick>
 8008232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008234:	e008      	b.n	8008248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008236:	f7fa ffd7 	bl	80031e8 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d901      	bls.n	8008248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e176      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008248:	4b0c      	ldr	r3, [pc, #48]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800824a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d0f0      	beq.n	8008236 <HAL_RCC_OscConfig+0x23a>
 8008254:	e01a      	b.n	800828c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <HAL_RCC_OscConfig+0x280>)
 8008258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800825a:	4a08      	ldr	r2, [pc, #32]	; (800827c <HAL_RCC_OscConfig+0x280>)
 800825c:	f023 0301 	bic.w	r3, r3, #1
 8008260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008262:	f7fa ffc1 	bl	80031e8 <HAL_GetTick>
 8008266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008268:	e00a      	b.n	8008280 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800826a:	f7fa ffbd 	bl	80031e8 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d903      	bls.n	8008280 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e15c      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
 800827c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008280:	4b91      	ldr	r3, [pc, #580]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1ee      	bne.n	800826a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 80a4 	beq.w	80083e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800829a:	4b8b      	ldr	r3, [pc, #556]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10d      	bne.n	80082c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80082a6:	4b88      	ldr	r3, [pc, #544]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	4a87      	ldr	r2, [pc, #540]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 80082ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b0:	6413      	str	r3, [r2, #64]	; 0x40
 80082b2:	4b85      	ldr	r3, [pc, #532]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 80082b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ba:	60bb      	str	r3, [r7, #8]
 80082bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082be:	2301      	movs	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082c2:	4b82      	ldr	r3, [pc, #520]	; (80084cc <HAL_RCC_OscConfig+0x4d0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d118      	bne.n	8008300 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80082ce:	4b7f      	ldr	r3, [pc, #508]	; (80084cc <HAL_RCC_OscConfig+0x4d0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a7e      	ldr	r2, [pc, #504]	; (80084cc <HAL_RCC_OscConfig+0x4d0>)
 80082d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082da:	f7fa ff85 	bl	80031e8 <HAL_GetTick>
 80082de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082e0:	e008      	b.n	80082f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082e2:	f7fa ff81 	bl	80031e8 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b64      	cmp	r3, #100	; 0x64
 80082ee:	d901      	bls.n	80082f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e120      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082f4:	4b75      	ldr	r3, [pc, #468]	; (80084cc <HAL_RCC_OscConfig+0x4d0>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0f0      	beq.n	80082e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d106      	bne.n	8008316 <HAL_RCC_OscConfig+0x31a>
 8008308:	4b6f      	ldr	r3, [pc, #444]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800830a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830c:	4a6e      	ldr	r2, [pc, #440]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800830e:	f043 0301 	orr.w	r3, r3, #1
 8008312:	6713      	str	r3, [r2, #112]	; 0x70
 8008314:	e02d      	b.n	8008372 <HAL_RCC_OscConfig+0x376>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10c      	bne.n	8008338 <HAL_RCC_OscConfig+0x33c>
 800831e:	4b6a      	ldr	r3, [pc, #424]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008322:	4a69      	ldr	r2, [pc, #420]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008324:	f023 0301 	bic.w	r3, r3, #1
 8008328:	6713      	str	r3, [r2, #112]	; 0x70
 800832a:	4b67      	ldr	r3, [pc, #412]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800832c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832e:	4a66      	ldr	r2, [pc, #408]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008330:	f023 0304 	bic.w	r3, r3, #4
 8008334:	6713      	str	r3, [r2, #112]	; 0x70
 8008336:	e01c      	b.n	8008372 <HAL_RCC_OscConfig+0x376>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	2b05      	cmp	r3, #5
 800833e:	d10c      	bne.n	800835a <HAL_RCC_OscConfig+0x35e>
 8008340:	4b61      	ldr	r3, [pc, #388]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008344:	4a60      	ldr	r2, [pc, #384]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008346:	f043 0304 	orr.w	r3, r3, #4
 800834a:	6713      	str	r3, [r2, #112]	; 0x70
 800834c:	4b5e      	ldr	r3, [pc, #376]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800834e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008350:	4a5d      	ldr	r2, [pc, #372]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	6713      	str	r3, [r2, #112]	; 0x70
 8008358:	e00b      	b.n	8008372 <HAL_RCC_OscConfig+0x376>
 800835a:	4b5b      	ldr	r3, [pc, #364]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	4a5a      	ldr	r2, [pc, #360]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	6713      	str	r3, [r2, #112]	; 0x70
 8008366:	4b58      	ldr	r3, [pc, #352]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	4a57      	ldr	r2, [pc, #348]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800836c:	f023 0304 	bic.w	r3, r3, #4
 8008370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d015      	beq.n	80083a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800837a:	f7fa ff35 	bl	80031e8 <HAL_GetTick>
 800837e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008380:	e00a      	b.n	8008398 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008382:	f7fa ff31 	bl	80031e8 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008390:	4293      	cmp	r3, r2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e0ce      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008398:	4b4b      	ldr	r3, [pc, #300]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800839a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d0ee      	beq.n	8008382 <HAL_RCC_OscConfig+0x386>
 80083a4:	e014      	b.n	80083d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a6:	f7fa ff1f 	bl	80031e8 <HAL_GetTick>
 80083aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083ac:	e00a      	b.n	80083c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ae:	f7fa ff1b 	bl	80031e8 <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083bc:	4293      	cmp	r3, r2
 80083be:	d901      	bls.n	80083c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e0b8      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083c4:	4b40      	ldr	r3, [pc, #256]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 80083c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1ee      	bne.n	80083ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d105      	bne.n	80083e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083d6:	4b3c      	ldr	r3, [pc, #240]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	4a3b      	ldr	r2, [pc, #236]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 80083dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 80a4 	beq.w	8008534 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80083ec:	4b36      	ldr	r3, [pc, #216]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 030c 	and.w	r3, r3, #12
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d06b      	beq.n	80084d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d149      	bne.n	8008494 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008400:	4b31      	ldr	r3, [pc, #196]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a30      	ldr	r2, [pc, #192]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800840a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800840c:	f7fa feec 	bl	80031e8 <HAL_GetTick>
 8008410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008412:	e008      	b.n	8008426 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008414:	f7fa fee8 	bl	80031e8 <HAL_GetTick>
 8008418:	4602      	mov	r2, r0
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	2b02      	cmp	r3, #2
 8008420:	d901      	bls.n	8008426 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e087      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008426:	4b28      	ldr	r3, [pc, #160]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1f0      	bne.n	8008414 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69da      	ldr	r2, [r3, #28]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	019b      	lsls	r3, r3, #6
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	085b      	lsrs	r3, r3, #1
 800844a:	3b01      	subs	r3, #1
 800844c:	041b      	lsls	r3, r3, #16
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	061b      	lsls	r3, r3, #24
 8008456:	4313      	orrs	r3, r2
 8008458:	4a1b      	ldr	r2, [pc, #108]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800845a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800845e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008460:	4b19      	ldr	r3, [pc, #100]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800846a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800846c:	f7fa febc 	bl	80031e8 <HAL_GetTick>
 8008470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008472:	e008      	b.n	8008486 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008474:	f7fa feb8 	bl	80031e8 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d901      	bls.n	8008486 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e057      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008486:	4b10      	ldr	r3, [pc, #64]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0f0      	beq.n	8008474 <HAL_RCC_OscConfig+0x478>
 8008492:	e04f      	b.n	8008534 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008494:	4b0c      	ldr	r3, [pc, #48]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a0b      	ldr	r2, [pc, #44]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 800849a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800849e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a0:	f7fa fea2 	bl	80031e8 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a8:	f7fa fe9e 	bl	80031e8 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e03d      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ba:	4b03      	ldr	r3, [pc, #12]	; (80084c8 <HAL_RCC_OscConfig+0x4cc>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f0      	bne.n	80084a8 <HAL_RCC_OscConfig+0x4ac>
 80084c6:	e035      	b.n	8008534 <HAL_RCC_OscConfig+0x538>
 80084c8:	40023800 	.word	0x40023800
 80084cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80084d0:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <HAL_RCC_OscConfig+0x544>)
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d028      	beq.n	8008530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d121      	bne.n	8008530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d11a      	bne.n	8008530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008500:	4013      	ands	r3, r2
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008506:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008508:	4293      	cmp	r3, r2
 800850a:	d111      	bne.n	8008530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	085b      	lsrs	r3, r3, #1
 8008518:	3b01      	subs	r3, #1
 800851a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800851c:	429a      	cmp	r2, r3
 800851e:	d107      	bne.n	8008530 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800852c:	429a      	cmp	r2, r3
 800852e:	d001      	beq.n	8008534 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	40023800 	.word	0x40023800

08008544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e0d0      	b.n	80086fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800855c:	4b6a      	ldr	r3, [pc, #424]	; (8008708 <HAL_RCC_ClockConfig+0x1c4>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	429a      	cmp	r2, r3
 8008568:	d910      	bls.n	800858c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800856a:	4b67      	ldr	r3, [pc, #412]	; (8008708 <HAL_RCC_ClockConfig+0x1c4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f023 020f 	bic.w	r2, r3, #15
 8008572:	4965      	ldr	r1, [pc, #404]	; (8008708 <HAL_RCC_ClockConfig+0x1c4>)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	4313      	orrs	r3, r2
 8008578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800857a:	4b63      	ldr	r3, [pc, #396]	; (8008708 <HAL_RCC_ClockConfig+0x1c4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d001      	beq.n	800858c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e0b8      	b.n	80086fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d020      	beq.n	80085da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085a4:	4b59      	ldr	r3, [pc, #356]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	4a58      	ldr	r2, [pc, #352]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80085aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085bc:	4b53      	ldr	r3, [pc, #332]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	4a52      	ldr	r2, [pc, #328]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80085c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085c8:	4b50      	ldr	r3, [pc, #320]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	494d      	ldr	r1, [pc, #308]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d040      	beq.n	8008668 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d107      	bne.n	80085fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ee:	4b47      	ldr	r3, [pc, #284]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d115      	bne.n	8008626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e07f      	b.n	80086fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2b02      	cmp	r3, #2
 8008604:	d107      	bne.n	8008616 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008606:	4b41      	ldr	r3, [pc, #260]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d109      	bne.n	8008626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e073      	b.n	80086fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008616:	4b3d      	ldr	r3, [pc, #244]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e06b      	b.n	80086fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008626:	4b39      	ldr	r3, [pc, #228]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f023 0203 	bic.w	r2, r3, #3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	4936      	ldr	r1, [pc, #216]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 8008634:	4313      	orrs	r3, r2
 8008636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008638:	f7fa fdd6 	bl	80031e8 <HAL_GetTick>
 800863c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800863e:	e00a      	b.n	8008656 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008640:	f7fa fdd2 	bl	80031e8 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	f241 3288 	movw	r2, #5000	; 0x1388
 800864e:	4293      	cmp	r3, r2
 8008650:	d901      	bls.n	8008656 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e053      	b.n	80086fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008656:	4b2d      	ldr	r3, [pc, #180]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 020c 	and.w	r2, r3, #12
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	429a      	cmp	r2, r3
 8008666:	d1eb      	bne.n	8008640 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008668:	4b27      	ldr	r3, [pc, #156]	; (8008708 <HAL_RCC_ClockConfig+0x1c4>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 030f 	and.w	r3, r3, #15
 8008670:	683a      	ldr	r2, [r7, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d210      	bcs.n	8008698 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008676:	4b24      	ldr	r3, [pc, #144]	; (8008708 <HAL_RCC_ClockConfig+0x1c4>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f023 020f 	bic.w	r2, r3, #15
 800867e:	4922      	ldr	r1, [pc, #136]	; (8008708 <HAL_RCC_ClockConfig+0x1c4>)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	4313      	orrs	r3, r2
 8008684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008686:	4b20      	ldr	r3, [pc, #128]	; (8008708 <HAL_RCC_ClockConfig+0x1c4>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 030f 	and.w	r3, r3, #15
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d001      	beq.n	8008698 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e032      	b.n	80086fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d008      	beq.n	80086b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086a4:	4b19      	ldr	r3, [pc, #100]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	4916      	ldr	r1, [pc, #88]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0308 	and.w	r3, r3, #8
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d009      	beq.n	80086d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	490e      	ldr	r1, [pc, #56]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80086d6:	f000 f821 	bl	800871c <HAL_RCC_GetSysClockFreq>
 80086da:	4602      	mov	r2, r0
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <HAL_RCC_ClockConfig+0x1c8>)
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	091b      	lsrs	r3, r3, #4
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	490a      	ldr	r1, [pc, #40]	; (8008710 <HAL_RCC_ClockConfig+0x1cc>)
 80086e8:	5ccb      	ldrb	r3, [r1, r3]
 80086ea:	fa22 f303 	lsr.w	r3, r2, r3
 80086ee:	4a09      	ldr	r2, [pc, #36]	; (8008714 <HAL_RCC_ClockConfig+0x1d0>)
 80086f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80086f2:	4b09      	ldr	r3, [pc, #36]	; (8008718 <HAL_RCC_ClockConfig+0x1d4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fa fa48 	bl	8002b8c <HAL_InitTick>

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40023c00 	.word	0x40023c00
 800870c:	40023800 	.word	0x40023800
 8008710:	08023430 	.word	0x08023430
 8008714:	20000000 	.word	0x20000000
 8008718:	20000004 	.word	0x20000004

0800871c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800871c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008720:	b090      	sub	sp, #64	; 0x40
 8008722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	637b      	str	r3, [r7, #52]	; 0x34
 8008728:	2300      	movs	r3, #0
 800872a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800872c:	2300      	movs	r3, #0
 800872e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008734:	4b59      	ldr	r3, [pc, #356]	; (800889c <HAL_RCC_GetSysClockFreq+0x180>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	f003 030c 	and.w	r3, r3, #12
 800873c:	2b08      	cmp	r3, #8
 800873e:	d00d      	beq.n	800875c <HAL_RCC_GetSysClockFreq+0x40>
 8008740:	2b08      	cmp	r3, #8
 8008742:	f200 80a1 	bhi.w	8008888 <HAL_RCC_GetSysClockFreq+0x16c>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <HAL_RCC_GetSysClockFreq+0x34>
 800874a:	2b04      	cmp	r3, #4
 800874c:	d003      	beq.n	8008756 <HAL_RCC_GetSysClockFreq+0x3a>
 800874e:	e09b      	b.n	8008888 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008750:	4b53      	ldr	r3, [pc, #332]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008752:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008754:	e09b      	b.n	800888e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008756:	4b53      	ldr	r3, [pc, #332]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008758:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800875a:	e098      	b.n	800888e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800875c:	4b4f      	ldr	r3, [pc, #316]	; (800889c <HAL_RCC_GetSysClockFreq+0x180>)
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008764:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008766:	4b4d      	ldr	r3, [pc, #308]	; (800889c <HAL_RCC_GetSysClockFreq+0x180>)
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d028      	beq.n	80087c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008772:	4b4a      	ldr	r3, [pc, #296]	; (800889c <HAL_RCC_GetSysClockFreq+0x180>)
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	099b      	lsrs	r3, r3, #6
 8008778:	2200      	movs	r2, #0
 800877a:	623b      	str	r3, [r7, #32]
 800877c:	627a      	str	r2, [r7, #36]	; 0x24
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008784:	2100      	movs	r1, #0
 8008786:	4b47      	ldr	r3, [pc, #284]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008788:	fb03 f201 	mul.w	r2, r3, r1
 800878c:	2300      	movs	r3, #0
 800878e:	fb00 f303 	mul.w	r3, r0, r3
 8008792:	4413      	add	r3, r2
 8008794:	4a43      	ldr	r2, [pc, #268]	; (80088a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008796:	fba0 1202 	umull	r1, r2, r0, r2
 800879a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800879c:	460a      	mov	r2, r1
 800879e:	62ba      	str	r2, [r7, #40]	; 0x28
 80087a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087a2:	4413      	add	r3, r2
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a8:	2200      	movs	r2, #0
 80087aa:	61bb      	str	r3, [r7, #24]
 80087ac:	61fa      	str	r2, [r7, #28]
 80087ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087b6:	f7f7 fd7b 	bl	80002b0 <__aeabi_uldivmod>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4613      	mov	r3, r2
 80087c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087c2:	e053      	b.n	800886c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087c4:	4b35      	ldr	r3, [pc, #212]	; (800889c <HAL_RCC_GetSysClockFreq+0x180>)
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	099b      	lsrs	r3, r3, #6
 80087ca:	2200      	movs	r2, #0
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	617a      	str	r2, [r7, #20]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80087d6:	f04f 0b00 	mov.w	fp, #0
 80087da:	4652      	mov	r2, sl
 80087dc:	465b      	mov	r3, fp
 80087de:	f04f 0000 	mov.w	r0, #0
 80087e2:	f04f 0100 	mov.w	r1, #0
 80087e6:	0159      	lsls	r1, r3, #5
 80087e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087ec:	0150      	lsls	r0, r2, #5
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	ebb2 080a 	subs.w	r8, r2, sl
 80087f6:	eb63 090b 	sbc.w	r9, r3, fp
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	f04f 0300 	mov.w	r3, #0
 8008802:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008806:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800880a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800880e:	ebb2 0408 	subs.w	r4, r2, r8
 8008812:	eb63 0509 	sbc.w	r5, r3, r9
 8008816:	f04f 0200 	mov.w	r2, #0
 800881a:	f04f 0300 	mov.w	r3, #0
 800881e:	00eb      	lsls	r3, r5, #3
 8008820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008824:	00e2      	lsls	r2, r4, #3
 8008826:	4614      	mov	r4, r2
 8008828:	461d      	mov	r5, r3
 800882a:	eb14 030a 	adds.w	r3, r4, sl
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	eb45 030b 	adc.w	r3, r5, fp
 8008834:	607b      	str	r3, [r7, #4]
 8008836:	f04f 0200 	mov.w	r2, #0
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008842:	4629      	mov	r1, r5
 8008844:	028b      	lsls	r3, r1, #10
 8008846:	4621      	mov	r1, r4
 8008848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800884c:	4621      	mov	r1, r4
 800884e:	028a      	lsls	r2, r1, #10
 8008850:	4610      	mov	r0, r2
 8008852:	4619      	mov	r1, r3
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	2200      	movs	r2, #0
 8008858:	60bb      	str	r3, [r7, #8]
 800885a:	60fa      	str	r2, [r7, #12]
 800885c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008860:	f7f7 fd26 	bl	80002b0 <__aeabi_uldivmod>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4613      	mov	r3, r2
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800886c:	4b0b      	ldr	r3, [pc, #44]	; (800889c <HAL_RCC_GetSysClockFreq+0x180>)
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	0c1b      	lsrs	r3, r3, #16
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	3301      	adds	r3, #1
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800887c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	fbb2 f3f3 	udiv	r3, r2, r3
 8008884:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008886:	e002      	b.n	800888e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008888:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800888a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800888c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008890:	4618      	mov	r0, r3
 8008892:	3740      	adds	r7, #64	; 0x40
 8008894:	46bd      	mov	sp, r7
 8008896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800889a:	bf00      	nop
 800889c:	40023800 	.word	0x40023800
 80088a0:	00f42400 	.word	0x00f42400
 80088a4:	017d7840 	.word	0x017d7840

080088a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088a8:	b480      	push	{r7}
 80088aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088ac:	4b03      	ldr	r3, [pc, #12]	; (80088bc <HAL_RCC_GetHCLKFreq+0x14>)
 80088ae:	681b      	ldr	r3, [r3, #0]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000000 	.word	0x20000000

080088c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088c4:	f7ff fff0 	bl	80088a8 <HAL_RCC_GetHCLKFreq>
 80088c8:	4602      	mov	r2, r0
 80088ca:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	0a9b      	lsrs	r3, r3, #10
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	4903      	ldr	r1, [pc, #12]	; (80088e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80088d6:	5ccb      	ldrb	r3, [r1, r3]
 80088d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088dc:	4618      	mov	r0, r3
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	40023800 	.word	0x40023800
 80088e4:	08023440 	.word	0x08023440

080088e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80088ec:	f7ff ffdc 	bl	80088a8 <HAL_RCC_GetHCLKFreq>
 80088f0:	4602      	mov	r2, r0
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	0b5b      	lsrs	r3, r3, #13
 80088f8:	f003 0307 	and.w	r3, r3, #7
 80088fc:	4903      	ldr	r1, [pc, #12]	; (800890c <HAL_RCC_GetPCLK2Freq+0x24>)
 80088fe:	5ccb      	ldrb	r3, [r1, r3]
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008904:	4618      	mov	r0, r3
 8008906:	bd80      	pop	{r7, pc}
 8008908:	40023800 	.word	0x40023800
 800890c:	08023440 	.word	0x08023440

08008910 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	220f      	movs	r2, #15
 800891e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008920:	4b12      	ldr	r3, [pc, #72]	; (800896c <HAL_RCC_GetClockConfig+0x5c>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f003 0203 	and.w	r2, r3, #3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800892c:	4b0f      	ldr	r3, [pc, #60]	; (800896c <HAL_RCC_GetClockConfig+0x5c>)
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008938:	4b0c      	ldr	r3, [pc, #48]	; (800896c <HAL_RCC_GetClockConfig+0x5c>)
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <HAL_RCC_GetClockConfig+0x5c>)
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	08db      	lsrs	r3, r3, #3
 800894a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <HAL_RCC_GetClockConfig+0x60>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 020f 	and.w	r2, r3, #15
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	601a      	str	r2, [r3, #0]
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	40023800 	.word	0x40023800
 8008970:	40023c00 	.word	0x40023c00

08008974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d012      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800899c:	4b69      	ldr	r3, [pc, #420]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	4a68      	ldr	r2, [pc, #416]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089a6:	6093      	str	r3, [r2, #8]
 80089a8:	4b66      	ldr	r3, [pc, #408]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b0:	4964      	ldr	r1, [pc, #400]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80089be:	2301      	movs	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d017      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089ce:	4b5d      	ldr	r3, [pc, #372]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089dc:	4959      	ldr	r1, [pc, #356]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ec:	d101      	bne.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80089ee:	2301      	movs	r3, #1
 80089f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80089fa:	2301      	movs	r3, #1
 80089fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d017      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a0a:	4b4e      	ldr	r3, [pc, #312]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	494a      	ldr	r1, [pc, #296]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a28:	d101      	bne.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008a36:	2301      	movs	r3, #1
 8008a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008a46:	2301      	movs	r3, #1
 8008a48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 0320 	and.w	r3, r3, #32
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	f000 808b 	beq.w	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a58:	4b3a      	ldr	r3, [pc, #232]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	4a39      	ldr	r2, [pc, #228]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a62:	6413      	str	r3, [r2, #64]	; 0x40
 8008a64:	4b37      	ldr	r3, [pc, #220]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	60bb      	str	r3, [r7, #8]
 8008a6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008a70:	4b35      	ldr	r3, [pc, #212]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a34      	ldr	r2, [pc, #208]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a7c:	f7fa fbb4 	bl	80031e8 <HAL_GetTick>
 8008a80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008a82:	e008      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a84:	f7fa fbb0 	bl	80031e8 <HAL_GetTick>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	2b64      	cmp	r3, #100	; 0x64
 8008a90:	d901      	bls.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e357      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008a96:	4b2c      	ldr	r3, [pc, #176]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0f0      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008aa2:	4b28      	ldr	r3, [pc, #160]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aaa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d035      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d02e      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ac0:	4b20      	ldr	r3, [pc, #128]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008aca:	4b1e      	ldr	r3, [pc, #120]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	4a1d      	ldr	r2, [pc, #116]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ad4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ad6:	4b1b      	ldr	r3, [pc, #108]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ada:	4a1a      	ldr	r2, [pc, #104]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008ae2:	4a18      	ldr	r2, [pc, #96]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ae8:	4b16      	ldr	r3, [pc, #88]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d114      	bne.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af4:	f7fa fb78 	bl	80031e8 <HAL_GetTick>
 8008af8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008afa:	e00a      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008afc:	f7fa fb74 	bl	80031e8 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d901      	bls.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e319      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b12:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d0ee      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b2a:	d111      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b38:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008b3a:	400b      	ands	r3, r1
 8008b3c:	4901      	ldr	r1, [pc, #4]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	608b      	str	r3, [r1, #8]
 8008b42:	e00b      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008b44:	40023800 	.word	0x40023800
 8008b48:	40007000 	.word	0x40007000
 8008b4c:	0ffffcff 	.word	0x0ffffcff
 8008b50:	4baa      	ldr	r3, [pc, #680]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	4aa9      	ldr	r2, [pc, #676]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008b5a:	6093      	str	r3, [r2, #8]
 8008b5c:	4ba7      	ldr	r3, [pc, #668]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b68:	49a4      	ldr	r1, [pc, #656]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0310 	and.w	r3, r3, #16
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d010      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b7a:	4ba0      	ldr	r3, [pc, #640]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b80:	4a9e      	ldr	r2, [pc, #632]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008b8a:	4b9c      	ldr	r3, [pc, #624]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	4999      	ldr	r1, [pc, #612]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ba8:	4b94      	ldr	r3, [pc, #592]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb6:	4991      	ldr	r1, [pc, #580]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bca:	4b8c      	ldr	r3, [pc, #560]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bd8:	4988      	ldr	r1, [pc, #544]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bec:	4b83      	ldr	r3, [pc, #524]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfa:	4980      	ldr	r1, [pc, #512]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c0e:	4b7b      	ldr	r3, [pc, #492]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c1c:	4977      	ldr	r1, [pc, #476]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00a      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c30:	4b72      	ldr	r3, [pc, #456]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c36:	f023 0203 	bic.w	r2, r3, #3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3e:	496f      	ldr	r1, [pc, #444]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c52:	4b6a      	ldr	r3, [pc, #424]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c58:	f023 020c 	bic.w	r2, r3, #12
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c60:	4966      	ldr	r1, [pc, #408]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00a      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c74:	4b61      	ldr	r3, [pc, #388]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c82:	495e      	ldr	r1, [pc, #376]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c84:	4313      	orrs	r3, r2
 8008c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008c96:	4b59      	ldr	r3, [pc, #356]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca4:	4955      	ldr	r1, [pc, #340]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00a      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008cb8:	4b50      	ldr	r3, [pc, #320]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc6:	494d      	ldr	r1, [pc, #308]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00a      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008cda:	4b48      	ldr	r3, [pc, #288]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce8:	4944      	ldr	r1, [pc, #272]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00a      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008cfc:	4b3f      	ldr	r3, [pc, #252]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d0a:	493c      	ldr	r1, [pc, #240]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00a      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008d1e:	4b37      	ldr	r3, [pc, #220]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d2c:	4933      	ldr	r1, [pc, #204]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00a      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d40:	4b2e      	ldr	r3, [pc, #184]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d4e:	492b      	ldr	r1, [pc, #172]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d011      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008d62:	4b26      	ldr	r3, [pc, #152]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d70:	4922      	ldr	r1, [pc, #136]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d80:	d101      	bne.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008d82:	2301      	movs	r3, #1
 8008d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 0308 	and.w	r3, r3, #8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008d92:	2301      	movs	r3, #1
 8008d94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00a      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008da2:	4b16      	ldr	r3, [pc, #88]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db0:	4912      	ldr	r1, [pc, #72]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00b      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008dc4:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dd4:	4909      	ldr	r1, [pc, #36]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d006      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80d9 	beq.w	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008df0:	4b02      	ldr	r3, [pc, #8]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a01      	ldr	r2, [pc, #4]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008df6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dfa:	e001      	b.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e02:	f7fa f9f1 	bl	80031e8 <HAL_GetTick>
 8008e06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e08:	e008      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e0a:	f7fa f9ed 	bl	80031e8 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	2b64      	cmp	r3, #100	; 0x64
 8008e16:	d901      	bls.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e18:	2303      	movs	r3, #3
 8008e1a:	e194      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e1c:	4b6c      	ldr	r3, [pc, #432]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1f0      	bne.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d021      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11d      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008e3c:	4b64      	ldr	r3, [pc, #400]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e42:	0c1b      	lsrs	r3, r3, #16
 8008e44:	f003 0303 	and.w	r3, r3, #3
 8008e48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008e4a:	4b61      	ldr	r3, [pc, #388]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e50:	0e1b      	lsrs	r3, r3, #24
 8008e52:	f003 030f 	and.w	r3, r3, #15
 8008e56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	019a      	lsls	r2, r3, #6
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	041b      	lsls	r3, r3, #16
 8008e62:	431a      	orrs	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	061b      	lsls	r3, r3, #24
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	071b      	lsls	r3, r3, #28
 8008e70:	4957      	ldr	r1, [pc, #348]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d004      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e8c:	d00a      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d02e      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ea2:	d129      	bne.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008ea4:	4b4a      	ldr	r3, [pc, #296]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eaa:	0c1b      	lsrs	r3, r3, #16
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008eb2:	4b47      	ldr	r3, [pc, #284]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eb8:	0f1b      	lsrs	r3, r3, #28
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	019a      	lsls	r2, r3, #6
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	041b      	lsls	r3, r3, #16
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	061b      	lsls	r3, r3, #24
 8008ed2:	431a      	orrs	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	071b      	lsls	r3, r3, #28
 8008ed8:	493d      	ldr	r1, [pc, #244]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008ee0:	4b3b      	ldr	r3, [pc, #236]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ee6:	f023 021f 	bic.w	r2, r3, #31
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	4937      	ldr	r1, [pc, #220]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d01d      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f04:	4b32      	ldr	r3, [pc, #200]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f0a:	0e1b      	lsrs	r3, r3, #24
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f12:	4b2f      	ldr	r3, [pc, #188]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f18:	0f1b      	lsrs	r3, r3, #28
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	019a      	lsls	r2, r3, #6
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	041b      	lsls	r3, r3, #16
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	061b      	lsls	r3, r3, #24
 8008f32:	431a      	orrs	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	071b      	lsls	r3, r3, #28
 8008f38:	4925      	ldr	r1, [pc, #148]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d011      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	019a      	lsls	r2, r3, #6
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	041b      	lsls	r3, r3, #16
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	061b      	lsls	r3, r3, #24
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	071b      	lsls	r3, r3, #28
 8008f68:	4919      	ldr	r1, [pc, #100]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008f70:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a16      	ldr	r2, [pc, #88]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f7c:	f7fa f934 	bl	80031e8 <HAL_GetTick>
 8008f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f82:	e008      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008f84:	f7fa f930 	bl	80031e8 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b64      	cmp	r3, #100	; 0x64
 8008f90:	d901      	bls.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e0d7      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008f96:	4b0e      	ldr	r3, [pc, #56]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0f0      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	f040 80cd 	bne.w	8009144 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008faa:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a08      	ldr	r2, [pc, #32]	; (8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb6:	f7fa f917 	bl	80031e8 <HAL_GetTick>
 8008fba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008fbc:	e00a      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008fbe:	f7fa f913 	bl	80031e8 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b64      	cmp	r3, #100	; 0x64
 8008fca:	d903      	bls.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e0ba      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008fd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008fd4:	4b5e      	ldr	r3, [pc, #376]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe0:	d0ed      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d02e      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d12a      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800900a:	4b51      	ldr	r3, [pc, #324]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800900c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009010:	0c1b      	lsrs	r3, r3, #16
 8009012:	f003 0303 	and.w	r3, r3, #3
 8009016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009018:	4b4d      	ldr	r3, [pc, #308]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800901a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901e:	0f1b      	lsrs	r3, r3, #28
 8009020:	f003 0307 	and.w	r3, r3, #7
 8009024:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695b      	ldr	r3, [r3, #20]
 800902a:	019a      	lsls	r2, r3, #6
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	041b      	lsls	r3, r3, #16
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	061b      	lsls	r3, r3, #24
 8009038:	431a      	orrs	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	071b      	lsls	r3, r3, #28
 800903e:	4944      	ldr	r1, [pc, #272]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009040:	4313      	orrs	r3, r2
 8009042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009046:	4b42      	ldr	r3, [pc, #264]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800904c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	3b01      	subs	r3, #1
 8009056:	021b      	lsls	r3, r3, #8
 8009058:	493d      	ldr	r1, [pc, #244]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800905a:	4313      	orrs	r3, r2
 800905c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d022      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009074:	d11d      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009076:	4b36      	ldr	r3, [pc, #216]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907c:	0e1b      	lsrs	r3, r3, #24
 800907e:	f003 030f 	and.w	r3, r3, #15
 8009082:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009084:	4b32      	ldr	r3, [pc, #200]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908a:	0f1b      	lsrs	r3, r3, #28
 800908c:	f003 0307 	and.w	r3, r3, #7
 8009090:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	019a      	lsls	r2, r3, #6
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	041b      	lsls	r3, r3, #16
 800909e:	431a      	orrs	r2, r3
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	061b      	lsls	r3, r3, #24
 80090a4:	431a      	orrs	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	071b      	lsls	r3, r3, #28
 80090aa:	4929      	ldr	r1, [pc, #164]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0308 	and.w	r3, r3, #8
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d028      	beq.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80090be:	4b24      	ldr	r3, [pc, #144]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c4:	0e1b      	lsrs	r3, r3, #24
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80090cc:	4b20      	ldr	r3, [pc, #128]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	f003 0303 	and.w	r3, r3, #3
 80090d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	019a      	lsls	r2, r3, #6
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	041b      	lsls	r3, r3, #16
 80090e4:	431a      	orrs	r2, r3
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	061b      	lsls	r3, r3, #24
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	071b      	lsls	r3, r3, #28
 80090f2:	4917      	ldr	r1, [pc, #92]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80090fa:	4b15      	ldr	r3, [pc, #84]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	4911      	ldr	r1, [pc, #68]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009110:	4b0f      	ldr	r3, [pc, #60]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a0e      	ldr	r2, [pc, #56]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800911a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911c:	f7fa f864 	bl	80031e8 <HAL_GetTick>
 8009120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009122:	e008      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009124:	f7fa f860 	bl	80031e8 <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	2b64      	cmp	r3, #100	; 0x64
 8009130:	d901      	bls.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e007      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009136:	4b06      	ldr	r3, [pc, #24]	; (8009150 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800913e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009142:	d1ef      	bne.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3720      	adds	r7, #32
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	40023800 	.word	0x40023800

08009154 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009168:	2300      	movs	r3, #0
 800916a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009172:	f040 808c 	bne.w	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009176:	4b95      	ldr	r3, [pc, #596]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800917c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009184:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800918c:	d07c      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009194:	d87d      	bhi.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091a2:	d039      	beq.n	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80091a4:	e075      	b.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80091a6:	4b89      	ldr	r3, [pc, #548]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d108      	bne.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80091b2:	4b86      	ldr	r3, [pc, #536]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091ba:	4a85      	ldr	r2, [pc, #532]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80091bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	e007      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80091c4:	4b81      	ldr	r3, [pc, #516]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091cc:	4a81      	ldr	r2, [pc, #516]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80091ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80091d4:	4b7d      	ldr	r3, [pc, #500]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091da:	0e1b      	lsrs	r3, r3, #24
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80091e2:	4b7a      	ldr	r3, [pc, #488]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e8:	099b      	lsrs	r3, r3, #6
 80091ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	fb03 f202 	mul.w	r2, r3, r2
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80091fc:	4b73      	ldr	r3, [pc, #460]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	3301      	adds	r3, #1
 800920a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	fbb2 f3f3 	udiv	r3, r2, r3
 8009214:	617b      	str	r3, [r7, #20]
        break;
 8009216:	e03d      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009218:	4b6c      	ldr	r3, [pc, #432]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d108      	bne.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009224:	4b69      	ldr	r3, [pc, #420]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009226:	685b      	ldr	r3, [r3, #4]
 8009228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800922c:	4a68      	ldr	r2, [pc, #416]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800922e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	e007      	b.n	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009236:	4b65      	ldr	r3, [pc, #404]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800923e:	4a65      	ldr	r2, [pc, #404]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009240:	fbb2 f3f3 	udiv	r3, r2, r3
 8009244:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009246:	4b61      	ldr	r3, [pc, #388]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800924c:	0e1b      	lsrs	r3, r3, #24
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009254:	4b5d      	ldr	r3, [pc, #372]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800925a:	099b      	lsrs	r3, r3, #6
 800925c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	fb03 f202 	mul.w	r2, r3, r2
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	fbb2 f3f3 	udiv	r3, r2, r3
 800926c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800926e:	4b57      	ldr	r3, [pc, #348]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	3301      	adds	r3, #1
 800927a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	fbb2 f3f3 	udiv	r3, r2, r3
 8009284:	617b      	str	r3, [r7, #20]
        break;
 8009286:	e005      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009288:	4b53      	ldr	r3, [pc, #332]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800928a:	617b      	str	r3, [r7, #20]
        break;
 800928c:	e002      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800928e:	bf00      	nop
 8009290:	e000      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8009292:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929a:	f040 808c 	bne.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800929e:	4b4b      	ldr	r3, [pc, #300]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80092ac:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092b4:	d07c      	beq.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092bc:	d87d      	bhi.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092ca:	d039      	beq.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80092cc:	e075      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80092ce:	4b3f      	ldr	r3, [pc, #252]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d108      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80092da:	4b3c      	ldr	r3, [pc, #240]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092e2:	4a3b      	ldr	r2, [pc, #236]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80092e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	e007      	b.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80092ec:	4b37      	ldr	r3, [pc, #220]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f4:	4a37      	ldr	r2, [pc, #220]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80092f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fa:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80092fc:	4b33      	ldr	r3, [pc, #204]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009302:	0e1b      	lsrs	r3, r3, #24
 8009304:	f003 030f 	and.w	r3, r3, #15
 8009308:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800930a:	4b30      	ldr	r3, [pc, #192]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009310:	099b      	lsrs	r3, r3, #6
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	fb03 f202 	mul.w	r2, r3, r2
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009322:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009324:	4b29      	ldr	r3, [pc, #164]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932a:	0a1b      	lsrs	r3, r3, #8
 800932c:	f003 031f 	and.w	r3, r3, #31
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	fbb2 f3f3 	udiv	r3, r2, r3
 800933c:	617b      	str	r3, [r7, #20]
        break;
 800933e:	e03d      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009340:	4b22      	ldr	r3, [pc, #136]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d108      	bne.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800934c:	4b1f      	ldr	r3, [pc, #124]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009354:	4a1e      	ldr	r2, [pc, #120]	; (80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009356:	fbb2 f3f3 	udiv	r3, r2, r3
 800935a:	613b      	str	r3, [r7, #16]
 800935c:	e007      	b.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800935e:	4b1b      	ldr	r3, [pc, #108]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009366:	4a1b      	ldr	r2, [pc, #108]	; (80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009368:	fbb2 f3f3 	udiv	r3, r2, r3
 800936c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800936e:	4b17      	ldr	r3, [pc, #92]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009374:	0e1b      	lsrs	r3, r3, #24
 8009376:	f003 030f 	and.w	r3, r3, #15
 800937a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800937c:	4b13      	ldr	r3, [pc, #76]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800937e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009382:	099b      	lsrs	r3, r3, #6
 8009384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	fb03 f202 	mul.w	r2, r3, r2
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	fbb2 f3f3 	udiv	r3, r2, r3
 8009394:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009396:	4b0d      	ldr	r3, [pc, #52]	; (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800939c:	f003 031f 	and.w	r3, r3, #31
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ac:	617b      	str	r3, [r7, #20]
        break;
 80093ae:	e005      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80093b0:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80093b2:	617b      	str	r3, [r7, #20]
        break;
 80093b4:	e002      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80093b6:	bf00      	nop
 80093b8:	e000      	b.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80093ba:	bf00      	nop

  return frequency;
 80093bc:	697b      	ldr	r3, [r7, #20]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	371c      	adds	r7, #28
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	40023800 	.word	0x40023800
 80093d0:	00f42400 	.word	0x00f42400
 80093d4:	017d7840 	.word	0x017d7840
 80093d8:	00bb8000 	.word	0x00bb8000

080093dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e071      	b.n	80094d6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7f5b      	ldrb	r3, [r3, #29]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d105      	bne.n	8009408 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7f8 ff44 	bl	8002290 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2202      	movs	r2, #2
 800940c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f003 0310 	and.w	r3, r3, #16
 8009418:	2b10      	cmp	r3, #16
 800941a:	d053      	beq.n	80094c4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	22ca      	movs	r2, #202	; 0xca
 8009422:	625a      	str	r2, [r3, #36]	; 0x24
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2253      	movs	r2, #83	; 0x53
 800942a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fac9 	bl	80099c4 <RTC_EnterInitMode>
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d12a      	bne.n	8009492 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	6899      	ldr	r1, [r3, #8]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	4b26      	ldr	r3, [pc, #152]	; (80094e0 <HAL_RTC_Init+0x104>)
 8009448:	400b      	ands	r3, r1
 800944a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	6899      	ldr	r1, [r3, #8]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	431a      	orrs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	431a      	orrs	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	68d2      	ldr	r2, [r2, #12]
 8009472:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6919      	ldr	r1, [r3, #16]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	041a      	lsls	r2, r3, #16
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fad2 	bl	8009a32 <RTC_ExitInitMode>
 800948e:	4603      	mov	r3, r0
 8009490:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d110      	bne.n	80094ba <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f022 0208 	bic.w	r2, r2, #8
 80094a6:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	22ff      	movs	r2, #255	; 0xff
 80094c0:	625a      	str	r2, [r3, #36]	; 0x24
 80094c2:	e001      	b.n	80094c8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d102      	bne.n	80094d4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	ff8fffbf 	.word	0xff8fffbf

080094e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b087      	sub	sp, #28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	7f1b      	ldrb	r3, [r3, #28]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d101      	bne.n	8009500 <HAL_RTC_SetTime+0x1c>
 80094fc:	2302      	movs	r3, #2
 80094fe:	e085      	b.n	800960c <HAL_RTC_SetTime+0x128>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2201      	movs	r2, #1
 8009504:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2202      	movs	r2, #2
 800950a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d126      	bne.n	8009560 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2200      	movs	r2, #0
 8009524:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f000 faa6 	bl	8009a7c <RTC_ByteToBcd2>
 8009530:	4603      	mov	r3, r0
 8009532:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	785b      	ldrb	r3, [r3, #1]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fa9f 	bl	8009a7c <RTC_ByteToBcd2>
 800953e:	4603      	mov	r3, r0
 8009540:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009542:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	789b      	ldrb	r3, [r3, #2]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fa97 	bl	8009a7c <RTC_ByteToBcd2>
 800954e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009550:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	78db      	ldrb	r3, [r3, #3]
 8009558:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800955a:	4313      	orrs	r3, r2
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	e018      	b.n	8009592 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2200      	movs	r2, #0
 8009572:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	785b      	ldrb	r3, [r3, #1]
 800957e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009580:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009586:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	78db      	ldrb	r3, [r3, #3]
 800958c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800958e:	4313      	orrs	r3, r2
 8009590:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	22ca      	movs	r2, #202	; 0xca
 8009598:	625a      	str	r2, [r3, #36]	; 0x24
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2253      	movs	r2, #83	; 0x53
 80095a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f000 fa0e 	bl	80099c4 <RTC_EnterInitMode>
 80095a8:	4603      	mov	r3, r0
 80095aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80095ac:	7cfb      	ldrb	r3, [r7, #19]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d11e      	bne.n	80095f0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	6979      	ldr	r1, [r7, #20]
 80095b8:	4b16      	ldr	r3, [pc, #88]	; (8009614 <HAL_RTC_SetTime+0x130>)
 80095ba:	400b      	ands	r3, r1
 80095bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6899      	ldr	r1, [r3, #8]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	68da      	ldr	r2, [r3, #12]
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	431a      	orrs	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 fa23 	bl	8009a32 <RTC_ExitInitMode>
 80095ec:	4603      	mov	r3, r0
 80095ee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80095f0:	7cfb      	ldrb	r3, [r7, #19]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d102      	bne.n	80095fc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	22ff      	movs	r2, #255	; 0xff
 8009602:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	771a      	strb	r2, [r3, #28]

  return status;
 800960a:	7cfb      	ldrb	r3, [r7, #19]
}
 800960c:	4618      	mov	r0, r3
 800960e:	371c      	adds	r7, #28
 8009610:	46bd      	mov	sp, r7
 8009612:	bd90      	pop	{r4, r7, pc}
 8009614:	007f7f7f 	.word	0x007f7f7f

08009618 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009618:	b590      	push	{r4, r7, lr}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	7f1b      	ldrb	r3, [r3, #28]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_RTC_SetDate+0x1c>
 8009630:	2302      	movs	r3, #2
 8009632:	e06f      	b.n	8009714 <HAL_RTC_SetDate+0xfc>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2202      	movs	r2, #2
 800963e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10e      	bne.n	8009664 <HAL_RTC_SetDate+0x4c>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	785b      	ldrb	r3, [r3, #1]
 800964a:	f003 0310 	and.w	r3, r3, #16
 800964e:	2b00      	cmp	r3, #0
 8009650:	d008      	beq.n	8009664 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	f023 0310 	bic.w	r3, r3, #16
 800965a:	b2db      	uxtb	r3, r3
 800965c:	330a      	adds	r3, #10
 800965e:	b2da      	uxtb	r2, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d11c      	bne.n	80096a4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	78db      	ldrb	r3, [r3, #3]
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fa04 	bl	8009a7c <RTC_ByteToBcd2>
 8009674:	4603      	mov	r3, r0
 8009676:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	785b      	ldrb	r3, [r3, #1]
 800967c:	4618      	mov	r0, r3
 800967e:	f000 f9fd 	bl	8009a7c <RTC_ByteToBcd2>
 8009682:	4603      	mov	r3, r0
 8009684:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009686:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	789b      	ldrb	r3, [r3, #2]
 800968c:	4618      	mov	r0, r3
 800968e:	f000 f9f5 	bl	8009a7c <RTC_ByteToBcd2>
 8009692:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009694:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800969e:	4313      	orrs	r3, r2
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	e00e      	b.n	80096c2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	78db      	ldrb	r3, [r3, #3]
 80096a8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80096b0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80096b6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80096be:	4313      	orrs	r3, r2
 80096c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	22ca      	movs	r2, #202	; 0xca
 80096c8:	625a      	str	r2, [r3, #36]	; 0x24
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2253      	movs	r2, #83	; 0x53
 80096d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 f976 	bl	80099c4 <RTC_EnterInitMode>
 80096d8:	4603      	mov	r3, r0
 80096da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80096dc:	7cfb      	ldrb	r3, [r7, #19]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10a      	bne.n	80096f8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	6979      	ldr	r1, [r7, #20]
 80096e8:	4b0c      	ldr	r3, [pc, #48]	; (800971c <HAL_RTC_SetDate+0x104>)
 80096ea:	400b      	ands	r3, r1
 80096ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 f99f 	bl	8009a32 <RTC_ExitInitMode>
 80096f4:	4603      	mov	r3, r0
 80096f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80096f8:	7cfb      	ldrb	r3, [r7, #19]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d102      	bne.n	8009704 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	22ff      	movs	r2, #255	; 0xff
 800970a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	771a      	strb	r2, [r3, #28]

  return status;
 8009712:	7cfb      	ldrb	r3, [r7, #19]
}
 8009714:	4618      	mov	r0, r3
 8009716:	371c      	adds	r7, #28
 8009718:	46bd      	mov	sp, r7
 800971a:	bd90      	pop	{r4, r7, pc}
 800971c:	00ffff3f 	.word	0x00ffff3f

08009720 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009720:	b590      	push	{r4, r7, lr}
 8009722:	b089      	sub	sp, #36	; 0x24
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800972c:	2300      	movs	r3, #0
 800972e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009730:	2300      	movs	r3, #0
 8009732:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	7f1b      	ldrb	r3, [r3, #28]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d101      	bne.n	8009744 <HAL_RTC_SetAlarm+0x24>
 8009740:	2302      	movs	r3, #2
 8009742:	e113      	b.n	800996c <HAL_RTC_SetAlarm+0x24c>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2201      	movs	r2, #1
 8009748:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2202      	movs	r2, #2
 800974e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d137      	bne.n	80097c6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009760:	2b00      	cmp	r3, #0
 8009762:	d102      	bne.n	800976a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2200      	movs	r2, #0
 8009768:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	4618      	mov	r0, r3
 8009770:	f000 f984 	bl	8009a7c <RTC_ByteToBcd2>
 8009774:	4603      	mov	r3, r0
 8009776:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	785b      	ldrb	r3, [r3, #1]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f97d 	bl	8009a7c <RTC_ByteToBcd2>
 8009782:	4603      	mov	r3, r0
 8009784:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009786:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	789b      	ldrb	r3, [r3, #2]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 f975 	bl	8009a7c <RTC_ByteToBcd2>
 8009792:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009794:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	78db      	ldrb	r3, [r3, #3]
 800979c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800979e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 f967 	bl	8009a7c <RTC_ByteToBcd2>
 80097ae:	4603      	mov	r3, r0
 80097b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80097b2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80097ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80097c0:	4313      	orrs	r3, r2
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	e023      	b.n	800980e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2200      	movs	r2, #0
 80097d8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80097e6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80097ec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	78db      	ldrb	r3, [r3, #3]
 80097f2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80097f4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80097fe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009804:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800980a:	4313      	orrs	r3, r2
 800980c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009816:	4313      	orrs	r3, r2
 8009818:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	22ca      	movs	r2, #202	; 0xca
 8009820:	625a      	str	r2, [r3, #36]	; 0x24
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2253      	movs	r2, #83	; 0x53
 8009828:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009832:	d148      	bne.n	80098c6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	689a      	ldr	r2, [r3, #8]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009842:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689a      	ldr	r2, [r3, #8]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009852:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	b2da      	uxtb	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009864:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009866:	f7f9 fcbf 	bl	80031e8 <HAL_GetTick>
 800986a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800986c:	e013      	b.n	8009896 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800986e:	f7f9 fcbb 	bl	80031e8 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800987c:	d90b      	bls.n	8009896 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	22ff      	movs	r2, #255	; 0xff
 8009884:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2203      	movs	r2, #3
 800988a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e06a      	b.n	800996c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0e4      	beq.n	800986e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	69fa      	ldr	r2, [r7, #28]
 80098aa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689a      	ldr	r2, [r3, #8]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098c2:	609a      	str	r2, [r3, #8]
 80098c4:	e047      	b.n	8009956 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80098d4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098e4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80098f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80098f8:	f7f9 fc76 	bl	80031e8 <HAL_GetTick>
 80098fc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80098fe:	e013      	b.n	8009928 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009900:	f7f9 fc72 	bl	80031e8 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800990e:	d90b      	bls.n	8009928 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2203      	movs	r2, #3
 800991c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009924:	2303      	movs	r3, #3
 8009926:	e021      	b.n	800996c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0e4      	beq.n	8009900 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69fa      	ldr	r2, [r7, #28]
 800993c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009954:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	22ff      	movs	r2, #255	; 0xff
 800995c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2201      	movs	r2, #1
 8009962:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3724      	adds	r7, #36	; 0x24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd90      	pop	{r4, r7, pc}

08009974 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800998e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009990:	f7f9 fc2a 	bl	80031e8 <HAL_GetTick>
 8009994:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009996:	e009      	b.n	80099ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009998:	f7f9 fc26 	bl	80031e8 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099a6:	d901      	bls.n	80099ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e007      	b.n	80099bc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f003 0320 	and.w	r3, r3, #32
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0ee      	beq.n	8009998 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d122      	bne.n	8009a28 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80099f2:	f7f9 fbf9 	bl	80031e8 <HAL_GetTick>
 80099f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80099f8:	e00c      	b.n	8009a14 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099fa:	f7f9 fbf5 	bl	80031e8 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a08:	d904      	bls.n	8009a14 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2204      	movs	r2, #4
 8009a0e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d102      	bne.n	8009a28 <RTC_EnterInitMode+0x64>
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d1e8      	bne.n	80099fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68da      	ldr	r2, [r3, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a4c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff ff89 	bl	8009974 <HAL_RTC_WaitForSynchro>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2204      	movs	r2, #4
 8009a6c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009a8a:	e005      	b.n	8009a98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009a92:	79fb      	ldrb	r3, [r7, #7]
 8009a94:	3b0a      	subs	r3, #10
 8009a96:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009a98:	79fb      	ldrb	r3, [r7, #7]
 8009a9a:	2b09      	cmp	r3, #9
 8009a9c:	d8f6      	bhi.n	8009a8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	b2db      	uxtb	r3, r3
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	7f1b      	ldrb	r3, [r3, #28]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d101      	bne.n	8009ad4 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	e050      	b.n	8009b76 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2202      	movs	r2, #2
 8009ade:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0206 	bic.w	r2, r2, #6
 8009aee:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689a      	ldr	r2, [r3, #8]
 8009b06:	4b1f      	ldr	r3, [pc, #124]	; (8009b84 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	22ca      	movs	r2, #202	; 0xca
 8009b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2253      	movs	r2, #83	; 0x53
 8009b22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8009b3c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 8009b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689a      	ldr	r2, [r3, #8]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b5e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	22ff      	movs	r2, #255	; 0xff
 8009b66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	371c      	adds	r7, #28
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	fffff7f7 	.word	0xfffff7f7

08009b88 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b088      	sub	sp, #32
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009b90:	2300      	movs	r3, #0
 8009b92:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e156      	b.n	8009e54 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d106      	bne.n	8009bc0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7f8 ff7c 	bl	8002ab8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f95b 	bl	8009e84 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d00c      	beq.n	8009bf0 <HAL_SAI_Init+0x68>
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d80d      	bhi.n	8009bf6 <HAL_SAI_Init+0x6e>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <HAL_SAI_Init+0x5c>
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d003      	beq.n	8009bea <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009be2:	e008      	b.n	8009bf6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	61fb      	str	r3, [r7, #28]
      break;
 8009be8:	e006      	b.n	8009bf8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009bea:	2310      	movs	r3, #16
 8009bec:	61fb      	str	r3, [r7, #28]
      break;
 8009bee:	e003      	b.n	8009bf8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009bf0:	2320      	movs	r3, #32
 8009bf2:	61fb      	str	r3, [r7, #28]
      break;
 8009bf4:	e000      	b.n	8009bf8 <HAL_SAI_Init+0x70>
      break;
 8009bf6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d81e      	bhi.n	8009c3e <HAL_SAI_Init+0xb6>
 8009c00:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <HAL_SAI_Init+0x80>)
 8009c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c06:	bf00      	nop
 8009c08:	08009c19 	.word	0x08009c19
 8009c0c:	08009c1f 	.word	0x08009c1f
 8009c10:	08009c27 	.word	0x08009c27
 8009c14:	08009c2f 	.word	0x08009c2f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	617b      	str	r3, [r7, #20]
    }
    break;
 8009c1c:	e010      	b.n	8009c40 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c22:	617b      	str	r3, [r7, #20]
    }
    break;
 8009c24:	e00c      	b.n	8009c40 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c2a:	617b      	str	r3, [r7, #20]
    }
    break;
 8009c2c:	e008      	b.n	8009c40 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c32:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	f043 0301 	orr.w	r3, r3, #1
 8009c3a:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009c3c:	e000      	b.n	8009c40 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009c3e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a85      	ldr	r2, [pc, #532]	; (8009e5c <HAL_SAI_Init+0x2d4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d004      	beq.n	8009c54 <HAL_SAI_Init+0xcc>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a84      	ldr	r2, [pc, #528]	; (8009e60 <HAL_SAI_Init+0x2d8>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d103      	bne.n	8009c5c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009c54:	4a83      	ldr	r2, [pc, #524]	; (8009e64 <HAL_SAI_Init+0x2dc>)
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	e002      	b.n	8009c62 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009c5c:	4a82      	ldr	r2, [pc, #520]	; (8009e68 <HAL_SAI_Init+0x2e0>)
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d04c      	beq.n	8009d04 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a7a      	ldr	r2, [pc, #488]	; (8009e5c <HAL_SAI_Init+0x2d4>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d004      	beq.n	8009c82 <HAL_SAI_Init+0xfa>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a78      	ldr	r2, [pc, #480]	; (8009e60 <HAL_SAI_Init+0x2d8>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d104      	bne.n	8009c8c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009c82:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009c86:	f7ff fa65 	bl	8009154 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c8a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a76      	ldr	r2, [pc, #472]	; (8009e6c <HAL_SAI_Init+0x2e4>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d004      	beq.n	8009ca0 <HAL_SAI_Init+0x118>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a75      	ldr	r2, [pc, #468]	; (8009e70 <HAL_SAI_Init+0x2e8>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d104      	bne.n	8009caa <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009ca0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009ca4:	f7ff fa56 	bl	8009154 <HAL_RCCEx_GetPeriphCLKFreq>
 8009ca8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	025b      	lsls	r3, r3, #9
 8009cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	4a6b      	ldr	r2, [pc, #428]	; (8009e74 <HAL_SAI_Init+0x2ec>)
 8009cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cca:	08da      	lsrs	r2, r3, #3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009cd0:	68f9      	ldr	r1, [r7, #12]
 8009cd2:	4b68      	ldr	r3, [pc, #416]	; (8009e74 <HAL_SAI_Init+0x2ec>)
 8009cd4:	fba3 2301 	umull	r2, r3, r3, r1
 8009cd8:	08da      	lsrs	r2, r3, #3
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	1aca      	subs	r2, r1, r3
 8009ce4:	2a08      	cmp	r2, #8
 8009ce6:	d904      	bls.n	8009cf2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d104      	bne.n	8009d04 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	085a      	lsrs	r2, r3, #1
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <HAL_SAI_Init+0x18c>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d109      	bne.n	8009d28 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_SAI_Init+0x198>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	e001      	b.n	8009d24 <HAL_SAI_Init+0x19c>
 8009d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	e008      	b.n	8009d3a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d102      	bne.n	8009d36 <HAL_SAI_Init+0x1ae>
 8009d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d34:	e000      	b.n	8009d38 <HAL_SAI_Init+0x1b0>
 8009d36:	2300      	movs	r3, #0
 8009d38:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6819      	ldr	r1, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	4b4c      	ldr	r3, [pc, #304]	; (8009e78 <HAL_SAI_Init+0x2f0>)
 8009d46:	400b      	ands	r3, r1
 8009d48:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6819      	ldr	r1, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d58:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d5e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d64:	431a      	orrs	r2, r3
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8009d72:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009d7e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	051b      	lsls	r3, r3, #20
 8009d86:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	6859      	ldr	r1, [r3, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	4b38      	ldr	r3, [pc, #224]	; (8009e7c <HAL_SAI_Init+0x2f4>)
 8009d9c:	400b      	ands	r3, r1
 8009d9e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6859      	ldr	r1, [r3, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dae:	431a      	orrs	r2, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	431a      	orrs	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6899      	ldr	r1, [r3, #8]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	4b2d      	ldr	r3, [pc, #180]	; (8009e80 <HAL_SAI_Init+0x2f8>)
 8009dca:	400b      	ands	r3, r1
 8009dcc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6899      	ldr	r1, [r3, #8]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009dde:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009de4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8009dea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df0:	3b01      	subs	r3, #1
 8009df2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009df4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68d9      	ldr	r1, [r3, #12]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009e0c:	400b      	ands	r3, r1
 8009e0e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68d9      	ldr	r1, [r3, #12]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e24:	041b      	lsls	r3, r3, #16
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	40015804 	.word	0x40015804
 8009e60:	40015824 	.word	0x40015824
 8009e64:	40015800 	.word	0x40015800
 8009e68:	40015c00 	.word	0x40015c00
 8009e6c:	40015c04 	.word	0x40015c04
 8009e70:	40015c24 	.word	0x40015c24
 8009e74:	cccccccd 	.word	0xcccccccd
 8009e78:	ff05c010 	.word	0xff05c010
 8009e7c:	ffff1ff0 	.word	0xffff1ff0
 8009e80:	fff88000 	.word	0xfff88000

08009e84 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009e8c:	4b17      	ldr	r3, [pc, #92]	; (8009eec <SAI_Disable+0x68>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a17      	ldr	r2, [pc, #92]	; (8009ef0 <SAI_Disable+0x6c>)
 8009e92:	fba2 2303 	umull	r2, r3, r2, r3
 8009e96:	0b1b      	lsrs	r3, r3, #12
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009eae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	1e5a      	subs	r2, r3, #1
 8009eb4:	60fa      	str	r2, [r7, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	72fb      	strb	r3, [r7, #11]
      break;
 8009ece:	e006      	b.n	8009ede <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1e8      	bne.n	8009eb0 <SAI_Disable+0x2c>

  return status;
 8009ede:	7afb      	ldrb	r3, [r7, #11]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	20000000 	.word	0x20000000
 8009ef0:	95cbec1b 	.word	0x95cbec1b

08009ef4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e022      	b.n	8009f4c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d105      	bne.n	8009f1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7f8 f9e7 	bl	80022ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2203      	movs	r2, #3
 8009f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f814 	bl	8009f54 <HAL_SD_InitCard>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	e00a      	b.n	8009f4c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3708      	adds	r7, #8
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009f54:	b5b0      	push	{r4, r5, r7, lr}
 8009f56:	b08e      	sub	sp, #56	; 0x38
 8009f58:	af04      	add	r7, sp, #16
 8009f5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009f64:	2300      	movs	r3, #0
 8009f66:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009f70:	2376      	movs	r3, #118	; 0x76
 8009f72:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681d      	ldr	r5, [r3, #0]
 8009f78:	466c      	mov	r4, sp
 8009f7a:	f107 0314 	add.w	r3, r7, #20
 8009f7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f86:	f107 0308 	add.w	r3, r7, #8
 8009f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	f003 f837 	bl	800d000 <SDMMC_Init>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e059      	b.n	800a058 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fb2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f003 f85a 	bl	800d072 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fcc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009fce:	2002      	movs	r0, #2
 8009fd0:	f7f9 f916 	bl	8003200 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fe0f 	bl	800abf8 <SD_PowerON>
 8009fda:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00b      	beq.n	8009ffa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e02e      	b.n	800a058 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fd2e 	bl	800aa5c <SD_InitCard>
 800a000:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a002:	6a3b      	ldr	r3, [r7, #32]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	431a      	orrs	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e01b      	b.n	800a058 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a028:	4618      	mov	r0, r3
 800a02a:	f003 f8b5 	bl	800d198 <SDMMC_CmdBlockLength>
 800a02e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00f      	beq.n	800a056 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a09      	ldr	r2, [pc, #36]	; (800a060 <HAL_SD_InitCard+0x10c>)
 800a03c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a042:	6a3b      	ldr	r3, [r7, #32]
 800a044:	431a      	orrs	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3728      	adds	r7, #40	; 0x28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bdb0      	pop	{r4, r5, r7, pc}
 800a060:	004005ff 	.word	0x004005ff

0800a064 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08c      	sub	sp, #48	; 0x30
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d107      	bne.n	800a08c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a080:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e0c3      	b.n	800a214 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b01      	cmp	r3, #1
 800a096:	f040 80bc 	bne.w	800a212 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d907      	bls.n	800a0be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e0aa      	b.n	800a214 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2203      	movs	r2, #3
 800a0c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a0dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e2:	4a4e      	ldr	r2, [pc, #312]	; (800a21c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a0e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ea:	4a4d      	ldr	r2, [pc, #308]	; (800a220 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a0ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3380      	adds	r3, #128	; 0x80
 800a124:	4619      	mov	r1, r3
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	025b      	lsls	r3, r3, #9
 800a12c:	089b      	lsrs	r3, r3, #2
 800a12e:	f7f9 fd65 	bl	8003bfc <HAL_DMA_Start_IT>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d017      	beq.n	800a168 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a146:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a35      	ldr	r2, [pc, #212]	; (800a224 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a14e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a154:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e055      	b.n	800a214 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0208 	orr.w	r2, r2, #8
 800a176:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d002      	beq.n	800a186 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	025b      	lsls	r3, r3, #9
 800a184:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a186:	f04f 33ff 	mov.w	r3, #4294967295
 800a18a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	025b      	lsls	r3, r3, #9
 800a190:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a192:	2390      	movs	r3, #144	; 0x90
 800a194:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a196:	2302      	movs	r3, #2
 800a198:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f107 0210 	add.w	r2, r7, #16
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f002 ffc7 	bl	800d140 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d90a      	bls.n	800a1ce <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2282      	movs	r2, #130	; 0x82
 800a1bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f003 f82b 	bl	800d220 <SDMMC_CmdReadMultiBlock>
 800a1ca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a1cc:	e009      	b.n	800a1e2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2281      	movs	r2, #129	; 0x81
 800a1d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f002 fffe 	bl	800d1dc <SDMMC_CmdReadSingleBlock>
 800a1e0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d012      	beq.n	800a20e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a0d      	ldr	r2, [pc, #52]	; (800a224 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a1ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e002      	b.n	800a214 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a20e:	2300      	movs	r3, #0
 800a210:	e000      	b.n	800a214 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a212:	2302      	movs	r3, #2
  }
}
 800a214:	4618      	mov	r0, r3
 800a216:	3730      	adds	r7, #48	; 0x30
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	0800a947 	.word	0x0800a947
 800a220:	0800a9b9 	.word	0x0800a9b9
 800a224:	004005ff 	.word	0x004005ff

0800a228 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b08c      	sub	sp, #48	; 0x30
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d107      	bne.n	800a250 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a244:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e0c6      	b.n	800a3de <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b01      	cmp	r3, #1
 800a25a:	f040 80bf 	bne.w	800a3dc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	441a      	add	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a26e:	429a      	cmp	r2, r3
 800a270:	d907      	bls.n	800a282 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a276:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e0ad      	b.n	800a3de <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2203      	movs	r2, #3
 800a286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2200      	movs	r2, #0
 800a290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 021a 	orr.w	r2, r2, #26
 800a2a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a6:	4a50      	ldr	r2, [pc, #320]	; (800a3e8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a2a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ae:	4a4f      	ldr	r2, [pc, #316]	; (800a3ec <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a2b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d002      	beq.n	800a2c8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c4:	025b      	lsls	r3, r3, #9
 800a2c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d90a      	bls.n	800a2e4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	22a0      	movs	r2, #160	; 0xa0
 800a2d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f002 ffe4 	bl	800d2a8 <SDMMC_CmdWriteMultiBlock>
 800a2e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a2e2:	e009      	b.n	800a2f8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2290      	movs	r2, #144	; 0x90
 800a2e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f002 ffb7 	bl	800d264 <SDMMC_CmdWriteSingleBlock>
 800a2f6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d012      	beq.n	800a324 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a3b      	ldr	r2, [pc, #236]	; (800a3f0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a304:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	431a      	orrs	r2, r3
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2200      	movs	r2, #0
 800a31e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e05c      	b.n	800a3de <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f042 0208 	orr.w	r2, r2, #8
 800a332:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a338:	2240      	movs	r2, #64	; 0x40
 800a33a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a34c:	689a      	ldr	r2, [r3, #8]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	430a      	orrs	r2, r1
 800a356:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a35c:	68b9      	ldr	r1, [r7, #8]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	3380      	adds	r3, #128	; 0x80
 800a364:	461a      	mov	r2, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	025b      	lsls	r3, r3, #9
 800a36a:	089b      	lsrs	r3, r3, #2
 800a36c:	f7f9 fc46 	bl	8003bfc <HAL_DMA_Start_IT>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d01a      	beq.n	800a3ac <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f022 021a 	bic.w	r2, r2, #26
 800a384:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a19      	ldr	r2, [pc, #100]	; (800a3f0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a38c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a392:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e018      	b.n	800a3de <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a3ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	025b      	lsls	r3, r3, #9
 800a3b6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a3b8:	2390      	movs	r3, #144	; 0x90
 800a3ba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f107 0210 	add.w	r2, r7, #16
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f002 feb4 	bl	800d140 <SDMMC_ConfigData>

      return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e000      	b.n	800a3de <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a3dc:	2302      	movs	r3, #2
  }
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3730      	adds	r7, #48	; 0x30
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	0800a91d 	.word	0x0800a91d
 800a3ec:	0800a9b9 	.word	0x0800a9b9
 800a3f0:	004005ff 	.word	0x004005ff

0800a3f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a416:	0f9b      	lsrs	r3, r3, #30
 800a418:	b2da      	uxtb	r2, r3
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a422:	0e9b      	lsrs	r3, r3, #26
 800a424:	b2db      	uxtb	r3, r3
 800a426:	f003 030f 	and.w	r3, r3, #15
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a434:	0e1b      	lsrs	r3, r3, #24
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f003 0303 	and.w	r3, r3, #3
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a446:	0c1b      	lsrs	r3, r3, #16
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a452:	0a1b      	lsrs	r3, r3, #8
 800a454:	b2da      	uxtb	r2, r3
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a45e:	b2da      	uxtb	r2, r3
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a468:	0d1b      	lsrs	r3, r3, #20
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a474:	0c1b      	lsrs	r3, r3, #16
 800a476:	b2db      	uxtb	r3, r3
 800a478:	f003 030f 	and.w	r3, r3, #15
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a486:	0bdb      	lsrs	r3, r3, #15
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	b2da      	uxtb	r2, r3
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a498:	0b9b      	lsrs	r3, r3, #14
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	b2da      	uxtb	r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4aa:	0b5b      	lsrs	r3, r3, #13
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4bc:	0b1b      	lsrs	r3, r3, #12
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d163      	bne.n	800a5a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a4dc:	009a      	lsls	r2, r3, #2
 800a4de:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a4e8:	0f92      	lsrs	r2, r2, #30
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f4:	0edb      	lsrs	r3, r3, #27
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	f003 0307 	and.w	r3, r3, #7
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a506:	0e1b      	lsrs	r3, r3, #24
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	f003 0307 	and.w	r3, r3, #7
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a518:	0d5b      	lsrs	r3, r3, #21
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	f003 0307 	and.w	r3, r3, #7
 800a520:	b2da      	uxtb	r2, r3
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a52a:	0c9b      	lsrs	r3, r3, #18
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	f003 0307 	and.w	r3, r3, #7
 800a532:	b2da      	uxtb	r2, r3
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a53c:	0bdb      	lsrs	r3, r3, #15
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	b2da      	uxtb	r2, r3
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	7e1b      	ldrb	r3, [r3, #24]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	f003 0307 	and.w	r3, r3, #7
 800a55e:	3302      	adds	r3, #2
 800a560:	2201      	movs	r2, #1
 800a562:	fa02 f303 	lsl.w	r3, r2, r3
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a56a:	fb03 f202 	mul.w	r2, r3, r2
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	7a1b      	ldrb	r3, [r3, #8]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	f003 030f 	and.w	r3, r3, #15
 800a57c:	2201      	movs	r2, #1
 800a57e:	409a      	lsls	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a58c:	0a52      	lsrs	r2, r2, #9
 800a58e:	fb03 f202 	mul.w	r2, r3, r2
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a59c:	661a      	str	r2, [r3, #96]	; 0x60
 800a59e:	e031      	b.n	800a604 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d11d      	bne.n	800a5e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ac:	041b      	lsls	r3, r3, #16
 800a5ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5b6:	0c1b      	lsrs	r3, r3, #16
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	029a      	lsls	r2, r3, #10
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	661a      	str	r2, [r3, #96]	; 0x60
 800a5e2:	e00f      	b.n	800a604 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a58      	ldr	r2, [pc, #352]	; (800a74c <HAL_SD_GetCardCSD+0x344>)
 800a5ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e09d      	b.n	800a740 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a608:	0b9b      	lsrs	r3, r3, #14
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	b2da      	uxtb	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a61a:	09db      	lsrs	r3, r3, #7
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a622:	b2da      	uxtb	r2, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a632:	b2da      	uxtb	r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63c:	0fdb      	lsrs	r3, r3, #31
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a648:	0f5b      	lsrs	r3, r3, #29
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	f003 0303 	and.w	r3, r3, #3
 800a650:	b2da      	uxtb	r2, r3
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a65a:	0e9b      	lsrs	r3, r3, #26
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	b2da      	uxtb	r2, r3
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a66c:	0d9b      	lsrs	r3, r3, #22
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	f003 030f 	and.w	r3, r3, #15
 800a674:	b2da      	uxtb	r2, r3
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a67e:	0d5b      	lsrs	r3, r3, #21
 800a680:	b2db      	uxtb	r3, r3
 800a682:	f003 0301 	and.w	r3, r3, #1
 800a686:	b2da      	uxtb	r2, r3
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69a:	0c1b      	lsrs	r3, r3, #16
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 0301 	and.w	r3, r3, #1
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ae:	0bdb      	lsrs	r3, r3, #15
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c2:	0b9b      	lsrs	r3, r3, #14
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d6:	0b5b      	lsrs	r3, r3, #13
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ea:	0b1b      	lsrs	r3, r3, #12
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fe:	0a9b      	lsrs	r3, r3, #10
 800a700:	b2db      	uxtb	r3, r3
 800a702:	f003 0303 	and.w	r3, r3, #3
 800a706:	b2da      	uxtb	r2, r3
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a712:	0a1b      	lsrs	r3, r3, #8
 800a714:	b2db      	uxtb	r3, r3
 800a716:	f003 0303 	and.w	r3, r3, #3
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a726:	085b      	lsrs	r3, r3, #1
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	004005ff 	.word	0x004005ff

0800a750 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a7a8:	b5b0      	push	{r4, r5, r7, lr}
 800a7aa:	b08e      	sub	sp, #56	; 0x38
 800a7ac:	af04      	add	r7, sp, #16
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2203      	movs	r2, #3
 800a7bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d02e      	beq.n	800a826 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7ce:	d106      	bne.n	800a7de <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	639a      	str	r2, [r3, #56]	; 0x38
 800a7dc:	e029      	b.n	800a832 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7e4:	d10a      	bne.n	800a7fc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fabc 	bl	800ad64 <SD_WideBus_Enable>
 800a7ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	431a      	orrs	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	639a      	str	r2, [r3, #56]	; 0x38
 800a7fa:	e01a      	b.n	800a832 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10a      	bne.n	800a818 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 faf9 	bl	800adfa <SD_WideBus_Disable>
 800a808:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a80e:	6a3b      	ldr	r3, [r7, #32]
 800a810:	431a      	orrs	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	639a      	str	r2, [r3, #56]	; 0x38
 800a816:	e00c      	b.n	800a832 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	639a      	str	r2, [r3, #56]	; 0x38
 800a824:	e005      	b.n	800a832 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00b      	beq.n	800a852 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a26      	ldr	r2, [pc, #152]	; (800a8d8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a840:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a850:	e01f      	b.n	800a892 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681d      	ldr	r5, [r3, #0]
 800a878:	466c      	mov	r4, sp
 800a87a:	f107 0314 	add.w	r3, r7, #20
 800a87e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a882:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a886:	f107 0308 	add.w	r3, r7, #8
 800a88a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a88c:	4628      	mov	r0, r5
 800a88e:	f002 fbb7 	bl	800d000 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a89a:	4618      	mov	r0, r3
 800a89c:	f002 fc7c 	bl	800d198 <SDMMC_CmdBlockLength>
 800a8a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00c      	beq.n	800a8c2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a0a      	ldr	r2, [pc, #40]	; (800a8d8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a8ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b4:	6a3b      	ldr	r3, [r7, #32]
 800a8b6:	431a      	orrs	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3728      	adds	r7, #40	; 0x28
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	004005ff 	.word	0x004005ff

0800a8dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a8e8:	f107 030c 	add.w	r3, r7, #12
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 fa10 	bl	800ad14 <SD_SendStatus>
 800a8f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d005      	beq.n	800a908 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	431a      	orrs	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	0a5b      	lsrs	r3, r3, #9
 800a90c:	f003 030f 	and.w	r3, r3, #15
 800a910:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a912:	693b      	ldr	r3, [r7, #16]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a938:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a93a:	bf00      	nop
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b084      	sub	sp, #16
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a958:	2b82      	cmp	r3, #130	; 0x82
 800a95a:	d111      	bne.n	800a980 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f002 fcc3 	bl	800d2ec <SDMMC_CmdStopTransfer>
 800a966:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d008      	beq.n	800a980 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	431a      	orrs	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff fd3a 	bl	800a3f4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 0208 	bic.w	r2, r2, #8
 800a98e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f240 523a 	movw	r2, #1338	; 0x53a
 800a998:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2201      	movs	r2, #1
 800a99e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f004 f909 	bl	800ebc0 <HAL_SD_RxCpltCallback>
#endif
}
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7f9 f978 	bl	8003cbc <HAL_DMA_GetError>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b02      	cmp	r3, #2
 800a9d0:	d03e      	beq.n	800aa50 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d002      	beq.n	800a9ee <SD_DMAError+0x36>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d12d      	bne.n	800aa4a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a19      	ldr	r2, [pc, #100]	; (800aa58 <SD_DMAError+0xa0>)
 800a9f4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aa04:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aa12:	6978      	ldr	r0, [r7, #20]
 800aa14:	f7ff ff62 	bl	800a8dc <HAL_SD_GetCardState>
 800aa18:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	2b06      	cmp	r3, #6
 800aa1e:	d002      	beq.n	800aa26 <SD_DMAError+0x6e>
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2b05      	cmp	r3, #5
 800aa24:	d10a      	bne.n	800aa3c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f002 fc5e 	bl	800d2ec <SDMMC_CmdStopTransfer>
 800aa30:	4602      	mov	r2, r0
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa36:	431a      	orrs	r2, r3
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	2200      	movs	r2, #0
 800aa48:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aa4a:	6978      	ldr	r0, [r7, #20]
 800aa4c:	f7ff fcd2 	bl	800a3f4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800aa50:	bf00      	nop
 800aa52:	3718      	adds	r7, #24
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	004005ff 	.word	0x004005ff

0800aa5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa5c:	b5b0      	push	{r4, r5, r7, lr}
 800aa5e:	b094      	sub	sp, #80	; 0x50
 800aa60:	af04      	add	r7, sp, #16
 800aa62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800aa64:	2301      	movs	r3, #1
 800aa66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f002 fb0e 	bl	800d08e <SDMMC_GetPowerState>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800aa7c:	e0b8      	b.n	800abf0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d02f      	beq.n	800aae6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f002 fd39 	bl	800d502 <SDMMC_CmdSendCID>
 800aa90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <SD_InitCard+0x40>
    {
      return errorstate;
 800aa98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9a:	e0a9      	b.n	800abf0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f002 fb39 	bl	800d11a <SDMMC_GetResponse>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2104      	movs	r1, #4
 800aab4:	4618      	mov	r0, r3
 800aab6:	f002 fb30 	bl	800d11a <SDMMC_GetResponse>
 800aaba:	4602      	mov	r2, r0
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2108      	movs	r1, #8
 800aac6:	4618      	mov	r0, r3
 800aac8:	f002 fb27 	bl	800d11a <SDMMC_GetResponse>
 800aacc:	4602      	mov	r2, r0
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	210c      	movs	r1, #12
 800aad8:	4618      	mov	r0, r3
 800aada:	f002 fb1e 	bl	800d11a <SDMMC_GetResponse>
 800aade:	4602      	mov	r2, r0
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaea:	2b03      	cmp	r3, #3
 800aaec:	d00d      	beq.n	800ab0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f107 020e 	add.w	r2, r7, #14
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f002 fd3f 	bl	800d57c <SDMMC_CmdSetRelAdd>
 800aafe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <SD_InitCard+0xae>
    {
      return errorstate;
 800ab06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab08:	e072      	b.n	800abf0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d036      	beq.n	800ab80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ab12:	89fb      	ldrh	r3, [r7, #14]
 800ab14:	461a      	mov	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab22:	041b      	lsls	r3, r3, #16
 800ab24:	4619      	mov	r1, r3
 800ab26:	4610      	mov	r0, r2
 800ab28:	f002 fd09 	bl	800d53e <SDMMC_CmdSendCSD>
 800ab2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ab34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab36:	e05b      	b.n	800abf0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f002 faeb 	bl	800d11a <SDMMC_GetResponse>
 800ab44:	4602      	mov	r2, r0
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2104      	movs	r1, #4
 800ab50:	4618      	mov	r0, r3
 800ab52:	f002 fae2 	bl	800d11a <SDMMC_GetResponse>
 800ab56:	4602      	mov	r2, r0
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2108      	movs	r1, #8
 800ab62:	4618      	mov	r0, r3
 800ab64:	f002 fad9 	bl	800d11a <SDMMC_GetResponse>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	210c      	movs	r1, #12
 800ab74:	4618      	mov	r0, r3
 800ab76:	f002 fad0 	bl	800d11a <SDMMC_GetResponse>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2104      	movs	r1, #4
 800ab86:	4618      	mov	r0, r3
 800ab88:	f002 fac7 	bl	800d11a <SDMMC_GetResponse>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	0d1a      	lsrs	r2, r3, #20
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ab94:	f107 0310 	add.w	r3, r7, #16
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f7ff fc34 	bl	800a408 <HAL_SD_GetCardCSD>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aba6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800abaa:	e021      	b.n	800abf0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6819      	ldr	r1, [r3, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abb4:	041b      	lsls	r3, r3, #16
 800abb6:	2200      	movs	r2, #0
 800abb8:	461c      	mov	r4, r3
 800abba:	4615      	mov	r5, r2
 800abbc:	4622      	mov	r2, r4
 800abbe:	462b      	mov	r3, r5
 800abc0:	4608      	mov	r0, r1
 800abc2:	f002 fbb5 	bl	800d330 <SDMMC_CmdSelDesel>
 800abc6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800abc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <SD_InitCard+0x176>
  {
    return errorstate;
 800abce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd0:	e00e      	b.n	800abf0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681d      	ldr	r5, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	466c      	mov	r4, sp
 800abda:	f103 0210 	add.w	r2, r3, #16
 800abde:	ca07      	ldmia	r2, {r0, r1, r2}
 800abe0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800abe4:	3304      	adds	r3, #4
 800abe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abe8:	4628      	mov	r0, r5
 800abea:	f002 fa09 	bl	800d000 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3740      	adds	r7, #64	; 0x40
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bdb0      	pop	{r4, r5, r7, pc}

0800abf8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	617b      	str	r3, [r7, #20]
 800ac08:	2300      	movs	r3, #0
 800ac0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f002 fbb0 	bl	800d376 <SDMMC_CmdGoIdleState>
 800ac16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	e072      	b.n	800ad08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f002 fbc3 	bl	800d3b2 <SDMMC_CmdOperCond>
 800ac2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00d      	beq.n	800ac50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f002 fb99 	bl	800d376 <SDMMC_CmdGoIdleState>
 800ac44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	e05b      	b.n	800ad08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d137      	bne.n	800acce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f002 fbc3 	bl	800d3f0 <SDMMC_CmdAppCommand>
 800ac6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d02d      	beq.n	800acce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac76:	e047      	b.n	800ad08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f002 fbb6 	bl	800d3f0 <SDMMC_CmdAppCommand>
 800ac84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <SD_PowerON+0x98>
    {
      return errorstate;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	e03b      	b.n	800ad08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	491e      	ldr	r1, [pc, #120]	; (800ad10 <SD_PowerON+0x118>)
 800ac96:	4618      	mov	r0, r3
 800ac98:	f002 fbcc 	bl	800d434 <SDMMC_CmdAppOperCommand>
 800ac9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aca4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aca8:	e02e      	b.n	800ad08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2100      	movs	r1, #0
 800acb0:	4618      	mov	r0, r3
 800acb2:	f002 fa32 	bl	800d11a <SDMMC_GetResponse>
 800acb6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	0fdb      	lsrs	r3, r3, #31
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d101      	bne.n	800acc4 <SD_PowerON+0xcc>
 800acc0:	2301      	movs	r3, #1
 800acc2:	e000      	b.n	800acc6 <SD_PowerON+0xce>
 800acc4:	2300      	movs	r3, #0
 800acc6:	613b      	str	r3, [r7, #16]

    count++;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	3301      	adds	r3, #1
 800accc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d802      	bhi.n	800acde <SD_PowerON+0xe6>
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d0cc      	beq.n	800ac78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d902      	bls.n	800acee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ace8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acec:	e00c      	b.n	800ad08 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	645a      	str	r2, [r3, #68]	; 0x44
 800acfe:	e002      	b.n	800ad06 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	c1100000 	.word	0xc1100000

0800ad14 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ad24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad28:	e018      	b.n	800ad5c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad32:	041b      	lsls	r3, r3, #16
 800ad34:	4619      	mov	r1, r3
 800ad36:	4610      	mov	r0, r2
 800ad38:	f002 fc41 	bl	800d5be <SDMMC_CmdSendStatus>
 800ad3c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	e009      	b.n	800ad5c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f002 f9e3 	bl	800d11a <SDMMC_GetResponse>
 800ad54:	4602      	mov	r2, r0
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60fb      	str	r3, [r7, #12]
 800ad70:	2300      	movs	r3, #0
 800ad72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2100      	movs	r1, #0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f002 f9cd 	bl	800d11a <SDMMC_GetResponse>
 800ad80:	4603      	mov	r3, r0
 800ad82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad8a:	d102      	bne.n	800ad92 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ad8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad90:	e02f      	b.n	800adf2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ad92:	f107 030c 	add.w	r3, r7, #12
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f879 	bl	800ae90 <SD_FindSCR>
 800ad9e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	e023      	b.n	800adf2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01c      	beq.n	800adee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adbc:	041b      	lsls	r3, r3, #16
 800adbe:	4619      	mov	r1, r3
 800adc0:	4610      	mov	r0, r2
 800adc2:	f002 fb15 	bl	800d3f0 <SDMMC_CmdAppCommand>
 800adc6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	e00f      	b.n	800adf2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2102      	movs	r1, #2
 800add8:	4618      	mov	r0, r3
 800adda:	f002 fb4f 	bl	800d47c <SDMMC_CmdBusWidth>
 800adde:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	e003      	b.n	800adf2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800adea:	2300      	movs	r3, #0
 800adec:	e001      	b.n	800adf2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800adee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b086      	sub	sp, #24
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
 800ae06:	2300      	movs	r3, #0
 800ae08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4618      	mov	r0, r3
 800ae12:	f002 f982 	bl	800d11a <SDMMC_GetResponse>
 800ae16:	4603      	mov	r3, r0
 800ae18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae20:	d102      	bne.n	800ae28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae26:	e02f      	b.n	800ae88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae28:	f107 030c 	add.w	r3, r7, #12
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f82e 	bl	800ae90 <SD_FindSCR>
 800ae34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	e023      	b.n	800ae88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d01c      	beq.n	800ae84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae52:	041b      	lsls	r3, r3, #16
 800ae54:	4619      	mov	r1, r3
 800ae56:	4610      	mov	r0, r2
 800ae58:	f002 faca 	bl	800d3f0 <SDMMC_CmdAppCommand>
 800ae5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d001      	beq.n	800ae68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	e00f      	b.n	800ae88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f002 fb04 	bl	800d47c <SDMMC_CmdBusWidth>
 800ae74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d001      	beq.n	800ae80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	e003      	b.n	800ae88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	e001      	b.n	800ae88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3718      	adds	r7, #24
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ae90:	b590      	push	{r4, r7, lr}
 800ae92:	b08f      	sub	sp, #60	; 0x3c
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ae9a:	f7f8 f9a5 	bl	80031e8 <HAL_GetTick>
 800ae9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800aea4:	2300      	movs	r3, #0
 800aea6:	60bb      	str	r3, [r7, #8]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2108      	movs	r1, #8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f002 f96e 	bl	800d198 <SDMMC_CmdBlockLength>
 800aebc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d001      	beq.n	800aec8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800aec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec6:	e0b2      	b.n	800b02e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed0:	041b      	lsls	r3, r3, #16
 800aed2:	4619      	mov	r1, r3
 800aed4:	4610      	mov	r0, r2
 800aed6:	f002 fa8b 	bl	800d3f0 <SDMMC_CmdAppCommand>
 800aeda:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	e0a3      	b.n	800b02e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aee6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aeec:	2308      	movs	r3, #8
 800aeee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800aef0:	2330      	movs	r3, #48	; 0x30
 800aef2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800aef4:	2302      	movs	r3, #2
 800aef6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800aefc:	2301      	movs	r3, #1
 800aefe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f107 0210 	add.w	r2, r7, #16
 800af08:	4611      	mov	r1, r2
 800af0a:	4618      	mov	r0, r3
 800af0c:	f002 f918 	bl	800d140 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4618      	mov	r0, r3
 800af16:	f002 fad3 	bl	800d4c0 <SDMMC_CmdSendSCR>
 800af1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d02a      	beq.n	800af78 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	e083      	b.n	800b02e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00f      	beq.n	800af54 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6819      	ldr	r1, [r3, #0]
 800af38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	f107 0208 	add.w	r2, r7, #8
 800af40:	18d4      	adds	r4, r2, r3
 800af42:	4608      	mov	r0, r1
 800af44:	f002 f888 	bl	800d058 <SDMMC_ReadFIFO>
 800af48:	4603      	mov	r3, r0
 800af4a:	6023      	str	r3, [r4, #0]
      index++;
 800af4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af4e:	3301      	adds	r3, #1
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
 800af52:	e006      	b.n	800af62 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d012      	beq.n	800af88 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800af62:	f7f8 f941 	bl	80031e8 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af70:	d102      	bne.n	800af78 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800af72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af76:	e05a      	b.n	800b02e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800af82:	2b00      	cmp	r3, #0
 800af84:	d0cf      	beq.n	800af26 <SD_FindSCR+0x96>
 800af86:	e000      	b.n	800af8a <SD_FindSCR+0xfa>
      break;
 800af88:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af90:	f003 0308 	and.w	r3, r3, #8
 800af94:	2b00      	cmp	r3, #0
 800af96:	d005      	beq.n	800afa4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2208      	movs	r2, #8
 800af9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800afa0:	2308      	movs	r3, #8
 800afa2:	e044      	b.n	800b02e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afaa:	f003 0302 	and.w	r3, r3, #2
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d005      	beq.n	800afbe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2202      	movs	r2, #2
 800afb8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800afba:	2302      	movs	r3, #2
 800afbc:	e037      	b.n	800b02e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc4:	f003 0320 	and.w	r3, r3, #32
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d005      	beq.n	800afd8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2220      	movs	r2, #32
 800afd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800afd4:	2320      	movs	r3, #32
 800afd6:	e02a      	b.n	800b02e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f240 523a 	movw	r2, #1338	; 0x53a
 800afe0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	061a      	lsls	r2, r3, #24
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	021b      	lsls	r3, r3, #8
 800afea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	0a1b      	lsrs	r3, r3, #8
 800aff4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aff8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	0e1b      	lsrs	r3, r3, #24
 800affe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b002:	601a      	str	r2, [r3, #0]
    scr++;
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b006:	3304      	adds	r3, #4
 800b008:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	061a      	lsls	r2, r3, #24
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	021b      	lsls	r3, r3, #8
 800b012:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b016:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	0a1b      	lsrs	r3, r3, #8
 800b01c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b020:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	0e1b      	lsrs	r3, r3, #24
 800b026:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	373c      	adds	r7, #60	; 0x3c
 800b032:	46bd      	mov	sp, r7
 800b034:	bd90      	pop	{r4, r7, pc}

0800b036 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e025      	b.n	800b096 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b050:	b2db      	uxtb	r3, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	d106      	bne.n	800b064 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7f7 fd20 	bl	8002aa4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2202      	movs	r2, #2
 800b068:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	3304      	adds	r3, #4
 800b074:	4619      	mov	r1, r3
 800b076:	4610      	mov	r0, r2
 800b078:	f001 fefc 	bl	800ce74 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	461a      	mov	r2, r3
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	f001 ff50 	bl	800cf2c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3708      	adds	r7, #8
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
	...

0800b0a0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e04c      	b.n	800b14c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d106      	bne.n	800b0cc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7f7 f972 	bl	80023b0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f022 0203 	bic.w	r2, r2, #3
 800b0e2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	4b19      	ldr	r3, [pc, #100]	; (800b154 <HAL_SPDIFRX_Init+0xb4>)
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b0fc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b102:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b108:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b10e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b114:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b11a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b120:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800b126:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800b12c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	fff88407 	.word	0xfff88407

0800b158 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e09d      	b.n	800b2a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d108      	bne.n	800b184 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b17a:	d009      	beq.n	800b190 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	61da      	str	r2, [r3, #28]
 800b182:	e005      	b.n	800b190 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d106      	bne.n	800b1b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7f7 f964 	bl	8002478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b1d0:	d902      	bls.n	800b1d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	e002      	b.n	800b1de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b1d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b1e6:	d007      	beq.n	800b1f8 <HAL_SPI_Init+0xa0>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b1f0:	d002      	beq.n	800b1f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	431a      	orrs	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	695b      	ldr	r3, [r3, #20]
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	431a      	orrs	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b226:	431a      	orrs	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b23a:	ea42 0103 	orr.w	r1, r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b242:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	0c1b      	lsrs	r3, r3, #16
 800b254:	f003 0204 	and.w	r2, r3, #4
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25c:	f003 0310 	and.w	r3, r3, #16
 800b260:	431a      	orrs	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b266:	f003 0308 	and.w	r3, r3, #8
 800b26a:	431a      	orrs	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b274:	ea42 0103 	orr.w	r1, r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	430a      	orrs	r2, r1
 800b284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69da      	ldr	r2, [r3, #28]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e049      	b.n	800b354 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7f7 f931 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2202      	movs	r2, #2
 800b2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	f000 fc29 	bl	800bb44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2201      	movs	r2, #1
 800b30e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2201      	movs	r2, #1
 800b326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2201      	movs	r2, #1
 800b34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d001      	beq.n	800b374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e054      	b.n	800b41e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2202      	movs	r2, #2
 800b378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68da      	ldr	r2, [r3, #12]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f042 0201 	orr.w	r2, r2, #1
 800b38a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a26      	ldr	r2, [pc, #152]	; (800b42c <HAL_TIM_Base_Start_IT+0xd0>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d022      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x80>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b39e:	d01d      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x80>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a22      	ldr	r2, [pc, #136]	; (800b430 <HAL_TIM_Base_Start_IT+0xd4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d018      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x80>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a21      	ldr	r2, [pc, #132]	; (800b434 <HAL_TIM_Base_Start_IT+0xd8>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d013      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x80>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a1f      	ldr	r2, [pc, #124]	; (800b438 <HAL_TIM_Base_Start_IT+0xdc>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d00e      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x80>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a1e      	ldr	r2, [pc, #120]	; (800b43c <HAL_TIM_Base_Start_IT+0xe0>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d009      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x80>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a1c      	ldr	r2, [pc, #112]	; (800b440 <HAL_TIM_Base_Start_IT+0xe4>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d004      	beq.n	800b3dc <HAL_TIM_Base_Start_IT+0x80>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a1b      	ldr	r2, [pc, #108]	; (800b444 <HAL_TIM_Base_Start_IT+0xe8>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d115      	bne.n	800b408 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	689a      	ldr	r2, [r3, #8]
 800b3e2:	4b19      	ldr	r3, [pc, #100]	; (800b448 <HAL_TIM_Base_Start_IT+0xec>)
 800b3e4:	4013      	ands	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b06      	cmp	r3, #6
 800b3ec:	d015      	beq.n	800b41a <HAL_TIM_Base_Start_IT+0xbe>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3f4:	d011      	beq.n	800b41a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f042 0201 	orr.w	r2, r2, #1
 800b404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b406:	e008      	b.n	800b41a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f042 0201 	orr.w	r2, r2, #1
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	e000      	b.n	800b41c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b41a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	40010000 	.word	0x40010000
 800b430:	40000400 	.word	0x40000400
 800b434:	40000800 	.word	0x40000800
 800b438:	40000c00 	.word	0x40000c00
 800b43c:	40010400 	.word	0x40010400
 800b440:	40014000 	.word	0x40014000
 800b444:	40001800 	.word	0x40001800
 800b448:	00010007 	.word	0x00010007

0800b44c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e049      	b.n	800b4f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d106      	bne.n	800b478 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7f7 f8d0 	bl	8002618 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	3304      	adds	r3, #4
 800b488:	4619      	mov	r1, r3
 800b48a:	4610      	mov	r0, r2
 800b48c:	f000 fb5a 	bl	800bb44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	f003 0302 	and.w	r3, r3, #2
 800b50c:	2b02      	cmp	r3, #2
 800b50e:	d122      	bne.n	800b556 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	f003 0302 	and.w	r3, r3, #2
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d11b      	bne.n	800b556 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f06f 0202 	mvn.w	r2, #2
 800b526:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	f003 0303 	and.w	r3, r3, #3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d003      	beq.n	800b544 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 fae3 	bl	800bb08 <HAL_TIM_IC_CaptureCallback>
 800b542:	e005      	b.n	800b550 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fad5 	bl	800baf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fae6 	bl	800bb1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b04      	cmp	r3, #4
 800b562:	d122      	bne.n	800b5aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	f003 0304 	and.w	r3, r3, #4
 800b56e:	2b04      	cmp	r3, #4
 800b570:	d11b      	bne.n	800b5aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f06f 0204 	mvn.w	r2, #4
 800b57a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2202      	movs	r2, #2
 800b580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 fab9 	bl	800bb08 <HAL_TIM_IC_CaptureCallback>
 800b596:	e005      	b.n	800b5a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 faab 	bl	800baf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fabc 	bl	800bb1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	f003 0308 	and.w	r3, r3, #8
 800b5b4:	2b08      	cmp	r3, #8
 800b5b6:	d122      	bne.n	800b5fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	f003 0308 	and.w	r3, r3, #8
 800b5c2:	2b08      	cmp	r3, #8
 800b5c4:	d11b      	bne.n	800b5fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f06f 0208 	mvn.w	r2, #8
 800b5ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2204      	movs	r2, #4
 800b5d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	69db      	ldr	r3, [r3, #28]
 800b5dc:	f003 0303 	and.w	r3, r3, #3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d003      	beq.n	800b5ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 fa8f 	bl	800bb08 <HAL_TIM_IC_CaptureCallback>
 800b5ea:	e005      	b.n	800b5f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa81 	bl	800baf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fa92 	bl	800bb1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	691b      	ldr	r3, [r3, #16]
 800b604:	f003 0310 	and.w	r3, r3, #16
 800b608:	2b10      	cmp	r3, #16
 800b60a:	d122      	bne.n	800b652 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f003 0310 	and.w	r3, r3, #16
 800b616:	2b10      	cmp	r3, #16
 800b618:	d11b      	bne.n	800b652 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f06f 0210 	mvn.w	r2, #16
 800b622:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2208      	movs	r2, #8
 800b628:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	69db      	ldr	r3, [r3, #28]
 800b630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b634:	2b00      	cmp	r3, #0
 800b636:	d003      	beq.n	800b640 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fa65 	bl	800bb08 <HAL_TIM_IC_CaptureCallback>
 800b63e:	e005      	b.n	800b64c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fa57 	bl	800baf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fa68 	bl	800bb1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	f003 0301 	and.w	r3, r3, #1
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d10e      	bne.n	800b67e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d107      	bne.n	800b67e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f06f 0201 	mvn.w	r2, #1
 800b676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7f6 fa6b 	bl	8001b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b688:	2b80      	cmp	r3, #128	; 0x80
 800b68a:	d10e      	bne.n	800b6aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b696:	2b80      	cmp	r3, #128	; 0x80
 800b698:	d107      	bne.n	800b6aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 fefb 	bl	800c4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6b8:	d10e      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c4:	2b80      	cmp	r3, #128	; 0x80
 800b6c6:	d107      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 feee 	bl	800c4b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e2:	2b40      	cmp	r3, #64	; 0x40
 800b6e4:	d10e      	bne.n	800b704 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6f0:	2b40      	cmp	r3, #64	; 0x40
 800b6f2:	d107      	bne.n	800b704 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fa16 	bl	800bb30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	f003 0320 	and.w	r3, r3, #32
 800b70e:	2b20      	cmp	r3, #32
 800b710:	d10e      	bne.n	800b730 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	f003 0320 	and.w	r3, r3, #32
 800b71c:	2b20      	cmp	r3, #32
 800b71e:	d107      	bne.n	800b730 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f06f 0220 	mvn.w	r2, #32
 800b728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 feae 	bl	800c48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d101      	bne.n	800b756 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b752:	2302      	movs	r3, #2
 800b754:	e0ff      	b.n	800b956 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2b14      	cmp	r3, #20
 800b762:	f200 80f0 	bhi.w	800b946 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b766:	a201      	add	r2, pc, #4	; (adr r2, 800b76c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76c:	0800b7c1 	.word	0x0800b7c1
 800b770:	0800b947 	.word	0x0800b947
 800b774:	0800b947 	.word	0x0800b947
 800b778:	0800b947 	.word	0x0800b947
 800b77c:	0800b801 	.word	0x0800b801
 800b780:	0800b947 	.word	0x0800b947
 800b784:	0800b947 	.word	0x0800b947
 800b788:	0800b947 	.word	0x0800b947
 800b78c:	0800b843 	.word	0x0800b843
 800b790:	0800b947 	.word	0x0800b947
 800b794:	0800b947 	.word	0x0800b947
 800b798:	0800b947 	.word	0x0800b947
 800b79c:	0800b883 	.word	0x0800b883
 800b7a0:	0800b947 	.word	0x0800b947
 800b7a4:	0800b947 	.word	0x0800b947
 800b7a8:	0800b947 	.word	0x0800b947
 800b7ac:	0800b8c5 	.word	0x0800b8c5
 800b7b0:	0800b947 	.word	0x0800b947
 800b7b4:	0800b947 	.word	0x0800b947
 800b7b8:	0800b947 	.word	0x0800b947
 800b7bc:	0800b905 	.word	0x0800b905
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68b9      	ldr	r1, [r7, #8]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 fa5c 	bl	800bc84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	699a      	ldr	r2, [r3, #24]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f042 0208 	orr.w	r2, r2, #8
 800b7da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	699a      	ldr	r2, [r3, #24]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f022 0204 	bic.w	r2, r2, #4
 800b7ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6999      	ldr	r1, [r3, #24]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	691a      	ldr	r2, [r3, #16]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	430a      	orrs	r2, r1
 800b7fc:	619a      	str	r2, [r3, #24]
      break;
 800b7fe:	e0a5      	b.n	800b94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68b9      	ldr	r1, [r7, #8]
 800b806:	4618      	mov	r0, r3
 800b808:	f000 faae 	bl	800bd68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	699a      	ldr	r2, [r3, #24]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b81a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	699a      	ldr	r2, [r3, #24]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b82a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6999      	ldr	r1, [r3, #24]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	021a      	lsls	r2, r3, #8
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	430a      	orrs	r2, r1
 800b83e:	619a      	str	r2, [r3, #24]
      break;
 800b840:	e084      	b.n	800b94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 fb05 	bl	800be58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	69da      	ldr	r2, [r3, #28]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f042 0208 	orr.w	r2, r2, #8
 800b85c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	69da      	ldr	r2, [r3, #28]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 0204 	bic.w	r2, r2, #4
 800b86c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69d9      	ldr	r1, [r3, #28]
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	691a      	ldr	r2, [r3, #16]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	430a      	orrs	r2, r1
 800b87e:	61da      	str	r2, [r3, #28]
      break;
 800b880:	e064      	b.n	800b94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68b9      	ldr	r1, [r7, #8]
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fb5b 	bl	800bf44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	69da      	ldr	r2, [r3, #28]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b89c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	69da      	ldr	r2, [r3, #28]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	69d9      	ldr	r1, [r3, #28]
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	021a      	lsls	r2, r3, #8
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	61da      	str	r2, [r3, #28]
      break;
 800b8c2:	e043      	b.n	800b94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68b9      	ldr	r1, [r7, #8]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fb92 	bl	800bff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f042 0208 	orr.w	r2, r2, #8
 800b8de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0204 	bic.w	r2, r2, #4
 800b8ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	691a      	ldr	r2, [r3, #16]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b902:	e023      	b.n	800b94c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68b9      	ldr	r1, [r7, #8]
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 fbc4 	bl	800c098 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b91e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b92e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	021a      	lsls	r2, r3, #8
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	430a      	orrs	r2, r1
 800b942:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b944:	e002      	b.n	800b94c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	75fb      	strb	r3, [r7, #23]
      break;
 800b94a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b954:	7dfb      	ldrb	r3, [r7, #23]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3718      	adds	r7, #24
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop

0800b960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b96a:	2300      	movs	r3, #0
 800b96c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b974:	2b01      	cmp	r3, #1
 800b976:	d101      	bne.n	800b97c <HAL_TIM_ConfigClockSource+0x1c>
 800b978:	2302      	movs	r3, #2
 800b97a:	e0b4      	b.n	800bae6 <HAL_TIM_ConfigClockSource+0x186>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2202      	movs	r2, #2
 800b988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	4b56      	ldr	r3, [pc, #344]	; (800baf0 <HAL_TIM_ConfigClockSource+0x190>)
 800b998:	4013      	ands	r3, r2
 800b99a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9b4:	d03e      	beq.n	800ba34 <HAL_TIM_ConfigClockSource+0xd4>
 800b9b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9ba:	f200 8087 	bhi.w	800bacc <HAL_TIM_ConfigClockSource+0x16c>
 800b9be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9c2:	f000 8086 	beq.w	800bad2 <HAL_TIM_ConfigClockSource+0x172>
 800b9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ca:	d87f      	bhi.n	800bacc <HAL_TIM_ConfigClockSource+0x16c>
 800b9cc:	2b70      	cmp	r3, #112	; 0x70
 800b9ce:	d01a      	beq.n	800ba06 <HAL_TIM_ConfigClockSource+0xa6>
 800b9d0:	2b70      	cmp	r3, #112	; 0x70
 800b9d2:	d87b      	bhi.n	800bacc <HAL_TIM_ConfigClockSource+0x16c>
 800b9d4:	2b60      	cmp	r3, #96	; 0x60
 800b9d6:	d050      	beq.n	800ba7a <HAL_TIM_ConfigClockSource+0x11a>
 800b9d8:	2b60      	cmp	r3, #96	; 0x60
 800b9da:	d877      	bhi.n	800bacc <HAL_TIM_ConfigClockSource+0x16c>
 800b9dc:	2b50      	cmp	r3, #80	; 0x50
 800b9de:	d03c      	beq.n	800ba5a <HAL_TIM_ConfigClockSource+0xfa>
 800b9e0:	2b50      	cmp	r3, #80	; 0x50
 800b9e2:	d873      	bhi.n	800bacc <HAL_TIM_ConfigClockSource+0x16c>
 800b9e4:	2b40      	cmp	r3, #64	; 0x40
 800b9e6:	d058      	beq.n	800ba9a <HAL_TIM_ConfigClockSource+0x13a>
 800b9e8:	2b40      	cmp	r3, #64	; 0x40
 800b9ea:	d86f      	bhi.n	800bacc <HAL_TIM_ConfigClockSource+0x16c>
 800b9ec:	2b30      	cmp	r3, #48	; 0x30
 800b9ee:	d064      	beq.n	800baba <HAL_TIM_ConfigClockSource+0x15a>
 800b9f0:	2b30      	cmp	r3, #48	; 0x30
 800b9f2:	d86b      	bhi.n	800bacc <HAL_TIM_ConfigClockSource+0x16c>
 800b9f4:	2b20      	cmp	r3, #32
 800b9f6:	d060      	beq.n	800baba <HAL_TIM_ConfigClockSource+0x15a>
 800b9f8:	2b20      	cmp	r3, #32
 800b9fa:	d867      	bhi.n	800bacc <HAL_TIM_ConfigClockSource+0x16c>
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d05c      	beq.n	800baba <HAL_TIM_ConfigClockSource+0x15a>
 800ba00:	2b10      	cmp	r3, #16
 800ba02:	d05a      	beq.n	800baba <HAL_TIM_ConfigClockSource+0x15a>
 800ba04:	e062      	b.n	800bacc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	6899      	ldr	r1, [r3, #8]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	f000 fc0d 	bl	800c234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ba28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	609a      	str	r2, [r3, #8]
      break;
 800ba32:	e04f      	b.n	800bad4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6818      	ldr	r0, [r3, #0]
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	6899      	ldr	r1, [r3, #8]
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	f000 fbf6 	bl	800c234 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689a      	ldr	r2, [r3, #8]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba56:	609a      	str	r2, [r3, #8]
      break;
 800ba58:	e03c      	b.n	800bad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	6859      	ldr	r1, [r3, #4]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f000 fb6a 	bl	800c140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2150      	movs	r1, #80	; 0x50
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fbc3 	bl	800c1fe <TIM_ITRx_SetConfig>
      break;
 800ba78:	e02c      	b.n	800bad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6818      	ldr	r0, [r3, #0]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	6859      	ldr	r1, [r3, #4]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	461a      	mov	r2, r3
 800ba88:	f000 fb89 	bl	800c19e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2160      	movs	r1, #96	; 0x60
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 fbb3 	bl	800c1fe <TIM_ITRx_SetConfig>
      break;
 800ba98:	e01c      	b.n	800bad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	6859      	ldr	r1, [r3, #4]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	461a      	mov	r2, r3
 800baa8:	f000 fb4a 	bl	800c140 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2140      	movs	r1, #64	; 0x40
 800bab2:	4618      	mov	r0, r3
 800bab4:	f000 fba3 	bl	800c1fe <TIM_ITRx_SetConfig>
      break;
 800bab8:	e00c      	b.n	800bad4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4619      	mov	r1, r3
 800bac4:	4610      	mov	r0, r2
 800bac6:	f000 fb9a 	bl	800c1fe <TIM_ITRx_SetConfig>
      break;
 800baca:	e003      	b.n	800bad4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	73fb      	strb	r3, [r7, #15]
      break;
 800bad0:	e000      	b.n	800bad4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	fffeff88 	.word	0xfffeff88

0800baf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bafc:	bf00      	nop
 800bafe:	370c      	adds	r7, #12
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr

0800bb08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b083      	sub	sp, #12
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb24:	bf00      	nop
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb38:	bf00      	nop
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4a40      	ldr	r2, [pc, #256]	; (800bc58 <TIM_Base_SetConfig+0x114>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d013      	beq.n	800bb84 <TIM_Base_SetConfig+0x40>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb62:	d00f      	beq.n	800bb84 <TIM_Base_SetConfig+0x40>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a3d      	ldr	r2, [pc, #244]	; (800bc5c <TIM_Base_SetConfig+0x118>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d00b      	beq.n	800bb84 <TIM_Base_SetConfig+0x40>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a3c      	ldr	r2, [pc, #240]	; (800bc60 <TIM_Base_SetConfig+0x11c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d007      	beq.n	800bb84 <TIM_Base_SetConfig+0x40>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a3b      	ldr	r2, [pc, #236]	; (800bc64 <TIM_Base_SetConfig+0x120>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d003      	beq.n	800bb84 <TIM_Base_SetConfig+0x40>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a3a      	ldr	r2, [pc, #232]	; (800bc68 <TIM_Base_SetConfig+0x124>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d108      	bne.n	800bb96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	4a2f      	ldr	r2, [pc, #188]	; (800bc58 <TIM_Base_SetConfig+0x114>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d02b      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bba4:	d027      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4a2c      	ldr	r2, [pc, #176]	; (800bc5c <TIM_Base_SetConfig+0x118>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d023      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4a2b      	ldr	r2, [pc, #172]	; (800bc60 <TIM_Base_SetConfig+0x11c>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d01f      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a2a      	ldr	r2, [pc, #168]	; (800bc64 <TIM_Base_SetConfig+0x120>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d01b      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	4a29      	ldr	r2, [pc, #164]	; (800bc68 <TIM_Base_SetConfig+0x124>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d017      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a28      	ldr	r2, [pc, #160]	; (800bc6c <TIM_Base_SetConfig+0x128>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d013      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a27      	ldr	r2, [pc, #156]	; (800bc70 <TIM_Base_SetConfig+0x12c>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d00f      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a26      	ldr	r2, [pc, #152]	; (800bc74 <TIM_Base_SetConfig+0x130>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d00b      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a25      	ldr	r2, [pc, #148]	; (800bc78 <TIM_Base_SetConfig+0x134>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d007      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a24      	ldr	r2, [pc, #144]	; (800bc7c <TIM_Base_SetConfig+0x138>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d003      	beq.n	800bbf6 <TIM_Base_SetConfig+0xb2>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a23      	ldr	r2, [pc, #140]	; (800bc80 <TIM_Base_SetConfig+0x13c>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d108      	bne.n	800bc08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	695b      	ldr	r3, [r3, #20]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	689a      	ldr	r2, [r3, #8]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a0a      	ldr	r2, [pc, #40]	; (800bc58 <TIM_Base_SetConfig+0x114>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d003      	beq.n	800bc3c <TIM_Base_SetConfig+0xf8>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4a0c      	ldr	r2, [pc, #48]	; (800bc68 <TIM_Base_SetConfig+0x124>)
 800bc38:	4293      	cmp	r3, r2
 800bc3a:	d103      	bne.n	800bc44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	691a      	ldr	r2, [r3, #16]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	615a      	str	r2, [r3, #20]
}
 800bc4a:	bf00      	nop
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	40010000 	.word	0x40010000
 800bc5c:	40000400 	.word	0x40000400
 800bc60:	40000800 	.word	0x40000800
 800bc64:	40000c00 	.word	0x40000c00
 800bc68:	40010400 	.word	0x40010400
 800bc6c:	40014000 	.word	0x40014000
 800bc70:	40014400 	.word	0x40014400
 800bc74:	40014800 	.word	0x40014800
 800bc78:	40001800 	.word	0x40001800
 800bc7c:	40001c00 	.word	0x40001c00
 800bc80:	40002000 	.word	0x40002000

0800bc84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	f023 0201 	bic.w	r2, r3, #1
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	699b      	ldr	r3, [r3, #24]
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4b2b      	ldr	r3, [pc, #172]	; (800bd5c <TIM_OC1_SetConfig+0xd8>)
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f023 0303 	bic.w	r3, r3, #3
 800bcba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f023 0302 	bic.w	r3, r3, #2
 800bccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a21      	ldr	r2, [pc, #132]	; (800bd60 <TIM_OC1_SetConfig+0xdc>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d003      	beq.n	800bce8 <TIM_OC1_SetConfig+0x64>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a20      	ldr	r2, [pc, #128]	; (800bd64 <TIM_OC1_SetConfig+0xe0>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d10c      	bne.n	800bd02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	f023 0308 	bic.w	r3, r3, #8
 800bcee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	f023 0304 	bic.w	r3, r3, #4
 800bd00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a16      	ldr	r2, [pc, #88]	; (800bd60 <TIM_OC1_SetConfig+0xdc>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d003      	beq.n	800bd12 <TIM_OC1_SetConfig+0x8e>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a15      	ldr	r2, [pc, #84]	; (800bd64 <TIM_OC1_SetConfig+0xe0>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d111      	bne.n	800bd36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bd20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	621a      	str	r2, [r3, #32]
}
 800bd50:	bf00      	nop
 800bd52:	371c      	adds	r7, #28
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	fffeff8f 	.word	0xfffeff8f
 800bd60:	40010000 	.word	0x40010000
 800bd64:	40010400 	.word	0x40010400

0800bd68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b087      	sub	sp, #28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a1b      	ldr	r3, [r3, #32]
 800bd76:	f023 0210 	bic.w	r2, r3, #16
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	4b2e      	ldr	r3, [pc, #184]	; (800be4c <TIM_OC2_SetConfig+0xe4>)
 800bd94:	4013      	ands	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	021b      	lsls	r3, r3, #8
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	f023 0320 	bic.w	r3, r3, #32
 800bdb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a23      	ldr	r2, [pc, #140]	; (800be50 <TIM_OC2_SetConfig+0xe8>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d003      	beq.n	800bdd0 <TIM_OC2_SetConfig+0x68>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4a22      	ldr	r2, [pc, #136]	; (800be54 <TIM_OC2_SetConfig+0xec>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d10d      	bne.n	800bdec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	011b      	lsls	r3, r3, #4
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a18      	ldr	r2, [pc, #96]	; (800be50 <TIM_OC2_SetConfig+0xe8>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d003      	beq.n	800bdfc <TIM_OC2_SetConfig+0x94>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a17      	ldr	r2, [pc, #92]	; (800be54 <TIM_OC2_SetConfig+0xec>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d113      	bne.n	800be24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800be02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800be0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	4313      	orrs	r3, r2
 800be16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	4313      	orrs	r3, r2
 800be22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	685a      	ldr	r2, [r3, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	697a      	ldr	r2, [r7, #20]
 800be3c:	621a      	str	r2, [r3, #32]
}
 800be3e:	bf00      	nop
 800be40:	371c      	adds	r7, #28
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	feff8fff 	.word	0xfeff8fff
 800be50:	40010000 	.word	0x40010000
 800be54:	40010400 	.word	0x40010400

0800be58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a1b      	ldr	r3, [r3, #32]
 800be66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a1b      	ldr	r3, [r3, #32]
 800be72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	69db      	ldr	r3, [r3, #28]
 800be7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4b2d      	ldr	r3, [pc, #180]	; (800bf38 <TIM_OC3_SetConfig+0xe0>)
 800be84:	4013      	ands	r3, r2
 800be86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f023 0303 	bic.w	r3, r3, #3
 800be8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	4313      	orrs	r3, r2
 800be98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	021b      	lsls	r3, r3, #8
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	4313      	orrs	r3, r2
 800beac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a22      	ldr	r2, [pc, #136]	; (800bf3c <TIM_OC3_SetConfig+0xe4>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d003      	beq.n	800bebe <TIM_OC3_SetConfig+0x66>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a21      	ldr	r2, [pc, #132]	; (800bf40 <TIM_OC3_SetConfig+0xe8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d10d      	bne.n	800beda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	021b      	lsls	r3, r3, #8
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	4313      	orrs	r3, r2
 800bed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4a17      	ldr	r2, [pc, #92]	; (800bf3c <TIM_OC3_SetConfig+0xe4>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d003      	beq.n	800beea <TIM_OC3_SetConfig+0x92>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a16      	ldr	r2, [pc, #88]	; (800bf40 <TIM_OC3_SetConfig+0xe8>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d113      	bne.n	800bf12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	695b      	ldr	r3, [r3, #20]
 800befe:	011b      	lsls	r3, r3, #4
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	693a      	ldr	r2, [r7, #16]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	697a      	ldr	r2, [r7, #20]
 800bf2a:	621a      	str	r2, [r3, #32]
}
 800bf2c:	bf00      	nop
 800bf2e:	371c      	adds	r7, #28
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr
 800bf38:	fffeff8f 	.word	0xfffeff8f
 800bf3c:	40010000 	.word	0x40010000
 800bf40:	40010400 	.word	0x40010400

0800bf44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b087      	sub	sp, #28
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6a1b      	ldr	r3, [r3, #32]
 800bf5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	69db      	ldr	r3, [r3, #28]
 800bf6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	4b1e      	ldr	r3, [pc, #120]	; (800bfe8 <TIM_OC4_SetConfig+0xa4>)
 800bf70:	4013      	ands	r3, r2
 800bf72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	021b      	lsls	r3, r3, #8
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bf8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	031b      	lsls	r3, r3, #12
 800bf96:	693a      	ldr	r2, [r7, #16]
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a13      	ldr	r2, [pc, #76]	; (800bfec <TIM_OC4_SetConfig+0xa8>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d003      	beq.n	800bfac <TIM_OC4_SetConfig+0x68>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a12      	ldr	r2, [pc, #72]	; (800bff0 <TIM_OC4_SetConfig+0xac>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d109      	bne.n	800bfc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bfb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	019b      	lsls	r3, r3, #6
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	621a      	str	r2, [r3, #32]
}
 800bfda:	bf00      	nop
 800bfdc:	371c      	adds	r7, #28
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr
 800bfe6:	bf00      	nop
 800bfe8:	feff8fff 	.word	0xfeff8fff
 800bfec:	40010000 	.word	0x40010000
 800bff0:	40010400 	.word	0x40010400

0800bff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	4b1b      	ldr	r3, [pc, #108]	; (800c08c <TIM_OC5_SetConfig+0x98>)
 800c020:	4013      	ands	r3, r2
 800c022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c034:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	041b      	lsls	r3, r3, #16
 800c03c:	693a      	ldr	r2, [r7, #16]
 800c03e:	4313      	orrs	r3, r2
 800c040:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a12      	ldr	r2, [pc, #72]	; (800c090 <TIM_OC5_SetConfig+0x9c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d003      	beq.n	800c052 <TIM_OC5_SetConfig+0x5e>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a11      	ldr	r2, [pc, #68]	; (800c094 <TIM_OC5_SetConfig+0xa0>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d109      	bne.n	800c066 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c058:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	021b      	lsls	r3, r3, #8
 800c060:	697a      	ldr	r2, [r7, #20]
 800c062:	4313      	orrs	r3, r2
 800c064:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	685a      	ldr	r2, [r3, #4]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	621a      	str	r2, [r3, #32]
}
 800c080:	bf00      	nop
 800c082:	371c      	adds	r7, #28
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	fffeff8f 	.word	0xfffeff8f
 800c090:	40010000 	.word	0x40010000
 800c094:	40010400 	.word	0x40010400

0800c098 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a1b      	ldr	r3, [r3, #32]
 800c0a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a1b      	ldr	r3, [r3, #32]
 800c0b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	4b1c      	ldr	r3, [pc, #112]	; (800c134 <TIM_OC6_SetConfig+0x9c>)
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	021b      	lsls	r3, r3, #8
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	051b      	lsls	r3, r3, #20
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a13      	ldr	r2, [pc, #76]	; (800c138 <TIM_OC6_SetConfig+0xa0>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d003      	beq.n	800c0f8 <TIM_OC6_SetConfig+0x60>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a12      	ldr	r2, [pc, #72]	; (800c13c <TIM_OC6_SetConfig+0xa4>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d109      	bne.n	800c10c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c0fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	029b      	lsls	r3, r3, #10
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	4313      	orrs	r3, r2
 800c10a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	621a      	str	r2, [r3, #32]
}
 800c126:	bf00      	nop
 800c128:	371c      	adds	r7, #28
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	feff8fff 	.word	0xfeff8fff
 800c138:	40010000 	.word	0x40010000
 800c13c:	40010400 	.word	0x40010400

0800c140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c140:	b480      	push	{r7}
 800c142:	b087      	sub	sp, #28
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	6a1b      	ldr	r3, [r3, #32]
 800c150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	f023 0201 	bic.w	r2, r3, #1
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	699b      	ldr	r3, [r3, #24]
 800c162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c16a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	011b      	lsls	r3, r3, #4
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	4313      	orrs	r3, r2
 800c174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	f023 030a 	bic.w	r3, r3, #10
 800c17c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c17e:	697a      	ldr	r2, [r7, #20]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	4313      	orrs	r3, r2
 800c184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	621a      	str	r2, [r3, #32]
}
 800c192:	bf00      	nop
 800c194:	371c      	adds	r7, #28
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b087      	sub	sp, #28
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6a1b      	ldr	r3, [r3, #32]
 800c1ae:	f023 0210 	bic.w	r2, r3, #16
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6a1b      	ldr	r3, [r3, #32]
 800c1c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c1c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	031b      	lsls	r3, r3, #12
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c1da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	011b      	lsls	r3, r3, #4
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	697a      	ldr	r2, [r7, #20]
 800c1ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	693a      	ldr	r2, [r7, #16]
 800c1f0:	621a      	str	r2, [r3, #32]
}
 800c1f2:	bf00      	nop
 800c1f4:	371c      	adds	r7, #28
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1fe:	b480      	push	{r7}
 800c200:	b085      	sub	sp, #20
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	f043 0307 	orr.w	r3, r3, #7
 800c220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	609a      	str	r2, [r3, #8]
}
 800c228:	bf00      	nop
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c234:	b480      	push	{r7}
 800c236:	b087      	sub	sp, #28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
 800c240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c24e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	021a      	lsls	r2, r3, #8
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	431a      	orrs	r2, r3
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	4313      	orrs	r3, r2
 800c260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	609a      	str	r2, [r3, #8]
}
 800c268:	bf00      	nop
 800c26a:	371c      	adds	r7, #28
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c284:	2b01      	cmp	r3, #1
 800c286:	d101      	bne.n	800c28c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c288:	2302      	movs	r3, #2
 800c28a:	e06d      	b.n	800c368 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2202      	movs	r2, #2
 800c298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a30      	ldr	r2, [pc, #192]	; (800c374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d004      	beq.n	800c2c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a2f      	ldr	r2, [pc, #188]	; (800c378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d108      	bne.n	800c2d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c2c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a20      	ldr	r2, [pc, #128]	; (800c374 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d022      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fe:	d01d      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a1d      	ldr	r2, [pc, #116]	; (800c37c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d018      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a1c      	ldr	r2, [pc, #112]	; (800c380 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d013      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a1a      	ldr	r2, [pc, #104]	; (800c384 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d00e      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a15      	ldr	r2, [pc, #84]	; (800c378 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d009      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a16      	ldr	r2, [pc, #88]	; (800c388 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d004      	beq.n	800c33c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a15      	ldr	r2, [pc, #84]	; (800c38c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d10c      	bne.n	800c356 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c342:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	68ba      	ldr	r2, [r7, #8]
 800c354:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2201      	movs	r2, #1
 800c35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	40010000 	.word	0x40010000
 800c378:	40010400 	.word	0x40010400
 800c37c:	40000400 	.word	0x40000400
 800c380:	40000800 	.word	0x40000800
 800c384:	40000c00 	.word	0x40000c00
 800c388:	40014000 	.word	0x40014000
 800c38c:	40001800 	.word	0x40001800

0800c390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c39a:	2300      	movs	r3, #0
 800c39c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d101      	bne.n	800c3ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	e065      	b.n	800c478 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	695b      	ldr	r3, [r3, #20]
 800c404:	4313      	orrs	r3, r2
 800c406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	041b      	lsls	r3, r3, #16
 800c422:	4313      	orrs	r3, r2
 800c424:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a16      	ldr	r2, [pc, #88]	; (800c484 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d004      	beq.n	800c43a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a14      	ldr	r2, [pc, #80]	; (800c488 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d115      	bne.n	800c466 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c444:	051b      	lsls	r3, r3, #20
 800c446:	4313      	orrs	r3, r2
 800c448:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	69db      	ldr	r3, [r3, #28]
 800c454:	4313      	orrs	r3, r2
 800c456:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	4313      	orrs	r3, r2
 800c464:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	40010000 	.word	0x40010000
 800c488:	40010400 	.word	0x40010400

0800c48c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e040      	b.n	800c55c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d106      	bne.n	800c4f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7f6 f982 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2224      	movs	r2, #36	; 0x24
 800c4f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f022 0201 	bic.w	r2, r2, #1
 800c504:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f8b0 	bl	800c66c <UART_SetConfig>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d101      	bne.n	800c516 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e022      	b.n	800c55c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fb08 	bl	800cb34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689a      	ldr	r2, [r3, #8]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f042 0201 	orr.w	r2, r2, #1
 800c552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fb8f 	bl	800cc78 <UART_CheckIdleState>
 800c55a:	4603      	mov	r3, r0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08a      	sub	sp, #40	; 0x28
 800c568:	af02      	add	r7, sp, #8
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	603b      	str	r3, [r7, #0]
 800c570:	4613      	mov	r3, r2
 800c572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c578:	2b20      	cmp	r3, #32
 800c57a:	d171      	bne.n	800c660 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d002      	beq.n	800c588 <HAL_UART_Transmit+0x24>
 800c582:	88fb      	ldrh	r3, [r7, #6]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e06a      	b.n	800c662 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2221      	movs	r2, #33	; 0x21
 800c598:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c59a:	f7f6 fe25 	bl	80031e8 <HAL_GetTick>
 800c59e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	88fa      	ldrh	r2, [r7, #6]
 800c5a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	88fa      	ldrh	r2, [r7, #6]
 800c5ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5b8:	d108      	bne.n	800c5cc <HAL_UART_Transmit+0x68>
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d104      	bne.n	800c5cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	61bb      	str	r3, [r7, #24]
 800c5ca:	e003      	b.n	800c5d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c5d4:	e02c      	b.n	800c630 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2180      	movs	r1, #128	; 0x80
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f000 fb80 	bl	800cce6 <UART_WaitOnFlagUntilTimeout>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	e038      	b.n	800c662 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10b      	bne.n	800c60e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	881b      	ldrh	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c604:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	3302      	adds	r3, #2
 800c60a:	61bb      	str	r3, [r7, #24]
 800c60c:	e007      	b.n	800c61e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	781a      	ldrb	r2, [r3, #0]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	3301      	adds	r3, #1
 800c61c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c624:	b29b      	uxth	r3, r3
 800c626:	3b01      	subs	r3, #1
 800c628:	b29a      	uxth	r2, r3
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c636:	b29b      	uxth	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1cc      	bne.n	800c5d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2200      	movs	r2, #0
 800c644:	2140      	movs	r1, #64	; 0x40
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f000 fb4d 	bl	800cce6 <UART_WaitOnFlagUntilTimeout>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d001      	beq.n	800c656 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800c652:	2303      	movs	r3, #3
 800c654:	e005      	b.n	800c662 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2220      	movs	r2, #32
 800c65a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	e000      	b.n	800c662 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800c660:	2302      	movs	r3, #2
  }
}
 800c662:	4618      	mov	r0, r3
 800c664:	3720      	adds	r7, #32
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
	...

0800c66c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b088      	sub	sp, #32
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c674:	2300      	movs	r3, #0
 800c676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	689a      	ldr	r2, [r3, #8]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	431a      	orrs	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	431a      	orrs	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	4ba6      	ldr	r3, [pc, #664]	; (800c930 <UART_SetConfig+0x2c4>)
 800c698:	4013      	ands	r3, r2
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	6812      	ldr	r2, [r2, #0]
 800c69e:	6979      	ldr	r1, [r7, #20]
 800c6a0:	430b      	orrs	r3, r1
 800c6a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68da      	ldr	r2, [r3, #12]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	430a      	orrs	r2, r1
 800c6b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	699b      	ldr	r3, [r3, #24]
 800c6be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6a1b      	ldr	r3, [r3, #32]
 800c6c4:	697a      	ldr	r2, [r7, #20]
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a94      	ldr	r2, [pc, #592]	; (800c934 <UART_SetConfig+0x2c8>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d120      	bne.n	800c72a <UART_SetConfig+0xbe>
 800c6e8:	4b93      	ldr	r3, [pc, #588]	; (800c938 <UART_SetConfig+0x2cc>)
 800c6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6ee:	f003 0303 	and.w	r3, r3, #3
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	d816      	bhi.n	800c724 <UART_SetConfig+0xb8>
 800c6f6:	a201      	add	r2, pc, #4	; (adr r2, 800c6fc <UART_SetConfig+0x90>)
 800c6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fc:	0800c70d 	.word	0x0800c70d
 800c700:	0800c719 	.word	0x0800c719
 800c704:	0800c713 	.word	0x0800c713
 800c708:	0800c71f 	.word	0x0800c71f
 800c70c:	2301      	movs	r3, #1
 800c70e:	77fb      	strb	r3, [r7, #31]
 800c710:	e150      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c712:	2302      	movs	r3, #2
 800c714:	77fb      	strb	r3, [r7, #31]
 800c716:	e14d      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c718:	2304      	movs	r3, #4
 800c71a:	77fb      	strb	r3, [r7, #31]
 800c71c:	e14a      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c71e:	2308      	movs	r3, #8
 800c720:	77fb      	strb	r3, [r7, #31]
 800c722:	e147      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c724:	2310      	movs	r3, #16
 800c726:	77fb      	strb	r3, [r7, #31]
 800c728:	e144      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a83      	ldr	r2, [pc, #524]	; (800c93c <UART_SetConfig+0x2d0>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d132      	bne.n	800c79a <UART_SetConfig+0x12e>
 800c734:	4b80      	ldr	r3, [pc, #512]	; (800c938 <UART_SetConfig+0x2cc>)
 800c736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c73a:	f003 030c 	and.w	r3, r3, #12
 800c73e:	2b0c      	cmp	r3, #12
 800c740:	d828      	bhi.n	800c794 <UART_SetConfig+0x128>
 800c742:	a201      	add	r2, pc, #4	; (adr r2, 800c748 <UART_SetConfig+0xdc>)
 800c744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c748:	0800c77d 	.word	0x0800c77d
 800c74c:	0800c795 	.word	0x0800c795
 800c750:	0800c795 	.word	0x0800c795
 800c754:	0800c795 	.word	0x0800c795
 800c758:	0800c789 	.word	0x0800c789
 800c75c:	0800c795 	.word	0x0800c795
 800c760:	0800c795 	.word	0x0800c795
 800c764:	0800c795 	.word	0x0800c795
 800c768:	0800c783 	.word	0x0800c783
 800c76c:	0800c795 	.word	0x0800c795
 800c770:	0800c795 	.word	0x0800c795
 800c774:	0800c795 	.word	0x0800c795
 800c778:	0800c78f 	.word	0x0800c78f
 800c77c:	2300      	movs	r3, #0
 800c77e:	77fb      	strb	r3, [r7, #31]
 800c780:	e118      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c782:	2302      	movs	r3, #2
 800c784:	77fb      	strb	r3, [r7, #31]
 800c786:	e115      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c788:	2304      	movs	r3, #4
 800c78a:	77fb      	strb	r3, [r7, #31]
 800c78c:	e112      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c78e:	2308      	movs	r3, #8
 800c790:	77fb      	strb	r3, [r7, #31]
 800c792:	e10f      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c794:	2310      	movs	r3, #16
 800c796:	77fb      	strb	r3, [r7, #31]
 800c798:	e10c      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a68      	ldr	r2, [pc, #416]	; (800c940 <UART_SetConfig+0x2d4>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d120      	bne.n	800c7e6 <UART_SetConfig+0x17a>
 800c7a4:	4b64      	ldr	r3, [pc, #400]	; (800c938 <UART_SetConfig+0x2cc>)
 800c7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c7ae:	2b30      	cmp	r3, #48	; 0x30
 800c7b0:	d013      	beq.n	800c7da <UART_SetConfig+0x16e>
 800c7b2:	2b30      	cmp	r3, #48	; 0x30
 800c7b4:	d814      	bhi.n	800c7e0 <UART_SetConfig+0x174>
 800c7b6:	2b20      	cmp	r3, #32
 800c7b8:	d009      	beq.n	800c7ce <UART_SetConfig+0x162>
 800c7ba:	2b20      	cmp	r3, #32
 800c7bc:	d810      	bhi.n	800c7e0 <UART_SetConfig+0x174>
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d002      	beq.n	800c7c8 <UART_SetConfig+0x15c>
 800c7c2:	2b10      	cmp	r3, #16
 800c7c4:	d006      	beq.n	800c7d4 <UART_SetConfig+0x168>
 800c7c6:	e00b      	b.n	800c7e0 <UART_SetConfig+0x174>
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	77fb      	strb	r3, [r7, #31]
 800c7cc:	e0f2      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c7ce:	2302      	movs	r3, #2
 800c7d0:	77fb      	strb	r3, [r7, #31]
 800c7d2:	e0ef      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c7d4:	2304      	movs	r3, #4
 800c7d6:	77fb      	strb	r3, [r7, #31]
 800c7d8:	e0ec      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c7da:	2308      	movs	r3, #8
 800c7dc:	77fb      	strb	r3, [r7, #31]
 800c7de:	e0e9      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c7e0:	2310      	movs	r3, #16
 800c7e2:	77fb      	strb	r3, [r7, #31]
 800c7e4:	e0e6      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a56      	ldr	r2, [pc, #344]	; (800c944 <UART_SetConfig+0x2d8>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d120      	bne.n	800c832 <UART_SetConfig+0x1c6>
 800c7f0:	4b51      	ldr	r3, [pc, #324]	; (800c938 <UART_SetConfig+0x2cc>)
 800c7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c7fa:	2bc0      	cmp	r3, #192	; 0xc0
 800c7fc:	d013      	beq.n	800c826 <UART_SetConfig+0x1ba>
 800c7fe:	2bc0      	cmp	r3, #192	; 0xc0
 800c800:	d814      	bhi.n	800c82c <UART_SetConfig+0x1c0>
 800c802:	2b80      	cmp	r3, #128	; 0x80
 800c804:	d009      	beq.n	800c81a <UART_SetConfig+0x1ae>
 800c806:	2b80      	cmp	r3, #128	; 0x80
 800c808:	d810      	bhi.n	800c82c <UART_SetConfig+0x1c0>
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <UART_SetConfig+0x1a8>
 800c80e:	2b40      	cmp	r3, #64	; 0x40
 800c810:	d006      	beq.n	800c820 <UART_SetConfig+0x1b4>
 800c812:	e00b      	b.n	800c82c <UART_SetConfig+0x1c0>
 800c814:	2300      	movs	r3, #0
 800c816:	77fb      	strb	r3, [r7, #31]
 800c818:	e0cc      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c81a:	2302      	movs	r3, #2
 800c81c:	77fb      	strb	r3, [r7, #31]
 800c81e:	e0c9      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c820:	2304      	movs	r3, #4
 800c822:	77fb      	strb	r3, [r7, #31]
 800c824:	e0c6      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c826:	2308      	movs	r3, #8
 800c828:	77fb      	strb	r3, [r7, #31]
 800c82a:	e0c3      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c82c:	2310      	movs	r3, #16
 800c82e:	77fb      	strb	r3, [r7, #31]
 800c830:	e0c0      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a44      	ldr	r2, [pc, #272]	; (800c948 <UART_SetConfig+0x2dc>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d125      	bne.n	800c888 <UART_SetConfig+0x21c>
 800c83c:	4b3e      	ldr	r3, [pc, #248]	; (800c938 <UART_SetConfig+0x2cc>)
 800c83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c84a:	d017      	beq.n	800c87c <UART_SetConfig+0x210>
 800c84c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c850:	d817      	bhi.n	800c882 <UART_SetConfig+0x216>
 800c852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c856:	d00b      	beq.n	800c870 <UART_SetConfig+0x204>
 800c858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c85c:	d811      	bhi.n	800c882 <UART_SetConfig+0x216>
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <UART_SetConfig+0x1fe>
 800c862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c866:	d006      	beq.n	800c876 <UART_SetConfig+0x20a>
 800c868:	e00b      	b.n	800c882 <UART_SetConfig+0x216>
 800c86a:	2300      	movs	r3, #0
 800c86c:	77fb      	strb	r3, [r7, #31]
 800c86e:	e0a1      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c870:	2302      	movs	r3, #2
 800c872:	77fb      	strb	r3, [r7, #31]
 800c874:	e09e      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c876:	2304      	movs	r3, #4
 800c878:	77fb      	strb	r3, [r7, #31]
 800c87a:	e09b      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c87c:	2308      	movs	r3, #8
 800c87e:	77fb      	strb	r3, [r7, #31]
 800c880:	e098      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c882:	2310      	movs	r3, #16
 800c884:	77fb      	strb	r3, [r7, #31]
 800c886:	e095      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a2f      	ldr	r2, [pc, #188]	; (800c94c <UART_SetConfig+0x2e0>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d125      	bne.n	800c8de <UART_SetConfig+0x272>
 800c892:	4b29      	ldr	r3, [pc, #164]	; (800c938 <UART_SetConfig+0x2cc>)
 800c894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c898:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c89c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8a0:	d017      	beq.n	800c8d2 <UART_SetConfig+0x266>
 800c8a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c8a6:	d817      	bhi.n	800c8d8 <UART_SetConfig+0x26c>
 800c8a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8ac:	d00b      	beq.n	800c8c6 <UART_SetConfig+0x25a>
 800c8ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8b2:	d811      	bhi.n	800c8d8 <UART_SetConfig+0x26c>
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <UART_SetConfig+0x254>
 800c8b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8bc:	d006      	beq.n	800c8cc <UART_SetConfig+0x260>
 800c8be:	e00b      	b.n	800c8d8 <UART_SetConfig+0x26c>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	77fb      	strb	r3, [r7, #31]
 800c8c4:	e076      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	77fb      	strb	r3, [r7, #31]
 800c8ca:	e073      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c8cc:	2304      	movs	r3, #4
 800c8ce:	77fb      	strb	r3, [r7, #31]
 800c8d0:	e070      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c8d2:	2308      	movs	r3, #8
 800c8d4:	77fb      	strb	r3, [r7, #31]
 800c8d6:	e06d      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c8d8:	2310      	movs	r3, #16
 800c8da:	77fb      	strb	r3, [r7, #31]
 800c8dc:	e06a      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a1b      	ldr	r2, [pc, #108]	; (800c950 <UART_SetConfig+0x2e4>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d138      	bne.n	800c95a <UART_SetConfig+0x2ee>
 800c8e8:	4b13      	ldr	r3, [pc, #76]	; (800c938 <UART_SetConfig+0x2cc>)
 800c8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c8f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8f6:	d017      	beq.n	800c928 <UART_SetConfig+0x2bc>
 800c8f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c8fc:	d82a      	bhi.n	800c954 <UART_SetConfig+0x2e8>
 800c8fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c902:	d00b      	beq.n	800c91c <UART_SetConfig+0x2b0>
 800c904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c908:	d824      	bhi.n	800c954 <UART_SetConfig+0x2e8>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d003      	beq.n	800c916 <UART_SetConfig+0x2aa>
 800c90e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c912:	d006      	beq.n	800c922 <UART_SetConfig+0x2b6>
 800c914:	e01e      	b.n	800c954 <UART_SetConfig+0x2e8>
 800c916:	2300      	movs	r3, #0
 800c918:	77fb      	strb	r3, [r7, #31]
 800c91a:	e04b      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c91c:	2302      	movs	r3, #2
 800c91e:	77fb      	strb	r3, [r7, #31]
 800c920:	e048      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c922:	2304      	movs	r3, #4
 800c924:	77fb      	strb	r3, [r7, #31]
 800c926:	e045      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c928:	2308      	movs	r3, #8
 800c92a:	77fb      	strb	r3, [r7, #31]
 800c92c:	e042      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c92e:	bf00      	nop
 800c930:	efff69f3 	.word	0xefff69f3
 800c934:	40011000 	.word	0x40011000
 800c938:	40023800 	.word	0x40023800
 800c93c:	40004400 	.word	0x40004400
 800c940:	40004800 	.word	0x40004800
 800c944:	40004c00 	.word	0x40004c00
 800c948:	40005000 	.word	0x40005000
 800c94c:	40011400 	.word	0x40011400
 800c950:	40007800 	.word	0x40007800
 800c954:	2310      	movs	r3, #16
 800c956:	77fb      	strb	r3, [r7, #31]
 800c958:	e02c      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a72      	ldr	r2, [pc, #456]	; (800cb28 <UART_SetConfig+0x4bc>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d125      	bne.n	800c9b0 <UART_SetConfig+0x344>
 800c964:	4b71      	ldr	r3, [pc, #452]	; (800cb2c <UART_SetConfig+0x4c0>)
 800c966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c96a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c96e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c972:	d017      	beq.n	800c9a4 <UART_SetConfig+0x338>
 800c974:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c978:	d817      	bhi.n	800c9aa <UART_SetConfig+0x33e>
 800c97a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c97e:	d00b      	beq.n	800c998 <UART_SetConfig+0x32c>
 800c980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c984:	d811      	bhi.n	800c9aa <UART_SetConfig+0x33e>
 800c986:	2b00      	cmp	r3, #0
 800c988:	d003      	beq.n	800c992 <UART_SetConfig+0x326>
 800c98a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c98e:	d006      	beq.n	800c99e <UART_SetConfig+0x332>
 800c990:	e00b      	b.n	800c9aa <UART_SetConfig+0x33e>
 800c992:	2300      	movs	r3, #0
 800c994:	77fb      	strb	r3, [r7, #31]
 800c996:	e00d      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c998:	2302      	movs	r3, #2
 800c99a:	77fb      	strb	r3, [r7, #31]
 800c99c:	e00a      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c99e:	2304      	movs	r3, #4
 800c9a0:	77fb      	strb	r3, [r7, #31]
 800c9a2:	e007      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c9a4:	2308      	movs	r3, #8
 800c9a6:	77fb      	strb	r3, [r7, #31]
 800c9a8:	e004      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c9aa:	2310      	movs	r3, #16
 800c9ac:	77fb      	strb	r3, [r7, #31]
 800c9ae:	e001      	b.n	800c9b4 <UART_SetConfig+0x348>
 800c9b0:	2310      	movs	r3, #16
 800c9b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	69db      	ldr	r3, [r3, #28]
 800c9b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9bc:	d15b      	bne.n	800ca76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c9be:	7ffb      	ldrb	r3, [r7, #31]
 800c9c0:	2b08      	cmp	r3, #8
 800c9c2:	d828      	bhi.n	800ca16 <UART_SetConfig+0x3aa>
 800c9c4:	a201      	add	r2, pc, #4	; (adr r2, 800c9cc <UART_SetConfig+0x360>)
 800c9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ca:	bf00      	nop
 800c9cc:	0800c9f1 	.word	0x0800c9f1
 800c9d0:	0800c9f9 	.word	0x0800c9f9
 800c9d4:	0800ca01 	.word	0x0800ca01
 800c9d8:	0800ca17 	.word	0x0800ca17
 800c9dc:	0800ca07 	.word	0x0800ca07
 800c9e0:	0800ca17 	.word	0x0800ca17
 800c9e4:	0800ca17 	.word	0x0800ca17
 800c9e8:	0800ca17 	.word	0x0800ca17
 800c9ec:	0800ca0f 	.word	0x0800ca0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9f0:	f7fb ff66 	bl	80088c0 <HAL_RCC_GetPCLK1Freq>
 800c9f4:	61b8      	str	r0, [r7, #24]
        break;
 800c9f6:	e013      	b.n	800ca20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9f8:	f7fb ff76 	bl	80088e8 <HAL_RCC_GetPCLK2Freq>
 800c9fc:	61b8      	str	r0, [r7, #24]
        break;
 800c9fe:	e00f      	b.n	800ca20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca00:	4b4b      	ldr	r3, [pc, #300]	; (800cb30 <UART_SetConfig+0x4c4>)
 800ca02:	61bb      	str	r3, [r7, #24]
        break;
 800ca04:	e00c      	b.n	800ca20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca06:	f7fb fe89 	bl	800871c <HAL_RCC_GetSysClockFreq>
 800ca0a:	61b8      	str	r0, [r7, #24]
        break;
 800ca0c:	e008      	b.n	800ca20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca12:	61bb      	str	r3, [r7, #24]
        break;
 800ca14:	e004      	b.n	800ca20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ca16:	2300      	movs	r3, #0
 800ca18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	77bb      	strb	r3, [r7, #30]
        break;
 800ca1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d074      	beq.n	800cb10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	005a      	lsls	r2, r3, #1
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	085b      	lsrs	r3, r3, #1
 800ca30:	441a      	add	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	2b0f      	cmp	r3, #15
 800ca40:	d916      	bls.n	800ca70 <UART_SetConfig+0x404>
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca48:	d212      	bcs.n	800ca70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	f023 030f 	bic.w	r3, r3, #15
 800ca52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	085b      	lsrs	r3, r3, #1
 800ca58:	b29b      	uxth	r3, r3
 800ca5a:	f003 0307 	and.w	r3, r3, #7
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	89fb      	ldrh	r3, [r7, #14]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	89fa      	ldrh	r2, [r7, #14]
 800ca6c:	60da      	str	r2, [r3, #12]
 800ca6e:	e04f      	b.n	800cb10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	77bb      	strb	r3, [r7, #30]
 800ca74:	e04c      	b.n	800cb10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca76:	7ffb      	ldrb	r3, [r7, #31]
 800ca78:	2b08      	cmp	r3, #8
 800ca7a:	d828      	bhi.n	800cace <UART_SetConfig+0x462>
 800ca7c:	a201      	add	r2, pc, #4	; (adr r2, 800ca84 <UART_SetConfig+0x418>)
 800ca7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca82:	bf00      	nop
 800ca84:	0800caa9 	.word	0x0800caa9
 800ca88:	0800cab1 	.word	0x0800cab1
 800ca8c:	0800cab9 	.word	0x0800cab9
 800ca90:	0800cacf 	.word	0x0800cacf
 800ca94:	0800cabf 	.word	0x0800cabf
 800ca98:	0800cacf 	.word	0x0800cacf
 800ca9c:	0800cacf 	.word	0x0800cacf
 800caa0:	0800cacf 	.word	0x0800cacf
 800caa4:	0800cac7 	.word	0x0800cac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800caa8:	f7fb ff0a 	bl	80088c0 <HAL_RCC_GetPCLK1Freq>
 800caac:	61b8      	str	r0, [r7, #24]
        break;
 800caae:	e013      	b.n	800cad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cab0:	f7fb ff1a 	bl	80088e8 <HAL_RCC_GetPCLK2Freq>
 800cab4:	61b8      	str	r0, [r7, #24]
        break;
 800cab6:	e00f      	b.n	800cad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cab8:	4b1d      	ldr	r3, [pc, #116]	; (800cb30 <UART_SetConfig+0x4c4>)
 800caba:	61bb      	str	r3, [r7, #24]
        break;
 800cabc:	e00c      	b.n	800cad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cabe:	f7fb fe2d 	bl	800871c <HAL_RCC_GetSysClockFreq>
 800cac2:	61b8      	str	r0, [r7, #24]
        break;
 800cac4:	e008      	b.n	800cad8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caca:	61bb      	str	r3, [r7, #24]
        break;
 800cacc:	e004      	b.n	800cad8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cace:	2300      	movs	r3, #0
 800cad0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	77bb      	strb	r3, [r7, #30]
        break;
 800cad6:	bf00      	nop
    }

    if (pclk != 0U)
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d018      	beq.n	800cb10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	085a      	lsrs	r2, r3, #1
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	441a      	add	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	2b0f      	cmp	r3, #15
 800caf6:	d909      	bls.n	800cb0c <UART_SetConfig+0x4a0>
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cafe:	d205      	bcs.n	800cb0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	60da      	str	r2, [r3, #12]
 800cb0a:	e001      	b.n	800cb10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2200      	movs	r2, #0
 800cb14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cb1c:	7fbb      	ldrb	r3, [r7, #30]
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3720      	adds	r7, #32
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	40007c00 	.word	0x40007c00
 800cb2c:	40023800 	.word	0x40023800
 800cb30:	00f42400 	.word	0x00f42400

0800cb34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00a      	beq.n	800cb5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	430a      	orrs	r2, r1
 800cb5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb62:	f003 0302 	and.w	r3, r3, #2
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00a      	beq.n	800cb80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb84:	f003 0304 	and.w	r3, r3, #4
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00a      	beq.n	800cba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	430a      	orrs	r2, r1
 800cba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba6:	f003 0308 	and.w	r3, r3, #8
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00a      	beq.n	800cbc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc8:	f003 0310 	and.w	r3, r3, #16
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00a      	beq.n	800cbe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	430a      	orrs	r2, r1
 800cbe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	f003 0320 	and.w	r3, r3, #32
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00a      	beq.n	800cc08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	430a      	orrs	r2, r1
 800cc06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d01a      	beq.n	800cc4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	430a      	orrs	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc32:	d10a      	bne.n	800cc4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d00a      	beq.n	800cc6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	605a      	str	r2, [r3, #4]
  }
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc88:	f7f6 faae 	bl	80031e8 <HAL_GetTick>
 800cc8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f003 0308 	and.w	r3, r3, #8
 800cc98:	2b08      	cmp	r3, #8
 800cc9a:	d10e      	bne.n	800ccba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 f81b 	bl	800cce6 <UART_WaitOnFlagUntilTimeout>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d001      	beq.n	800ccba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	e011      	b.n	800ccde <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2220      	movs	r2, #32
 800ccbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2220      	movs	r2, #32
 800ccc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b09c      	sub	sp, #112	; 0x70
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	60f8      	str	r0, [r7, #12]
 800ccee:	60b9      	str	r1, [r7, #8]
 800ccf0:	603b      	str	r3, [r7, #0]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ccf6:	e0a7      	b.n	800ce48 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ccf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ccfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccfe:	f000 80a3 	beq.w	800ce48 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd02:	f7f6 fa71 	bl	80031e8 <HAL_GetTick>
 800cd06:	4602      	mov	r2, r0
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	1ad3      	subs	r3, r2, r3
 800cd0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d302      	bcc.n	800cd18 <UART_WaitOnFlagUntilTimeout+0x32>
 800cd12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d13f      	bne.n	800cd98 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd20:	e853 3f00 	ldrex	r3, [r3]
 800cd24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cd26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd2c:	667b      	str	r3, [r7, #100]	; 0x64
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	461a      	mov	r2, r3
 800cd34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd36:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd3e:	e841 2300 	strex	r3, r2, [r1]
 800cd42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cd44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1e6      	bne.n	800cd18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3308      	adds	r3, #8
 800cd50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd54:	e853 3f00 	ldrex	r3, [r3]
 800cd58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	f023 0301 	bic.w	r3, r3, #1
 800cd60:	663b      	str	r3, [r7, #96]	; 0x60
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3308      	adds	r3, #8
 800cd68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd6a:	64ba      	str	r2, [r7, #72]	; 0x48
 800cd6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cd70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd72:	e841 2300 	strex	r3, r2, [r1]
 800cd76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cd78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1e5      	bne.n	800cd4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2220      	movs	r2, #32
 800cd82:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2220      	movs	r2, #32
 800cd88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800cd94:	2303      	movs	r3, #3
 800cd96:	e068      	b.n	800ce6a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f003 0304 	and.w	r3, r3, #4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d050      	beq.n	800ce48 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	69db      	ldr	r3, [r3, #28]
 800cdac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdb4:	d148      	bne.n	800ce48 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cdbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc8:	e853 3f00 	ldrex	r3, [r3]
 800cdcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cdd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	461a      	mov	r2, r3
 800cddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdde:	637b      	str	r3, [r7, #52]	; 0x34
 800cde0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cde4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cde6:	e841 2300 	strex	r3, r2, [r1]
 800cdea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d1e6      	bne.n	800cdc0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	e853 3f00 	ldrex	r3, [r3]
 800ce00:	613b      	str	r3, [r7, #16]
   return(result);
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	f023 0301 	bic.w	r3, r3, #1
 800ce08:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	3308      	adds	r3, #8
 800ce10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce12:	623a      	str	r2, [r7, #32]
 800ce14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce16:	69f9      	ldr	r1, [r7, #28]
 800ce18:	6a3a      	ldr	r2, [r7, #32]
 800ce1a:	e841 2300 	strex	r3, r2, [r1]
 800ce1e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1e5      	bne.n	800cdf2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2220      	movs	r2, #32
 800ce2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2220      	movs	r2, #32
 800ce30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2220      	movs	r2, #32
 800ce38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ce44:	2303      	movs	r3, #3
 800ce46:	e010      	b.n	800ce6a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	69da      	ldr	r2, [r3, #28]
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	4013      	ands	r3, r2
 800ce52:	68ba      	ldr	r2, [r7, #8]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	bf0c      	ite	eq
 800ce58:	2301      	moveq	r3, #1
 800ce5a:	2300      	movne	r3, #0
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	461a      	mov	r2, r3
 800ce60:	79fb      	ldrb	r3, [r7, #7]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	f43f af48 	beq.w	800ccf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3770      	adds	r7, #112	; 0x70
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
	...

0800ce74 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d121      	bne.n	800ceca <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	4b27      	ldr	r3, [pc, #156]	; (800cf28 <FMC_SDRAM_Init+0xb4>)
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	6851      	ldr	r1, [r2, #4]
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	6892      	ldr	r2, [r2, #8]
 800ce96:	4311      	orrs	r1, r2
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	68d2      	ldr	r2, [r2, #12]
 800ce9c:	4311      	orrs	r1, r2
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	6912      	ldr	r2, [r2, #16]
 800cea2:	4311      	orrs	r1, r2
 800cea4:	683a      	ldr	r2, [r7, #0]
 800cea6:	6952      	ldr	r2, [r2, #20]
 800cea8:	4311      	orrs	r1, r2
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	6992      	ldr	r2, [r2, #24]
 800ceae:	4311      	orrs	r1, r2
 800ceb0:	683a      	ldr	r2, [r7, #0]
 800ceb2:	69d2      	ldr	r2, [r2, #28]
 800ceb4:	4311      	orrs	r1, r2
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	6a12      	ldr	r2, [r2, #32]
 800ceba:	4311      	orrs	r1, r2
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cec0:	430a      	orrs	r2, r1
 800cec2:	431a      	orrs	r2, r3
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	601a      	str	r2, [r3, #0]
 800cec8:	e026      	b.n	800cf18 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	69d9      	ldr	r1, [r3, #28]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	6a1b      	ldr	r3, [r3, #32]
 800ceda:	4319      	orrs	r1, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee0:	430b      	orrs	r3, r1
 800cee2:	431a      	orrs	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	4b0e      	ldr	r3, [pc, #56]	; (800cf28 <FMC_SDRAM_Init+0xb4>)
 800ceee:	4013      	ands	r3, r2
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	6851      	ldr	r1, [r2, #4]
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	6892      	ldr	r2, [r2, #8]
 800cef8:	4311      	orrs	r1, r2
 800cefa:	683a      	ldr	r2, [r7, #0]
 800cefc:	68d2      	ldr	r2, [r2, #12]
 800cefe:	4311      	orrs	r1, r2
 800cf00:	683a      	ldr	r2, [r7, #0]
 800cf02:	6912      	ldr	r2, [r2, #16]
 800cf04:	4311      	orrs	r1, r2
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	6952      	ldr	r2, [r2, #20]
 800cf0a:	4311      	orrs	r1, r2
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	6992      	ldr	r2, [r2, #24]
 800cf10:	430a      	orrs	r2, r1
 800cf12:	431a      	orrs	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	ffff8000 	.word	0xffff8000

0800cf2c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d128      	bne.n	800cf90 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	1e59      	subs	r1, r3, #1
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	685b      	ldr	r3, [r3, #4]
 800cf50:	3b01      	subs	r3, #1
 800cf52:	011b      	lsls	r3, r3, #4
 800cf54:	4319      	orrs	r1, r3
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	021b      	lsls	r3, r3, #8
 800cf5e:	4319      	orrs	r1, r3
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	3b01      	subs	r3, #1
 800cf66:	031b      	lsls	r3, r3, #12
 800cf68:	4319      	orrs	r1, r3
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	041b      	lsls	r3, r3, #16
 800cf72:	4319      	orrs	r1, r3
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	695b      	ldr	r3, [r3, #20]
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	051b      	lsls	r3, r3, #20
 800cf7c:	4319      	orrs	r1, r3
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	699b      	ldr	r3, [r3, #24]
 800cf82:	3b01      	subs	r3, #1
 800cf84:	061b      	lsls	r3, r3, #24
 800cf86:	430b      	orrs	r3, r1
 800cf88:	431a      	orrs	r2, r3
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	609a      	str	r2, [r3, #8]
 800cf8e:	e02d      	b.n	800cfec <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	689a      	ldr	r2, [r3, #8]
 800cf94:	4b19      	ldr	r3, [pc, #100]	; (800cffc <FMC_SDRAM_Timing_Init+0xd0>)
 800cf96:	4013      	ands	r3, r2
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	68d2      	ldr	r2, [r2, #12]
 800cf9c:	3a01      	subs	r2, #1
 800cf9e:	0311      	lsls	r1, r2, #12
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	6952      	ldr	r2, [r2, #20]
 800cfa4:	3a01      	subs	r2, #1
 800cfa6:	0512      	lsls	r2, r2, #20
 800cfa8:	430a      	orrs	r2, r1
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	1e59      	subs	r1, r3, #1
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	011b      	lsls	r3, r3, #4
 800cfc6:	4319      	orrs	r1, r3
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	021b      	lsls	r3, r3, #8
 800cfd0:	4319      	orrs	r1, r3
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	691b      	ldr	r3, [r3, #16]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	041b      	lsls	r3, r3, #16
 800cfda:	4319      	orrs	r1, r3
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	061b      	lsls	r3, r3, #24
 800cfe4:	430b      	orrs	r3, r1
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3714      	adds	r7, #20
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	ff0f0fff 	.word	0xff0f0fff

0800d000 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d000:	b084      	sub	sp, #16
 800d002:	b480      	push	{r7}
 800d004:	b085      	sub	sp, #20
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
 800d00a:	f107 001c 	add.w	r0, r7, #28
 800d00e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d016:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d018:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d01a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d01e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d020:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d022:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d026:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d02a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	4b07      	ldr	r3, [pc, #28]	; (800d054 <SDMMC_Init+0x54>)
 800d038:	4013      	ands	r3, r2
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	431a      	orrs	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3714      	adds	r7, #20
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	b004      	add	sp, #16
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	ffff8100 	.word	0xffff8100

0800d058 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d066:	4618      	mov	r0, r3
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d072:	b480      	push	{r7}
 800d074:	b083      	sub	sp, #12
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2203      	movs	r2, #3
 800d07e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	370c      	adds	r7, #12
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d08e:	b480      	push	{r7}
 800d090:	b083      	sub	sp, #12
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 0303 	and.w	r3, r3, #3
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
	...

0800d0ac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b085      	sub	sp, #20
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d0d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d0d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68da      	ldr	r2, [r3, #12]
 800d0e2:	4b06      	ldr	r3, [pc, #24]	; (800d0fc <SDMMC_SendCommand+0x50>)
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	431a      	orrs	r2, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3714      	adds	r7, #20
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fa:	4770      	bx	lr
 800d0fc:	fffff000 	.word	0xfffff000

0800d100 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	691b      	ldr	r3, [r3, #16]
 800d10c:	b2db      	uxtb	r3, r3
}
 800d10e:	4618      	mov	r0, r3
 800d110:	370c      	adds	r7, #12
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr

0800d11a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d11a:	b480      	push	{r7}
 800d11c:	b085      	sub	sp, #20
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3314      	adds	r3, #20
 800d128:	461a      	mov	r2, r3
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	4413      	add	r3, r2
 800d12e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	681b      	ldr	r3, [r3, #0]
}  
 800d134:	4618      	mov	r0, r3
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d140:	b480      	push	{r7}
 800d142:	b085      	sub	sp, #20
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	685a      	ldr	r2, [r3, #4]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d166:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d16c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d172:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	4313      	orrs	r3, r2
 800d178:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	431a      	orrs	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d18a:	2300      	movs	r3, #0

}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3714      	adds	r7, #20
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d1a6:	2310      	movs	r3, #16
 800d1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1aa:	2340      	movs	r3, #64	; 0x40
 800d1ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1b8:	f107 0308 	add.w	r3, r7, #8
 800d1bc:	4619      	mov	r1, r3
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff ff74 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1c8:	2110      	movs	r1, #16
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 fa1a 	bl	800d604 <SDMMC_GetCmdResp1>
 800d1d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1d2:	69fb      	ldr	r3, [r7, #28]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3720      	adds	r7, #32
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b088      	sub	sp, #32
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d1ea:	2311      	movs	r3, #17
 800d1ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1ee:	2340      	movs	r3, #64	; 0x40
 800d1f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1fc:	f107 0308 	add.w	r3, r7, #8
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff ff52 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d208:	f241 3288 	movw	r2, #5000	; 0x1388
 800d20c:	2111      	movs	r1, #17
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f9f8 	bl	800d604 <SDMMC_GetCmdResp1>
 800d214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d216:	69fb      	ldr	r3, [r7, #28]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3720      	adds	r7, #32
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d22e:	2312      	movs	r3, #18
 800d230:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d232:	2340      	movs	r3, #64	; 0x40
 800d234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d236:	2300      	movs	r3, #0
 800d238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d23a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d23e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d240:	f107 0308 	add.w	r3, r7, #8
 800d244:	4619      	mov	r1, r3
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff ff30 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d24c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d250:	2112      	movs	r1, #18
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 f9d6 	bl	800d604 <SDMMC_GetCmdResp1>
 800d258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d25a:	69fb      	ldr	r3, [r7, #28]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3720      	adds	r7, #32
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}

0800d264 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b088      	sub	sp, #32
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d272:	2318      	movs	r3, #24
 800d274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d276:	2340      	movs	r3, #64	; 0x40
 800d278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d27a:	2300      	movs	r3, #0
 800d27c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d282:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d284:	f107 0308 	add.w	r3, r7, #8
 800d288:	4619      	mov	r1, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7ff ff0e 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d290:	f241 3288 	movw	r2, #5000	; 0x1388
 800d294:	2118      	movs	r1, #24
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f9b4 	bl	800d604 <SDMMC_GetCmdResp1>
 800d29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d29e:	69fb      	ldr	r3, [r7, #28]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3720      	adds	r7, #32
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b088      	sub	sp, #32
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d2b6:	2319      	movs	r3, #25
 800d2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2ba:	2340      	movs	r3, #64	; 0x40
 800d2bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2c8:	f107 0308 	add.w	r3, r7, #8
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7ff feec 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d2d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2d8:	2119      	movs	r1, #25
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f992 	bl	800d604 <SDMMC_GetCmdResp1>
 800d2e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3720      	adds	r7, #32
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b088      	sub	sp, #32
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d2f8:	230c      	movs	r3, #12
 800d2fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2fc:	2340      	movs	r3, #64	; 0x40
 800d2fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d300:	2300      	movs	r3, #0
 800d302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d308:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d30a:	f107 0308 	add.w	r3, r7, #8
 800d30e:	4619      	mov	r1, r3
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f7ff fecb 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d316:	4a05      	ldr	r2, [pc, #20]	; (800d32c <SDMMC_CmdStopTransfer+0x40>)
 800d318:	210c      	movs	r1, #12
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f972 	bl	800d604 <SDMMC_GetCmdResp1>
 800d320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d322:	69fb      	ldr	r3, [r7, #28]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3720      	adds	r7, #32
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	05f5e100 	.word	0x05f5e100

0800d330 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b08a      	sub	sp, #40	; 0x28
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d340:	2307      	movs	r3, #7
 800d342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d344:	2340      	movs	r3, #64	; 0x40
 800d346:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d348:	2300      	movs	r3, #0
 800d34a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d34c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d350:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d352:	f107 0310 	add.w	r3, r7, #16
 800d356:	4619      	mov	r1, r3
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f7ff fea7 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d35e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d362:	2107      	movs	r1, #7
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f000 f94d 	bl	800d604 <SDMMC_GetCmdResp1>
 800d36a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3728      	adds	r7, #40	; 0x28
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b088      	sub	sp, #32
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d37e:	2300      	movs	r3, #0
 800d380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d382:	2300      	movs	r3, #0
 800d384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d386:	2300      	movs	r3, #0
 800d388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d38a:	2300      	movs	r3, #0
 800d38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d394:	f107 0308 	add.w	r3, r7, #8
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff fe86 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 fb67 	bl	800da74 <SDMMC_GetCmdError>
 800d3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3a8:	69fb      	ldr	r3, [r7, #28]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3720      	adds	r7, #32
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b088      	sub	sp, #32
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d3ba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d3be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d3c0:	2308      	movs	r3, #8
 800d3c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3c4:	2340      	movs	r3, #64	; 0x40
 800d3c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3d2:	f107 0308 	add.w	r3, r7, #8
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff fe67 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 fafa 	bl	800d9d8 <SDMMC_GetCmdResp7>
 800d3e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3e6:	69fb      	ldr	r3, [r7, #28]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3720      	adds	r7, #32
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b088      	sub	sp, #32
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d3fe:	2337      	movs	r3, #55	; 0x37
 800d400:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d402:	2340      	movs	r3, #64	; 0x40
 800d404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d406:	2300      	movs	r3, #0
 800d408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d40a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d40e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d410:	f107 0308 	add.w	r3, r7, #8
 800d414:	4619      	mov	r1, r3
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7ff fe48 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d420:	2137      	movs	r1, #55	; 0x37
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f8ee 	bl	800d604 <SDMMC_GetCmdResp1>
 800d428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d42a:	69fb      	ldr	r3, [r7, #28]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3720      	adds	r7, #32
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b088      	sub	sp, #32
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	4b0d      	ldr	r3, [pc, #52]	; (800d478 <SDMMC_CmdAppOperCommand+0x44>)
 800d442:	4313      	orrs	r3, r2
 800d444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d446:	2329      	movs	r3, #41	; 0x29
 800d448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d44a:	2340      	movs	r3, #64	; 0x40
 800d44c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d44e:	2300      	movs	r3, #0
 800d450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d456:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d458:	f107 0308 	add.w	r3, r7, #8
 800d45c:	4619      	mov	r1, r3
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff fe24 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f000 fa03 	bl	800d870 <SDMMC_GetCmdResp3>
 800d46a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d46c:	69fb      	ldr	r3, [r7, #28]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3720      	adds	r7, #32
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	80100000 	.word	0x80100000

0800d47c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b088      	sub	sp, #32
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d48a:	2306      	movs	r3, #6
 800d48c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d48e:	2340      	movs	r3, #64	; 0x40
 800d490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d492:	2300      	movs	r3, #0
 800d494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d49a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d49c:	f107 0308 	add.w	r3, r7, #8
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fe02 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d4a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ac:	2106      	movs	r1, #6
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 f8a8 	bl	800d604 <SDMMC_GetCmdResp1>
 800d4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3720      	adds	r7, #32
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d4cc:	2333      	movs	r3, #51	; 0x33
 800d4ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4d0:	2340      	movs	r3, #64	; 0x40
 800d4d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4de:	f107 0308 	add.w	r3, r7, #8
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff fde1 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d4ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4ee:	2133      	movs	r1, #51	; 0x33
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 f887 	bl	800d604 <SDMMC_GetCmdResp1>
 800d4f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4f8:	69fb      	ldr	r3, [r7, #28]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3720      	adds	r7, #32
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b088      	sub	sp, #32
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d50a:	2300      	movs	r3, #0
 800d50c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d50e:	2302      	movs	r3, #2
 800d510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d512:	23c0      	movs	r3, #192	; 0xc0
 800d514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d516:	2300      	movs	r3, #0
 800d518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d51a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d51e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d520:	f107 0308 	add.w	r3, r7, #8
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7ff fdc0 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 f957 	bl	800d7e0 <SDMMC_GetCmdResp2>
 800d532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d534:	69fb      	ldr	r3, [r7, #28]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3720      	adds	r7, #32
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b088      	sub	sp, #32
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d54c:	2309      	movs	r3, #9
 800d54e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d550:	23c0      	movs	r3, #192	; 0xc0
 800d552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d554:	2300      	movs	r3, #0
 800d556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d55c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d55e:	f107 0308 	add.w	r3, r7, #8
 800d562:	4619      	mov	r1, r3
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff fda1 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f938 	bl	800d7e0 <SDMMC_GetCmdResp2>
 800d570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d572:	69fb      	ldr	r3, [r7, #28]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3720      	adds	r7, #32
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b088      	sub	sp, #32
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d586:	2300      	movs	r3, #0
 800d588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d58a:	2303      	movs	r3, #3
 800d58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d58e:	2340      	movs	r3, #64	; 0x40
 800d590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d592:	2300      	movs	r3, #0
 800d594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d59a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d59c:	f107 0308 	add.w	r3, r7, #8
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f7ff fd82 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	2103      	movs	r1, #3
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f99d 	bl	800d8ec <SDMMC_GetCmdResp6>
 800d5b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5b4:	69fb      	ldr	r3, [r7, #28]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3720      	adds	r7, #32
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b088      	sub	sp, #32
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d5cc:	230d      	movs	r3, #13
 800d5ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5d0:	2340      	movs	r3, #64	; 0x40
 800d5d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5de:	f107 0308 	add.w	r3, r7, #8
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff fd61 	bl	800d0ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d5ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5ee:	210d      	movs	r1, #13
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 f807 	bl	800d604 <SDMMC_GetCmdResp1>
 800d5f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5f8:	69fb      	ldr	r3, [r7, #28]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3720      	adds	r7, #32
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	460b      	mov	r3, r1
 800d60e:	607a      	str	r2, [r7, #4]
 800d610:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d612:	4b70      	ldr	r3, [pc, #448]	; (800d7d4 <SDMMC_GetCmdResp1+0x1d0>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a70      	ldr	r2, [pc, #448]	; (800d7d8 <SDMMC_GetCmdResp1+0x1d4>)
 800d618:	fba2 2303 	umull	r2, r3, r2, r3
 800d61c:	0a5a      	lsrs	r2, r3, #9
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	fb02 f303 	mul.w	r3, r2, r3
 800d624:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	1e5a      	subs	r2, r3, #1
 800d62a:	61fa      	str	r2, [r7, #28]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d102      	bne.n	800d636 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d630:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d634:	e0c9      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d63a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d642:	2b00      	cmp	r3, #0
 800d644:	d0ef      	beq.n	800d626 <SDMMC_GetCmdResp1+0x22>
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1ea      	bne.n	800d626 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d654:	f003 0304 	and.w	r3, r3, #4
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d004      	beq.n	800d666 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2204      	movs	r2, #4
 800d660:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d662:	2304      	movs	r3, #4
 800d664:	e0b1      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66a:	f003 0301 	and.w	r3, r3, #1
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d004      	beq.n	800d67c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2201      	movs	r2, #1
 800d676:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d678:	2301      	movs	r3, #1
 800d67a:	e0a6      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	22c5      	movs	r2, #197	; 0xc5
 800d680:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f7ff fd3c 	bl	800d100 <SDMMC_GetCommandResponse>
 800d688:	4603      	mov	r3, r0
 800d68a:	461a      	mov	r2, r3
 800d68c:	7afb      	ldrb	r3, [r7, #11]
 800d68e:	4293      	cmp	r3, r2
 800d690:	d001      	beq.n	800d696 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d692:	2301      	movs	r3, #1
 800d694:	e099      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d696:	2100      	movs	r1, #0
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f7ff fd3e 	bl	800d11a <SDMMC_GetResponse>
 800d69e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	4b4e      	ldr	r3, [pc, #312]	; (800d7dc <SDMMC_GetCmdResp1+0x1d8>)
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	e08d      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	da02      	bge.n	800d6ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d6b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d6b8:	e087      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d6c4:	2340      	movs	r3, #64	; 0x40
 800d6c6:	e080      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d6d2:	2380      	movs	r3, #128	; 0x80
 800d6d4:	e079      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d002      	beq.n	800d6e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d6e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6e4:	e071      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d6f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6f4:	e069      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d704:	e061      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d002      	beq.n	800d716 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d710:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d714:	e059      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d724:	e051      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d002      	beq.n	800d736 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d734:	e049      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d744:	e041      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d002      	beq.n	800d756 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d754:	e039      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d764:	e031      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d002      	beq.n	800d776 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d770:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d774:	e029      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d002      	beq.n	800d786 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d780:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d784:	e021      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d790:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d794:	e019      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d002      	beq.n	800d7a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d7a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d7a4:	e011      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d002      	beq.n	800d7b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d7b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d7b4:	e009      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f003 0308 	and.w	r3, r3, #8
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d002      	beq.n	800d7c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d7c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d7c4:	e001      	b.n	800d7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d7c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3720      	adds	r7, #32
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20000000 	.word	0x20000000
 800d7d8:	10624dd3 	.word	0x10624dd3
 800d7dc:	fdffe008 	.word	0xfdffe008

0800d7e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d7e8:	4b1f      	ldr	r3, [pc, #124]	; (800d868 <SDMMC_GetCmdResp2+0x88>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a1f      	ldr	r2, [pc, #124]	; (800d86c <SDMMC_GetCmdResp2+0x8c>)
 800d7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f2:	0a5b      	lsrs	r3, r3, #9
 800d7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7f8:	fb02 f303 	mul.w	r3, r2, r3
 800d7fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	1e5a      	subs	r2, r3, #1
 800d802:	60fa      	str	r2, [r7, #12]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d102      	bne.n	800d80e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d80c:	e026      	b.n	800d85c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d812:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d0ef      	beq.n	800d7fe <SDMMC_GetCmdResp2+0x1e>
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1ea      	bne.n	800d7fe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d82c:	f003 0304 	and.w	r3, r3, #4
 800d830:	2b00      	cmp	r3, #0
 800d832:	d004      	beq.n	800d83e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2204      	movs	r2, #4
 800d838:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d83a:	2304      	movs	r3, #4
 800d83c:	e00e      	b.n	800d85c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d842:	f003 0301 	and.w	r3, r3, #1
 800d846:	2b00      	cmp	r3, #0
 800d848:	d004      	beq.n	800d854 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2201      	movs	r2, #1
 800d84e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d850:	2301      	movs	r3, #1
 800d852:	e003      	b.n	800d85c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	22c5      	movs	r2, #197	; 0xc5
 800d858:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	20000000 	.word	0x20000000
 800d86c:	10624dd3 	.word	0x10624dd3

0800d870 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d878:	4b1a      	ldr	r3, [pc, #104]	; (800d8e4 <SDMMC_GetCmdResp3+0x74>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4a1a      	ldr	r2, [pc, #104]	; (800d8e8 <SDMMC_GetCmdResp3+0x78>)
 800d87e:	fba2 2303 	umull	r2, r3, r2, r3
 800d882:	0a5b      	lsrs	r3, r3, #9
 800d884:	f241 3288 	movw	r2, #5000	; 0x1388
 800d888:	fb02 f303 	mul.w	r3, r2, r3
 800d88c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	1e5a      	subs	r2, r3, #1
 800d892:	60fa      	str	r2, [r7, #12]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d89c:	e01b      	b.n	800d8d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0ef      	beq.n	800d88e <SDMMC_GetCmdResp3+0x1e>
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1ea      	bne.n	800d88e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d004      	beq.n	800d8ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2204      	movs	r2, #4
 800d8c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8ca:	2304      	movs	r3, #4
 800d8cc:	e003      	b.n	800d8d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	22c5      	movs	r2, #197	; 0xc5
 800d8d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3714      	adds	r7, #20
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop
 800d8e4:	20000000 	.word	0x20000000
 800d8e8:	10624dd3 	.word	0x10624dd3

0800d8ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b088      	sub	sp, #32
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	60f8      	str	r0, [r7, #12]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	607a      	str	r2, [r7, #4]
 800d8f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8fa:	4b35      	ldr	r3, [pc, #212]	; (800d9d0 <SDMMC_GetCmdResp6+0xe4>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a35      	ldr	r2, [pc, #212]	; (800d9d4 <SDMMC_GetCmdResp6+0xe8>)
 800d900:	fba2 2303 	umull	r2, r3, r2, r3
 800d904:	0a5b      	lsrs	r3, r3, #9
 800d906:	f241 3288 	movw	r2, #5000	; 0x1388
 800d90a:	fb02 f303 	mul.w	r3, r2, r3
 800d90e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	1e5a      	subs	r2, r3, #1
 800d914:	61fa      	str	r2, [r7, #28]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d102      	bne.n	800d920 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d91a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d91e:	e052      	b.n	800d9c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d924:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d0ef      	beq.n	800d910 <SDMMC_GetCmdResp6+0x24>
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1ea      	bne.n	800d910 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93e:	f003 0304 	and.w	r3, r3, #4
 800d942:	2b00      	cmp	r3, #0
 800d944:	d004      	beq.n	800d950 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2204      	movs	r2, #4
 800d94a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d94c:	2304      	movs	r3, #4
 800d94e:	e03a      	b.n	800d9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d954:	f003 0301 	and.w	r3, r3, #1
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d004      	beq.n	800d966 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2201      	movs	r2, #1
 800d960:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d962:	2301      	movs	r3, #1
 800d964:	e02f      	b.n	800d9c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f7ff fbca 	bl	800d100 <SDMMC_GetCommandResponse>
 800d96c:	4603      	mov	r3, r0
 800d96e:	461a      	mov	r2, r3
 800d970:	7afb      	ldrb	r3, [r7, #11]
 800d972:	4293      	cmp	r3, r2
 800d974:	d001      	beq.n	800d97a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d976:	2301      	movs	r3, #1
 800d978:	e025      	b.n	800d9c6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	22c5      	movs	r2, #197	; 0xc5
 800d97e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d980:	2100      	movs	r1, #0
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f7ff fbc9 	bl	800d11a <SDMMC_GetResponse>
 800d988:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d990:	2b00      	cmp	r3, #0
 800d992:	d106      	bne.n	800d9a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	0c1b      	lsrs	r3, r3, #16
 800d998:	b29a      	uxth	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e011      	b.n	800d9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d9ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d9b0:	e009      	b.n	800d9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d9bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9c0:	e001      	b.n	800d9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d9c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3720      	adds	r7, #32
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20000000 	.word	0x20000000
 800d9d4:	10624dd3 	.word	0x10624dd3

0800d9d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9e0:	4b22      	ldr	r3, [pc, #136]	; (800da6c <SDMMC_GetCmdResp7+0x94>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a22      	ldr	r2, [pc, #136]	; (800da70 <SDMMC_GetCmdResp7+0x98>)
 800d9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ea:	0a5b      	lsrs	r3, r3, #9
 800d9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9f0:	fb02 f303 	mul.w	r3, r2, r3
 800d9f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	1e5a      	subs	r2, r3, #1
 800d9fa:	60fa      	str	r2, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d102      	bne.n	800da06 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da04:	e02c      	b.n	800da60 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0ef      	beq.n	800d9f6 <SDMMC_GetCmdResp7+0x1e>
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1ea      	bne.n	800d9f6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da24:	f003 0304 	and.w	r3, r3, #4
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2204      	movs	r2, #4
 800da30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da32:	2304      	movs	r3, #4
 800da34:	e014      	b.n	800da60 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da3a:	f003 0301 	and.w	r3, r3, #1
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d004      	beq.n	800da4c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da48:	2301      	movs	r3, #1
 800da4a:	e009      	b.n	800da60 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da54:	2b00      	cmp	r3, #0
 800da56:	d002      	beq.n	800da5e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2240      	movs	r2, #64	; 0x40
 800da5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800da5e:	2300      	movs	r3, #0
  
}
 800da60:	4618      	mov	r0, r3
 800da62:	3714      	adds	r7, #20
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	20000000 	.word	0x20000000
 800da70:	10624dd3 	.word	0x10624dd3

0800da74 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da7c:	4b11      	ldr	r3, [pc, #68]	; (800dac4 <SDMMC_GetCmdError+0x50>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a11      	ldr	r2, [pc, #68]	; (800dac8 <SDMMC_GetCmdError+0x54>)
 800da82:	fba2 2303 	umull	r2, r3, r2, r3
 800da86:	0a5b      	lsrs	r3, r3, #9
 800da88:	f241 3288 	movw	r2, #5000	; 0x1388
 800da8c:	fb02 f303 	mul.w	r3, r2, r3
 800da90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	1e5a      	subs	r2, r3, #1
 800da96:	60fa      	str	r2, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d102      	bne.n	800daa2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800daa0:	e009      	b.n	800dab6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d0f1      	beq.n	800da92 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	22c5      	movs	r2, #197	; 0xc5
 800dab2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3714      	adds	r7, #20
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr
 800dac2:	bf00      	nop
 800dac4:	20000000 	.word	0x20000000
 800dac8:	10624dd3 	.word	0x10624dd3

0800dacc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dacc:	b084      	sub	sp, #16
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	f107 001c 	add.w	r0, r7, #28
 800dada:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d120      	bne.n	800db26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	68da      	ldr	r2, [r3, #12]
 800daf4:	4b20      	ldr	r3, [pc, #128]	; (800db78 <USB_CoreInit+0xac>)
 800daf6:	4013      	ands	r3, r2
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800db08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d105      	bne.n	800db1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f9d8 	bl	800ded0 <USB_CoreReset>
 800db20:	4603      	mov	r3, r0
 800db22:	73fb      	strb	r3, [r7, #15]
 800db24:	e010      	b.n	800db48 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f9cc 	bl	800ded0 <USB_CoreReset>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800db48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d10b      	bne.n	800db66 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	f043 0206 	orr.w	r2, r3, #6
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	f043 0220 	orr.w	r2, r3, #32
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800db66:	7bfb      	ldrb	r3, [r7, #15]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db72:	b004      	add	sp, #16
 800db74:	4770      	bx	lr
 800db76:	bf00      	nop
 800db78:	ffbdffbf 	.word	0xffbdffbf

0800db7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	f043 0201 	orr.w	r2, r3, #1
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr

0800db9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db9e:	b480      	push	{r7}
 800dba0:	b083      	sub	sp, #12
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	689b      	ldr	r3, [r3, #8]
 800dbaa:	f023 0201 	bic.w	r2, r3, #1
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dbb2:	2300      	movs	r3, #0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	460b      	mov	r3, r1
 800dbca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dbdc:	78fb      	ldrb	r3, [r7, #3]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d115      	bne.n	800dc0e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dbee:	2001      	movs	r0, #1
 800dbf0:	f7f5 fb06 	bl	8003200 <HAL_Delay>
      ms++;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f95a 	bl	800deb4 <USB_GetMode>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d01e      	beq.n	800dc44 <USB_SetCurrentMode+0x84>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2b31      	cmp	r3, #49	; 0x31
 800dc0a:	d9f0      	bls.n	800dbee <USB_SetCurrentMode+0x2e>
 800dc0c:	e01a      	b.n	800dc44 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dc0e:	78fb      	ldrb	r3, [r7, #3]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d115      	bne.n	800dc40 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc20:	2001      	movs	r0, #1
 800dc22:	f7f5 faed 	bl	8003200 <HAL_Delay>
      ms++;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 f941 	bl	800deb4 <USB_GetMode>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d005      	beq.n	800dc44 <USB_SetCurrentMode+0x84>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2b31      	cmp	r3, #49	; 0x31
 800dc3c:	d9f0      	bls.n	800dc20 <USB_SetCurrentMode+0x60>
 800dc3e:	e001      	b.n	800dc44 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e005      	b.n	800dc50 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2b32      	cmp	r3, #50	; 0x32
 800dc48:	d101      	bne.n	800dc4e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e000      	b.n	800dc50 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b085      	sub	sp, #20
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dc62:	2300      	movs	r3, #0
 800dc64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	4a13      	ldr	r2, [pc, #76]	; (800dcbc <USB_FlushTxFifo+0x64>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d901      	bls.n	800dc78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dc74:	2303      	movs	r3, #3
 800dc76:	e01b      	b.n	800dcb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	691b      	ldr	r3, [r3, #16]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	daf2      	bge.n	800dc66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	019b      	lsls	r3, r3, #6
 800dc88:	f043 0220 	orr.w	r2, r3, #32
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	3301      	adds	r3, #1
 800dc94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	4a08      	ldr	r2, [pc, #32]	; (800dcbc <USB_FlushTxFifo+0x64>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d901      	bls.n	800dca2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dc9e:	2303      	movs	r3, #3
 800dca0:	e006      	b.n	800dcb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	f003 0320 	and.w	r3, r3, #32
 800dcaa:	2b20      	cmp	r3, #32
 800dcac:	d0f0      	beq.n	800dc90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3714      	adds	r7, #20
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr
 800dcbc:	00030d40 	.word	0x00030d40

0800dcc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	4a11      	ldr	r2, [pc, #68]	; (800dd1c <USB_FlushRxFifo+0x5c>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d901      	bls.n	800dcde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	e018      	b.n	800dd10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	daf2      	bge.n	800dccc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dce6:	2300      	movs	r3, #0
 800dce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2210      	movs	r2, #16
 800dcee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	4a08      	ldr	r2, [pc, #32]	; (800dd1c <USB_FlushRxFifo+0x5c>)
 800dcfa:	4293      	cmp	r3, r2
 800dcfc:	d901      	bls.n	800dd02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dcfe:	2303      	movs	r3, #3
 800dd00:	e006      	b.n	800dd10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	691b      	ldr	r3, [r3, #16]
 800dd06:	f003 0310 	and.w	r3, r3, #16
 800dd0a:	2b10      	cmp	r3, #16
 800dd0c:	d0f0      	beq.n	800dcf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	00030d40 	.word	0x00030d40

0800dd20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b089      	sub	sp, #36	; 0x24
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	460b      	mov	r3, r1
 800dd30:	71fb      	strb	r3, [r7, #7]
 800dd32:	4613      	mov	r3, r2
 800dd34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800dd3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d123      	bne.n	800dd8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dd46:	88bb      	ldrh	r3, [r7, #4]
 800dd48:	3303      	adds	r3, #3
 800dd4a:	089b      	lsrs	r3, r3, #2
 800dd4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61bb      	str	r3, [r7, #24]
 800dd52:	e018      	b.n	800dd86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dd54:	79fb      	ldrb	r3, [r7, #7]
 800dd56:	031a      	lsls	r2, r3, #12
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	4413      	add	r3, r2
 800dd5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd60:	461a      	mov	r2, r3
 800dd62:	69fb      	ldr	r3, [r7, #28]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	3301      	adds	r3, #1
 800dd72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	3301      	adds	r3, #1
 800dd78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dd80:	69bb      	ldr	r3, [r7, #24]
 800dd82:	3301      	adds	r3, #1
 800dd84:	61bb      	str	r3, [r7, #24]
 800dd86:	69ba      	ldr	r2, [r7, #24]
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d3e2      	bcc.n	800dd54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dd8e:	2300      	movs	r3, #0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3724      	adds	r7, #36	; 0x24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b08b      	sub	sp, #44	; 0x2c
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	4613      	mov	r3, r2
 800dda8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ddb2:	88fb      	ldrh	r3, [r7, #6]
 800ddb4:	089b      	lsrs	r3, r3, #2
 800ddb6:	b29b      	uxth	r3, r3
 800ddb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ddba:	88fb      	ldrh	r3, [r7, #6]
 800ddbc:	f003 0303 	and.w	r3, r3, #3
 800ddc0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	623b      	str	r3, [r7, #32]
 800ddc6:	e014      	b.n	800ddf2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	601a      	str	r2, [r3, #0]
    pDest++;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	3301      	adds	r3, #1
 800ddde:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	3301      	adds	r3, #1
 800dde4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	3301      	adds	r3, #1
 800ddea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	3301      	adds	r3, #1
 800ddf0:	623b      	str	r3, [r7, #32]
 800ddf2:	6a3a      	ldr	r2, [r7, #32]
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d3e6      	bcc.n	800ddc8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ddfa:	8bfb      	ldrh	r3, [r7, #30]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d01e      	beq.n	800de3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800de00:	2300      	movs	r3, #0
 800de02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de0a:	461a      	mov	r2, r3
 800de0c:	f107 0310 	add.w	r3, r7, #16
 800de10:	6812      	ldr	r2, [r2, #0]
 800de12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800de14:	693a      	ldr	r2, [r7, #16]
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	00db      	lsls	r3, r3, #3
 800de1c:	fa22 f303 	lsr.w	r3, r2, r3
 800de20:	b2da      	uxtb	r2, r3
 800de22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de24:	701a      	strb	r2, [r3, #0]
      i++;
 800de26:	6a3b      	ldr	r3, [r7, #32]
 800de28:	3301      	adds	r3, #1
 800de2a:	623b      	str	r3, [r7, #32]
      pDest++;
 800de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2e:	3301      	adds	r3, #1
 800de30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800de32:	8bfb      	ldrh	r3, [r7, #30]
 800de34:	3b01      	subs	r3, #1
 800de36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800de38:	8bfb      	ldrh	r3, [r7, #30]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d1ea      	bne.n	800de14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800de3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de40:	4618      	mov	r0, r3
 800de42:	372c      	adds	r7, #44	; 0x2c
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	68fa      	ldr	r2, [r7, #12]
 800de60:	4013      	ands	r3, r2
 800de62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800de64:	68fb      	ldr	r3, [r7, #12]
}
 800de66:	4618      	mov	r0, r3
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800de72:	b480      	push	{r7}
 800de74:	b085      	sub	sp, #20
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
 800de7a:	460b      	mov	r3, r1
 800de7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800de82:	78fb      	ldrb	r3, [r7, #3]
 800de84:	015a      	lsls	r2, r3, #5
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	4413      	add	r3, r2
 800de8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800de92:	78fb      	ldrb	r3, [r7, #3]
 800de94:	015a      	lsls	r2, r3, #5
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	4413      	add	r3, r2
 800de9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	68ba      	ldr	r2, [r7, #8]
 800dea2:	4013      	ands	r3, r2
 800dea4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dea6:	68bb      	ldr	r3, [r7, #8]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3714      	adds	r7, #20
 800deac:	46bd      	mov	sp, r7
 800deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb2:	4770      	bx	lr

0800deb4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b083      	sub	sp, #12
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	695b      	ldr	r3, [r3, #20]
 800dec0:	f003 0301 	and.w	r3, r3, #1
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	370c      	adds	r7, #12
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ded8:	2300      	movs	r3, #0
 800deda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3301      	adds	r3, #1
 800dee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	4a13      	ldr	r2, [pc, #76]	; (800df34 <USB_CoreReset+0x64>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d901      	bls.n	800deee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	e01b      	b.n	800df26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	daf2      	bge.n	800dedc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800def6:	2300      	movs	r3, #0
 800def8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	f043 0201 	orr.w	r2, r3, #1
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	3301      	adds	r3, #1
 800df0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	4a09      	ldr	r2, [pc, #36]	; (800df34 <USB_CoreReset+0x64>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d901      	bls.n	800df18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800df14:	2303      	movs	r3, #3
 800df16:	e006      	b.n	800df26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	2b01      	cmp	r3, #1
 800df22:	d0f0      	beq.n	800df06 <USB_CoreReset+0x36>

  return HAL_OK;
 800df24:	2300      	movs	r3, #0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3714      	adds	r7, #20
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	00030d40 	.word	0x00030d40

0800df38 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800df38:	b084      	sub	sp, #16
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b086      	sub	sp, #24
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
 800df42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800df46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df58:	461a      	mov	r2, r3
 800df5a:	2300      	movs	r3, #0
 800df5c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df62:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df72:	2b00      	cmp	r3, #0
 800df74:	d018      	beq.n	800dfa8 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d10a      	bne.n	800df92 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800df8a:	f043 0304 	orr.w	r3, r3, #4
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	e014      	b.n	800dfbc <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68fa      	ldr	r2, [r7, #12]
 800df9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dfa0:	f023 0304 	bic.w	r3, r3, #4
 800dfa4:	6013      	str	r3, [r2, #0]
 800dfa6:	e009      	b.n	800dfbc <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dfb6:	f023 0304 	bic.w	r3, r3, #4
 800dfba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dfbc:	2110      	movs	r1, #16
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff fe4a 	bl	800dc58 <USB_FlushTxFifo>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d001      	beq.n	800dfce <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff fe76 	bl	800dcc0 <USB_FlushRxFifo>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800dfde:	2300      	movs	r3, #0
 800dfe0:	613b      	str	r3, [r7, #16]
 800dfe2:	e015      	b.n	800e010 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	015a      	lsls	r2, r3, #5
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4413      	add	r3, r2
 800dfec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dff0:	461a      	mov	r2, r3
 800dff2:	f04f 33ff 	mov.w	r3, #4294967295
 800dff6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	015a      	lsls	r2, r3, #5
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	4413      	add	r3, r2
 800e000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e004:	461a      	mov	r2, r3
 800e006:	2300      	movs	r3, #0
 800e008:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	3301      	adds	r3, #1
 800e00e:	613b      	str	r3, [r7, #16]
 800e010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	429a      	cmp	r2, r3
 800e016:	d3e5      	bcc.n	800dfe4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f04f 32ff 	mov.w	r2, #4294967295
 800e024:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d00b      	beq.n	800e04a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e038:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a13      	ldr	r2, [pc, #76]	; (800e08c <USB_HostInit+0x154>)
 800e03e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a13      	ldr	r2, [pc, #76]	; (800e090 <USB_HostInit+0x158>)
 800e044:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e048:	e009      	b.n	800e05e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2280      	movs	r2, #128	; 0x80
 800e04e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a10      	ldr	r2, [pc, #64]	; (800e094 <USB_HostInit+0x15c>)
 800e054:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	4a0f      	ldr	r2, [pc, #60]	; (800e098 <USB_HostInit+0x160>)
 800e05a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e060:	2b00      	cmp	r3, #0
 800e062:	d105      	bne.n	800e070 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	699b      	ldr	r3, [r3, #24]
 800e068:	f043 0210 	orr.w	r2, r3, #16
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	699a      	ldr	r2, [r3, #24]
 800e074:	4b09      	ldr	r3, [pc, #36]	; (800e09c <USB_HostInit+0x164>)
 800e076:	4313      	orrs	r3, r2
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3718      	adds	r7, #24
 800e082:	46bd      	mov	sp, r7
 800e084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e088:	b004      	add	sp, #16
 800e08a:	4770      	bx	lr
 800e08c:	01000200 	.word	0x01000200
 800e090:	00e00300 	.word	0x00e00300
 800e094:	00600080 	.word	0x00600080
 800e098:	004000e0 	.word	0x004000e0
 800e09c:	a3200008 	.word	0xa3200008

0800e0a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e0be:	f023 0303 	bic.w	r3, r3, #3
 800e0c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	f003 0303 	and.w	r3, r3, #3
 800e0d2:	68f9      	ldr	r1, [r7, #12]
 800e0d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e0dc:	78fb      	ldrb	r3, [r7, #3]
 800e0de:	2b01      	cmp	r3, #1
 800e0e0:	d107      	bne.n	800e0f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e0ee:	6053      	str	r3, [r2, #4]
 800e0f0:	e009      	b.n	800e106 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800e0f2:	78fb      	ldrb	r3, [r7, #3]
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d106      	bne.n	800e106 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0fe:	461a      	mov	r2, r3
 800e100:	f241 7370 	movw	r3, #6000	; 0x1770
 800e104:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b084      	sub	sp, #16
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e120:	2300      	movs	r3, #0
 800e122:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e134:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e13e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e142:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e144:	2064      	movs	r0, #100	; 0x64
 800e146:	f7f5 f85b 	bl	8003200 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e156:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e158:	200a      	movs	r0, #10
 800e15a:	f7f5 f851 	bl	8003200 <HAL_Delay>

  return HAL_OK;
 800e15e:	2300      	movs	r3, #0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e168:	b480      	push	{r7}
 800e16a:	b085      	sub	sp, #20
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	460b      	mov	r3, r1
 800e172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e18c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e194:	2b00      	cmp	r3, #0
 800e196:	d109      	bne.n	800e1ac <USB_DriveVbus+0x44>
 800e198:	78fb      	ldrb	r3, [r7, #3]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d106      	bne.n	800e1ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e1a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e1aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1b6:	d109      	bne.n	800e1cc <USB_DriveVbus+0x64>
 800e1b8:	78fb      	ldrb	r3, [r7, #3]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e1c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e1ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr

0800e1da <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e1da:	b480      	push	{r7}
 800e1dc:	b085      	sub	sp, #20
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	0c5b      	lsrs	r3, r3, #17
 800e1f8:	f003 0303 	and.w	r3, r3, #3
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800e208:	b480      	push	{r7}
 800e20a:	b085      	sub	sp, #20
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	b29b      	uxth	r3, r3
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3714      	adds	r7, #20
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
	...

0800e22c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	4608      	mov	r0, r1
 800e236:	4611      	mov	r1, r2
 800e238:	461a      	mov	r2, r3
 800e23a:	4603      	mov	r3, r0
 800e23c:	70fb      	strb	r3, [r7, #3]
 800e23e:	460b      	mov	r3, r1
 800e240:	70bb      	strb	r3, [r7, #2]
 800e242:	4613      	mov	r3, r2
 800e244:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e246:	2300      	movs	r3, #0
 800e248:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800e24e:	78fb      	ldrb	r3, [r7, #3]
 800e250:	015a      	lsls	r2, r3, #5
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	4413      	add	r3, r2
 800e256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e25a:	461a      	mov	r2, r3
 800e25c:	f04f 33ff 	mov.w	r3, #4294967295
 800e260:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e262:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e266:	2b03      	cmp	r3, #3
 800e268:	d87e      	bhi.n	800e368 <USB_HC_Init+0x13c>
 800e26a:	a201      	add	r2, pc, #4	; (adr r2, 800e270 <USB_HC_Init+0x44>)
 800e26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e270:	0800e281 	.word	0x0800e281
 800e274:	0800e32b 	.word	0x0800e32b
 800e278:	0800e281 	.word	0x0800e281
 800e27c:	0800e2ed 	.word	0x0800e2ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e280:	78fb      	ldrb	r3, [r7, #3]
 800e282:	015a      	lsls	r2, r3, #5
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	4413      	add	r3, r2
 800e288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e28c:	461a      	mov	r2, r3
 800e28e:	f240 439d 	movw	r3, #1181	; 0x49d
 800e292:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e294:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	da10      	bge.n	800e2be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e29c:	78fb      	ldrb	r3, [r7, #3]
 800e29e:	015a      	lsls	r2, r3, #5
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	4413      	add	r3, r2
 800e2a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	78fa      	ldrb	r2, [r7, #3]
 800e2ac:	0151      	lsls	r1, r2, #5
 800e2ae:	693a      	ldr	r2, [r7, #16]
 800e2b0:	440a      	add	r2, r1
 800e2b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2ba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800e2bc:	e057      	b.n	800e36e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d051      	beq.n	800e36e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e2ca:	78fb      	ldrb	r3, [r7, #3]
 800e2cc:	015a      	lsls	r2, r3, #5
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	78fa      	ldrb	r2, [r7, #3]
 800e2da:	0151      	lsls	r1, r2, #5
 800e2dc:	693a      	ldr	r2, [r7, #16]
 800e2de:	440a      	add	r2, r1
 800e2e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e2e8:	60d3      	str	r3, [r2, #12]
      break;
 800e2ea:	e040      	b.n	800e36e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e2ec:	78fb      	ldrb	r3, [r7, #3]
 800e2ee:	015a      	lsls	r2, r3, #5
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	f240 639d 	movw	r3, #1693	; 0x69d
 800e2fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e300:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e304:	2b00      	cmp	r3, #0
 800e306:	da34      	bge.n	800e372 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e308:	78fb      	ldrb	r3, [r7, #3]
 800e30a:	015a      	lsls	r2, r3, #5
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	4413      	add	r3, r2
 800e310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	78fa      	ldrb	r2, [r7, #3]
 800e318:	0151      	lsls	r1, r2, #5
 800e31a:	693a      	ldr	r2, [r7, #16]
 800e31c:	440a      	add	r2, r1
 800e31e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e326:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e328:	e023      	b.n	800e372 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e32a:	78fb      	ldrb	r3, [r7, #3]
 800e32c:	015a      	lsls	r2, r3, #5
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	4413      	add	r3, r2
 800e332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e336:	461a      	mov	r2, r3
 800e338:	f240 2325 	movw	r3, #549	; 0x225
 800e33c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e33e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e342:	2b00      	cmp	r3, #0
 800e344:	da17      	bge.n	800e376 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e346:	78fb      	ldrb	r3, [r7, #3]
 800e348:	015a      	lsls	r2, r3, #5
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	4413      	add	r3, r2
 800e34e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	78fa      	ldrb	r2, [r7, #3]
 800e356:	0151      	lsls	r1, r2, #5
 800e358:	693a      	ldr	r2, [r7, #16]
 800e35a:	440a      	add	r2, r1
 800e35c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e360:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800e364:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e366:	e006      	b.n	800e376 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	77fb      	strb	r3, [r7, #31]
      break;
 800e36c:	e004      	b.n	800e378 <USB_HC_Init+0x14c>
      break;
 800e36e:	bf00      	nop
 800e370:	e002      	b.n	800e378 <USB_HC_Init+0x14c>
      break;
 800e372:	bf00      	nop
 800e374:	e000      	b.n	800e378 <USB_HC_Init+0x14c>
      break;
 800e376:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800e378:	78fb      	ldrb	r3, [r7, #3]
 800e37a:	015a      	lsls	r2, r3, #5
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	4413      	add	r3, r2
 800e380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	78fa      	ldrb	r2, [r7, #3]
 800e388:	0151      	lsls	r1, r2, #5
 800e38a:	693a      	ldr	r2, [r7, #16]
 800e38c:	440a      	add	r2, r1
 800e38e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e392:	f043 0302 	orr.w	r3, r3, #2
 800e396:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e39e:	699a      	ldr	r2, [r3, #24]
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	f003 030f 	and.w	r3, r3, #15
 800e3a6:	2101      	movs	r1, #1
 800e3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800e3ac:	6939      	ldr	r1, [r7, #16]
 800e3ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e3c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	da03      	bge.n	800e3d2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3ce:	61bb      	str	r3, [r7, #24]
 800e3d0:	e001      	b.n	800e3d6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff feff 	bl	800e1da <USB_GetHostSpeed>
 800e3dc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e3de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d106      	bne.n	800e3f4 <USB_HC_Init+0x1c8>
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2b02      	cmp	r3, #2
 800e3ea:	d003      	beq.n	800e3f4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e3ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e3f0:	617b      	str	r3, [r7, #20]
 800e3f2:	e001      	b.n	800e3f8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e3f8:	787b      	ldrb	r3, [r7, #1]
 800e3fa:	059b      	lsls	r3, r3, #22
 800e3fc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e400:	78bb      	ldrb	r3, [r7, #2]
 800e402:	02db      	lsls	r3, r3, #11
 800e404:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e408:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e40a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e40e:	049b      	lsls	r3, r3, #18
 800e410:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e414:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e416:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e418:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e41c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e422:	78fb      	ldrb	r3, [r7, #3]
 800e424:	0159      	lsls	r1, r3, #5
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	440b      	add	r3, r1
 800e42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e42e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e434:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800e436:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e43a:	2b03      	cmp	r3, #3
 800e43c:	d003      	beq.n	800e446 <USB_HC_Init+0x21a>
 800e43e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e442:	2b01      	cmp	r3, #1
 800e444:	d10f      	bne.n	800e466 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800e446:	78fb      	ldrb	r3, [r7, #3]
 800e448:	015a      	lsls	r2, r3, #5
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	4413      	add	r3, r2
 800e44e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	78fa      	ldrb	r2, [r7, #3]
 800e456:	0151      	lsls	r1, r2, #5
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	440a      	add	r2, r1
 800e45c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e464:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e466:	7ffb      	ldrb	r3, [r7, #31]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3720      	adds	r7, #32
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08c      	sub	sp, #48	; 0x30
 800e474:	af02      	add	r7, sp, #8
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	4613      	mov	r3, r2
 800e47c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	785b      	ldrb	r3, [r3, #1]
 800e486:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800e488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e48c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e496:	2b00      	cmp	r3, #0
 800e498:	d02d      	beq.n	800e4f6 <USB_HC_StartXfer+0x86>
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	791b      	ldrb	r3, [r3, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d129      	bne.n	800e4f6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800e4a2:	79fb      	ldrb	r3, [r7, #7]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d117      	bne.n	800e4d8 <USB_HC_StartXfer+0x68>
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	79db      	ldrb	r3, [r3, #7]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d003      	beq.n	800e4b8 <USB_HC_StartXfer+0x48>
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	79db      	ldrb	r3, [r3, #7]
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	d10f      	bne.n	800e4d8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	015a      	lsls	r2, r3, #5
 800e4bc:	6a3b      	ldr	r3, [r7, #32]
 800e4be:	4413      	add	r3, r2
 800e4c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	69fa      	ldr	r2, [r7, #28]
 800e4c8:	0151      	lsls	r1, r2, #5
 800e4ca:	6a3a      	ldr	r2, [r7, #32]
 800e4cc:	440a      	add	r2, r1
 800e4ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e4d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4d6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800e4d8:	79fb      	ldrb	r3, [r7, #7]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10b      	bne.n	800e4f6 <USB_HC_StartXfer+0x86>
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	795b      	ldrb	r3, [r3, #5]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d107      	bne.n	800e4f6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	785b      	ldrb	r3, [r3, #1]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f000 fa0f 	bl	800e910 <USB_DoPing>
      return HAL_OK;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e0f8      	b.n	800e6e8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	695b      	ldr	r3, [r3, #20]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d018      	beq.n	800e530 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	695b      	ldr	r3, [r3, #20]
 800e502:	68ba      	ldr	r2, [r7, #8]
 800e504:	8912      	ldrh	r2, [r2, #8]
 800e506:	4413      	add	r3, r2
 800e508:	3b01      	subs	r3, #1
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	8912      	ldrh	r2, [r2, #8]
 800e50e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e512:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800e514:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e516:	8b7b      	ldrh	r3, [r7, #26]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d90b      	bls.n	800e534 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800e51c:	8b7b      	ldrh	r3, [r7, #26]
 800e51e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e520:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	8912      	ldrh	r2, [r2, #8]
 800e526:	fb03 f202 	mul.w	r2, r3, r2
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	611a      	str	r2, [r3, #16]
 800e52e:	e001      	b.n	800e534 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800e530:	2301      	movs	r3, #1
 800e532:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	78db      	ldrb	r3, [r3, #3]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d007      	beq.n	800e54c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e53c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e53e:	68ba      	ldr	r2, [r7, #8]
 800e540:	8912      	ldrh	r2, [r2, #8]
 800e542:	fb03 f202 	mul.w	r2, r3, r2
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	611a      	str	r2, [r3, #16]
 800e54a:	e003      	b.n	800e554 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	695a      	ldr	r2, [r3, #20]
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	691b      	ldr	r3, [r3, #16]
 800e558:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e55c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e55e:	04d9      	lsls	r1, r3, #19
 800e560:	4b63      	ldr	r3, [pc, #396]	; (800e6f0 <USB_HC_StartXfer+0x280>)
 800e562:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e564:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	7a9b      	ldrb	r3, [r3, #10]
 800e56a:	075b      	lsls	r3, r3, #29
 800e56c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e570:	69f9      	ldr	r1, [r7, #28]
 800e572:	0148      	lsls	r0, r1, #5
 800e574:	6a39      	ldr	r1, [r7, #32]
 800e576:	4401      	add	r1, r0
 800e578:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e57c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e57e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e580:	79fb      	ldrb	r3, [r7, #7]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d009      	beq.n	800e59a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	68d9      	ldr	r1, [r3, #12]
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	015a      	lsls	r2, r3, #5
 800e58e:	6a3b      	ldr	r3, [r7, #32]
 800e590:	4413      	add	r3, r2
 800e592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e596:	460a      	mov	r2, r1
 800e598:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e59a:	6a3b      	ldr	r3, [r7, #32]
 800e59c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	f003 0301 	and.w	r3, r3, #1
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	bf0c      	ite	eq
 800e5aa:	2301      	moveq	r3, #1
 800e5ac:	2300      	movne	r3, #0
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	015a      	lsls	r2, r3, #5
 800e5b6:	6a3b      	ldr	r3, [r7, #32]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	69fa      	ldr	r2, [r7, #28]
 800e5c2:	0151      	lsls	r1, r2, #5
 800e5c4:	6a3a      	ldr	r2, [r7, #32]
 800e5c6:	440a      	add	r2, r1
 800e5c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e5cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e5d0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	015a      	lsls	r2, r3, #5
 800e5d6:	6a3b      	ldr	r3, [r7, #32]
 800e5d8:	4413      	add	r3, r2
 800e5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	7e7b      	ldrb	r3, [r7, #25]
 800e5e2:	075b      	lsls	r3, r3, #29
 800e5e4:	69f9      	ldr	r1, [r7, #28]
 800e5e6:	0148      	lsls	r0, r1, #5
 800e5e8:	6a39      	ldr	r1, [r7, #32]
 800e5ea:	4401      	add	r1, r0
 800e5ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	015a      	lsls	r2, r3, #5
 800e5f8:	6a3b      	ldr	r3, [r7, #32]
 800e5fa:	4413      	add	r3, r2
 800e5fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e60a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	78db      	ldrb	r3, [r3, #3]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d004      	beq.n	800e61e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e61a:	613b      	str	r3, [r7, #16]
 800e61c:	e003      	b.n	800e626 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e624:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e62c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	015a      	lsls	r2, r3, #5
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	4413      	add	r3, r2
 800e636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e63a:	461a      	mov	r2, r3
 800e63c:	693b      	ldr	r3, [r7, #16]
 800e63e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800e646:	2300      	movs	r3, #0
 800e648:	e04e      	b.n	800e6e8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	78db      	ldrb	r3, [r3, #3]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d149      	bne.n	800e6e6 <USB_HC_StartXfer+0x276>
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d045      	beq.n	800e6e6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	79db      	ldrb	r3, [r3, #7]
 800e65e:	2b03      	cmp	r3, #3
 800e660:	d830      	bhi.n	800e6c4 <USB_HC_StartXfer+0x254>
 800e662:	a201      	add	r2, pc, #4	; (adr r2, 800e668 <USB_HC_StartXfer+0x1f8>)
 800e664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e668:	0800e679 	.word	0x0800e679
 800e66c:	0800e69d 	.word	0x0800e69d
 800e670:	0800e679 	.word	0x0800e679
 800e674:	0800e69d 	.word	0x0800e69d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	695b      	ldr	r3, [r3, #20]
 800e67c:	3303      	adds	r3, #3
 800e67e:	089b      	lsrs	r3, r3, #2
 800e680:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e682:	8afa      	ldrh	r2, [r7, #22]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e688:	b29b      	uxth	r3, r3
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d91c      	bls.n	800e6c8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	f043 0220 	orr.w	r2, r3, #32
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	619a      	str	r2, [r3, #24]
        }
        break;
 800e69a:	e015      	b.n	800e6c8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	3303      	adds	r3, #3
 800e6a2:	089b      	lsrs	r3, r3, #2
 800e6a4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e6a6:	8afa      	ldrh	r2, [r7, #22]
 800e6a8:	6a3b      	ldr	r3, [r7, #32]
 800e6aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e6ae:	691b      	ldr	r3, [r3, #16]
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d90a      	bls.n	800e6cc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	619a      	str	r2, [r3, #24]
        }
        break;
 800e6c2:	e003      	b.n	800e6cc <USB_HC_StartXfer+0x25c>

      default:
        break;
 800e6c4:	bf00      	nop
 800e6c6:	e002      	b.n	800e6ce <USB_HC_StartXfer+0x25e>
        break;
 800e6c8:	bf00      	nop
 800e6ca:	e000      	b.n	800e6ce <USB_HC_StartXfer+0x25e>
        break;
 800e6cc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	68d9      	ldr	r1, [r3, #12]
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	785a      	ldrb	r2, [r3, #1]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	695b      	ldr	r3, [r3, #20]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	2000      	movs	r0, #0
 800e6de:	9000      	str	r0, [sp, #0]
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f7ff fb1d 	bl	800dd20 <USB_WritePacket>
  }

  return HAL_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3728      	adds	r7, #40	; 0x28
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	1ff80000 	.word	0x1ff80000

0800e6f4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b085      	sub	sp, #20
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e706:	695b      	ldr	r3, [r3, #20]
 800e708:	b29b      	uxth	r3, r3
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3714      	adds	r7, #20
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr

0800e716 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e716:	b480      	push	{r7}
 800e718:	b089      	sub	sp, #36	; 0x24
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	460b      	mov	r3, r1
 800e720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e726:	78fb      	ldrb	r3, [r7, #3]
 800e728:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	015a      	lsls	r2, r3, #5
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	4413      	add	r3, r2
 800e736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	0c9b      	lsrs	r3, r3, #18
 800e73e:	f003 0303 	and.w	r3, r3, #3
 800e742:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	015a      	lsls	r2, r3, #5
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	4413      	add	r3, r2
 800e74c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	0fdb      	lsrs	r3, r3, #31
 800e754:	f003 0301 	and.w	r3, r3, #1
 800e758:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	f003 0320 	and.w	r3, r3, #32
 800e762:	2b20      	cmp	r3, #32
 800e764:	d104      	bne.n	800e770 <USB_HC_Halt+0x5a>
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d101      	bne.n	800e770 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	e0c8      	b.n	800e902 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d002      	beq.n	800e77c <USB_HC_Halt+0x66>
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2b02      	cmp	r3, #2
 800e77a:	d163      	bne.n	800e844 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	015a      	lsls	r2, r3, #5
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	4413      	add	r3, r2
 800e784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	69ba      	ldr	r2, [r7, #24]
 800e78c:	0151      	lsls	r1, r2, #5
 800e78e:	69fa      	ldr	r2, [r7, #28]
 800e790:	440a      	add	r2, r1
 800e792:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e796:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e79a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	f003 0320 	and.w	r3, r3, #32
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f040 80ab 	bne.w	800e900 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d133      	bne.n	800e81e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	015a      	lsls	r2, r3, #5
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	4413      	add	r3, r2
 800e7be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	69ba      	ldr	r2, [r7, #24]
 800e7c6:	0151      	lsls	r1, r2, #5
 800e7c8:	69fa      	ldr	r2, [r7, #28]
 800e7ca:	440a      	add	r2, r1
 800e7cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e7d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	015a      	lsls	r2, r3, #5
 800e7da:	69fb      	ldr	r3, [r7, #28]
 800e7dc:	4413      	add	r3, r2
 800e7de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	69ba      	ldr	r2, [r7, #24]
 800e7e6:	0151      	lsls	r1, r2, #5
 800e7e8:	69fa      	ldr	r2, [r7, #28]
 800e7ea:	440a      	add	r2, r1
 800e7ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e7f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e7f4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e802:	d81d      	bhi.n	800e840 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	015a      	lsls	r2, r3, #5
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	4413      	add	r3, r2
 800e80c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e81a:	d0ec      	beq.n	800e7f6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e81c:	e070      	b.n	800e900 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	015a      	lsls	r2, r3, #5
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	4413      	add	r3, r2
 800e826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	69ba      	ldr	r2, [r7, #24]
 800e82e:	0151      	lsls	r1, r2, #5
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	440a      	add	r2, r1
 800e834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e83c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e83e:	e05f      	b.n	800e900 <USB_HC_Halt+0x1ea>
            break;
 800e840:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e842:	e05d      	b.n	800e900 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	015a      	lsls	r2, r3, #5
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	4413      	add	r3, r2
 800e84c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	69ba      	ldr	r2, [r7, #24]
 800e854:	0151      	lsls	r1, r2, #5
 800e856:	69fa      	ldr	r2, [r7, #28]
 800e858:	440a      	add	r2, r1
 800e85a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e85e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e862:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e870:	2b00      	cmp	r3, #0
 800e872:	d133      	bne.n	800e8dc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e874:	69bb      	ldr	r3, [r7, #24]
 800e876:	015a      	lsls	r2, r3, #5
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	4413      	add	r3, r2
 800e87c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	69ba      	ldr	r2, [r7, #24]
 800e884:	0151      	lsls	r1, r2, #5
 800e886:	69fa      	ldr	r2, [r7, #28]
 800e888:	440a      	add	r2, r1
 800e88a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e88e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e892:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69ba      	ldr	r2, [r7, #24]
 800e8a4:	0151      	lsls	r1, r2, #5
 800e8a6:	69fa      	ldr	r2, [r7, #28]
 800e8a8:	440a      	add	r2, r1
 800e8aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e8ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e8b2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e8c0:	d81d      	bhi.n	800e8fe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	015a      	lsls	r2, r3, #5
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8d8:	d0ec      	beq.n	800e8b4 <USB_HC_Halt+0x19e>
 800e8da:	e011      	b.n	800e900 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	015a      	lsls	r2, r3, #5
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	69ba      	ldr	r2, [r7, #24]
 800e8ec:	0151      	lsls	r1, r2, #5
 800e8ee:	69fa      	ldr	r2, [r7, #28]
 800e8f0:	440a      	add	r2, r1
 800e8f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e8f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	e000      	b.n	800e900 <USB_HC_Halt+0x1ea>
          break;
 800e8fe:	bf00      	nop
    }
  }

  return HAL_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3724      	adds	r7, #36	; 0x24
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
	...

0800e910 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e910:	b480      	push	{r7}
 800e912:	b087      	sub	sp, #28
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e920:	78fb      	ldrb	r3, [r7, #3]
 800e922:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e924:	2301      	movs	r3, #1
 800e926:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	04da      	lsls	r2, r3, #19
 800e92c:	4b15      	ldr	r3, [pc, #84]	; (800e984 <USB_DoPing+0x74>)
 800e92e:	4013      	ands	r3, r2
 800e930:	693a      	ldr	r2, [r7, #16]
 800e932:	0151      	lsls	r1, r2, #5
 800e934:	697a      	ldr	r2, [r7, #20]
 800e936:	440a      	add	r2, r1
 800e938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e93c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e940:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	015a      	lsls	r2, r3, #5
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	4413      	add	r3, r2
 800e94a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e958:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e960:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	015a      	lsls	r2, r3, #5
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	4413      	add	r3, r2
 800e96a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e96e:	461a      	mov	r2, r3
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e974:	2300      	movs	r3, #0
}
 800e976:	4618      	mov	r0, r3
 800e978:	371c      	adds	r7, #28
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	1ff80000 	.word	0x1ff80000

0800e988 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e998:	2300      	movs	r3, #0
 800e99a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f7ff f8fe 	bl	800db9e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e9a2:	2110      	movs	r1, #16
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7ff f957 	bl	800dc58 <USB_FlushTxFifo>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d001      	beq.n	800e9b4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7ff f983 	bl	800dcc0 <USB_FlushRxFifo>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	61bb      	str	r3, [r7, #24]
 800e9c8:	e01f      	b.n	800ea0a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	015a      	lsls	r2, r3, #5
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e9e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e9f0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e9f2:	69bb      	ldr	r3, [r7, #24]
 800e9f4:	015a      	lsls	r2, r3, #5
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	4413      	add	r3, r2
 800e9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9fe:	461a      	mov	r2, r3
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	3301      	adds	r3, #1
 800ea08:	61bb      	str	r3, [r7, #24]
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	2b0f      	cmp	r3, #15
 800ea0e:	d9dc      	bls.n	800e9ca <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ea10:	2300      	movs	r3, #0
 800ea12:	61bb      	str	r3, [r7, #24]
 800ea14:	e034      	b.n	800ea80 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	015a      	lsls	r2, r3, #5
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ea2c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ea34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ea3c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	015a      	lsls	r2, r3, #5
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	4413      	add	r3, r2
 800ea46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	3301      	adds	r3, #1
 800ea54:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea5c:	d80c      	bhi.n	800ea78 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea74:	d0ec      	beq.n	800ea50 <USB_StopHost+0xc8>
 800ea76:	e000      	b.n	800ea7a <USB_StopHost+0xf2>
        break;
 800ea78:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	61bb      	str	r3, [r7, #24]
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	2b0f      	cmp	r3, #15
 800ea84:	d9c7      	bls.n	800ea16 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea92:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7ff f86d 	bl	800db7c <USB_EnableGlobalInt>

  return ret;
 800eaa2:	7ffb      	ldrb	r3, [r7, #31]
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3720      	adds	r7, #32
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800eab0:	4904      	ldr	r1, [pc, #16]	; (800eac4 <MX_FATFS_Init+0x18>)
 800eab2:	4805      	ldr	r0, [pc, #20]	; (800eac8 <MX_FATFS_Init+0x1c>)
 800eab4:	f003 faee 	bl	8012094 <FATFS_LinkDriver>
 800eab8:	4603      	mov	r3, r0
 800eaba:	461a      	mov	r2, r3
 800eabc:	4b03      	ldr	r3, [pc, #12]	; (800eacc <MX_FATFS_Init+0x20>)
 800eabe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800eac0:	bf00      	nop
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	20000cd4 	.word	0x20000cd4
 800eac8:	08023448 	.word	0x08023448
 800eacc:	20000cd0 	.word	0x20000cd0

0800ead0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ead6:	2300      	movs	r3, #0
 800ead8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800eada:	f000 f87b 	bl	800ebd4 <BSP_SD_IsDetected>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d001      	beq.n	800eae8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800eae4:	2302      	movs	r3, #2
 800eae6:	e012      	b.n	800eb0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800eae8:	480b      	ldr	r0, [pc, #44]	; (800eb18 <BSP_SD_Init+0x48>)
 800eaea:	f7fb fa03 	bl	8009ef4 <HAL_SD_Init>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800eaf2:	79fb      	ldrb	r3, [r7, #7]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d109      	bne.n	800eb0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800eaf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800eafc:	4806      	ldr	r0, [pc, #24]	; (800eb18 <BSP_SD_Init+0x48>)
 800eafe:	f7fb fe53 	bl	800a7a8 <HAL_SD_ConfigWideBusOperation>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d001      	beq.n	800eb0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800eb0c:	79fb      	ldrb	r3, [r7, #7]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	20000828 	.word	0x20000828

0800eb1c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b086      	sub	sp, #24
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	68f9      	ldr	r1, [r7, #12]
 800eb32:	4806      	ldr	r0, [pc, #24]	; (800eb4c <BSP_SD_ReadBlocks_DMA+0x30>)
 800eb34:	f7fb fa96 	bl	800a064 <HAL_SD_ReadBlocks_DMA>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d001      	beq.n	800eb42 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eb42:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3718      	adds	r7, #24
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	20000828 	.word	0x20000828

0800eb50 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b086      	sub	sp, #24
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	68f9      	ldr	r1, [r7, #12]
 800eb66:	4806      	ldr	r0, [pc, #24]	; (800eb80 <BSP_SD_WriteBlocks_DMA+0x30>)
 800eb68:	f7fb fb5e 	bl	800a228 <HAL_SD_WriteBlocks_DMA>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d001      	beq.n	800eb76 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800eb72:	2301      	movs	r3, #1
 800eb74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eb76:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3718      	adds	r7, #24
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}
 800eb80:	20000828 	.word	0x20000828

0800eb84 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800eb88:	4805      	ldr	r0, [pc, #20]	; (800eba0 <BSP_SD_GetCardState+0x1c>)
 800eb8a:	f7fb fea7 	bl	800a8dc <HAL_SD_GetCardState>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b04      	cmp	r3, #4
 800eb92:	bf14      	ite	ne
 800eb94:	2301      	movne	r3, #1
 800eb96:	2300      	moveq	r3, #0
 800eb98:	b2db      	uxtb	r3, r3
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	20000828 	.word	0x20000828

0800eba4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ebac:	6879      	ldr	r1, [r7, #4]
 800ebae:	4803      	ldr	r0, [pc, #12]	; (800ebbc <BSP_SD_GetCardInfo+0x18>)
 800ebb0:	f7fb fdce 	bl	800a750 <HAL_SD_GetCardInfo>
}
 800ebb4:	bf00      	nop
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	20000828 	.word	0x20000828

0800ebc0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ebc8:	f000 f9b2 	bl	800ef30 <BSP_SD_ReadCpltCallback>
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ebde:	f000 f80b 	bl	800ebf8 <BSP_PlatformIsDetected>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d101      	bne.n	800ebec <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ebec:	79fb      	ldrb	r3, [r7, #7]
 800ebee:	b2db      	uxtb	r3, r3
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ec02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ec06:	4806      	ldr	r0, [pc, #24]	; (800ec20 <BSP_PlatformIsDetected+0x28>)
 800ec08:	f7f6 fed8 	bl	80059bc <HAL_GPIO_ReadPin>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ec12:	2300      	movs	r3, #0
 800ec14:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ec16:	79fb      	ldrb	r3, [r7, #7]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	40020800 	.word	0x40020800

0800ec24 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ec2c:	f003 fa7e 	bl	801212c <osKernelSysTick>
 800ec30:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ec32:	e006      	b.n	800ec42 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec34:	f7ff ffa6 	bl	800eb84 <BSP_SD_GetCardState>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d101      	bne.n	800ec42 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	e009      	b.n	800ec56 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ec42:	f003 fa73 	bl	801212c <osKernelSysTick>
 800ec46:	4602      	mov	r2, r0
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d8f0      	bhi.n	800ec34 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ec52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
	...

0800ec60 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	4603      	mov	r3, r0
 800ec68:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ec6a:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <SD_CheckStatus+0x38>)
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec70:	f7ff ff88 	bl	800eb84 <BSP_SD_GetCardState>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d107      	bne.n	800ec8a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ec7a:	4b07      	ldr	r3, [pc, #28]	; (800ec98 <SD_CheckStatus+0x38>)
 800ec7c:	781b      	ldrb	r3, [r3, #0]
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	f023 0301 	bic.w	r3, r3, #1
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	4b04      	ldr	r3, [pc, #16]	; (800ec98 <SD_CheckStatus+0x38>)
 800ec88:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ec8a:	4b03      	ldr	r3, [pc, #12]	; (800ec98 <SD_CheckStatus+0x38>)
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	b2db      	uxtb	r3, r3
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	20000009 	.word	0x20000009

0800ec9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ec9c:	b590      	push	{r4, r7, lr}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800eca6:	4b20      	ldr	r3, [pc, #128]	; (800ed28 <SD_initialize+0x8c>)
 800eca8:	2201      	movs	r2, #1
 800ecaa:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ecac:	f003 fa32 	bl	8012114 <osKernelRunning>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d030      	beq.n	800ed18 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ecb6:	f7ff ff0b 	bl	800ead0 <BSP_SD_Init>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d107      	bne.n	800ecd0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7ff ffcc 	bl	800ec60 <SD_CheckStatus>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	461a      	mov	r2, r3
 800eccc:	4b16      	ldr	r3, [pc, #88]	; (800ed28 <SD_initialize+0x8c>)
 800ecce:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ecd0:	4b15      	ldr	r3, [pc, #84]	; (800ed28 <SD_initialize+0x8c>)
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d01e      	beq.n	800ed18 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ecda:	4b14      	ldr	r3, [pc, #80]	; (800ed2c <SD_initialize+0x90>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d10e      	bne.n	800ed00 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ece2:	4b13      	ldr	r3, [pc, #76]	; (800ed30 <SD_initialize+0x94>)
 800ece4:	f107 0408 	add.w	r4, r7, #8
 800ece8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ecea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ecee:	f107 0308 	add.w	r3, r7, #8
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f003 fba9 	bl	801244c <osMessageCreate>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	4a0b      	ldr	r2, [pc, #44]	; (800ed2c <SD_initialize+0x90>)
 800ecfe:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ed00:	4b0a      	ldr	r3, [pc, #40]	; (800ed2c <SD_initialize+0x90>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d107      	bne.n	800ed18 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ed08:	4b07      	ldr	r3, [pc, #28]	; (800ed28 <SD_initialize+0x8c>)
 800ed0a:	781b      	ldrb	r3, [r3, #0]
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	f043 0301 	orr.w	r3, r3, #1
 800ed12:	b2da      	uxtb	r2, r3
 800ed14:	4b04      	ldr	r3, [pc, #16]	; (800ed28 <SD_initialize+0x8c>)
 800ed16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ed18:	4b03      	ldr	r3, [pc, #12]	; (800ed28 <SD_initialize+0x8c>)
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	b2db      	uxtb	r3, r3
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	371c      	adds	r7, #28
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd90      	pop	{r4, r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20000009 	.word	0x20000009
 800ed2c:	20000cd8 	.word	0x20000cd8
 800ed30:	080208b8 	.word	0x080208b8

0800ed34 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ed3e:	79fb      	ldrb	r3, [r7, #7]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7ff ff8d 	bl	800ec60 <SD_CheckStatus>
 800ed46:	4603      	mov	r3, r0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b08a      	sub	sp, #40	; 0x28
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60b9      	str	r1, [r7, #8]
 800ed58:	607a      	str	r2, [r7, #4]
 800ed5a:	603b      	str	r3, [r7, #0]
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800ed60:	2301      	movs	r3, #1
 800ed62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ed66:	f247 5030 	movw	r0, #30000	; 0x7530
 800ed6a:	f7ff ff5b 	bl	800ec24 <SD_CheckStatusWithTimeout>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	da02      	bge.n	800ed7a <SD_read+0x2a>
  {
    return res;
 800ed74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed78:	e032      	b.n	800ede0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ed7a:	683a      	ldr	r2, [r7, #0]
 800ed7c:	6879      	ldr	r1, [r7, #4]
 800ed7e:	68b8      	ldr	r0, [r7, #8]
 800ed80:	f7ff fecc 	bl	800eb1c <BSP_SD_ReadBlocks_DMA>
 800ed84:	4603      	mov	r3, r0
 800ed86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800ed8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d124      	bne.n	800eddc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ed92:	4b15      	ldr	r3, [pc, #84]	; (800ede8 <SD_read+0x98>)
 800ed94:	6819      	ldr	r1, [r3, #0]
 800ed96:	f107 0314 	add.w	r3, r7, #20
 800ed9a:	f247 5230 	movw	r2, #30000	; 0x7530
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f003 fbbc 	bl	801251c <osMessageGet>

    if (event.status == osEventMessage)
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	2b10      	cmp	r3, #16
 800eda8:	d118      	bne.n	800eddc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	2b01      	cmp	r3, #1
 800edae:	d115      	bne.n	800eddc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800edb0:	f003 f9bc 	bl	801212c <osKernelSysTick>
 800edb4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800edb6:	e008      	b.n	800edca <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800edb8:	f7ff fee4 	bl	800eb84 <BSP_SD_GetCardState>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d103      	bne.n	800edca <SD_read+0x7a>
              {
                res = RES_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800edc8:	e008      	b.n	800eddc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800edca:	f003 f9af 	bl	801212c <osKernelSysTick>
 800edce:	4602      	mov	r2, r0
 800edd0:	6a3b      	ldr	r3, [r7, #32]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	f247 522f 	movw	r2, #29999	; 0x752f
 800edd8:	4293      	cmp	r3, r2
 800edda:	d9ed      	bls.n	800edb8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800eddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3728      	adds	r7, #40	; 0x28
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	20000cd8 	.word	0x20000cd8

0800edec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b08a      	sub	sp, #40	; 0x28
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60b9      	str	r1, [r7, #8]
 800edf4:	607a      	str	r2, [r7, #4]
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800edfc:	2301      	movs	r3, #1
 800edfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ee02:	f247 5030 	movw	r0, #30000	; 0x7530
 800ee06:	f7ff ff0d 	bl	800ec24 <SD_CheckStatusWithTimeout>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	da02      	bge.n	800ee16 <SD_write+0x2a>
  {
    return res;
 800ee10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee14:	e02e      	b.n	800ee74 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	6879      	ldr	r1, [r7, #4]
 800ee1a:	68b8      	ldr	r0, [r7, #8]
 800ee1c:	f7ff fe98 	bl	800eb50 <BSP_SD_WriteBlocks_DMA>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d124      	bne.n	800ee70 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ee26:	4b15      	ldr	r3, [pc, #84]	; (800ee7c <SD_write+0x90>)
 800ee28:	6819      	ldr	r1, [r3, #0]
 800ee2a:	f107 0314 	add.w	r3, r7, #20
 800ee2e:	f247 5230 	movw	r2, #30000	; 0x7530
 800ee32:	4618      	mov	r0, r3
 800ee34:	f003 fb72 	bl	801251c <osMessageGet>

    if (event.status == osEventMessage)
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	2b10      	cmp	r3, #16
 800ee3c:	d118      	bne.n	800ee70 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	2b02      	cmp	r3, #2
 800ee42:	d115      	bne.n	800ee70 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ee44:	f003 f972 	bl	801212c <osKernelSysTick>
 800ee48:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ee4a:	e008      	b.n	800ee5e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ee4c:	f7ff fe9a 	bl	800eb84 <BSP_SD_GetCardState>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d103      	bne.n	800ee5e <SD_write+0x72>
          {
            res = RES_OK;
 800ee56:	2300      	movs	r3, #0
 800ee58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800ee5c:	e008      	b.n	800ee70 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ee5e:	f003 f965 	bl	801212c <osKernelSysTick>
 800ee62:	4602      	mov	r2, r0
 800ee64:	6a3b      	ldr	r3, [r7, #32]
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	f247 522f 	movw	r2, #29999	; 0x752f
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d9ed      	bls.n	800ee4c <SD_write+0x60>
    }

  }
#endif

  return res;
 800ee70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3728      	adds	r7, #40	; 0x28
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	20000cd8 	.word	0x20000cd8

0800ee80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b08c      	sub	sp, #48	; 0x30
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	4603      	mov	r3, r0
 800ee88:	603a      	str	r2, [r7, #0]
 800ee8a:	71fb      	strb	r3, [r7, #7]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ee90:	2301      	movs	r3, #1
 800ee92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ee96:	4b25      	ldr	r3, [pc, #148]	; (800ef2c <SD_ioctl+0xac>)
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	f003 0301 	and.w	r3, r3, #1
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d001      	beq.n	800eea8 <SD_ioctl+0x28>
 800eea4:	2303      	movs	r3, #3
 800eea6:	e03c      	b.n	800ef22 <SD_ioctl+0xa2>

  switch (cmd)
 800eea8:	79bb      	ldrb	r3, [r7, #6]
 800eeaa:	2b03      	cmp	r3, #3
 800eeac:	d834      	bhi.n	800ef18 <SD_ioctl+0x98>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <SD_ioctl+0x34>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800eec5 	.word	0x0800eec5
 800eeb8:	0800eecd 	.word	0x0800eecd
 800eebc:	0800eee5 	.word	0x0800eee5
 800eec0:	0800eeff 	.word	0x0800eeff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800eec4:	2300      	movs	r3, #0
 800eec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eeca:	e028      	b.n	800ef1e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800eecc:	f107 030c 	add.w	r3, r7, #12
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7ff fe67 	bl	800eba4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800eed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eedc:	2300      	movs	r3, #0
 800eede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eee2:	e01c      	b.n	800ef1e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eee4:	f107 030c 	add.w	r3, r7, #12
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7ff fe5b 	bl	800eba4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800eeee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800eef6:	2300      	movs	r3, #0
 800eef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eefc:	e00f      	b.n	800ef1e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eefe:	f107 030c 	add.w	r3, r7, #12
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7ff fe4e 	bl	800eba4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ef08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef0a:	0a5a      	lsrs	r2, r3, #9
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ef10:	2300      	movs	r3, #0
 800ef12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ef16:	e002      	b.n	800ef1e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ef18:	2304      	movs	r3, #4
 800ef1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ef1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3730      	adds	r7, #48	; 0x30
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20000009 	.word	0x20000009

0800ef30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ef34:	4b04      	ldr	r3, [pc, #16]	; (800ef48 <BSP_SD_ReadCpltCallback+0x18>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2200      	movs	r2, #0
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f003 faad 	bl	801249c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800ef42:	bf00      	nop
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	20000cd8 	.word	0x20000cd8

0800ef4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ef4c:	b5b0      	push	{r4, r5, r7, lr}
 800ef4e:	b08c      	sub	sp, #48	; 0x30
 800ef50:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800ef52:	4b96      	ldr	r3, [pc, #600]	; (800f1ac <MX_LWIP_Init+0x260>)
 800ef54:	220a      	movs	r2, #10
 800ef56:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 101;
 800ef58:	4b94      	ldr	r3, [pc, #592]	; (800f1ac <MX_LWIP_Init+0x260>)
 800ef5a:	2265      	movs	r2, #101	; 0x65
 800ef5c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800ef5e:	4b93      	ldr	r3, [pc, #588]	; (800f1ac <MX_LWIP_Init+0x260>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 108;
 800ef64:	4b91      	ldr	r3, [pc, #580]	; (800f1ac <MX_LWIP_Init+0x260>)
 800ef66:	226c      	movs	r2, #108	; 0x6c
 800ef68:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ef6a:	4b91      	ldr	r3, [pc, #580]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800ef6c:	22ff      	movs	r2, #255	; 0xff
 800ef6e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ef70:	4b8f      	ldr	r3, [pc, #572]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800ef72:	22ff      	movs	r2, #255	; 0xff
 800ef74:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ef76:	4b8e      	ldr	r3, [pc, #568]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800ef78:	22ff      	movs	r2, #255	; 0xff
 800ef7a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ef7c:	4b8c      	ldr	r3, [pc, #560]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800ef7e:	2200      	movs	r2, #0
 800ef80:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800ef82:	4b8c      	ldr	r3, [pc, #560]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800ef84:	220a      	movs	r2, #10
 800ef86:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 101;
 800ef88:	4b8a      	ldr	r3, [pc, #552]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800ef8a:	2265      	movs	r2, #101	; 0x65
 800ef8c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800ef8e:	4b89      	ldr	r3, [pc, #548]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ef94:	4b87      	ldr	r3, [pc, #540]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800ef96:	2201      	movs	r2, #1
 800ef98:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	f006 f953 	bl	8015248 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800efa2:	4b82      	ldr	r3, [pc, #520]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	061a      	lsls	r2, r3, #24
 800efa8:	4b80      	ldr	r3, [pc, #512]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efaa:	785b      	ldrb	r3, [r3, #1]
 800efac:	041b      	lsls	r3, r3, #16
 800efae:	431a      	orrs	r2, r3
 800efb0:	4b7e      	ldr	r3, [pc, #504]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efb2:	789b      	ldrb	r3, [r3, #2]
 800efb4:	021b      	lsls	r3, r3, #8
 800efb6:	4313      	orrs	r3, r2
 800efb8:	4a7c      	ldr	r2, [pc, #496]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efba:	78d2      	ldrb	r2, [r2, #3]
 800efbc:	4313      	orrs	r3, r2
 800efbe:	061a      	lsls	r2, r3, #24
 800efc0:	4b7a      	ldr	r3, [pc, #488]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	0619      	lsls	r1, r3, #24
 800efc6:	4b79      	ldr	r3, [pc, #484]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efc8:	785b      	ldrb	r3, [r3, #1]
 800efca:	041b      	lsls	r3, r3, #16
 800efcc:	4319      	orrs	r1, r3
 800efce:	4b77      	ldr	r3, [pc, #476]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efd0:	789b      	ldrb	r3, [r3, #2]
 800efd2:	021b      	lsls	r3, r3, #8
 800efd4:	430b      	orrs	r3, r1
 800efd6:	4975      	ldr	r1, [pc, #468]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efd8:	78c9      	ldrb	r1, [r1, #3]
 800efda:	430b      	orrs	r3, r1
 800efdc:	021b      	lsls	r3, r3, #8
 800efde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efe2:	431a      	orrs	r2, r3
 800efe4:	4b71      	ldr	r3, [pc, #452]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	0619      	lsls	r1, r3, #24
 800efea:	4b70      	ldr	r3, [pc, #448]	; (800f1ac <MX_LWIP_Init+0x260>)
 800efec:	785b      	ldrb	r3, [r3, #1]
 800efee:	041b      	lsls	r3, r3, #16
 800eff0:	4319      	orrs	r1, r3
 800eff2:	4b6e      	ldr	r3, [pc, #440]	; (800f1ac <MX_LWIP_Init+0x260>)
 800eff4:	789b      	ldrb	r3, [r3, #2]
 800eff6:	021b      	lsls	r3, r3, #8
 800eff8:	430b      	orrs	r3, r1
 800effa:	496c      	ldr	r1, [pc, #432]	; (800f1ac <MX_LWIP_Init+0x260>)
 800effc:	78c9      	ldrb	r1, [r1, #3]
 800effe:	430b      	orrs	r3, r1
 800f000:	0a1b      	lsrs	r3, r3, #8
 800f002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f006:	431a      	orrs	r2, r3
 800f008:	4b68      	ldr	r3, [pc, #416]	; (800f1ac <MX_LWIP_Init+0x260>)
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	0619      	lsls	r1, r3, #24
 800f00e:	4b67      	ldr	r3, [pc, #412]	; (800f1ac <MX_LWIP_Init+0x260>)
 800f010:	785b      	ldrb	r3, [r3, #1]
 800f012:	041b      	lsls	r3, r3, #16
 800f014:	4319      	orrs	r1, r3
 800f016:	4b65      	ldr	r3, [pc, #404]	; (800f1ac <MX_LWIP_Init+0x260>)
 800f018:	789b      	ldrb	r3, [r3, #2]
 800f01a:	021b      	lsls	r3, r3, #8
 800f01c:	430b      	orrs	r3, r1
 800f01e:	4963      	ldr	r1, [pc, #396]	; (800f1ac <MX_LWIP_Init+0x260>)
 800f020:	78c9      	ldrb	r1, [r1, #3]
 800f022:	430b      	orrs	r3, r1
 800f024:	0e1b      	lsrs	r3, r3, #24
 800f026:	4313      	orrs	r3, r2
 800f028:	4a63      	ldr	r2, [pc, #396]	; (800f1b8 <MX_LWIP_Init+0x26c>)
 800f02a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f02c:	4b60      	ldr	r3, [pc, #384]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	061a      	lsls	r2, r3, #24
 800f032:	4b5f      	ldr	r3, [pc, #380]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f034:	785b      	ldrb	r3, [r3, #1]
 800f036:	041b      	lsls	r3, r3, #16
 800f038:	431a      	orrs	r2, r3
 800f03a:	4b5d      	ldr	r3, [pc, #372]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f03c:	789b      	ldrb	r3, [r3, #2]
 800f03e:	021b      	lsls	r3, r3, #8
 800f040:	4313      	orrs	r3, r2
 800f042:	4a5b      	ldr	r2, [pc, #364]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f044:	78d2      	ldrb	r2, [r2, #3]
 800f046:	4313      	orrs	r3, r2
 800f048:	061a      	lsls	r2, r3, #24
 800f04a:	4b59      	ldr	r3, [pc, #356]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	0619      	lsls	r1, r3, #24
 800f050:	4b57      	ldr	r3, [pc, #348]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f052:	785b      	ldrb	r3, [r3, #1]
 800f054:	041b      	lsls	r3, r3, #16
 800f056:	4319      	orrs	r1, r3
 800f058:	4b55      	ldr	r3, [pc, #340]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f05a:	789b      	ldrb	r3, [r3, #2]
 800f05c:	021b      	lsls	r3, r3, #8
 800f05e:	430b      	orrs	r3, r1
 800f060:	4953      	ldr	r1, [pc, #332]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f062:	78c9      	ldrb	r1, [r1, #3]
 800f064:	430b      	orrs	r3, r1
 800f066:	021b      	lsls	r3, r3, #8
 800f068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f06c:	431a      	orrs	r2, r3
 800f06e:	4b50      	ldr	r3, [pc, #320]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	0619      	lsls	r1, r3, #24
 800f074:	4b4e      	ldr	r3, [pc, #312]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f076:	785b      	ldrb	r3, [r3, #1]
 800f078:	041b      	lsls	r3, r3, #16
 800f07a:	4319      	orrs	r1, r3
 800f07c:	4b4c      	ldr	r3, [pc, #304]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f07e:	789b      	ldrb	r3, [r3, #2]
 800f080:	021b      	lsls	r3, r3, #8
 800f082:	430b      	orrs	r3, r1
 800f084:	494a      	ldr	r1, [pc, #296]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f086:	78c9      	ldrb	r1, [r1, #3]
 800f088:	430b      	orrs	r3, r1
 800f08a:	0a1b      	lsrs	r3, r3, #8
 800f08c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f090:	431a      	orrs	r2, r3
 800f092:	4b47      	ldr	r3, [pc, #284]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f094:	781b      	ldrb	r3, [r3, #0]
 800f096:	0619      	lsls	r1, r3, #24
 800f098:	4b45      	ldr	r3, [pc, #276]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f09a:	785b      	ldrb	r3, [r3, #1]
 800f09c:	041b      	lsls	r3, r3, #16
 800f09e:	4319      	orrs	r1, r3
 800f0a0:	4b43      	ldr	r3, [pc, #268]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f0a2:	789b      	ldrb	r3, [r3, #2]
 800f0a4:	021b      	lsls	r3, r3, #8
 800f0a6:	430b      	orrs	r3, r1
 800f0a8:	4941      	ldr	r1, [pc, #260]	; (800f1b0 <MX_LWIP_Init+0x264>)
 800f0aa:	78c9      	ldrb	r1, [r1, #3]
 800f0ac:	430b      	orrs	r3, r1
 800f0ae:	0e1b      	lsrs	r3, r3, #24
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	4a42      	ldr	r2, [pc, #264]	; (800f1bc <MX_LWIP_Init+0x270>)
 800f0b4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f0b6:	4b3f      	ldr	r3, [pc, #252]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	061a      	lsls	r2, r3, #24
 800f0bc:	4b3d      	ldr	r3, [pc, #244]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0be:	785b      	ldrb	r3, [r3, #1]
 800f0c0:	041b      	lsls	r3, r3, #16
 800f0c2:	431a      	orrs	r2, r3
 800f0c4:	4b3b      	ldr	r3, [pc, #236]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0c6:	789b      	ldrb	r3, [r3, #2]
 800f0c8:	021b      	lsls	r3, r3, #8
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	4a39      	ldr	r2, [pc, #228]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0ce:	78d2      	ldrb	r2, [r2, #3]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	061a      	lsls	r2, r3, #24
 800f0d4:	4b37      	ldr	r3, [pc, #220]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	0619      	lsls	r1, r3, #24
 800f0da:	4b36      	ldr	r3, [pc, #216]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0dc:	785b      	ldrb	r3, [r3, #1]
 800f0de:	041b      	lsls	r3, r3, #16
 800f0e0:	4319      	orrs	r1, r3
 800f0e2:	4b34      	ldr	r3, [pc, #208]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0e4:	789b      	ldrb	r3, [r3, #2]
 800f0e6:	021b      	lsls	r3, r3, #8
 800f0e8:	430b      	orrs	r3, r1
 800f0ea:	4932      	ldr	r1, [pc, #200]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0ec:	78c9      	ldrb	r1, [r1, #3]
 800f0ee:	430b      	orrs	r3, r1
 800f0f0:	021b      	lsls	r3, r3, #8
 800f0f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f0f6:	431a      	orrs	r2, r3
 800f0f8:	4b2e      	ldr	r3, [pc, #184]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	0619      	lsls	r1, r3, #24
 800f0fe:	4b2d      	ldr	r3, [pc, #180]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f100:	785b      	ldrb	r3, [r3, #1]
 800f102:	041b      	lsls	r3, r3, #16
 800f104:	4319      	orrs	r1, r3
 800f106:	4b2b      	ldr	r3, [pc, #172]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f108:	789b      	ldrb	r3, [r3, #2]
 800f10a:	021b      	lsls	r3, r3, #8
 800f10c:	430b      	orrs	r3, r1
 800f10e:	4929      	ldr	r1, [pc, #164]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f110:	78c9      	ldrb	r1, [r1, #3]
 800f112:	430b      	orrs	r3, r1
 800f114:	0a1b      	lsrs	r3, r3, #8
 800f116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f11a:	431a      	orrs	r2, r3
 800f11c:	4b25      	ldr	r3, [pc, #148]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	0619      	lsls	r1, r3, #24
 800f122:	4b24      	ldr	r3, [pc, #144]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f124:	785b      	ldrb	r3, [r3, #1]
 800f126:	041b      	lsls	r3, r3, #16
 800f128:	4319      	orrs	r1, r3
 800f12a:	4b22      	ldr	r3, [pc, #136]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f12c:	789b      	ldrb	r3, [r3, #2]
 800f12e:	021b      	lsls	r3, r3, #8
 800f130:	430b      	orrs	r3, r1
 800f132:	4920      	ldr	r1, [pc, #128]	; (800f1b4 <MX_LWIP_Init+0x268>)
 800f134:	78c9      	ldrb	r1, [r1, #3]
 800f136:	430b      	orrs	r3, r1
 800f138:	0e1b      	lsrs	r3, r3, #24
 800f13a:	4313      	orrs	r3, r2
 800f13c:	4a20      	ldr	r2, [pc, #128]	; (800f1c0 <MX_LWIP_Init+0x274>)
 800f13e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800f140:	4b20      	ldr	r3, [pc, #128]	; (800f1c4 <MX_LWIP_Init+0x278>)
 800f142:	9302      	str	r3, [sp, #8]
 800f144:	4b20      	ldr	r3, [pc, #128]	; (800f1c8 <MX_LWIP_Init+0x27c>)
 800f146:	9301      	str	r3, [sp, #4]
 800f148:	2300      	movs	r3, #0
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	4b1c      	ldr	r3, [pc, #112]	; (800f1c0 <MX_LWIP_Init+0x274>)
 800f14e:	4a1b      	ldr	r2, [pc, #108]	; (800f1bc <MX_LWIP_Init+0x270>)
 800f150:	4919      	ldr	r1, [pc, #100]	; (800f1b8 <MX_LWIP_Init+0x26c>)
 800f152:	481e      	ldr	r0, [pc, #120]	; (800f1cc <MX_LWIP_Init+0x280>)
 800f154:	f006 fe42 	bl	8015ddc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f158:	481c      	ldr	r0, [pc, #112]	; (800f1cc <MX_LWIP_Init+0x280>)
 800f15a:	f006 fff1 	bl	8016140 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f15e:	4b1b      	ldr	r3, [pc, #108]	; (800f1cc <MX_LWIP_Init+0x280>)
 800f160:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f164:	089b      	lsrs	r3, r3, #2
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d003      	beq.n	800f178 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f170:	4816      	ldr	r0, [pc, #88]	; (800f1cc <MX_LWIP_Init+0x280>)
 800f172:	f006 fff5 	bl	8016160 <netif_set_up>
 800f176:	e002      	b.n	800f17e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f178:	4814      	ldr	r0, [pc, #80]	; (800f1cc <MX_LWIP_Init+0x280>)
 800f17a:	f007 f85d 	bl	8016238 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f17e:	4914      	ldr	r1, [pc, #80]	; (800f1d0 <MX_LWIP_Init+0x284>)
 800f180:	4812      	ldr	r0, [pc, #72]	; (800f1cc <MX_LWIP_Init+0x280>)
 800f182:	f007 f8ef 	bl	8016364 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800f186:	4b13      	ldr	r3, [pc, #76]	; (800f1d4 <MX_LWIP_Init+0x288>)
 800f188:	1d3c      	adds	r4, r7, #4
 800f18a:	461d      	mov	r5, r3
 800f18c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f18e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800f198:	1d3b      	adds	r3, r7, #4
 800f19a:	490c      	ldr	r1, [pc, #48]	; (800f1cc <MX_LWIP_Init+0x280>)
 800f19c:	4618      	mov	r0, r3
 800f19e:	f002 ffd5 	bl	801214c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f1a2:	bf00      	nop
 800f1a4:	3720      	adds	r7, #32
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bdb0      	pop	{r4, r5, r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	20000d1c 	.word	0x20000d1c
 800f1b0:	20000d20 	.word	0x20000d20
 800f1b4:	20000d24 	.word	0x20000d24
 800f1b8:	20000d10 	.word	0x20000d10
 800f1bc:	20000d14 	.word	0x20000d14
 800f1c0:	20000d18 	.word	0x20000d18
 800f1c4:	08015185 	.word	0x08015185
 800f1c8:	0800f6d1 	.word	0x0800f6d1
 800f1cc:	20000cdc 	.word	0x20000cdc
 800f1d0:	0800f1d9 	.word	0x0800f1d9
 800f1d4:	080208d0 	.word	0x080208d0

0800f1d8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f1e0:	bf00      	nop
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ea:	4770      	bx	lr

0800f1ec <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b087      	sub	sp, #28
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800f1fe:	2320      	movs	r3, #32
 800f200:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f202:	f3bf 8f4f 	dsb	sy
}
 800f206:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800f208:	e00b      	b.n	800f222 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800f20a:	4a0d      	ldr	r2, [pc, #52]	; (800f240 <SCB_InvalidateDCache_by_Addr+0x54>)
 800f20c:	693b      	ldr	r3, [r7, #16]
 800f20e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	693a      	ldr	r2, [r7, #16]
 800f216:	4413      	add	r3, r2
 800f218:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800f21a:	697a      	ldr	r2, [r7, #20]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	2b00      	cmp	r3, #0
 800f226:	dcf0      	bgt.n	800f20a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800f228:	f3bf 8f4f 	dsb	sy
}
 800f22c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f22e:	f3bf 8f6f 	isb	sy
}
 800f232:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800f234:	bf00      	nop
 800f236:	371c      	adds	r7, #28
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	e000ed00 	.word	0xe000ed00

0800f244 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800f24c:	4b04      	ldr	r3, [pc, #16]	; (800f260 <HAL_ETH_RxCpltCallback+0x1c>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4618      	mov	r0, r3
 800f252:	f003 f8c5 	bl	80123e0 <osSemaphoreRelease>
}
 800f256:	bf00      	nop
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	200056b4 	.word	0x200056b4

0800f264 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800f26c:	4b04      	ldr	r3, [pc, #16]	; (800f280 <HAL_ETH_TxCpltCallback+0x1c>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4618      	mov	r0, r3
 800f272:	f003 f8b5 	bl	80123e0 <osSemaphoreRelease>
}
 800f276:	bf00      	nop
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	200056b8 	.word	0x200056b8

0800f284 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7f5 fdd9 	bl	8004e44 <HAL_ETH_GetDMAError>
 800f292:	4603      	mov	r3, r0
 800f294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f298:	2b80      	cmp	r3, #128	; 0x80
 800f29a:	d104      	bne.n	800f2a6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800f29c:	4b04      	ldr	r3, [pc, #16]	; (800f2b0 <HAL_ETH_ErrorCallback+0x2c>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f003 f89d 	bl	80123e0 <osSemaphoreRelease>
  }
}
 800f2a6:	bf00      	nop
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	200056b4 	.word	0x200056b4

0800f2b4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f2b4:	b5b0      	push	{r4, r5, r7, lr}
 800f2b6:	b0a8      	sub	sp, #160	; 0xa0
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800f2ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f2d2:	2264      	movs	r2, #100	; 0x64
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f010 fc0e 	bl	801faf8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f2dc:	4b85      	ldr	r3, [pc, #532]	; (800f4f4 <low_level_init+0x240>)
 800f2de:	4a86      	ldr	r2, [pc, #536]	; (800f4f8 <low_level_init+0x244>)
 800f2e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800f2e8:	2380      	movs	r3, #128	; 0x80
 800f2ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800f2ee:	23e1      	movs	r3, #225	; 0xe1
 800f2f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800f300:	2300      	movs	r3, #0
 800f302:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800f306:	4a7b      	ldr	r2, [pc, #492]	; (800f4f4 <low_level_init+0x240>)
 800f308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f30c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f30e:	4b79      	ldr	r3, [pc, #484]	; (800f4f4 <low_level_init+0x240>)
 800f310:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800f314:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f316:	4b77      	ldr	r3, [pc, #476]	; (800f4f4 <low_level_init+0x240>)
 800f318:	4a78      	ldr	r2, [pc, #480]	; (800f4fc <low_level_init+0x248>)
 800f31a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f31c:	4b75      	ldr	r3, [pc, #468]	; (800f4f4 <low_level_init+0x240>)
 800f31e:	4a78      	ldr	r2, [pc, #480]	; (800f500 <low_level_init+0x24c>)
 800f320:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f322:	4b74      	ldr	r3, [pc, #464]	; (800f4f4 <low_level_init+0x240>)
 800f324:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f328:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f32a:	4872      	ldr	r0, [pc, #456]	; (800f4f4 <low_level_init+0x240>)
 800f32c:	f7f4 feec 	bl	8004108 <HAL_ETH_Init>
 800f330:	4603      	mov	r3, r0
 800f332:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f336:	2238      	movs	r2, #56	; 0x38
 800f338:	2100      	movs	r1, #0
 800f33a:	4872      	ldr	r0, [pc, #456]	; (800f504 <low_level_init+0x250>)
 800f33c:	f010 fbdc 	bl	801faf8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f340:	4b70      	ldr	r3, [pc, #448]	; (800f504 <low_level_init+0x250>)
 800f342:	2221      	movs	r2, #33	; 0x21
 800f344:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f346:	4b6f      	ldr	r3, [pc, #444]	; (800f504 <low_level_init+0x250>)
 800f348:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800f34c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f34e:	4b6d      	ldr	r3, [pc, #436]	; (800f504 <low_level_init+0x250>)
 800f350:	2200      	movs	r2, #0
 800f352:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f354:	486c      	ldr	r0, [pc, #432]	; (800f508 <low_level_init+0x254>)
 800f356:	f006 fbfb 	bl	8015b50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2206      	movs	r2, #6
 800f35e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f362:	4b64      	ldr	r3, [pc, #400]	; (800f4f4 <low_level_init+0x240>)
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	781a      	ldrb	r2, [r3, #0]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f36e:	4b61      	ldr	r3, [pc, #388]	; (800f4f4 <low_level_init+0x240>)
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	785a      	ldrb	r2, [r3, #1]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f37a:	4b5e      	ldr	r3, [pc, #376]	; (800f4f4 <low_level_init+0x240>)
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	789a      	ldrb	r2, [r3, #2]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f386:	4b5b      	ldr	r3, [pc, #364]	; (800f4f4 <low_level_init+0x240>)
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	78da      	ldrb	r2, [r3, #3]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f392:	4b58      	ldr	r3, [pc, #352]	; (800f4f4 <low_level_init+0x240>)
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	791a      	ldrb	r2, [r3, #4]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f39e:	4b55      	ldr	r3, [pc, #340]	; (800f4f4 <low_level_init+0x240>)
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	795a      	ldrb	r2, [r3, #5]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f3b0:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f3b8:	f043 030a 	orr.w	r3, r3, #10
 800f3bc:	b2da      	uxtb	r2, r3
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800f3c4:	2203      	movs	r2, #3
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	2001      	movs	r0, #1
 800f3ca:	f003 fabb 	bl	8012944 <xQueueGenericCreate>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	4a4e      	ldr	r2, [pc, #312]	; (800f50c <low_level_init+0x258>)
 800f3d2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800f3d4:	2203      	movs	r2, #3
 800f3d6:	2100      	movs	r1, #0
 800f3d8:	2001      	movs	r0, #1
 800f3da:	f003 fab3 	bl	8012944 <xQueueGenericCreate>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	4a4b      	ldr	r2, [pc, #300]	; (800f510 <low_level_init+0x25c>)
 800f3e2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800f3e4:	4b4b      	ldr	r3, [pc, #300]	; (800f514 <low_level_init+0x260>)
 800f3e6:	f107 0408 	add.w	r4, r7, #8
 800f3ea:	461d      	mov	r5, r3
 800f3ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f3f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f3f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800f3f8:	f107 0308 	add.w	r3, r7, #8
 800f3fc:	6879      	ldr	r1, [r7, #4]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f002 fea4 	bl	801214c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f404:	4944      	ldr	r1, [pc, #272]	; (800f518 <low_level_init+0x264>)
 800f406:	4845      	ldr	r0, [pc, #276]	; (800f51c <low_level_init+0x268>)
 800f408:	f7f3 fd6b 	bl	8002ee2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f40c:	4843      	ldr	r0, [pc, #268]	; (800f51c <low_level_init+0x268>)
 800f40e:	f7f3 fd9a 	bl	8002f46 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f412:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f416:	2b00      	cmp	r3, #0
 800f418:	d165      	bne.n	800f4e6 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f41a:	4840      	ldr	r0, [pc, #256]	; (800f51c <low_level_init+0x268>)
 800f41c:	f7f3 fe3b 	bl	8003096 <LAN8742_GetLinkState>
 800f420:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800f424:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f428:	2b01      	cmp	r3, #1
 800f42a:	dc06      	bgt.n	800f43a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f006 ff69 	bl	8016304 <netif_set_link_down>
      netif_set_down(netif);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f006 ff00 	bl	8016238 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f438:	e057      	b.n	800f4ea <low_level_init+0x236>
      switch (PHYLinkState)
 800f43a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f43e:	3b02      	subs	r3, #2
 800f440:	2b03      	cmp	r3, #3
 800f442:	d82b      	bhi.n	800f49c <low_level_init+0x1e8>
 800f444:	a201      	add	r2, pc, #4	; (adr r2, 800f44c <low_level_init+0x198>)
 800f446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f44a:	bf00      	nop
 800f44c:	0800f45d 	.word	0x0800f45d
 800f450:	0800f46f 	.word	0x0800f46f
 800f454:	0800f47f 	.word	0x0800f47f
 800f458:	0800f48f 	.word	0x0800f48f
        duplex = ETH_FULLDUPLEX_MODE;
 800f45c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800f464:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800f46c:	e01f      	b.n	800f4ae <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800f46e:	2300      	movs	r3, #0
 800f470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800f474:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800f47c:	e017      	b.n	800f4ae <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800f47e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800f486:	2300      	movs	r3, #0
 800f488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800f48c:	e00f      	b.n	800f4ae <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800f48e:	2300      	movs	r3, #0
 800f490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800f494:	2300      	movs	r3, #0
 800f496:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800f49a:	e008      	b.n	800f4ae <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800f49c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f4a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800f4a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f4a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800f4ac:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f4ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	480f      	ldr	r0, [pc, #60]	; (800f4f4 <low_level_init+0x240>)
 800f4b6:	f7f5 fb6b 	bl	8004b90 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800f4ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f4be:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 800f4c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f4c4:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f4c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4809      	ldr	r0, [pc, #36]	; (800f4f4 <low_level_init+0x240>)
 800f4ce:	f7f5 fc49 	bl	8004d64 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800f4d2:	4808      	ldr	r0, [pc, #32]	; (800f4f4 <low_level_init+0x240>)
 800f4d4:	f7f4 fef4 	bl	80042c0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f006 fe41 	bl	8016160 <netif_set_up>
    netif_set_link_up(netif);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f006 fedc 	bl	801629c <netif_set_link_up>
}
 800f4e4:	e001      	b.n	800f4ea <low_level_init+0x236>
    Error_Handler();
 800f4e6:	f7f2 fb47 	bl	8001b78 <Error_Handler>
}
 800f4ea:	bf00      	nop
 800f4ec:	37a0      	adds	r7, #160	; 0xa0
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	200056bc 	.word	0x200056bc
 800f4f8:	40028000 	.word	0x40028000
 800f4fc:	20000154 	.word	0x20000154
 800f500:	200000b4 	.word	0x200000b4
 800f504:	2000576c 	.word	0x2000576c
 800f508:	0802345c 	.word	0x0802345c
 800f50c:	200056b4 	.word	0x200056b4
 800f510:	200056b8 	.word	0x200056b8
 800f514:	080208f4 	.word	0x080208f4
 800f518:	2000000c 	.word	0x2000000c
 800f51c:	200057a4 	.word	0x200057a4

0800f520 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b092      	sub	sp, #72	; 0x48
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f52a:	2300      	movs	r3, #0
 800f52c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f52e:	2300      	movs	r3, #0
 800f530:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f532:	2300      	movs	r3, #0
 800f534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f538:	f107 030c 	add.w	r3, r7, #12
 800f53c:	2230      	movs	r2, #48	; 0x30
 800f53e:	2100      	movs	r1, #0
 800f540:	4618      	mov	r0, r3
 800f542:	f010 fad9 	bl	801faf8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f546:	f107 030c 	add.w	r3, r7, #12
 800f54a:	2230      	movs	r2, #48	; 0x30
 800f54c:	2100      	movs	r1, #0
 800f54e:	4618      	mov	r0, r3
 800f550:	f010 fad2 	bl	801faf8 <memset>

  for(q = p; q != NULL; q = q->next)
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	643b      	str	r3, [r7, #64]	; 0x40
 800f558:	e045      	b.n	800f5e6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f55c:	2b03      	cmp	r3, #3
 800f55e:	d902      	bls.n	800f566 <low_level_output+0x46>
      return ERR_IF;
 800f560:	f06f 030b 	mvn.w	r3, #11
 800f564:	e065      	b.n	800f632 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800f566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f568:	6859      	ldr	r1, [r3, #4]
 800f56a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f56c:	4613      	mov	r3, r2
 800f56e:	005b      	lsls	r3, r3, #1
 800f570:	4413      	add	r3, r2
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	3348      	adds	r3, #72	; 0x48
 800f576:	443b      	add	r3, r7
 800f578:	3b3c      	subs	r3, #60	; 0x3c
 800f57a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f57e:	895b      	ldrh	r3, [r3, #10]
 800f580:	4619      	mov	r1, r3
 800f582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f584:	4613      	mov	r3, r2
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	4413      	add	r3, r2
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	3348      	adds	r3, #72	; 0x48
 800f58e:	443b      	add	r3, r7
 800f590:	3b38      	subs	r3, #56	; 0x38
 800f592:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f596:	2b00      	cmp	r3, #0
 800f598:	d011      	beq.n	800f5be <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f59c:	1e5a      	subs	r2, r3, #1
 800f59e:	f107 000c 	add.w	r0, r7, #12
 800f5a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	440b      	add	r3, r1
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	18c1      	adds	r1, r0, r3
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	005b      	lsls	r3, r3, #1
 800f5b2:	4413      	add	r3, r2
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	3348      	adds	r3, #72	; 0x48
 800f5b8:	443b      	add	r3, r7
 800f5ba:	3b34      	subs	r3, #52	; 0x34
 800f5bc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f5be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d109      	bne.n	800f5da <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f5c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	005b      	lsls	r3, r3, #1
 800f5cc:	4413      	add	r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	3348      	adds	r3, #72	; 0x48
 800f5d2:	443b      	add	r3, r7
 800f5d4:	3b34      	subs	r3, #52	; 0x34
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5dc:	3301      	adds	r3, #1
 800f5de:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	643b      	str	r3, [r7, #64]	; 0x40
 800f5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1b6      	bne.n	800f55a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	891b      	ldrh	r3, [r3, #8]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	4b12      	ldr	r3, [pc, #72]	; (800f63c <low_level_output+0x11c>)
 800f5f4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f5f6:	4a11      	ldr	r2, [pc, #68]	; (800f63c <low_level_output+0x11c>)
 800f5f8:	f107 030c 	add.w	r3, r7, #12
 800f5fc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f5fe:	4a0f      	ldr	r2, [pc, #60]	; (800f63c <low_level_output+0x11c>)
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800f604:	6838      	ldr	r0, [r7, #0]
 800f606:	f007 fb01 	bl	8016c0c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800f60a:	490c      	ldr	r1, [pc, #48]	; (800f63c <low_level_output+0x11c>)
 800f60c:	480c      	ldr	r0, [pc, #48]	; (800f640 <low_level_output+0x120>)
 800f60e:	f7f4 ff65 	bl	80044dc <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800f612:	bf00      	nop
 800f614:	4b0b      	ldr	r3, [pc, #44]	; (800f644 <low_level_output+0x124>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f04f 31ff 	mov.w	r1, #4294967295
 800f61c:	4618      	mov	r0, r3
 800f61e:	f002 fe91 	bl	8012344 <osSemaphoreWait>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1f5      	bne.n	800f614 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800f628:	4805      	ldr	r0, [pc, #20]	; (800f640 <low_level_output+0x120>)
 800f62a:	f7f5 f8eb 	bl	8004804 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800f62e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f632:	4618      	mov	r0, r3
 800f634:	3748      	adds	r7, #72	; 0x48
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	2000576c 	.word	0x2000576c
 800f640:	200056bc 	.word	0x200056bc
 800f644:	200056b8 	.word	0x200056b8

0800f648 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f650:	2300      	movs	r3, #0
 800f652:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800f654:	4b07      	ldr	r3, [pc, #28]	; (800f674 <low_level_input+0x2c>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d105      	bne.n	800f668 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800f65c:	f107 030c 	add.w	r3, r7, #12
 800f660:	4619      	mov	r1, r3
 800f662:	4805      	ldr	r0, [pc, #20]	; (800f678 <low_level_input+0x30>)
 800f664:	f7f4 ff96 	bl	8004594 <HAL_ETH_ReadData>
  }

  return p;
 800f668:	68fb      	ldr	r3, [r7, #12]
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3710      	adds	r7, #16
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	200056b0 	.word	0x200056b0
 800f678:	200056bc 	.word	0x200056bc

0800f67c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b084      	sub	sp, #16
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f684:	2300      	movs	r3, #0
 800f686:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f68c:	4b0f      	ldr	r3, [pc, #60]	; (800f6cc <ethernetif_input+0x50>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f04f 31ff 	mov.w	r1, #4294967295
 800f694:	4618      	mov	r0, r3
 800f696:	f002 fe55 	bl	8012344 <osSemaphoreWait>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d1f5      	bne.n	800f68c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800f6a0:	68b8      	ldr	r0, [r7, #8]
 800f6a2:	f7ff ffd1 	bl	800f648 <low_level_input>
 800f6a6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00a      	beq.n	800f6c4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	691b      	ldr	r3, [r3, #16]
 800f6b2:	68b9      	ldr	r1, [r7, #8]
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	4798      	blx	r3
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d002      	beq.n	800f6c4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f007 f9fe 	bl	8016ac0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1ea      	bne.n	800f6a0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f6ca:	e7df      	b.n	800f68c <ethernetif_input+0x10>
 800f6cc:	200056b4 	.word	0x200056b4

0800f6d0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d106      	bne.n	800f6ec <ethernetif_init+0x1c>
 800f6de:	4b0e      	ldr	r3, [pc, #56]	; (800f718 <ethernetif_init+0x48>)
 800f6e0:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f6e4:	490d      	ldr	r1, [pc, #52]	; (800f71c <ethernetif_init+0x4c>)
 800f6e6:	480e      	ldr	r0, [pc, #56]	; (800f720 <ethernetif_init+0x50>)
 800f6e8:	f010 faee 	bl	801fcc8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2273      	movs	r2, #115	; 0x73
 800f6f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2274      	movs	r2, #116	; 0x74
 800f6f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a09      	ldr	r2, [pc, #36]	; (800f724 <ethernetif_init+0x54>)
 800f700:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4a08      	ldr	r2, [pc, #32]	; (800f728 <ethernetif_init+0x58>)
 800f706:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	f7ff fdd3 	bl	800f2b4 <low_level_init>

  return ERR_OK;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	08020910 	.word	0x08020910
 800f71c:	0802092c 	.word	0x0802092c
 800f720:	0802093c 	.word	0x0802093c
 800f724:	0801d1ad 	.word	0x0801d1ad
 800f728:	0800f521 	.word	0x0800f521

0800f72c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f738:	68f9      	ldr	r1, [r7, #12]
 800f73a:	4809      	ldr	r0, [pc, #36]	; (800f760 <pbuf_free_custom+0x34>)
 800f73c:	f006 faf8 	bl	8015d30 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f740:	4b08      	ldr	r3, [pc, #32]	; (800f764 <pbuf_free_custom+0x38>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	2b01      	cmp	r3, #1
 800f746:	d107      	bne.n	800f758 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f748:	4b06      	ldr	r3, [pc, #24]	; (800f764 <pbuf_free_custom+0x38>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800f74e:	4b06      	ldr	r3, [pc, #24]	; (800f768 <pbuf_free_custom+0x3c>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	4618      	mov	r0, r3
 800f754:	f002 fe44 	bl	80123e0 <osSemaphoreRelease>
  }
}
 800f758:	bf00      	nop
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	0802345c 	.word	0x0802345c
 800f764:	200056b0 	.word	0x200056b0
 800f768:	200056b4 	.word	0x200056b4

0800f76c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f770:	f7f3 fd3a 	bl	80031e8 <HAL_GetTick>
 800f774:	4603      	mov	r3, r0
}
 800f776:	4618      	mov	r0, r3
 800f778:	bd80      	pop	{r7, pc}
	...

0800f77c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b08e      	sub	sp, #56	; 0x38
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f788:	2200      	movs	r2, #0
 800f78a:	601a      	str	r2, [r3, #0]
 800f78c:	605a      	str	r2, [r3, #4]
 800f78e:	609a      	str	r2, [r3, #8]
 800f790:	60da      	str	r2, [r3, #12]
 800f792:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a44      	ldr	r2, [pc, #272]	; (800f8ac <HAL_ETH_MspInit+0x130>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	f040 8081 	bne.w	800f8a2 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800f7a0:	4b43      	ldr	r3, [pc, #268]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7a4:	4a42      	ldr	r2, [pc, #264]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f7aa:	6313      	str	r3, [r2, #48]	; 0x30
 800f7ac:	4b40      	ldr	r3, [pc, #256]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7b4:	623b      	str	r3, [r7, #32]
 800f7b6:	6a3b      	ldr	r3, [r7, #32]
 800f7b8:	4b3d      	ldr	r3, [pc, #244]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7bc:	4a3c      	ldr	r2, [pc, #240]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f7c2:	6313      	str	r3, [r2, #48]	; 0x30
 800f7c4:	4b3a      	ldr	r3, [pc, #232]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f7cc:	61fb      	str	r3, [r7, #28]
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	4b37      	ldr	r3, [pc, #220]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7d4:	4a36      	ldr	r2, [pc, #216]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f7da:	6313      	str	r3, [r2, #48]	; 0x30
 800f7dc:	4b34      	ldr	r3, [pc, #208]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f7e4:	61bb      	str	r3, [r7, #24]
 800f7e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f7e8:	4b31      	ldr	r3, [pc, #196]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ec:	4a30      	ldr	r2, [pc, #192]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7f2:	6313      	str	r3, [r2, #48]	; 0x30
 800f7f4:	4b2e      	ldr	r3, [pc, #184]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7fc:	617b      	str	r3, [r7, #20]
 800f7fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f800:	4b2b      	ldr	r3, [pc, #172]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f804:	4a2a      	ldr	r2, [pc, #168]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f806:	f043 0304 	orr.w	r3, r3, #4
 800f80a:	6313      	str	r3, [r2, #48]	; 0x30
 800f80c:	4b28      	ldr	r3, [pc, #160]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f810:	f003 0304 	and.w	r3, r3, #4
 800f814:	613b      	str	r3, [r7, #16]
 800f816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f818:	4b25      	ldr	r3, [pc, #148]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f81c:	4a24      	ldr	r2, [pc, #144]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f81e:	f043 0301 	orr.w	r3, r3, #1
 800f822:	6313      	str	r3, [r2, #48]	; 0x30
 800f824:	4b22      	ldr	r3, [pc, #136]	; (800f8b0 <HAL_ETH_MspInit+0x134>)
 800f826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f828:	f003 0301 	and.w	r3, r3, #1
 800f82c:	60fb      	str	r3, [r7, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800f830:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800f834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f836:	2302      	movs	r3, #2
 800f838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f83a:	2300      	movs	r3, #0
 800f83c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f83e:	2303      	movs	r3, #3
 800f840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f842:	230b      	movs	r3, #11
 800f844:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f84a:	4619      	mov	r1, r3
 800f84c:	4819      	ldr	r0, [pc, #100]	; (800f8b4 <HAL_ETH_MspInit+0x138>)
 800f84e:	f7f5 ff09 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800f852:	2332      	movs	r3, #50	; 0x32
 800f854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f856:	2302      	movs	r3, #2
 800f858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f85a:	2300      	movs	r3, #0
 800f85c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f85e:	2303      	movs	r3, #3
 800f860:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f862:	230b      	movs	r3, #11
 800f864:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f86a:	4619      	mov	r1, r3
 800f86c:	4812      	ldr	r0, [pc, #72]	; (800f8b8 <HAL_ETH_MspInit+0x13c>)
 800f86e:	f7f5 fef9 	bl	8005664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800f872:	2386      	movs	r3, #134	; 0x86
 800f874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f876:	2302      	movs	r3, #2
 800f878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f87a:	2300      	movs	r3, #0
 800f87c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f87e:	2303      	movs	r3, #3
 800f880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f882:	230b      	movs	r3, #11
 800f884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f88a:	4619      	mov	r1, r3
 800f88c:	480b      	ldr	r0, [pc, #44]	; (800f8bc <HAL_ETH_MspInit+0x140>)
 800f88e:	f7f5 fee9 	bl	8005664 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800f892:	2200      	movs	r2, #0
 800f894:	2105      	movs	r1, #5
 800f896:	203d      	movs	r0, #61	; 0x3d
 800f898:	f7f4 f822 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800f89c:	203d      	movs	r0, #61	; 0x3d
 800f89e:	f7f4 f83b 	bl	8003918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f8a2:	bf00      	nop
 800f8a4:	3738      	adds	r7, #56	; 0x38
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	40028000 	.word	0x40028000
 800f8b0:	40023800 	.word	0x40023800
 800f8b4:	40021800 	.word	0x40021800
 800f8b8:	40020800 	.word	0x40020800
 800f8bc:	40020000 	.word	0x40020000

0800f8c0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f8c4:	4802      	ldr	r0, [pc, #8]	; (800f8d0 <ETH_PHY_IO_Init+0x10>)
 800f8c6:	f7f5 fa67 	bl	8004d98 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	200056bc 	.word	0x200056bc

0800f8d4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	af00      	add	r7, sp, #0
  return 0;
 800f8d8:	2300      	movs	r3, #0
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr

0800f8e4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	68ba      	ldr	r2, [r7, #8]
 800f8f4:	68f9      	ldr	r1, [r7, #12]
 800f8f6:	4807      	ldr	r0, [pc, #28]	; (800f914 <ETH_PHY_IO_ReadReg+0x30>)
 800f8f8:	f7f5 f8b6 	bl	8004a68 <HAL_ETH_ReadPHYRegister>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d002      	beq.n	800f908 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f902:	f04f 33ff 	mov.w	r3, #4294967295
 800f906:	e000      	b.n	800f90a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f908:	2300      	movs	r3, #0
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	200056bc 	.word	0x200056bc

0800f918 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	68ba      	ldr	r2, [r7, #8]
 800f928:	68f9      	ldr	r1, [r7, #12]
 800f92a:	4807      	ldr	r0, [pc, #28]	; (800f948 <ETH_PHY_IO_WriteReg+0x30>)
 800f92c:	f7f5 f8e7 	bl	8004afe <HAL_ETH_WritePHYRegister>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d002      	beq.n	800f93c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f936:	f04f 33ff 	mov.w	r3, #4294967295
 800f93a:	e000      	b.n	800f93e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3710      	adds	r7, #16
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	200056bc 	.word	0x200056bc

0800f94c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f950:	f7f3 fc4a 	bl	80031e8 <HAL_GetTick>
 800f954:	4603      	mov	r3, r0
}
 800f956:	4618      	mov	r0, r3
 800f958:	bd80      	pop	{r7, pc}
	...

0800f95c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b0a0      	sub	sp, #128	; 0x80
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f964:	f107 0308 	add.w	r3, r7, #8
 800f968:	2264      	movs	r2, #100	; 0x64
 800f96a:	2100      	movs	r1, #0
 800f96c:	4618      	mov	r0, r3
 800f96e:	f010 f8c3 	bl	801faf8 <memset>
  int32_t PHYLinkState = 0;
 800f972:	2300      	movs	r3, #0
 800f974:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f976:	2300      	movs	r3, #0
 800f978:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f97a:	2300      	movs	r3, #0
 800f97c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f97e:	2300      	movs	r3, #0
 800f980:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f986:	483a      	ldr	r0, [pc, #232]	; (800fa70 <ethernet_link_thread+0x114>)
 800f988:	f7f3 fb85 	bl	8003096 <LAN8742_GetLinkState>
 800f98c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f98e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f994:	089b      	lsrs	r3, r3, #2
 800f996:	f003 0301 	and.w	r3, r3, #1
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00c      	beq.n	800f9ba <ethernet_link_thread+0x5e>
 800f9a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	dc09      	bgt.n	800f9ba <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800f9a6:	4833      	ldr	r0, [pc, #204]	; (800fa74 <ethernet_link_thread+0x118>)
 800f9a8:	f7f4 fd18 	bl	80043dc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800f9ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f9ae:	f006 fc43 	bl	8016238 <netif_set_down>
    netif_set_link_down(netif);
 800f9b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f9b4:	f006 fca6 	bl	8016304 <netif_set_link_down>
 800f9b8:	e055      	b.n	800fa66 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f9ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9c0:	f003 0304 	and.w	r3, r3, #4
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d14e      	bne.n	800fa66 <ethernet_link_thread+0x10a>
 800f9c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	dd4b      	ble.n	800fa66 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800f9ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9d0:	3b02      	subs	r3, #2
 800f9d2:	2b03      	cmp	r3, #3
 800f9d4:	d82a      	bhi.n	800fa2c <ethernet_link_thread+0xd0>
 800f9d6:	a201      	add	r2, pc, #4	; (adr r2, 800f9dc <ethernet_link_thread+0x80>)
 800f9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9dc:	0800f9ed 	.word	0x0800f9ed
 800f9e0:	0800f9ff 	.word	0x0800f9ff
 800f9e4:	0800fa0f 	.word	0x0800fa0f
 800f9e8:	0800fa1f 	.word	0x0800fa1f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800f9ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f9f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f9f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f9fc:	e017      	b.n	800fa2e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fa02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fa06:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fa0c:	e00f      	b.n	800fa2e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800fa0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fa12:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fa14:	2300      	movs	r3, #0
 800fa16:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fa1c:	e007      	b.n	800fa2e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fa22:	2300      	movs	r3, #0
 800fa24:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fa26:	2301      	movs	r3, #1
 800fa28:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fa2a:	e000      	b.n	800fa2e <ethernet_link_thread+0xd2>
    default:
      break;
 800fa2c:	bf00      	nop
    }

    if(linkchanged)
 800fa2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d018      	beq.n	800fa66 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fa34:	f107 0308 	add.w	r3, r7, #8
 800fa38:	4619      	mov	r1, r3
 800fa3a:	480e      	ldr	r0, [pc, #56]	; (800fa74 <ethernet_link_thread+0x118>)
 800fa3c:	f7f5 f8a8 	bl	8004b90 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800fa40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa42:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800fa44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fa46:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fa48:	f107 0308 	add.w	r3, r7, #8
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4809      	ldr	r0, [pc, #36]	; (800fa74 <ethernet_link_thread+0x118>)
 800fa50:	f7f5 f988 	bl	8004d64 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800fa54:	4807      	ldr	r0, [pc, #28]	; (800fa74 <ethernet_link_thread+0x118>)
 800fa56:	f7f4 fbd3 	bl	8004200 <HAL_ETH_Start>
      netif_set_up(netif);
 800fa5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fa5c:	f006 fb80 	bl	8016160 <netif_set_up>
      netif_set_link_up(netif);
 800fa60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fa62:	f006 fc1b 	bl	801629c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800fa66:	2064      	movs	r0, #100	; 0x64
 800fa68:	f002 fbbc 	bl	80121e4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fa6c:	e78b      	b.n	800f986 <ethernet_link_thread+0x2a>
 800fa6e:	bf00      	nop
 800fa70:	200057a4 	.word	0x200057a4
 800fa74:	200056bc 	.word	0x200056bc

0800fa78 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af02      	add	r7, sp, #8
 800fa7e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800fa80:	4812      	ldr	r0, [pc, #72]	; (800facc <HAL_ETH_RxAllocateCallback+0x54>)
 800fa82:	f006 f8e1 	bl	8015c48 <memp_malloc_pool>
 800fa86:	60f8      	str	r0, [r7, #12]
  if (p)
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d014      	beq.n	800fab8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f103 0220 	add.w	r2, r3, #32
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	4a0d      	ldr	r2, [pc, #52]	; (800fad0 <HAL_ETH_RxAllocateCallback+0x58>)
 800fa9c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800faa6:	9201      	str	r2, [sp, #4]
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2241      	movs	r2, #65	; 0x41
 800faae:	2100      	movs	r1, #0
 800fab0:	2000      	movs	r0, #0
 800fab2:	f006 fe4b 	bl	801674c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800fab6:	e005      	b.n	800fac4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800fab8:	4b06      	ldr	r3, [pc, #24]	; (800fad4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800faba:	2201      	movs	r2, #1
 800fabc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2200      	movs	r2, #0
 800fac2:	601a      	str	r2, [r3, #0]
}
 800fac4:	bf00      	nop
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	0802345c 	.word	0x0802345c
 800fad0:	0800f72d 	.word	0x0800f72d
 800fad4:	200056b0 	.word	0x200056b0

0800fad8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	60b9      	str	r1, [r7, #8]
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800faee:	2300      	movs	r3, #0
 800faf0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	3b20      	subs	r3, #32
 800faf6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800faf8:	69fb      	ldr	r3, [r7, #28]
 800fafa:	2200      	movs	r2, #0
 800fafc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800fafe:	69fb      	ldr	r3, [r7, #28]
 800fb00:	2200      	movs	r2, #0
 800fb02:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	887a      	ldrh	r2, [r7, #2]
 800fb08:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d103      	bne.n	800fb1a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	69fa      	ldr	r2, [r7, #28]
 800fb16:	601a      	str	r2, [r3, #0]
 800fb18:	e003      	b.n	800fb22 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	69fa      	ldr	r2, [r7, #28]
 800fb20:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	69fa      	ldr	r2, [r7, #28]
 800fb26:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800fb28:	69bb      	ldr	r3, [r7, #24]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	61fb      	str	r3, [r7, #28]
 800fb2e:	e009      	b.n	800fb44 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	891a      	ldrh	r2, [r3, #8]
 800fb34:	887b      	ldrh	r3, [r7, #2]
 800fb36:	4413      	add	r3, r2
 800fb38:	b29a      	uxth	r2, r3
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	61fb      	str	r3, [r7, #28]
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d1f2      	bne.n	800fb30 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800fb4a:	887b      	ldrh	r3, [r7, #2]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7ff fb4c 	bl	800f1ec <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800fb54:	bf00      	nop
 800fb56:	3720      	adds	r7, #32
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b082      	sub	sp, #8
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f006 ffab 	bl	8016ac0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800fb6a:	bf00      	nop
 800fb6c:	3708      	adds	r7, #8
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	bd80      	pop	{r7, pc}

0800fb72 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800fb72:	b590      	push	{r4, r7, lr}
 800fb74:	b089      	sub	sp, #36	; 0x24
 800fb76:	af04      	add	r7, sp, #16
 800fb78:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	2202      	movs	r2, #2
 800fb7e:	2102      	movs	r1, #2
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f000 fcd8 	bl	8010536 <USBH_FindInterface>
 800fb86:	4603      	mov	r3, r0
 800fb88:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fb8a:	7bfb      	ldrb	r3, [r7, #15]
 800fb8c:	2bff      	cmp	r3, #255	; 0xff
 800fb8e:	d002      	beq.n	800fb96 <USBH_CDC_InterfaceInit+0x24>
 800fb90:	7bfb      	ldrb	r3, [r7, #15]
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d901      	bls.n	800fb9a <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fb96:	2302      	movs	r3, #2
 800fb98:	e13d      	b.n	800fe16 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800fb9a:	7bfb      	ldrb	r3, [r7, #15]
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fcad 	bl	80104fe <USBH_SelectInterface>
 800fba4:	4603      	mov	r3, r0
 800fba6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800fba8:	7bbb      	ldrb	r3, [r7, #14]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d001      	beq.n	800fbb2 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800fbae:	2302      	movs	r3, #2
 800fbb0:	e131      	b.n	800fe16 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800fbb8:	2050      	movs	r0, #80	; 0x50
 800fbba:	f00f ff6f 	bl	801fa9c <malloc>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fbc8:	69db      	ldr	r3, [r3, #28]
 800fbca:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800fbd2:	2302      	movs	r3, #2
 800fbd4:	e11f      	b.n	800fe16 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800fbd6:	2250      	movs	r2, #80	; 0x50
 800fbd8:	2100      	movs	r1, #0
 800fbda:	68b8      	ldr	r0, [r7, #8]
 800fbdc:	f00f ff8c 	bl	801faf8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800fbe0:	7bfb      	ldrb	r3, [r7, #15]
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	211a      	movs	r1, #26
 800fbe6:	fb01 f303 	mul.w	r3, r1, r3
 800fbea:	4413      	add	r3, r2
 800fbec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	b25b      	sxtb	r3, r3
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	da15      	bge.n	800fc24 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fbf8:	7bfb      	ldrb	r3, [r7, #15]
 800fbfa:	687a      	ldr	r2, [r7, #4]
 800fbfc:	211a      	movs	r1, #26
 800fbfe:	fb01 f303 	mul.w	r3, r1, r3
 800fc02:	4413      	add	r3, r2
 800fc04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fc08:	781a      	ldrb	r2, [r3, #0]
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fc0e:	7bfb      	ldrb	r3, [r7, #15]
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	211a      	movs	r1, #26
 800fc14:	fb01 f303 	mul.w	r3, r1, r3
 800fc18:	4413      	add	r3, r2
 800fc1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fc1e:	881a      	ldrh	r2, [r3, #0]
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	785b      	ldrb	r3, [r3, #1]
 800fc28:	4619      	mov	r1, r3
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f002 f983 	bl	8011f36 <USBH_AllocPipe>
 800fc30:	4603      	mov	r3, r0
 800fc32:	461a      	mov	r2, r3
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	7819      	ldrb	r1, [r3, #0]
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	7858      	ldrb	r0, [r3, #1]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	8952      	ldrh	r2, [r2, #10]
 800fc50:	9202      	str	r2, [sp, #8]
 800fc52:	2203      	movs	r2, #3
 800fc54:	9201      	str	r2, [sp, #4]
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	4623      	mov	r3, r4
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f002 f93b 	bl	8011ed8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2200      	movs	r2, #0
 800fc68:	4619      	mov	r1, r3
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f00f fca0 	bl	801f5b0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800fc70:	2300      	movs	r3, #0
 800fc72:	2200      	movs	r2, #0
 800fc74:	210a      	movs	r1, #10
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 fc5d 	bl	8010536 <USBH_FindInterface>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fc80:	7bfb      	ldrb	r3, [r7, #15]
 800fc82:	2bff      	cmp	r3, #255	; 0xff
 800fc84:	d002      	beq.n	800fc8c <USBH_CDC_InterfaceInit+0x11a>
 800fc86:	7bfb      	ldrb	r3, [r7, #15]
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	d901      	bls.n	800fc90 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	e0c2      	b.n	800fe16 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800fc90:	7bfb      	ldrb	r3, [r7, #15]
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	211a      	movs	r1, #26
 800fc96:	fb01 f303 	mul.w	r3, r1, r3
 800fc9a:	4413      	add	r3, r2
 800fc9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	b25b      	sxtb	r3, r3
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	da16      	bge.n	800fcd6 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fca8:	7bfb      	ldrb	r3, [r7, #15]
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	211a      	movs	r1, #26
 800fcae:	fb01 f303 	mul.w	r3, r1, r3
 800fcb2:	4413      	add	r3, r2
 800fcb4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fcb8:	781a      	ldrb	r2, [r3, #0]
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fcbe:	7bfb      	ldrb	r3, [r7, #15]
 800fcc0:	687a      	ldr	r2, [r7, #4]
 800fcc2:	211a      	movs	r1, #26
 800fcc4:	fb01 f303 	mul.w	r3, r1, r3
 800fcc8:	4413      	add	r3, r2
 800fcca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fcce:	881a      	ldrh	r2, [r3, #0]
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	835a      	strh	r2, [r3, #26]
 800fcd4:	e015      	b.n	800fd02 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fcd6:	7bfb      	ldrb	r3, [r7, #15]
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	211a      	movs	r1, #26
 800fcdc:	fb01 f303 	mul.w	r3, r1, r3
 800fce0:	4413      	add	r3, r2
 800fce2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fce6:	781a      	ldrb	r2, [r3, #0]
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fcec:	7bfb      	ldrb	r3, [r7, #15]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	211a      	movs	r1, #26
 800fcf2:	fb01 f303 	mul.w	r3, r1, r3
 800fcf6:	4413      	add	r3, r2
 800fcf8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fcfc:	881a      	ldrh	r2, [r3, #0]
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800fd02:	7bfb      	ldrb	r3, [r7, #15]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	211a      	movs	r1, #26
 800fd08:	fb01 f303 	mul.w	r3, r1, r3
 800fd0c:	4413      	add	r3, r2
 800fd0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	b25b      	sxtb	r3, r3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	da16      	bge.n	800fd48 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800fd1a:	7bfb      	ldrb	r3, [r7, #15]
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	211a      	movs	r1, #26
 800fd20:	fb01 f303 	mul.w	r3, r1, r3
 800fd24:	4413      	add	r3, r2
 800fd26:	f203 3356 	addw	r3, r3, #854	; 0x356
 800fd2a:	781a      	ldrb	r2, [r3, #0]
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800fd30:	7bfb      	ldrb	r3, [r7, #15]
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	211a      	movs	r1, #26
 800fd36:	fb01 f303 	mul.w	r3, r1, r3
 800fd3a:	4413      	add	r3, r2
 800fd3c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800fd40:	881a      	ldrh	r2, [r3, #0]
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	835a      	strh	r2, [r3, #26]
 800fd46:	e015      	b.n	800fd74 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800fd48:	7bfb      	ldrb	r3, [r7, #15]
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	211a      	movs	r1, #26
 800fd4e:	fb01 f303 	mul.w	r3, r1, r3
 800fd52:	4413      	add	r3, r2
 800fd54:	f203 3356 	addw	r3, r3, #854	; 0x356
 800fd58:	781a      	ldrb	r2, [r3, #0]
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800fd5e:	7bfb      	ldrb	r3, [r7, #15]
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	211a      	movs	r1, #26
 800fd64:	fb01 f303 	mul.w	r3, r1, r3
 800fd68:	4413      	add	r3, r2
 800fd6a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800fd6e:	881a      	ldrh	r2, [r3, #0]
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	7b9b      	ldrb	r3, [r3, #14]
 800fd78:	4619      	mov	r1, r3
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f002 f8db 	bl	8011f36 <USBH_AllocPipe>
 800fd80:	4603      	mov	r3, r0
 800fd82:	461a      	mov	r2, r3
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	7bdb      	ldrb	r3, [r3, #15]
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f002 f8d1 	bl	8011f36 <USBH_AllocPipe>
 800fd94:	4603      	mov	r3, r0
 800fd96:	461a      	mov	r2, r3
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	7b59      	ldrb	r1, [r3, #13]
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	7b98      	ldrb	r0, [r3, #14]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	8b12      	ldrh	r2, [r2, #24]
 800fdb4:	9202      	str	r2, [sp, #8]
 800fdb6:	2202      	movs	r2, #2
 800fdb8:	9201      	str	r2, [sp, #4]
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	4623      	mov	r3, r4
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	6878      	ldr	r0, [r7, #4]
 800fdc2:	f002 f889 	bl	8011ed8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	7b19      	ldrb	r1, [r3, #12]
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	7bd8      	ldrb	r0, [r3, #15]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fdda:	68ba      	ldr	r2, [r7, #8]
 800fddc:	8b52      	ldrh	r2, [r2, #26]
 800fdde:	9202      	str	r2, [sp, #8]
 800fde0:	2202      	movs	r2, #2
 800fde2:	9201      	str	r2, [sp, #4]
 800fde4:	9300      	str	r3, [sp, #0]
 800fde6:	4623      	mov	r3, r4
 800fde8:	4602      	mov	r2, r0
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f002 f874 	bl	8011ed8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	7b5b      	ldrb	r3, [r3, #13]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	4619      	mov	r1, r3
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f00f fbd5 	bl	801f5b0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	7b1b      	ldrb	r3, [r3, #12]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f00f fbce 	bl	801f5b0 <USBH_LL_SetToggle>

  return USBH_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3714      	adds	r7, #20
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd90      	pop	{r4, r7, pc}

0800fe1e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b084      	sub	sp, #16
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe2c:	69db      	ldr	r3, [r3, #28]
 800fe2e:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d00e      	beq.n	800fe56 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	4619      	mov	r1, r3
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f002 f869 	bl	8011f16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	4619      	mov	r1, r3
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f002 f894 	bl	8011f78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2200      	movs	r2, #0
 800fe54:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	7b1b      	ldrb	r3, [r3, #12]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00e      	beq.n	800fe7c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	7b1b      	ldrb	r3, [r3, #12]
 800fe62:	4619      	mov	r1, r3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f002 f856 	bl	8011f16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	7b1b      	ldrb	r3, [r3, #12]
 800fe6e:	4619      	mov	r1, r3
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f002 f881 	bl	8011f78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	7b5b      	ldrb	r3, [r3, #13]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d00e      	beq.n	800fea2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	7b5b      	ldrb	r3, [r3, #13]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f002 f843 	bl	8011f16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	7b5b      	ldrb	r3, [r3, #13]
 800fe94:	4619      	mov	r1, r3
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f002 f86e 	bl	8011f78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fea8:	69db      	ldr	r3, [r3, #28]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00b      	beq.n	800fec6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800feb4:	69db      	ldr	r3, [r3, #28]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f00f fdf8 	bl	801faac <free>
    phost->pActiveClass->pData = 0U;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fec2:	2200      	movs	r2, #0
 800fec4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3710      	adds	r7, #16
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fede:	69db      	ldr	r3, [r3, #28]
 800fee0:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	3340      	adds	r3, #64	; 0x40
 800fee6:	4619      	mov	r1, r3
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 f8b2 	bl	8010052 <GetLineCoding>
 800feee:	4603      	mov	r3, r0
 800fef0:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800fef2:	7afb      	ldrb	r3, [r7, #11]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d105      	bne.n	800ff04 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fefe:	2102      	movs	r1, #2
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ff04:	7afb      	ldrb	r3, [r7, #11]
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
	...

0800ff10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ff26:	69db      	ldr	r3, [r3, #28]
 800ff28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ff30:	2b04      	cmp	r3, #4
 800ff32:	d877      	bhi.n	8010024 <USBH_CDC_Process+0x114>
 800ff34:	a201      	add	r2, pc, #4	; (adr r2, 800ff3c <USBH_CDC_Process+0x2c>)
 800ff36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff3a:	bf00      	nop
 800ff3c:	0800ff51 	.word	0x0800ff51
 800ff40:	0800ff57 	.word	0x0800ff57
 800ff44:	0800ff87 	.word	0x0800ff87
 800ff48:	0800fffb 	.word	0x0800fffb
 800ff4c:	08010009 	.word	0x08010009
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ff50:	2300      	movs	r3, #0
 800ff52:	73fb      	strb	r3, [r7, #15]
      break;
 800ff54:	e06d      	b.n	8010032 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 f897 	bl	8010090 <SetLineCoding>
 800ff62:	4603      	mov	r3, r0
 800ff64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ff66:	7bbb      	ldrb	r3, [r7, #14]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d104      	bne.n	800ff76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	2202      	movs	r2, #2
 800ff70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ff74:	e058      	b.n	8010028 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ff76:	7bbb      	ldrb	r3, [r7, #14]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d055      	beq.n	8010028 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	2204      	movs	r2, #4
 800ff80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ff84:	e050      	b.n	8010028 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	3340      	adds	r3, #64	; 0x40
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 f860 	bl	8010052 <GetLineCoding>
 800ff92:	4603      	mov	r3, r0
 800ff94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ff96:	7bbb      	ldrb	r3, [r7, #14]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d126      	bne.n	800ffea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffae:	791b      	ldrb	r3, [r3, #4]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d13b      	bne.n	801002c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffbe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d133      	bne.n	801002c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d12b      	bne.n	801002c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffdc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d124      	bne.n	801002c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f000 f982 	bl	80102ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ffe8:	e020      	b.n	801002c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ffea:	7bbb      	ldrb	r3, [r7, #14]
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d01d      	beq.n	801002c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	2204      	movs	r2, #4
 800fff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800fff8:	e018      	b.n	801002c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f000 f867 	bl	80100ce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f000 f8f6 	bl	80101f2 <CDC_ProcessReception>
      break;
 8010006:	e014      	b.n	8010032 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010008:	2100      	movs	r1, #0
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f001 f97b 	bl	8011306 <USBH_ClrFeature>
 8010010:	4603      	mov	r3, r0
 8010012:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010014:	7bbb      	ldrb	r3, [r7, #14]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d10a      	bne.n	8010030 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2200      	movs	r2, #0
 801001e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8010022:	e005      	b.n	8010030 <USBH_CDC_Process+0x120>

    default:
      break;
 8010024:	bf00      	nop
 8010026:	e004      	b.n	8010032 <USBH_CDC_Process+0x122>
      break;
 8010028:	bf00      	nop
 801002a:	e002      	b.n	8010032 <USBH_CDC_Process+0x122>
      break;
 801002c:	bf00      	nop
 801002e:	e000      	b.n	8010032 <USBH_CDC_Process+0x122>
      break;
 8010030:	bf00      	nop

  }

  return status;
 8010032:	7bfb      	ldrb	r3, [r7, #15]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3710      	adds	r7, #16
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010044:	2300      	movs	r3, #0
}
 8010046:	4618      	mov	r0, r3
 8010048:	370c      	adds	r7, #12
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr

08010052 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010052:	b580      	push	{r7, lr}
 8010054:	b082      	sub	sp, #8
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
 801005a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	22a1      	movs	r2, #161	; 0xa1
 8010060:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2221      	movs	r2, #33	; 0x21
 8010066:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2207      	movs	r2, #7
 8010078:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	2207      	movs	r2, #7
 801007e:	4619      	mov	r1, r3
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f001 fbe7 	bl	8011854 <USBH_CtlReq>
 8010086:	4603      	mov	r3, r0
}
 8010088:	4618      	mov	r0, r3
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2221      	movs	r2, #33	; 0x21
 801009e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2220      	movs	r2, #32
 80100a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2200      	movs	r2, #0
 80100b0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2207      	movs	r2, #7
 80100b6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	2207      	movs	r2, #7
 80100bc:	4619      	mov	r1, r3
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f001 fbc8 	bl	8011854 <USBH_CtlReq>
 80100c4:	4603      	mov	r3, r0
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3708      	adds	r7, #8
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b086      	sub	sp, #24
 80100d2:	af02      	add	r7, sp, #8
 80100d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80100e0:	2300      	movs	r3, #0
 80100e2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d002      	beq.n	80100f4 <CDC_ProcessTransmission+0x26>
 80100ee:	2b02      	cmp	r3, #2
 80100f0:	d023      	beq.n	801013a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80100f2:	e07a      	b.n	80101ea <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	8b12      	ldrh	r2, [r2, #24]
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d90b      	bls.n	8010118 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	69d9      	ldr	r1, [r3, #28]
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	8b1a      	ldrh	r2, [r3, #24]
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	7b5b      	ldrb	r3, [r3, #13]
 801010c:	2001      	movs	r0, #1
 801010e:	9000      	str	r0, [sp, #0]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f001 fe9e 	bl	8011e52 <USBH_BulkSendData>
 8010116:	e00b      	b.n	8010130 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8010120:	b29a      	uxth	r2, r3
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	7b5b      	ldrb	r3, [r3, #13]
 8010126:	2001      	movs	r0, #1
 8010128:	9000      	str	r0, [sp, #0]
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f001 fe91 	bl	8011e52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2202      	movs	r2, #2
 8010134:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010138:	e057      	b.n	80101ea <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	7b5b      	ldrb	r3, [r3, #13]
 801013e:	4619      	mov	r1, r3
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f00f fa0b 	bl	801f55c <USBH_LL_GetURBState>
 8010146:	4603      	mov	r3, r0
 8010148:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801014a:	7afb      	ldrb	r3, [r7, #11]
 801014c:	2b01      	cmp	r3, #1
 801014e:	d136      	bne.n	80101be <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	8b12      	ldrh	r2, [r2, #24]
 8010158:	4293      	cmp	r3, r2
 801015a:	d90e      	bls.n	801017a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	8b12      	ldrh	r2, [r2, #24]
 8010164:	1a9a      	subs	r2, r3, r2
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	69db      	ldr	r3, [r3, #28]
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	8b12      	ldrh	r2, [r2, #24]
 8010172:	441a      	add	r2, r3
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	61da      	str	r2, [r3, #28]
 8010178:	e002      	b.n	8010180 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2200      	movs	r2, #0
 801017e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010184:	2b00      	cmp	r3, #0
 8010186:	d004      	beq.n	8010192 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	2201      	movs	r2, #1
 801018c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8010190:	e006      	b.n	80101a0 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 f892 	bl	80102c4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2204      	movs	r2, #4
 80101a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80101b4:	2200      	movs	r2, #0
 80101b6:	4619      	mov	r1, r3
 80101b8:	f002 f970 	bl	801249c <osMessagePut>
      break;
 80101bc:	e014      	b.n	80101e8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80101be:	7afb      	ldrb	r3, [r7, #11]
 80101c0:	2b02      	cmp	r3, #2
 80101c2:	d111      	bne.n	80101e8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2204      	movs	r2, #4
 80101d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80101e0:	2200      	movs	r2, #0
 80101e2:	4619      	mov	r1, r3
 80101e4:	f002 f95a 	bl	801249c <osMessagePut>
      break;
 80101e8:	bf00      	nop
  }
}
 80101ea:	bf00      	nop
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80101f2:	b580      	push	{r7, lr}
 80101f4:	b086      	sub	sp, #24
 80101f6:	af00      	add	r7, sp, #0
 80101f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010200:	69db      	ldr	r3, [r3, #28]
 8010202:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010204:	2300      	movs	r3, #0
 8010206:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801020e:	2b03      	cmp	r3, #3
 8010210:	d002      	beq.n	8010218 <CDC_ProcessReception+0x26>
 8010212:	2b04      	cmp	r3, #4
 8010214:	d00e      	beq.n	8010234 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8010216:	e051      	b.n	80102bc <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	6a19      	ldr	r1, [r3, #32]
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	8b5a      	ldrh	r2, [r3, #26]
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	7b1b      	ldrb	r3, [r3, #12]
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f001 fe39 	bl	8011e9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	2204      	movs	r2, #4
 801022e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8010232:	e043      	b.n	80102bc <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	7b1b      	ldrb	r3, [r3, #12]
 8010238:	4619      	mov	r1, r3
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f00f f98e 	bl	801f55c <USBH_LL_GetURBState>
 8010240:	4603      	mov	r3, r0
 8010242:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8010244:	7cfb      	ldrb	r3, [r7, #19]
 8010246:	2b01      	cmp	r3, #1
 8010248:	d137      	bne.n	80102ba <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	7b1b      	ldrb	r3, [r3, #12]
 801024e:	4619      	mov	r1, r3
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f00f f8f1 	bl	801f438 <USBH_LL_GetLastXferSize>
 8010256:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	429a      	cmp	r2, r3
 8010260:	d016      	beq.n	8010290 <CDC_ProcessReception+0x9e>
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	8b5b      	ldrh	r3, [r3, #26]
 8010266:	461a      	mov	r2, r3
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	4293      	cmp	r3, r2
 801026c:	d910      	bls.n	8010290 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	1ad2      	subs	r2, r2, r3
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	6a1a      	ldr	r2, [r3, #32]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	441a      	add	r2, r3
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	2203      	movs	r2, #3
 801028a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 801028e:	e006      	b.n	801029e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	2200      	movs	r2, #0
 8010294:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f000 f81d 	bl	80102d8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2204      	movs	r2, #4
 80102a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80102b2:	2200      	movs	r2, #0
 80102b4:	4619      	mov	r1, r3
 80102b6:	f002 f8f1 	bl	801249c <osMessagePut>
      break;
 80102ba:	bf00      	nop
  }
}
 80102bc:	bf00      	nop
 80102be:	3718      	adds	r7, #24
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80102cc:	bf00      	nop
 80102ce:	370c      	adds	r7, #12
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80102d8:	b480      	push	{r7}
 80102da:	b083      	sub	sp, #12
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80102e0:	bf00      	nop
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80102f4:	bf00      	nop
 80102f6:	370c      	adds	r7, #12
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr

08010300 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010300:	b5b0      	push	{r4, r5, r7, lr}
 8010302:	b090      	sub	sp, #64	; 0x40
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	4613      	mov	r3, r2
 801030c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d101      	bne.n	8010318 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010314:	2302      	movs	r3, #2
 8010316:	e04d      	b.n	80103b4 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	79fa      	ldrb	r2, [r7, #7]
 801031c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2200      	movs	r2, #0
 8010324:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	2200      	movs	r2, #0
 801032c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8010330:	68f8      	ldr	r0, [r7, #12]
 8010332:	f000 f847 	bl	80103c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2200      	movs	r2, #0
 801033a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d003      	beq.n	8010364 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	68ba      	ldr	r2, [r7, #8]
 8010360:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8010364:	4b15      	ldr	r3, [pc, #84]	; (80103bc <USBH_Init+0xbc>)
 8010366:	f107 0430 	add.w	r4, r7, #48	; 0x30
 801036a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801036c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8010370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010374:	2100      	movs	r1, #0
 8010376:	4618      	mov	r0, r3
 8010378:	f002 f868 	bl	801244c <osMessageCreate>
 801037c:	4602      	mov	r2, r0
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8010384:	4b0e      	ldr	r3, [pc, #56]	; (80103c0 <USBH_Init+0xc0>)
 8010386:	f107 0414 	add.w	r4, r7, #20
 801038a:	461d      	mov	r5, r3
 801038c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801038e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8010398:	f107 0314 	add.w	r3, r7, #20
 801039c:	68f9      	ldr	r1, [r7, #12]
 801039e:	4618      	mov	r0, r3
 80103a0:	f001 fed4 	bl	801214c <osThreadCreate>
 80103a4:	4602      	mov	r2, r0
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80103ac:	68f8      	ldr	r0, [r7, #12]
 80103ae:	f00e ff8f 	bl	801f2d0 <USBH_LL_Init>

  return USBH_OK;
 80103b2:	2300      	movs	r3, #0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3740      	adds	r7, #64	; 0x40
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bdb0      	pop	{r4, r5, r7, pc}
 80103bc:	08020974 	.word	0x08020974
 80103c0:	08020984 	.word	0x08020984

080103c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80103cc:	2300      	movs	r3, #0
 80103ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80103d0:	2300      	movs	r3, #0
 80103d2:	60fb      	str	r3, [r7, #12]
 80103d4:	e009      	b.n	80103ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80103d6:	687a      	ldr	r2, [r7, #4]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	33e0      	adds	r3, #224	; 0xe0
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	4413      	add	r3, r2
 80103e0:	2200      	movs	r2, #0
 80103e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	3301      	adds	r3, #1
 80103e8:	60fb      	str	r3, [r7, #12]
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2b0f      	cmp	r3, #15
 80103ee:	d9f2      	bls.n	80103d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80103f0:	2300      	movs	r3, #0
 80103f2:	60fb      	str	r3, [r7, #12]
 80103f4:	e009      	b.n	801040a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	4413      	add	r3, r2
 80103fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010400:	2200      	movs	r2, #0
 8010402:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	3301      	adds	r3, #1
 8010408:	60fb      	str	r3, [r7, #12]
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010410:	d3f1      	bcc.n	80103f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2200      	movs	r2, #0
 801041c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2201      	movs	r2, #1
 8010422:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2201      	movs	r2, #1
 8010430:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2240      	movs	r2, #64	; 0x40
 8010436:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2200      	movs	r2, #0
 801043c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2201      	movs	r2, #1
 801044a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2200      	movs	r2, #0
 8010452:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	331c      	adds	r3, #28
 8010462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010466:	2100      	movs	r1, #0
 8010468:	4618      	mov	r0, r3
 801046a:	f00f fb45 	bl	801faf8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010478:	2100      	movs	r1, #0
 801047a:	4618      	mov	r0, r3
 801047c:	f00f fb3c 	bl	801faf8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f203 3326 	addw	r3, r3, #806	; 0x326
 8010486:	2212      	movs	r2, #18
 8010488:	2100      	movs	r1, #0
 801048a:	4618      	mov	r0, r3
 801048c:	f00f fb34 	bl	801faf8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010496:	223e      	movs	r2, #62	; 0x3e
 8010498:	2100      	movs	r1, #0
 801049a:	4618      	mov	r0, r3
 801049c:	f00f fb2c 	bl	801faf8 <memset>

  return USBH_OK;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3710      	adds	r7, #16
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80104aa:	b480      	push	{r7}
 80104ac:	b085      	sub	sp, #20
 80104ae:	af00      	add	r7, sp, #0
 80104b0:	6078      	str	r0, [r7, #4]
 80104b2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80104b4:	2300      	movs	r3, #0
 80104b6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d016      	beq.n	80104ec <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d10e      	bne.n	80104e6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80104ce:	1c59      	adds	r1, r3, #1
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80104d6:	687a      	ldr	r2, [r7, #4]
 80104d8:	33de      	adds	r3, #222	; 0xde
 80104da:	6839      	ldr	r1, [r7, #0]
 80104dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80104e0:	2300      	movs	r3, #0
 80104e2:	73fb      	strb	r3, [r7, #15]
 80104e4:	e004      	b.n	80104f0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80104e6:	2302      	movs	r3, #2
 80104e8:	73fb      	strb	r3, [r7, #15]
 80104ea:	e001      	b.n	80104f0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80104ec:	2302      	movs	r3, #2
 80104ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80104f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80104fe:	b480      	push	{r7}
 8010500:	b085      	sub	sp, #20
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
 8010506:	460b      	mov	r3, r1
 8010508:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801050a:	2300      	movs	r3, #0
 801050c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8010514:	78fa      	ldrb	r2, [r7, #3]
 8010516:	429a      	cmp	r2, r3
 8010518:	d204      	bcs.n	8010524 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	78fa      	ldrb	r2, [r7, #3]
 801051e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8010522:	e001      	b.n	8010528 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010524:	2302      	movs	r3, #2
 8010526:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010528:	7bfb      	ldrb	r3, [r7, #15]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3714      	adds	r7, #20
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr

08010536 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010536:	b480      	push	{r7}
 8010538:	b087      	sub	sp, #28
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
 801053e:	4608      	mov	r0, r1
 8010540:	4611      	mov	r1, r2
 8010542:	461a      	mov	r2, r3
 8010544:	4603      	mov	r3, r0
 8010546:	70fb      	strb	r3, [r7, #3]
 8010548:	460b      	mov	r3, r1
 801054a:	70bb      	strb	r3, [r7, #2]
 801054c:	4613      	mov	r3, r2
 801054e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010550:	2300      	movs	r3, #0
 8010552:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010554:	2300      	movs	r3, #0
 8010556:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801055e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010560:	e025      	b.n	80105ae <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010562:	7dfb      	ldrb	r3, [r7, #23]
 8010564:	221a      	movs	r2, #26
 8010566:	fb02 f303 	mul.w	r3, r2, r3
 801056a:	3308      	adds	r3, #8
 801056c:	68fa      	ldr	r2, [r7, #12]
 801056e:	4413      	add	r3, r2
 8010570:	3302      	adds	r3, #2
 8010572:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	795b      	ldrb	r3, [r3, #5]
 8010578:	78fa      	ldrb	r2, [r7, #3]
 801057a:	429a      	cmp	r2, r3
 801057c:	d002      	beq.n	8010584 <USBH_FindInterface+0x4e>
 801057e:	78fb      	ldrb	r3, [r7, #3]
 8010580:	2bff      	cmp	r3, #255	; 0xff
 8010582:	d111      	bne.n	80105a8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8010588:	78ba      	ldrb	r2, [r7, #2]
 801058a:	429a      	cmp	r2, r3
 801058c:	d002      	beq.n	8010594 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801058e:	78bb      	ldrb	r3, [r7, #2]
 8010590:	2bff      	cmp	r3, #255	; 0xff
 8010592:	d109      	bne.n	80105a8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8010598:	787a      	ldrb	r2, [r7, #1]
 801059a:	429a      	cmp	r2, r3
 801059c:	d002      	beq.n	80105a4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801059e:	787b      	ldrb	r3, [r7, #1]
 80105a0:	2bff      	cmp	r3, #255	; 0xff
 80105a2:	d101      	bne.n	80105a8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80105a4:	7dfb      	ldrb	r3, [r7, #23]
 80105a6:	e006      	b.n	80105b6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80105a8:	7dfb      	ldrb	r3, [r7, #23]
 80105aa:	3301      	adds	r3, #1
 80105ac:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80105ae:	7dfb      	ldrb	r3, [r7, #23]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d9d6      	bls.n	8010562 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80105b4:	23ff      	movs	r3, #255	; 0xff
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	371c      	adds	r7, #28
 80105ba:	46bd      	mov	sp, r7
 80105bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c0:	4770      	bx	lr

080105c2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80105c2:	b580      	push	{r7, lr}
 80105c4:	b082      	sub	sp, #8
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f00e febc 	bl	801f348 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80105d0:	2101      	movs	r1, #1
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f00e ffd5 	bl	801f582 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80105d8:	2300      	movs	r3, #0
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
	...

080105e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b088      	sub	sp, #32
 80105e8:	af04      	add	r7, sp, #16
 80105ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80105ec:	2302      	movs	r3, #2
 80105ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80105f0:	2300      	movs	r3, #0
 80105f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80105fa:	b2db      	uxtb	r3, r3
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d102      	bne.n	8010606 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2203      	movs	r2, #3
 8010604:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	b2db      	uxtb	r3, r3
 801060c:	2b0b      	cmp	r3, #11
 801060e:	f200 8247 	bhi.w	8010aa0 <USBH_Process+0x4bc>
 8010612:	a201      	add	r2, pc, #4	; (adr r2, 8010618 <USBH_Process+0x34>)
 8010614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010618:	08010649 	.word	0x08010649
 801061c:	08010697 	.word	0x08010697
 8010620:	0801071b 	.word	0x0801071b
 8010624:	08010a1f 	.word	0x08010a1f
 8010628:	08010aa1 	.word	0x08010aa1
 801062c:	080107db 	.word	0x080107db
 8010630:	080109a9 	.word	0x080109a9
 8010634:	0801082d 	.word	0x0801082d
 8010638:	08010869 	.word	0x08010869
 801063c:	080108a3 	.word	0x080108a3
 8010640:	08010901 	.word	0x08010901
 8010644:	08010a07 	.word	0x08010a07
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b00      	cmp	r3, #0
 8010652:	f000 8227 	beq.w	8010aa4 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2201      	movs	r2, #1
 801065a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 801065c:	20c8      	movs	r0, #200	; 0xc8
 801065e:	f00e ffd7 	bl	801f610 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f00e fecd 	bl	801f402 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2201      	movs	r2, #1
 801067c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801068c:	2200      	movs	r2, #0
 801068e:	4619      	mov	r1, r3
 8010690:	f001 ff04 	bl	801249c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010694:	e206      	b.n	8010aa4 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 801069c:	2b01      	cmp	r3, #1
 801069e:	d107      	bne.n	80106b0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2202      	movs	r2, #2
 80106ac:	701a      	strb	r2, [r3, #0]
 80106ae:	e025      	b.n	80106fc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80106b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80106ba:	d914      	bls.n	80106e6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80106c2:	3301      	adds	r3, #1
 80106c4:	b2da      	uxtb	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80106d2:	2b03      	cmp	r3, #3
 80106d4:	d903      	bls.n	80106de <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	220d      	movs	r2, #13
 80106da:	701a      	strb	r2, [r3, #0]
 80106dc:	e00e      	b.n	80106fc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	701a      	strb	r2, [r3, #0]
 80106e4:	e00a      	b.n	80106fc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80106ec:	f103 020a 	add.w	r2, r3, #10
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80106f6:	200a      	movs	r0, #10
 80106f8:	f00e ff8a 	bl	801f610 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2201      	movs	r2, #1
 8010700:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010710:	2200      	movs	r2, #0
 8010712:	4619      	mov	r1, r3
 8010714:	f001 fec2 	bl	801249c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010718:	e1cb      	b.n	8010ab2 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010720:	2b00      	cmp	r3, #0
 8010722:	d005      	beq.n	8010730 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801072a:	2104      	movs	r1, #4
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8010730:	2064      	movs	r0, #100	; 0x64
 8010732:	f00e ff6d 	bl	801f610 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f00e fe3c 	bl	801f3b4 <USBH_LL_GetSpeed>
 801073c:	4603      	mov	r3, r0
 801073e:	461a      	mov	r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2205      	movs	r2, #5
 801074a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 801074c:	2100      	movs	r1, #0
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f001 fbf1 	bl	8011f36 <USBH_AllocPipe>
 8010754:	4603      	mov	r3, r0
 8010756:	461a      	mov	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 801075c:	2180      	movs	r1, #128	; 0x80
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f001 fbe9 	bl	8011f36 <USBH_AllocPipe>
 8010764:	4603      	mov	r3, r0
 8010766:	461a      	mov	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	7919      	ldrb	r1, [r3, #4]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801077c:	687a      	ldr	r2, [r7, #4]
 801077e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010780:	b292      	uxth	r2, r2
 8010782:	9202      	str	r2, [sp, #8]
 8010784:	2200      	movs	r2, #0
 8010786:	9201      	str	r2, [sp, #4]
 8010788:	9300      	str	r3, [sp, #0]
 801078a:	4603      	mov	r3, r0
 801078c:	2280      	movs	r2, #128	; 0x80
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f001 fba2 	bl	8011ed8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	7959      	ldrb	r1, [r3, #5]
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80107a8:	b292      	uxth	r2, r2
 80107aa:	9202      	str	r2, [sp, #8]
 80107ac:	2200      	movs	r2, #0
 80107ae:	9201      	str	r2, [sp, #4]
 80107b0:	9300      	str	r3, [sp, #0]
 80107b2:	4603      	mov	r3, r0
 80107b4:	2200      	movs	r2, #0
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f001 fb8e 	bl	8011ed8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2201      	movs	r2, #1
 80107c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80107d0:	2200      	movs	r2, #0
 80107d2:	4619      	mov	r1, r3
 80107d4:	f001 fe62 	bl	801249c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80107d8:	e16b      	b.n	8010ab2 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f000 f96e 	bl	8010abc <USBH_HandleEnum>
 80107e0:	4603      	mov	r3, r0
 80107e2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80107e4:	7bbb      	ldrb	r3, [r7, #14]
 80107e6:	b2db      	uxtb	r3, r3
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	f040 815d 	bne.w	8010aa8 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d103      	bne.n	8010808 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2208      	movs	r2, #8
 8010804:	701a      	strb	r2, [r3, #0]
 8010806:	e002      	b.n	801080e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	2207      	movs	r2, #7
 801080c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2205      	movs	r2, #5
 8010812:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010822:	2200      	movs	r2, #0
 8010824:	4619      	mov	r1, r3
 8010826:	f001 fe39 	bl	801249c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801082a:	e13d      	b.n	8010aa8 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010832:	2b00      	cmp	r3, #0
 8010834:	f000 813a 	beq.w	8010aac <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 801083e:	2101      	movs	r1, #1
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2208      	movs	r2, #8
 8010848:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2205      	movs	r2, #5
 801084e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801085e:	2200      	movs	r2, #0
 8010860:	4619      	mov	r1, r3
 8010862:	f001 fe1b 	bl	801249c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8010866:	e121      	b.n	8010aac <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 801086e:	b29b      	uxth	r3, r3
 8010870:	4619      	mov	r1, r3
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 fd00 	bl	8011278 <USBH_SetCfg>
 8010878:	4603      	mov	r3, r0
 801087a:	2b00      	cmp	r3, #0
 801087c:	d102      	bne.n	8010884 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2209      	movs	r2, #9
 8010882:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2201      	movs	r2, #1
 8010888:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010898:	2200      	movs	r2, #0
 801089a:	4619      	mov	r1, r3
 801089c:	f001 fdfe 	bl	801249c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80108a0:	e107      	b.n	8010ab2 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80108a8:	f003 0320 	and.w	r3, r3, #32
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d015      	beq.n	80108dc <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80108b0:	2101      	movs	r1, #1
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 fd03 	bl	80112be <USBH_SetFeature>
 80108b8:	4603      	mov	r3, r0
 80108ba:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80108bc:	7bbb      	ldrb	r3, [r7, #14]
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d103      	bne.n	80108cc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	220a      	movs	r2, #10
 80108c8:	701a      	strb	r2, [r3, #0]
 80108ca:	e00a      	b.n	80108e2 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80108cc:	7bbb      	ldrb	r3, [r7, #14]
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	2b03      	cmp	r3, #3
 80108d2:	d106      	bne.n	80108e2 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	220a      	movs	r2, #10
 80108d8:	701a      	strb	r2, [r3, #0]
 80108da:	e002      	b.n	80108e2 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	220a      	movs	r2, #10
 80108e0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2201      	movs	r2, #1
 80108e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80108f6:	2200      	movs	r2, #0
 80108f8:	4619      	mov	r1, r3
 80108fa:	f001 fdcf 	bl	801249c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80108fe:	e0d8      	b.n	8010ab2 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010906:	2b00      	cmp	r3, #0
 8010908:	d03f      	beq.n	801098a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2200      	movs	r2, #0
 801090e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010912:	2300      	movs	r3, #0
 8010914:	73fb      	strb	r3, [r7, #15]
 8010916:	e016      	b.n	8010946 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8010918:	7bfa      	ldrb	r2, [r7, #15]
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	32de      	adds	r2, #222	; 0xde
 801091e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010922:	791a      	ldrb	r2, [r3, #4]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 801092a:	429a      	cmp	r2, r3
 801092c:	d108      	bne.n	8010940 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 801092e:	7bfa      	ldrb	r2, [r7, #15]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	32de      	adds	r2, #222	; 0xde
 8010934:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 801093e:	e005      	b.n	801094c <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010940:	7bfb      	ldrb	r3, [r7, #15]
 8010942:	3301      	adds	r3, #1
 8010944:	73fb      	strb	r3, [r7, #15]
 8010946:	7bfb      	ldrb	r3, [r7, #15]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d0e5      	beq.n	8010918 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010952:	2b00      	cmp	r3, #0
 8010954:	d016      	beq.n	8010984 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801095c:	689b      	ldr	r3, [r3, #8]
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	4798      	blx	r3
 8010962:	4603      	mov	r3, r0
 8010964:	2b00      	cmp	r3, #0
 8010966:	d109      	bne.n	801097c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2206      	movs	r2, #6
 801096c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010974:	2103      	movs	r1, #3
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	4798      	blx	r3
 801097a:	e006      	b.n	801098a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	220d      	movs	r2, #13
 8010980:	701a      	strb	r2, [r3, #0]
 8010982:	e002      	b.n	801098a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	220d      	movs	r2, #13
 8010988:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2205      	movs	r2, #5
 801098e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801099e:	2200      	movs	r2, #0
 80109a0:	4619      	mov	r1, r3
 80109a2:	f001 fd7b 	bl	801249c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80109a6:	e084      	b.n	8010ab2 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d017      	beq.n	80109e2 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80109b8:	691b      	ldr	r3, [r3, #16]
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	4798      	blx	r3
 80109be:	4603      	mov	r3, r0
 80109c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80109c2:	7bbb      	ldrb	r3, [r7, #14]
 80109c4:	b2db      	uxtb	r3, r3
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d103      	bne.n	80109d2 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	220b      	movs	r2, #11
 80109ce:	701a      	strb	r2, [r3, #0]
 80109d0:	e00a      	b.n	80109e8 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 80109d2:	7bbb      	ldrb	r3, [r7, #14]
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	2b02      	cmp	r3, #2
 80109d8:	d106      	bne.n	80109e8 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	220d      	movs	r2, #13
 80109de:	701a      	strb	r2, [r3, #0]
 80109e0:	e002      	b.n	80109e8 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	220d      	movs	r2, #13
 80109e6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2205      	movs	r2, #5
 80109ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80109fc:	2200      	movs	r2, #0
 80109fe:	4619      	mov	r1, r3
 8010a00:	f001 fd4c 	bl	801249c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010a04:	e055      	b.n	8010ab2 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d04f      	beq.n	8010ab0 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a16:	695b      	ldr	r3, [r3, #20]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	4798      	blx	r3
      }
      break;
 8010a1c:	e048      	b.n	8010ab0 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2200      	movs	r2, #0
 8010a22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f7ff fccc 	bl	80103c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d009      	beq.n	8010a4a <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2200      	movs	r2, #0
 8010a46:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d005      	beq.n	8010a60 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a5a:	2105      	movs	r1, #5
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d107      	bne.n	8010a7c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f7ff fda4 	bl	80105c2 <USBH_Start>
 8010a7a:	e002      	b.n	8010a82 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f00e fc63 	bl	801f348 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2201      	movs	r2, #1
 8010a86:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010a96:	2200      	movs	r2, #0
 8010a98:	4619      	mov	r1, r3
 8010a9a:	f001 fcff 	bl	801249c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010a9e:	e008      	b.n	8010ab2 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 8010aa0:	bf00      	nop
 8010aa2:	e006      	b.n	8010ab2 <USBH_Process+0x4ce>
      break;
 8010aa4:	bf00      	nop
 8010aa6:	e004      	b.n	8010ab2 <USBH_Process+0x4ce>
      break;
 8010aa8:	bf00      	nop
 8010aaa:	e002      	b.n	8010ab2 <USBH_Process+0x4ce>
    break;
 8010aac:	bf00      	nop
 8010aae:	e000      	b.n	8010ab2 <USBH_Process+0x4ce>
      break;
 8010ab0:	bf00      	nop
  }
  return USBH_OK;
 8010ab2:	2300      	movs	r3, #0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3710      	adds	r7, #16
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b088      	sub	sp, #32
 8010ac0:	af04      	add	r7, sp, #16
 8010ac2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	785b      	ldrb	r3, [r3, #1]
 8010ad0:	2b07      	cmp	r3, #7
 8010ad2:	f200 8208 	bhi.w	8010ee6 <USBH_HandleEnum+0x42a>
 8010ad6:	a201      	add	r2, pc, #4	; (adr r2, 8010adc <USBH_HandleEnum+0x20>)
 8010ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010adc:	08010afd 	.word	0x08010afd
 8010ae0:	08010bbb 	.word	0x08010bbb
 8010ae4:	08010c25 	.word	0x08010c25
 8010ae8:	08010cb3 	.word	0x08010cb3
 8010aec:	08010d1d 	.word	0x08010d1d
 8010af0:	08010d8d 	.word	0x08010d8d
 8010af4:	08010e29 	.word	0x08010e29
 8010af8:	08010ea7 	.word	0x08010ea7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8010afc:	2108      	movs	r1, #8
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 faea 	bl	80110d8 <USBH_Get_DevDesc>
 8010b04:	4603      	mov	r3, r0
 8010b06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010b08:	7bbb      	ldrb	r3, [r7, #14]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d130      	bne.n	8010b70 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	7919      	ldrb	r1, [r3, #4]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010b32:	b292      	uxth	r2, r2
 8010b34:	9202      	str	r2, [sp, #8]
 8010b36:	2200      	movs	r2, #0
 8010b38:	9201      	str	r2, [sp, #4]
 8010b3a:	9300      	str	r3, [sp, #0]
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2280      	movs	r2, #128	; 0x80
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f001 f9c9 	bl	8011ed8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	7959      	ldrb	r1, [r3, #5]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010b56:	687a      	ldr	r2, [r7, #4]
 8010b58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010b5a:	b292      	uxth	r2, r2
 8010b5c:	9202      	str	r2, [sp, #8]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	9201      	str	r2, [sp, #4]
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	4603      	mov	r3, r0
 8010b66:	2200      	movs	r2, #0
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f001 f9b5 	bl	8011ed8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010b6e:	e1bc      	b.n	8010eea <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010b70:	7bbb      	ldrb	r3, [r7, #14]
 8010b72:	2b03      	cmp	r3, #3
 8010b74:	f040 81b9 	bne.w	8010eea <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010b7e:	3301      	adds	r3, #1
 8010b80:	b2da      	uxtb	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010b8e:	2b03      	cmp	r3, #3
 8010b90:	d903      	bls.n	8010b9a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	220d      	movs	r2, #13
 8010b96:	701a      	strb	r2, [r3, #0]
      break;
 8010b98:	e1a7      	b.n	8010eea <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	795b      	ldrb	r3, [r3, #5]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f001 f9e9 	bl	8011f78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	791b      	ldrb	r3, [r3, #4]
 8010baa:	4619      	mov	r1, r3
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f001 f9e3 	bl	8011f78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	701a      	strb	r2, [r3, #0]
      break;
 8010bb8:	e197      	b.n	8010eea <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8010bba:	2112      	movs	r1, #18
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fa8b 	bl	80110d8 <USBH_Get_DevDesc>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010bc6:	7bbb      	ldrb	r3, [r7, #14]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d103      	bne.n	8010bd4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2202      	movs	r2, #2
 8010bd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010bd2:	e18c      	b.n	8010eee <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010bd4:	7bbb      	ldrb	r3, [r7, #14]
 8010bd6:	2b03      	cmp	r3, #3
 8010bd8:	f040 8189 	bne.w	8010eee <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010be2:	3301      	adds	r3, #1
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010bf2:	2b03      	cmp	r3, #3
 8010bf4:	d903      	bls.n	8010bfe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	220d      	movs	r2, #13
 8010bfa:	701a      	strb	r2, [r3, #0]
      break;
 8010bfc:	e177      	b.n	8010eee <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	795b      	ldrb	r3, [r3, #5]
 8010c02:	4619      	mov	r1, r3
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f001 f9b7 	bl	8011f78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	791b      	ldrb	r3, [r3, #4]
 8010c0e:	4619      	mov	r1, r3
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f001 f9b1 	bl	8011f78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	701a      	strb	r2, [r3, #0]
      break;
 8010c22:	e164      	b.n	8010eee <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010c24:	2101      	movs	r1, #1
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f000 fb02 	bl	8011230 <USBH_SetAddress>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010c30:	7bbb      	ldrb	r3, [r7, #14]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d132      	bne.n	8010c9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8010c36:	2002      	movs	r0, #2
 8010c38:	f00e fcea 	bl	801f610 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2201      	movs	r2, #1
 8010c40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2203      	movs	r2, #3
 8010c48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	7919      	ldrb	r1, [r3, #4]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010c5e:	b292      	uxth	r2, r2
 8010c60:	9202      	str	r2, [sp, #8]
 8010c62:	2200      	movs	r2, #0
 8010c64:	9201      	str	r2, [sp, #4]
 8010c66:	9300      	str	r3, [sp, #0]
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2280      	movs	r2, #128	; 0x80
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f001 f933 	bl	8011ed8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	7959      	ldrb	r1, [r3, #5]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010c82:	687a      	ldr	r2, [r7, #4]
 8010c84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010c86:	b292      	uxth	r2, r2
 8010c88:	9202      	str	r2, [sp, #8]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	9201      	str	r2, [sp, #4]
 8010c8e:	9300      	str	r3, [sp, #0]
 8010c90:	4603      	mov	r3, r0
 8010c92:	2200      	movs	r2, #0
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f001 f91f 	bl	8011ed8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010c9a:	e12a      	b.n	8010ef2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010c9c:	7bbb      	ldrb	r3, [r7, #14]
 8010c9e:	2b03      	cmp	r3, #3
 8010ca0:	f040 8127 	bne.w	8010ef2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	220d      	movs	r2, #13
 8010ca8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	705a      	strb	r2, [r3, #1]
      break;
 8010cb0:	e11f      	b.n	8010ef2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010cb2:	2109      	movs	r1, #9
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 fa37 	bl	8011128 <USBH_Get_CfgDesc>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010cbe:	7bbb      	ldrb	r3, [r7, #14]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d103      	bne.n	8010ccc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2204      	movs	r2, #4
 8010cc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010cca:	e114      	b.n	8010ef6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010ccc:	7bbb      	ldrb	r3, [r7, #14]
 8010cce:	2b03      	cmp	r3, #3
 8010cd0:	f040 8111 	bne.w	8010ef6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010cda:	3301      	adds	r3, #1
 8010cdc:	b2da      	uxtb	r2, r3
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010cea:	2b03      	cmp	r3, #3
 8010cec:	d903      	bls.n	8010cf6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	220d      	movs	r2, #13
 8010cf2:	701a      	strb	r2, [r3, #0]
      break;
 8010cf4:	e0ff      	b.n	8010ef6 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	795b      	ldrb	r3, [r3, #5]
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f001 f93b 	bl	8011f78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	791b      	ldrb	r3, [r3, #4]
 8010d06:	4619      	mov	r1, r3
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f001 f935 	bl	8011f78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2200      	movs	r2, #0
 8010d12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2200      	movs	r2, #0
 8010d18:	701a      	strb	r2, [r3, #0]
      break;
 8010d1a:	e0ec      	b.n	8010ef6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8010d22:	4619      	mov	r1, r3
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f000 f9ff 	bl	8011128 <USBH_Get_CfgDesc>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010d2e:	7bbb      	ldrb	r3, [r7, #14]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d103      	bne.n	8010d3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2205      	movs	r2, #5
 8010d38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010d3a:	e0de      	b.n	8010efa <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010d3c:	7bbb      	ldrb	r3, [r7, #14]
 8010d3e:	2b03      	cmp	r3, #3
 8010d40:	f040 80db 	bne.w	8010efa <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	b2da      	uxtb	r2, r3
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d5a:	2b03      	cmp	r3, #3
 8010d5c:	d903      	bls.n	8010d66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	220d      	movs	r2, #13
 8010d62:	701a      	strb	r2, [r3, #0]
      break;
 8010d64:	e0c9      	b.n	8010efa <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	795b      	ldrb	r3, [r3, #5]
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f001 f903 	bl	8011f78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	791b      	ldrb	r3, [r3, #4]
 8010d76:	4619      	mov	r1, r3
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f001 f8fd 	bl	8011f78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2200      	movs	r2, #0
 8010d82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	701a      	strb	r2, [r3, #0]
      break;
 8010d8a:	e0b6      	b.n	8010efa <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d036      	beq.n	8010e04 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010da2:	23ff      	movs	r3, #255	; 0xff
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 f9e3 	bl	8011170 <USBH_Get_StringDesc>
 8010daa:	4603      	mov	r3, r0
 8010dac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010dae:	7bbb      	ldrb	r3, [r7, #14]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d111      	bne.n	8010dd8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2206      	movs	r2, #6
 8010db8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2205      	movs	r2, #5
 8010dbe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010dce:	2200      	movs	r2, #0
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	f001 fb63 	bl	801249c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010dd6:	e092      	b.n	8010efe <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010dd8:	7bbb      	ldrb	r3, [r7, #14]
 8010dda:	2b03      	cmp	r3, #3
 8010ddc:	f040 808f 	bne.w	8010efe <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2206      	movs	r2, #6
 8010de4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2205      	movs	r2, #5
 8010dea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	f001 fb4d 	bl	801249c <osMessagePut>
      break;
 8010e02:	e07c      	b.n	8010efe <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2206      	movs	r2, #6
 8010e08:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2205      	movs	r2, #5
 8010e0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010e1e:	2200      	movs	r2, #0
 8010e20:	4619      	mov	r1, r3
 8010e22:	f001 fb3b 	bl	801249c <osMessagePut>
      break;
 8010e26:	e06a      	b.n	8010efe <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d027      	beq.n	8010e82 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010e3e:	23ff      	movs	r3, #255	; 0xff
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f000 f995 	bl	8011170 <USBH_Get_StringDesc>
 8010e46:	4603      	mov	r3, r0
 8010e48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010e4a:	7bbb      	ldrb	r3, [r7, #14]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d103      	bne.n	8010e58 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2207      	movs	r2, #7
 8010e54:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010e56:	e054      	b.n	8010f02 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010e58:	7bbb      	ldrb	r3, [r7, #14]
 8010e5a:	2b03      	cmp	r3, #3
 8010e5c:	d151      	bne.n	8010f02 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2207      	movs	r2, #7
 8010e62:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2205      	movs	r2, #5
 8010e68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010e78:	2200      	movs	r2, #0
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	f001 fb0e 	bl	801249c <osMessagePut>
      break;
 8010e80:	e03f      	b.n	8010f02 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2207      	movs	r2, #7
 8010e86:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2205      	movs	r2, #5
 8010e8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	f001 fafc 	bl	801249c <osMessagePut>
      break;
 8010ea4:	e02d      	b.n	8010f02 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d017      	beq.n	8010ee0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010ebc:	23ff      	movs	r3, #255	; 0xff
 8010ebe:	6878      	ldr	r0, [r7, #4]
 8010ec0:	f000 f956 	bl	8011170 <USBH_Get_StringDesc>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010ec8:	7bbb      	ldrb	r3, [r7, #14]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d102      	bne.n	8010ed4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010ed2:	e018      	b.n	8010f06 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010ed4:	7bbb      	ldrb	r3, [r7, #14]
 8010ed6:	2b03      	cmp	r3, #3
 8010ed8:	d115      	bne.n	8010f06 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8010eda:	2300      	movs	r3, #0
 8010edc:	73fb      	strb	r3, [r7, #15]
      break;
 8010ede:	e012      	b.n	8010f06 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8010ee4:	e00f      	b.n	8010f06 <USBH_HandleEnum+0x44a>

    default:
      break;
 8010ee6:	bf00      	nop
 8010ee8:	e00e      	b.n	8010f08 <USBH_HandleEnum+0x44c>
      break;
 8010eea:	bf00      	nop
 8010eec:	e00c      	b.n	8010f08 <USBH_HandleEnum+0x44c>
      break;
 8010eee:	bf00      	nop
 8010ef0:	e00a      	b.n	8010f08 <USBH_HandleEnum+0x44c>
      break;
 8010ef2:	bf00      	nop
 8010ef4:	e008      	b.n	8010f08 <USBH_HandleEnum+0x44c>
      break;
 8010ef6:	bf00      	nop
 8010ef8:	e006      	b.n	8010f08 <USBH_HandleEnum+0x44c>
      break;
 8010efa:	bf00      	nop
 8010efc:	e004      	b.n	8010f08 <USBH_HandleEnum+0x44c>
      break;
 8010efe:	bf00      	nop
 8010f00:	e002      	b.n	8010f08 <USBH_HandleEnum+0x44c>
      break;
 8010f02:	bf00      	nop
 8010f04:	e000      	b.n	8010f08 <USBH_HandleEnum+0x44c>
      break;
 8010f06:	bf00      	nop
  }
  return Status;
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3710      	adds	r7, #16
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop

08010f14 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b083      	sub	sp, #12
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	683a      	ldr	r2, [r7, #0]
 8010f22:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8010f26:	bf00      	nop
 8010f28:	370c      	adds	r7, #12
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr

08010f32 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b082      	sub	sp, #8
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010f40:	1c5a      	adds	r2, r3, #1
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8010f48:	6878      	ldr	r0, [r7, #4]
 8010f4a:	f000 f804 	bl	8010f56 <USBH_HandleSof>
}
 8010f4e:	bf00      	nop
 8010f50:	3708      	adds	r7, #8
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b082      	sub	sp, #8
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	2b0b      	cmp	r3, #11
 8010f66:	d10a      	bne.n	8010f7e <USBH_HandleSof+0x28>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d005      	beq.n	8010f7e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010f78:	699b      	ldr	r3, [r3, #24]
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	4798      	blx	r3
  }
}
 8010f7e:	bf00      	nop
 8010f80:	3708      	adds	r7, #8
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}

08010f86 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010f86:	b580      	push	{r7, lr}
 8010f88:	b082      	sub	sp, #8
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2201      	movs	r2, #1
 8010f92:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2201      	movs	r2, #1
 8010f9a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8010faa:	2200      	movs	r2, #0
 8010fac:	4619      	mov	r1, r3
 8010fae:	f001 fa75 	bl	801249c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8010fb2:	bf00      	nop
}
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}

08010fba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010fba:	b480      	push	{r7}
 8010fbc:	b083      	sub	sp, #12
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8010fca:	bf00      	nop
}
 8010fcc:	370c      	adds	r7, #12
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr

08010fd6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b082      	sub	sp, #8
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801100a:	2200      	movs	r2, #0
 801100c:	4619      	mov	r1, r3
 801100e:	f001 fa45 	bl	801249c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011012:	2300      	movs	r3, #0
}
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2201      	movs	r2, #1
 8011028:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2200      	movs	r2, #0
 8011030:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f00e f99e 	bl	801f37e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	791b      	ldrb	r3, [r3, #4]
 8011046:	4619      	mov	r1, r3
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 ff95 	bl	8011f78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	795b      	ldrb	r3, [r3, #5]
 8011052:	4619      	mov	r1, r3
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 ff8f 	bl	8011f78 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2201      	movs	r2, #1
 801105e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 801106e:	2200      	movs	r2, #0
 8011070:	4619      	mov	r1, r3
 8011072:	f001 fa13 	bl	801249c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8011076:	2300      	movs	r3, #0
}
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b086      	sub	sp, #24
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 801108e:	f107 030c 	add.w	r3, r7, #12
 8011092:	f04f 32ff 	mov.w	r2, #4294967295
 8011096:	4618      	mov	r0, r3
 8011098:	f001 fa40 	bl	801251c <osMessageGet>
    if (event.status == osEventMessage)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2b10      	cmp	r3, #16
 80110a0:	d1f2      	bne.n	8011088 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7ff fa9e 	bl	80105e4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80110a8:	e7ee      	b.n	8011088 <USBH_Process_OS+0x8>

080110aa <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80110aa:	b580      	push	{r7, lr}
 80110ac:	b082      	sub	sp, #8
 80110ae:	af00      	add	r7, sp, #0
 80110b0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2201      	movs	r2, #1
 80110b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80110c6:	2200      	movs	r2, #0
 80110c8:	4619      	mov	r1, r3
 80110ca:	f001 f9e7 	bl	801249c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b086      	sub	sp, #24
 80110dc:	af02      	add	r7, sp, #8
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	460b      	mov	r3, r1
 80110e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80110ea:	78fb      	ldrb	r3, [r7, #3]
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	4613      	mov	r3, r2
 80110f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80110f6:	2100      	movs	r1, #0
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f864 	bl	80111c6 <USBH_GetDescriptor>
 80110fe:	4603      	mov	r3, r0
 8011100:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8011102:	7bfb      	ldrb	r3, [r7, #15]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d10a      	bne.n	801111e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f203 3026 	addw	r0, r3, #806	; 0x326
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011114:	78fa      	ldrb	r2, [r7, #3]
 8011116:	b292      	uxth	r2, r2
 8011118:	4619      	mov	r1, r3
 801111a:	f000 f919 	bl	8011350 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011120:	4618      	mov	r0, r3
 8011122:	3710      	adds	r7, #16
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8011128:	b580      	push	{r7, lr}
 801112a:	b086      	sub	sp, #24
 801112c:	af02      	add	r7, sp, #8
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	331c      	adds	r3, #28
 8011138:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 801113a:	887b      	ldrh	r3, [r7, #2]
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011144:	2100      	movs	r1, #0
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 f83d 	bl	80111c6 <USBH_GetDescriptor>
 801114c:	4603      	mov	r3, r0
 801114e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8011150:	7bfb      	ldrb	r3, [r7, #15]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d107      	bne.n	8011166 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8011156:	887b      	ldrh	r3, [r7, #2]
 8011158:	461a      	mov	r2, r3
 801115a:	68b9      	ldr	r1, [r7, #8]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 f987 	bl	8011470 <USBH_ParseCfgDesc>
 8011162:	4603      	mov	r3, r0
 8011164:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011166:	7bfb      	ldrb	r3, [r7, #15]
}
 8011168:	4618      	mov	r0, r3
 801116a:	3710      	adds	r7, #16
 801116c:	46bd      	mov	sp, r7
 801116e:	bd80      	pop	{r7, pc}

08011170 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b088      	sub	sp, #32
 8011174:	af02      	add	r7, sp, #8
 8011176:	60f8      	str	r0, [r7, #12]
 8011178:	607a      	str	r2, [r7, #4]
 801117a:	461a      	mov	r2, r3
 801117c:	460b      	mov	r3, r1
 801117e:	72fb      	strb	r3, [r7, #11]
 8011180:	4613      	mov	r3, r2
 8011182:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8011184:	7afb      	ldrb	r3, [r7, #11]
 8011186:	b29b      	uxth	r3, r3
 8011188:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801118c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8011194:	893b      	ldrh	r3, [r7, #8]
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	460b      	mov	r3, r1
 801119a:	2100      	movs	r1, #0
 801119c:	68f8      	ldr	r0, [r7, #12]
 801119e:	f000 f812 	bl	80111c6 <USBH_GetDescriptor>
 80111a2:	4603      	mov	r3, r0
 80111a4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80111a6:	7dfb      	ldrb	r3, [r7, #23]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d107      	bne.n	80111bc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80111b2:	893a      	ldrh	r2, [r7, #8]
 80111b4:	6879      	ldr	r1, [r7, #4]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f000 fafe 	bl	80117b8 <USBH_ParseStringDesc>
  }

  return status;
 80111bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3718      	adds	r7, #24
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80111c6:	b580      	push	{r7, lr}
 80111c8:	b084      	sub	sp, #16
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	60f8      	str	r0, [r7, #12]
 80111ce:	607b      	str	r3, [r7, #4]
 80111d0:	460b      	mov	r3, r1
 80111d2:	72fb      	strb	r3, [r7, #11]
 80111d4:	4613      	mov	r3, r2
 80111d6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	789b      	ldrb	r3, [r3, #2]
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d11c      	bne.n	801121a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80111e0:	7afb      	ldrb	r3, [r7, #11]
 80111e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80111e6:	b2da      	uxtb	r2, r3
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2206      	movs	r2, #6
 80111f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	893a      	ldrh	r2, [r7, #8]
 80111f6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80111f8:	893b      	ldrh	r3, [r7, #8]
 80111fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80111fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011202:	d104      	bne.n	801120e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f240 4209 	movw	r2, #1033	; 0x409
 801120a:	829a      	strh	r2, [r3, #20]
 801120c:	e002      	b.n	8011214 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2200      	movs	r2, #0
 8011212:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	8b3a      	ldrh	r2, [r7, #24]
 8011218:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801121a:	8b3b      	ldrh	r3, [r7, #24]
 801121c:	461a      	mov	r2, r3
 801121e:	6879      	ldr	r1, [r7, #4]
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 fb17 	bl	8011854 <USBH_CtlReq>
 8011226:	4603      	mov	r3, r0
}
 8011228:	4618      	mov	r0, r3
 801122a:	3710      	adds	r7, #16
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	460b      	mov	r3, r1
 801123a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	789b      	ldrb	r3, [r3, #2]
 8011240:	2b01      	cmp	r3, #1
 8011242:	d10f      	bne.n	8011264 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2205      	movs	r2, #5
 801124e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8011250:	78fb      	ldrb	r3, [r7, #3]
 8011252:	b29a      	uxth	r2, r3
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011264:	2200      	movs	r2, #0
 8011266:	2100      	movs	r1, #0
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f000 faf3 	bl	8011854 <USBH_CtlReq>
 801126e:	4603      	mov	r3, r0
}
 8011270:	4618      	mov	r0, r3
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}

08011278 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	460b      	mov	r3, r1
 8011282:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	789b      	ldrb	r3, [r3, #2]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d10e      	bne.n	80112aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2200      	movs	r2, #0
 8011290:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2209      	movs	r2, #9
 8011296:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	887a      	ldrh	r2, [r7, #2]
 801129c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2200      	movs	r2, #0
 80112a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80112aa:	2200      	movs	r2, #0
 80112ac:	2100      	movs	r1, #0
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 fad0 	bl	8011854 <USBH_CtlReq>
 80112b4:	4603      	mov	r3, r0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3708      	adds	r7, #8
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}

080112be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80112be:	b580      	push	{r7, lr}
 80112c0:	b082      	sub	sp, #8
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
 80112c6:	460b      	mov	r3, r1
 80112c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	789b      	ldrb	r3, [r3, #2]
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d10f      	bne.n	80112f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2203      	movs	r2, #3
 80112dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80112de:	78fb      	ldrb	r3, [r7, #3]
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2200      	movs	r2, #0
 80112ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2200      	movs	r2, #0
 80112f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80112f2:	2200      	movs	r2, #0
 80112f4:	2100      	movs	r1, #0
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f000 faac 	bl	8011854 <USBH_CtlReq>
 80112fc:	4603      	mov	r3, r0
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3708      	adds	r7, #8
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}

08011306 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011306:	b580      	push	{r7, lr}
 8011308:	b082      	sub	sp, #8
 801130a:	af00      	add	r7, sp, #0
 801130c:	6078      	str	r0, [r7, #4]
 801130e:	460b      	mov	r3, r1
 8011310:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	789b      	ldrb	r3, [r3, #2]
 8011316:	2b01      	cmp	r3, #1
 8011318:	d10f      	bne.n	801133a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2202      	movs	r2, #2
 801131e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2201      	movs	r2, #1
 8011324:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801132c:	78fb      	ldrb	r3, [r7, #3]
 801132e:	b29a      	uxth	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 801133a:	2200      	movs	r2, #0
 801133c:	2100      	movs	r1, #0
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 fa88 	bl	8011854 <USBH_CtlReq>
 8011344:	4603      	mov	r3, r0
}
 8011346:	4618      	mov	r0, r3
 8011348:	3708      	adds	r7, #8
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
	...

08011350 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8011350:	b480      	push	{r7}
 8011352:	b085      	sub	sp, #20
 8011354:	af00      	add	r7, sp, #0
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	4613      	mov	r3, r2
 801135c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	781a      	ldrb	r2, [r3, #0]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	785a      	ldrb	r2, [r3, #1]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	3302      	adds	r3, #2
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	b29a      	uxth	r2, r3
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	3303      	adds	r3, #3
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	b29b      	uxth	r3, r3
 801137e:	021b      	lsls	r3, r3, #8
 8011380:	b29b      	uxth	r3, r3
 8011382:	4313      	orrs	r3, r2
 8011384:	b29a      	uxth	r2, r3
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	791a      	ldrb	r2, [r3, #4]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	795a      	ldrb	r2, [r3, #5]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	799a      	ldrb	r2, [r3, #6]
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	79da      	ldrb	r2, [r3, #7]
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	79db      	ldrb	r3, [r3, #7]
 80113ae:	2b20      	cmp	r3, #32
 80113b0:	dc0e      	bgt.n	80113d0 <USBH_ParseDevDesc+0x80>
 80113b2:	2b08      	cmp	r3, #8
 80113b4:	db13      	blt.n	80113de <USBH_ParseDevDesc+0x8e>
 80113b6:	3b08      	subs	r3, #8
 80113b8:	2201      	movs	r2, #1
 80113ba:	409a      	lsls	r2, r3
 80113bc:	4b2b      	ldr	r3, [pc, #172]	; (801146c <USBH_ParseDevDesc+0x11c>)
 80113be:	4013      	ands	r3, r2
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	bf14      	ite	ne
 80113c4:	2301      	movne	r3, #1
 80113c6:	2300      	moveq	r3, #0
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d102      	bne.n	80113d4 <USBH_ParseDevDesc+0x84>
 80113ce:	e006      	b.n	80113de <USBH_ParseDevDesc+0x8e>
 80113d0:	2b40      	cmp	r3, #64	; 0x40
 80113d2:	d104      	bne.n	80113de <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	79da      	ldrb	r2, [r3, #7]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	71da      	strb	r2, [r3, #7]
      break;
 80113dc:	e003      	b.n	80113e6 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2240      	movs	r2, #64	; 0x40
 80113e2:	71da      	strb	r2, [r3, #7]
      break;
 80113e4:	bf00      	nop
  }

  if (length > 8U)
 80113e6:	88fb      	ldrh	r3, [r7, #6]
 80113e8:	2b08      	cmp	r3, #8
 80113ea:	d939      	bls.n	8011460 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	3308      	adds	r3, #8
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	3309      	adds	r3, #9
 80113f8:	781b      	ldrb	r3, [r3, #0]
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	021b      	lsls	r3, r3, #8
 80113fe:	b29b      	uxth	r3, r3
 8011400:	4313      	orrs	r3, r2
 8011402:	b29a      	uxth	r2, r3
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	330a      	adds	r3, #10
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	b29a      	uxth	r2, r3
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	330b      	adds	r3, #11
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	b29b      	uxth	r3, r3
 8011418:	021b      	lsls	r3, r3, #8
 801141a:	b29b      	uxth	r3, r3
 801141c:	4313      	orrs	r3, r2
 801141e:	b29a      	uxth	r2, r3
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	330c      	adds	r3, #12
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	b29a      	uxth	r2, r3
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	330d      	adds	r3, #13
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	b29b      	uxth	r3, r3
 8011434:	021b      	lsls	r3, r3, #8
 8011436:	b29b      	uxth	r3, r3
 8011438:	4313      	orrs	r3, r2
 801143a:	b29a      	uxth	r2, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	7b9a      	ldrb	r2, [r3, #14]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	7bda      	ldrb	r2, [r3, #15]
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	7c1a      	ldrb	r2, [r3, #16]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	7c5a      	ldrb	r2, [r3, #17]
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	745a      	strb	r2, [r3, #17]
  }
}
 8011460:	bf00      	nop
 8011462:	3714      	adds	r7, #20
 8011464:	46bd      	mov	sp, r7
 8011466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146a:	4770      	bx	lr
 801146c:	01000101 	.word	0x01000101

08011470 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b08c      	sub	sp, #48	; 0x30
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	4613      	mov	r3, r2
 801147c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011484:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011486:	2300      	movs	r3, #0
 8011488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8011490:	2300      	movs	r3, #0
 8011492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8011496:	2300      	movs	r3, #0
 8011498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	781a      	ldrb	r2, [r3, #0]
 80114a4:	6a3b      	ldr	r3, [r7, #32]
 80114a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	785a      	ldrb	r2, [r3, #1]
 80114ac:	6a3b      	ldr	r3, [r7, #32]
 80114ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	3302      	adds	r3, #2
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	b29a      	uxth	r2, r3
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	3303      	adds	r3, #3
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	021b      	lsls	r3, r3, #8
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4313      	orrs	r3, r2
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114cc:	bf28      	it	cs
 80114ce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	6a3b      	ldr	r3, [r7, #32]
 80114d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	791a      	ldrb	r2, [r3, #4]
 80114dc:	6a3b      	ldr	r3, [r7, #32]
 80114de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	795a      	ldrb	r2, [r3, #5]
 80114e4:	6a3b      	ldr	r3, [r7, #32]
 80114e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	799a      	ldrb	r2, [r3, #6]
 80114ec:	6a3b      	ldr	r3, [r7, #32]
 80114ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	79da      	ldrb	r2, [r3, #7]
 80114f4:	6a3b      	ldr	r3, [r7, #32]
 80114f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	7a1a      	ldrb	r2, [r3, #8]
 80114fc:	6a3b      	ldr	r3, [r7, #32]
 80114fe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8011500:	6a3b      	ldr	r3, [r7, #32]
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	2b09      	cmp	r3, #9
 8011506:	d002      	beq.n	801150e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011508:	6a3b      	ldr	r3, [r7, #32]
 801150a:	2209      	movs	r2, #9
 801150c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801150e:	88fb      	ldrh	r3, [r7, #6]
 8011510:	2b09      	cmp	r3, #9
 8011512:	f240 8099 	bls.w	8011648 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8011516:	2309      	movs	r3, #9
 8011518:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801151a:	2300      	movs	r3, #0
 801151c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801151e:	e07d      	b.n	801161c <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011520:	f107 0316 	add.w	r3, r7, #22
 8011524:	4619      	mov	r1, r3
 8011526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011528:	f000 f979 	bl	801181e <USBH_GetNextDesc>
 801152c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 801152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011530:	785b      	ldrb	r3, [r3, #1]
 8011532:	2b04      	cmp	r3, #4
 8011534:	d172      	bne.n	801161c <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011538:	781b      	ldrb	r3, [r3, #0]
 801153a:	2b09      	cmp	r3, #9
 801153c:	d002      	beq.n	8011544 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011540:	2209      	movs	r2, #9
 8011542:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011548:	221a      	movs	r2, #26
 801154a:	fb02 f303 	mul.w	r3, r2, r3
 801154e:	3308      	adds	r3, #8
 8011550:	6a3a      	ldr	r2, [r7, #32]
 8011552:	4413      	add	r3, r2
 8011554:	3302      	adds	r3, #2
 8011556:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801155a:	69f8      	ldr	r0, [r7, #28]
 801155c:	f000 f87a 	bl	8011654 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8011560:	2300      	movs	r3, #0
 8011562:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011566:	2300      	movs	r3, #0
 8011568:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801156a:	e03f      	b.n	80115ec <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801156c:	f107 0316 	add.w	r3, r7, #22
 8011570:	4619      	mov	r1, r3
 8011572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011574:	f000 f953 	bl	801181e <USBH_GetNextDesc>
 8011578:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157c:	785b      	ldrb	r3, [r3, #1]
 801157e:	2b05      	cmp	r3, #5
 8011580:	d134      	bne.n	80115ec <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	795b      	ldrb	r3, [r3, #5]
 8011586:	2b01      	cmp	r3, #1
 8011588:	d10f      	bne.n	80115aa <USBH_ParseCfgDesc+0x13a>
 801158a:	69fb      	ldr	r3, [r7, #28]
 801158c:	799b      	ldrb	r3, [r3, #6]
 801158e:	2b02      	cmp	r3, #2
 8011590:	d10b      	bne.n	80115aa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8011592:	69fb      	ldr	r3, [r7, #28]
 8011594:	79db      	ldrb	r3, [r3, #7]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10b      	bne.n	80115b2 <USBH_ParseCfgDesc+0x142>
 801159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	2b09      	cmp	r3, #9
 80115a0:	d007      	beq.n	80115b2 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 80115a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a4:	2209      	movs	r2, #9
 80115a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80115a8:	e003      	b.n	80115b2 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80115aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ac:	2207      	movs	r2, #7
 80115ae:	701a      	strb	r2, [r3, #0]
 80115b0:	e000      	b.n	80115b4 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80115b2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80115b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80115bc:	3201      	adds	r2, #1
 80115be:	00d2      	lsls	r2, r2, #3
 80115c0:	211a      	movs	r1, #26
 80115c2:	fb01 f303 	mul.w	r3, r1, r3
 80115c6:	4413      	add	r3, r2
 80115c8:	3308      	adds	r3, #8
 80115ca:	6a3a      	ldr	r2, [r7, #32]
 80115cc:	4413      	add	r3, r2
 80115ce:	3304      	adds	r3, #4
 80115d0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80115d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115d4:	69b9      	ldr	r1, [r7, #24]
 80115d6:	68f8      	ldr	r0, [r7, #12]
 80115d8:	f000 f86c 	bl	80116b4 <USBH_ParseEPDesc>
 80115dc:	4603      	mov	r3, r0
 80115de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80115e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80115e6:	3301      	adds	r3, #1
 80115e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	791b      	ldrb	r3, [r3, #4]
 80115f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d204      	bcs.n	8011602 <USBH_ParseCfgDesc+0x192>
 80115f8:	6a3b      	ldr	r3, [r7, #32]
 80115fa:	885a      	ldrh	r2, [r3, #2]
 80115fc:	8afb      	ldrh	r3, [r7, #22]
 80115fe:	429a      	cmp	r2, r3
 8011600:	d8b4      	bhi.n	801156c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	791b      	ldrb	r3, [r3, #4]
 8011606:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801160a:	429a      	cmp	r2, r3
 801160c:	d201      	bcs.n	8011612 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 801160e:	2303      	movs	r3, #3
 8011610:	e01c      	b.n	801164c <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 8011612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011616:	3301      	adds	r3, #1
 8011618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801161c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011620:	2b01      	cmp	r3, #1
 8011622:	d805      	bhi.n	8011630 <USBH_ParseCfgDesc+0x1c0>
 8011624:	6a3b      	ldr	r3, [r7, #32]
 8011626:	885a      	ldrh	r2, [r3, #2]
 8011628:	8afb      	ldrh	r3, [r7, #22]
 801162a:	429a      	cmp	r2, r3
 801162c:	f63f af78 	bhi.w	8011520 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8011630:	6a3b      	ldr	r3, [r7, #32]
 8011632:	791b      	ldrb	r3, [r3, #4]
 8011634:	2b02      	cmp	r3, #2
 8011636:	bf28      	it	cs
 8011638:	2302      	movcs	r3, #2
 801163a:	b2db      	uxtb	r3, r3
 801163c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011640:	429a      	cmp	r2, r3
 8011642:	d201      	bcs.n	8011648 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 8011644:	2303      	movs	r3, #3
 8011646:	e001      	b.n	801164c <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8011648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801164c:	4618      	mov	r0, r3
 801164e:	3730      	adds	r7, #48	; 0x30
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	781a      	ldrb	r2, [r3, #0]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	785a      	ldrb	r2, [r3, #1]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	789a      	ldrb	r2, [r3, #2]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	78da      	ldrb	r2, [r3, #3]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	791a      	ldrb	r2, [r3, #4]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	795a      	ldrb	r2, [r3, #5]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	799a      	ldrb	r2, [r3, #6]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	79da      	ldrb	r2, [r3, #7]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	7a1a      	ldrb	r2, [r3, #8]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	721a      	strb	r2, [r3, #8]
}
 80116a6:	bf00      	nop
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
	...

080116b4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b087      	sub	sp, #28
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80116c0:	2300      	movs	r3, #0
 80116c2:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	781a      	ldrb	r2, [r3, #0]
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	785a      	ldrb	r2, [r3, #1]
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	789a      	ldrb	r2, [r3, #2]
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	78da      	ldrb	r2, [r3, #3]
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	3304      	adds	r3, #4
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	b29a      	uxth	r2, r3
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	3305      	adds	r3, #5
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	021b      	lsls	r3, r3, #8
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	4313      	orrs	r3, r2
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	799a      	ldrb	r2, [r3, #6]
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	889b      	ldrh	r3, [r3, #4]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d102      	bne.n	8011716 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8011710:	2303      	movs	r3, #3
 8011712:	75fb      	strb	r3, [r7, #23]
 8011714:	e00d      	b.n	8011732 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	889a      	ldrh	r2, [r3, #4]
 801171a:	4b26      	ldr	r3, [pc, #152]	; (80117b4 <USBH_ParseEPDesc+0x100>)
 801171c:	4013      	ands	r3, r2
 801171e:	b29a      	uxth	r2, r3
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	889b      	ldrh	r3, [r3, #4]
 8011728:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801172c:	b29a      	uxth	r2, r3
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011738:	2b00      	cmp	r3, #0
 801173a:	d116      	bne.n	801176a <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	78db      	ldrb	r3, [r3, #3]
 8011740:	f003 0303 	and.w	r3, r3, #3
 8011744:	2b01      	cmp	r3, #1
 8011746:	d005      	beq.n	8011754 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	78db      	ldrb	r3, [r3, #3]
 801174c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011750:	2b03      	cmp	r3, #3
 8011752:	d127      	bne.n	80117a4 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	799b      	ldrb	r3, [r3, #6]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d003      	beq.n	8011764 <USBH_ParseEPDesc+0xb0>
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	799b      	ldrb	r3, [r3, #6]
 8011760:	2b10      	cmp	r3, #16
 8011762:	d91f      	bls.n	80117a4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011764:	2303      	movs	r3, #3
 8011766:	75fb      	strb	r3, [r7, #23]
 8011768:	e01c      	b.n	80117a4 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	78db      	ldrb	r3, [r3, #3]
 801176e:	f003 0303 	and.w	r3, r3, #3
 8011772:	2b01      	cmp	r3, #1
 8011774:	d10a      	bne.n	801178c <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	799b      	ldrb	r3, [r3, #6]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d003      	beq.n	8011786 <USBH_ParseEPDesc+0xd2>
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	799b      	ldrb	r3, [r3, #6]
 8011782:	2b10      	cmp	r3, #16
 8011784:	d90e      	bls.n	80117a4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011786:	2303      	movs	r3, #3
 8011788:	75fb      	strb	r3, [r7, #23]
 801178a:	e00b      	b.n	80117a4 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	78db      	ldrb	r3, [r3, #3]
 8011790:	f003 0303 	and.w	r3, r3, #3
 8011794:	2b03      	cmp	r3, #3
 8011796:	d105      	bne.n	80117a4 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	799b      	ldrb	r3, [r3, #6]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d101      	bne.n	80117a4 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 80117a0:	2303      	movs	r3, #3
 80117a2:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80117a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	371c      	adds	r7, #28
 80117aa:	46bd      	mov	sp, r7
 80117ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b0:	4770      	bx	lr
 80117b2:	bf00      	nop
 80117b4:	fffff800 	.word	0xfffff800

080117b8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b087      	sub	sp, #28
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	4613      	mov	r3, r2
 80117c4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3301      	adds	r3, #1
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	2b03      	cmp	r3, #3
 80117ce:	d120      	bne.n	8011812 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	1e9a      	subs	r2, r3, #2
 80117d6:	88fb      	ldrh	r3, [r7, #6]
 80117d8:	4293      	cmp	r3, r2
 80117da:	bf28      	it	cs
 80117dc:	4613      	movcs	r3, r2
 80117de:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	3302      	adds	r3, #2
 80117e4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80117e6:	2300      	movs	r3, #0
 80117e8:	82fb      	strh	r3, [r7, #22]
 80117ea:	e00b      	b.n	8011804 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80117ec:	8afb      	ldrh	r3, [r7, #22]
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	4413      	add	r3, r2
 80117f2:	781a      	ldrb	r2, [r3, #0]
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	3301      	adds	r3, #1
 80117fc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80117fe:	8afb      	ldrh	r3, [r7, #22]
 8011800:	3302      	adds	r3, #2
 8011802:	82fb      	strh	r3, [r7, #22]
 8011804:	8afa      	ldrh	r2, [r7, #22]
 8011806:	8abb      	ldrh	r3, [r7, #20]
 8011808:	429a      	cmp	r2, r3
 801180a:	d3ef      	bcc.n	80117ec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	2200      	movs	r2, #0
 8011810:	701a      	strb	r2, [r3, #0]
  }
}
 8011812:	bf00      	nop
 8011814:	371c      	adds	r7, #28
 8011816:	46bd      	mov	sp, r7
 8011818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181c:	4770      	bx	lr

0801181e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801181e:	b480      	push	{r7}
 8011820:	b085      	sub	sp, #20
 8011822:	af00      	add	r7, sp, #0
 8011824:	6078      	str	r0, [r7, #4]
 8011826:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	881a      	ldrh	r2, [r3, #0]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	b29b      	uxth	r3, r3
 8011832:	4413      	add	r3, r2
 8011834:	b29a      	uxth	r2, r3
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4413      	add	r3, r2
 8011844:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011846:	68fb      	ldr	r3, [r7, #12]
}
 8011848:	4618      	mov	r0, r3
 801184a:	3714      	adds	r7, #20
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b086      	sub	sp, #24
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	4613      	mov	r3, r2
 8011860:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011862:	2301      	movs	r3, #1
 8011864:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	789b      	ldrb	r3, [r3, #2]
 801186a:	2b01      	cmp	r3, #1
 801186c:	d002      	beq.n	8011874 <USBH_CtlReq+0x20>
 801186e:	2b02      	cmp	r3, #2
 8011870:	d01d      	beq.n	80118ae <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8011872:	e043      	b.n	80118fc <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	88fa      	ldrh	r2, [r7, #6]
 801187e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2201      	movs	r2, #1
 8011884:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	2202      	movs	r2, #2
 801188a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801188c:	2301      	movs	r3, #1
 801188e:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2203      	movs	r2, #3
 8011894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80118a4:	2200      	movs	r2, #0
 80118a6:	4619      	mov	r1, r3
 80118a8:	f000 fdf8 	bl	801249c <osMessagePut>
      break;
 80118ac:	e026      	b.n	80118fc <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80118ae:	68f8      	ldr	r0, [r7, #12]
 80118b0:	f000 f82a 	bl	8011908 <USBH_HandleControl>
 80118b4:	4603      	mov	r3, r0
 80118b6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80118b8:	7dfb      	ldrb	r3, [r7, #23]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d002      	beq.n	80118c4 <USBH_CtlReq+0x70>
 80118be:	7dfb      	ldrb	r3, [r7, #23]
 80118c0:	2b03      	cmp	r3, #3
 80118c2:	d106      	bne.n	80118d2 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2201      	movs	r2, #1
 80118c8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	2200      	movs	r2, #0
 80118ce:	761a      	strb	r2, [r3, #24]
 80118d0:	e005      	b.n	80118de <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80118d2:	7dfb      	ldrb	r3, [r7, #23]
 80118d4:	2b02      	cmp	r3, #2
 80118d6:	d102      	bne.n	80118de <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2201      	movs	r2, #1
 80118dc:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	2203      	movs	r2, #3
 80118e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80118f2:	2200      	movs	r2, #0
 80118f4:	4619      	mov	r1, r3
 80118f6:	f000 fdd1 	bl	801249c <osMessagePut>
      break;
 80118fa:	bf00      	nop
  }
  return status;
 80118fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118fe:	4618      	mov	r0, r3
 8011900:	3718      	adds	r7, #24
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
	...

08011908 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af02      	add	r7, sp, #8
 801190e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8011910:	2301      	movs	r3, #1
 8011912:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011914:	2300      	movs	r3, #0
 8011916:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	7e1b      	ldrb	r3, [r3, #24]
 801191c:	3b01      	subs	r3, #1
 801191e:	2b0a      	cmp	r3, #10
 8011920:	f200 8229 	bhi.w	8011d76 <USBH_HandleControl+0x46e>
 8011924:	a201      	add	r2, pc, #4	; (adr r2, 801192c <USBH_HandleControl+0x24>)
 8011926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801192a:	bf00      	nop
 801192c:	08011959 	.word	0x08011959
 8011930:	08011973 	.word	0x08011973
 8011934:	08011a15 	.word	0x08011a15
 8011938:	08011a3b 	.word	0x08011a3b
 801193c:	08011ac7 	.word	0x08011ac7
 8011940:	08011af1 	.word	0x08011af1
 8011944:	08011bb3 	.word	0x08011bb3
 8011948:	08011bd5 	.word	0x08011bd5
 801194c:	08011c67 	.word	0x08011c67
 8011950:	08011c8d 	.word	0x08011c8d
 8011954:	08011d1f 	.word	0x08011d1f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f103 0110 	add.w	r1, r3, #16
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	795b      	ldrb	r3, [r3, #5]
 8011962:	461a      	mov	r2, r3
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f000 fa17 	bl	8011d98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2202      	movs	r2, #2
 801196e:	761a      	strb	r2, [r3, #24]
      break;
 8011970:	e20c      	b.n	8011d8c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	795b      	ldrb	r3, [r3, #5]
 8011976:	4619      	mov	r1, r3
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f00d fdef 	bl	801f55c <USBH_LL_GetURBState>
 801197e:	4603      	mov	r3, r0
 8011980:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8011982:	7bbb      	ldrb	r3, [r7, #14]
 8011984:	2b01      	cmp	r3, #1
 8011986:	d12c      	bne.n	80119e2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	7c1b      	ldrb	r3, [r3, #16]
 801198c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011990:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	8adb      	ldrh	r3, [r3, #22]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00a      	beq.n	80119b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801199a:	7b7b      	ldrb	r3, [r7, #13]
 801199c:	2b80      	cmp	r3, #128	; 0x80
 801199e:	d103      	bne.n	80119a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2203      	movs	r2, #3
 80119a4:	761a      	strb	r2, [r3, #24]
 80119a6:	e00d      	b.n	80119c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2205      	movs	r2, #5
 80119ac:	761a      	strb	r2, [r3, #24]
 80119ae:	e009      	b.n	80119c4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80119b0:	7b7b      	ldrb	r3, [r7, #13]
 80119b2:	2b80      	cmp	r3, #128	; 0x80
 80119b4:	d103      	bne.n	80119be <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2209      	movs	r2, #9
 80119ba:	761a      	strb	r2, [r3, #24]
 80119bc:	e002      	b.n	80119c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2207      	movs	r2, #7
 80119c2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2203      	movs	r2, #3
 80119c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80119d8:	2200      	movs	r2, #0
 80119da:	4619      	mov	r1, r3
 80119dc:	f000 fd5e 	bl	801249c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80119e0:	e1cb      	b.n	8011d7a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80119e2:	7bbb      	ldrb	r3, [r7, #14]
 80119e4:	2b04      	cmp	r3, #4
 80119e6:	d003      	beq.n	80119f0 <USBH_HandleControl+0xe8>
 80119e8:	7bbb      	ldrb	r3, [r7, #14]
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	f040 81c5 	bne.w	8011d7a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	220b      	movs	r2, #11
 80119f4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2203      	movs	r2, #3
 80119fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	f000 fd45 	bl	801249c <osMessagePut>
      break;
 8011a12:	e1b2      	b.n	8011d7a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011a1a:	b29a      	uxth	r2, r3
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6899      	ldr	r1, [r3, #8]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	899a      	ldrh	r2, [r3, #12]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	791b      	ldrb	r3, [r3, #4]
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 f9f2 	bl	8011e16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2204      	movs	r2, #4
 8011a36:	761a      	strb	r2, [r3, #24]
      break;
 8011a38:	e1a8      	b.n	8011d8c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	791b      	ldrb	r3, [r3, #4]
 8011a3e:	4619      	mov	r1, r3
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f00d fd8b 	bl	801f55c <USBH_LL_GetURBState>
 8011a46:	4603      	mov	r3, r0
 8011a48:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8011a4a:	7bbb      	ldrb	r3, [r7, #14]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d110      	bne.n	8011a72 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2209      	movs	r2, #9
 8011a54:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2203      	movs	r2, #3
 8011a5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	f000 fd15 	bl	801249c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8011a72:	7bbb      	ldrb	r3, [r7, #14]
 8011a74:	2b05      	cmp	r3, #5
 8011a76:	d110      	bne.n	8011a9a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8011a78:	2303      	movs	r3, #3
 8011a7a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2203      	movs	r2, #3
 8011a80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011a90:	2200      	movs	r2, #0
 8011a92:	4619      	mov	r1, r3
 8011a94:	f000 fd02 	bl	801249c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011a98:	e171      	b.n	8011d7e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8011a9a:	7bbb      	ldrb	r3, [r7, #14]
 8011a9c:	2b04      	cmp	r3, #4
 8011a9e:	f040 816e 	bne.w	8011d7e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	220b      	movs	r2, #11
 8011aa6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2203      	movs	r2, #3
 8011aac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011abc:	2200      	movs	r2, #0
 8011abe:	4619      	mov	r1, r3
 8011ac0:	f000 fcec 	bl	801249c <osMessagePut>
      break;
 8011ac4:	e15b      	b.n	8011d7e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6899      	ldr	r1, [r3, #8]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	899a      	ldrh	r2, [r3, #12]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	795b      	ldrb	r3, [r3, #5]
 8011ad2:	2001      	movs	r0, #1
 8011ad4:	9000      	str	r0, [sp, #0]
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f000 f978 	bl	8011dcc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011ae2:	b29a      	uxth	r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2206      	movs	r2, #6
 8011aec:	761a      	strb	r2, [r3, #24]
      break;
 8011aee:	e14d      	b.n	8011d8c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	795b      	ldrb	r3, [r3, #5]
 8011af4:	4619      	mov	r1, r3
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f00d fd30 	bl	801f55c <USBH_LL_GetURBState>
 8011afc:	4603      	mov	r3, r0
 8011afe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011b00:	7bbb      	ldrb	r3, [r7, #14]
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	d111      	bne.n	8011b2a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	2207      	movs	r2, #7
 8011b0a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2203      	movs	r2, #3
 8011b10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011b20:	2200      	movs	r2, #0
 8011b22:	4619      	mov	r1, r3
 8011b24:	f000 fcba 	bl	801249c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011b28:	e12b      	b.n	8011d82 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8011b2a:	7bbb      	ldrb	r3, [r7, #14]
 8011b2c:	2b05      	cmp	r3, #5
 8011b2e:	d113      	bne.n	8011b58 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	220c      	movs	r2, #12
 8011b34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011b36:	2303      	movs	r3, #3
 8011b38:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2203      	movs	r2, #3
 8011b3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011b4e:	2200      	movs	r2, #0
 8011b50:	4619      	mov	r1, r3
 8011b52:	f000 fca3 	bl	801249c <osMessagePut>
      break;
 8011b56:	e114      	b.n	8011d82 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011b58:	7bbb      	ldrb	r3, [r7, #14]
 8011b5a:	2b02      	cmp	r3, #2
 8011b5c:	d111      	bne.n	8011b82 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2205      	movs	r2, #5
 8011b62:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2203      	movs	r2, #3
 8011b68:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011b78:	2200      	movs	r2, #0
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	f000 fc8e 	bl	801249c <osMessagePut>
      break;
 8011b80:	e0ff      	b.n	8011d82 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8011b82:	7bbb      	ldrb	r3, [r7, #14]
 8011b84:	2b04      	cmp	r3, #4
 8011b86:	f040 80fc 	bne.w	8011d82 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	220b      	movs	r2, #11
 8011b8e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011b90:	2302      	movs	r3, #2
 8011b92:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2203      	movs	r2, #3
 8011b98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011ba8:	2200      	movs	r2, #0
 8011baa:	4619      	mov	r1, r3
 8011bac:	f000 fc76 	bl	801249c <osMessagePut>
      break;
 8011bb0:	e0e7      	b.n	8011d82 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	791b      	ldrb	r3, [r3, #4]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	2100      	movs	r1, #0
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f000 f92b 	bl	8011e16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2208      	movs	r2, #8
 8011bd0:	761a      	strb	r2, [r3, #24]

      break;
 8011bd2:	e0db      	b.n	8011d8c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	791b      	ldrb	r3, [r3, #4]
 8011bd8:	4619      	mov	r1, r3
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f00d fcbe 	bl	801f55c <USBH_LL_GetURBState>
 8011be0:	4603      	mov	r3, r0
 8011be2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011be4:	7bbb      	ldrb	r3, [r7, #14]
 8011be6:	2b01      	cmp	r3, #1
 8011be8:	d113      	bne.n	8011c12 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	220d      	movs	r2, #13
 8011bee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	2203      	movs	r2, #3
 8011bf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011c08:	2200      	movs	r2, #0
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	f000 fc46 	bl	801249c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011c10:	e0b9      	b.n	8011d86 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8011c12:	7bbb      	ldrb	r3, [r7, #14]
 8011c14:	2b04      	cmp	r3, #4
 8011c16:	d111      	bne.n	8011c3c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	220b      	movs	r2, #11
 8011c1c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2203      	movs	r2, #3
 8011c22:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011c32:	2200      	movs	r2, #0
 8011c34:	4619      	mov	r1, r3
 8011c36:	f000 fc31 	bl	801249c <osMessagePut>
      break;
 8011c3a:	e0a4      	b.n	8011d86 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8011c3c:	7bbb      	ldrb	r3, [r7, #14]
 8011c3e:	2b05      	cmp	r3, #5
 8011c40:	f040 80a1 	bne.w	8011d86 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8011c44:	2303      	movs	r3, #3
 8011c46:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2203      	movs	r2, #3
 8011c4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	4619      	mov	r1, r3
 8011c60:	f000 fc1c 	bl	801249c <osMessagePut>
      break;
 8011c64:	e08f      	b.n	8011d86 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	795b      	ldrb	r3, [r3, #5]
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	9200      	str	r2, [sp, #0]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	2100      	movs	r1, #0
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f000 f8aa 	bl	8011dcc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8011c7e:	b29a      	uxth	r2, r3
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	220a      	movs	r2, #10
 8011c88:	761a      	strb	r2, [r3, #24]
      break;
 8011c8a:	e07f      	b.n	8011d8c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	795b      	ldrb	r3, [r3, #5]
 8011c90:	4619      	mov	r1, r3
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f00d fc62 	bl	801f55c <USBH_LL_GetURBState>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011c9c:	7bbb      	ldrb	r3, [r7, #14]
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d113      	bne.n	8011cca <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	220d      	movs	r2, #13
 8011caa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2203      	movs	r2, #3
 8011cb0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	f000 fbea 	bl	801249c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011cc8:	e05f      	b.n	8011d8a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011cca:	7bbb      	ldrb	r3, [r7, #14]
 8011ccc:	2b02      	cmp	r3, #2
 8011cce:	d111      	bne.n	8011cf4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2209      	movs	r2, #9
 8011cd4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2203      	movs	r2, #3
 8011cda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011cea:	2200      	movs	r2, #0
 8011cec:	4619      	mov	r1, r3
 8011cee:	f000 fbd5 	bl	801249c <osMessagePut>
      break;
 8011cf2:	e04a      	b.n	8011d8a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8011cf4:	7bbb      	ldrb	r3, [r7, #14]
 8011cf6:	2b04      	cmp	r3, #4
 8011cf8:	d147      	bne.n	8011d8a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	220b      	movs	r2, #11
 8011cfe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2203      	movs	r2, #3
 8011d04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8011d14:	2200      	movs	r2, #0
 8011d16:	4619      	mov	r1, r3
 8011d18:	f000 fbc0 	bl	801249c <osMessagePut>
      break;
 8011d1c:	e035      	b.n	8011d8a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	7e5b      	ldrb	r3, [r3, #25]
 8011d22:	3301      	adds	r3, #1
 8011d24:	b2da      	uxtb	r2, r3
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	765a      	strb	r2, [r3, #25]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	7e5b      	ldrb	r3, [r3, #25]
 8011d2e:	2b02      	cmp	r3, #2
 8011d30:	d806      	bhi.n	8011d40 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2201      	movs	r2, #1
 8011d36:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011d3e:	e025      	b.n	8011d8c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011d46:	2106      	movs	r1, #6
 8011d48:	6878      	ldr	r0, [r7, #4]
 8011d4a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2200      	movs	r2, #0
 8011d50:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	795b      	ldrb	r3, [r3, #5]
 8011d56:	4619      	mov	r1, r3
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 f90d 	bl	8011f78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	791b      	ldrb	r3, [r3, #4]
 8011d62:	4619      	mov	r1, r3
 8011d64:	6878      	ldr	r0, [r7, #4]
 8011d66:	f000 f907 	bl	8011f78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011d70:	2302      	movs	r3, #2
 8011d72:	73fb      	strb	r3, [r7, #15]
      break;
 8011d74:	e00a      	b.n	8011d8c <USBH_HandleControl+0x484>

    default:
      break;
 8011d76:	bf00      	nop
 8011d78:	e008      	b.n	8011d8c <USBH_HandleControl+0x484>
      break;
 8011d7a:	bf00      	nop
 8011d7c:	e006      	b.n	8011d8c <USBH_HandleControl+0x484>
      break;
 8011d7e:	bf00      	nop
 8011d80:	e004      	b.n	8011d8c <USBH_HandleControl+0x484>
      break;
 8011d82:	bf00      	nop
 8011d84:	e002      	b.n	8011d8c <USBH_HandleControl+0x484>
      break;
 8011d86:	bf00      	nop
 8011d88:	e000      	b.n	8011d8c <USBH_HandleControl+0x484>
      break;
 8011d8a:	bf00      	nop
  }

  return status;
 8011d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3710      	adds	r7, #16
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}
 8011d96:	bf00      	nop

08011d98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b088      	sub	sp, #32
 8011d9c:	af04      	add	r7, sp, #16
 8011d9e:	60f8      	str	r0, [r7, #12]
 8011da0:	60b9      	str	r1, [r7, #8]
 8011da2:	4613      	mov	r3, r2
 8011da4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011da6:	79f9      	ldrb	r1, [r7, #7]
 8011da8:	2300      	movs	r3, #0
 8011daa:	9303      	str	r3, [sp, #12]
 8011dac:	2308      	movs	r3, #8
 8011dae:	9302      	str	r3, [sp, #8]
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	9301      	str	r3, [sp, #4]
 8011db4:	2300      	movs	r3, #0
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	2300      	movs	r3, #0
 8011dba:	2200      	movs	r2, #0
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f00d fb9c 	bl	801f4fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8011dc2:	2300      	movs	r3, #0
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b088      	sub	sp, #32
 8011dd0:	af04      	add	r7, sp, #16
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	4611      	mov	r1, r2
 8011dd8:	461a      	mov	r2, r3
 8011dda:	460b      	mov	r3, r1
 8011ddc:	80fb      	strh	r3, [r7, #6]
 8011dde:	4613      	mov	r3, r2
 8011de0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d001      	beq.n	8011df0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011dec:	2300      	movs	r3, #0
 8011dee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011df0:	7979      	ldrb	r1, [r7, #5]
 8011df2:	7e3b      	ldrb	r3, [r7, #24]
 8011df4:	9303      	str	r3, [sp, #12]
 8011df6:	88fb      	ldrh	r3, [r7, #6]
 8011df8:	9302      	str	r3, [sp, #8]
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	9301      	str	r3, [sp, #4]
 8011dfe:	2301      	movs	r3, #1
 8011e00:	9300      	str	r3, [sp, #0]
 8011e02:	2300      	movs	r3, #0
 8011e04:	2200      	movs	r2, #0
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f00d fb77 	bl	801f4fa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}

08011e16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011e16:	b580      	push	{r7, lr}
 8011e18:	b088      	sub	sp, #32
 8011e1a:	af04      	add	r7, sp, #16
 8011e1c:	60f8      	str	r0, [r7, #12]
 8011e1e:	60b9      	str	r1, [r7, #8]
 8011e20:	4611      	mov	r1, r2
 8011e22:	461a      	mov	r2, r3
 8011e24:	460b      	mov	r3, r1
 8011e26:	80fb      	strh	r3, [r7, #6]
 8011e28:	4613      	mov	r3, r2
 8011e2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011e2c:	7979      	ldrb	r1, [r7, #5]
 8011e2e:	2300      	movs	r3, #0
 8011e30:	9303      	str	r3, [sp, #12]
 8011e32:	88fb      	ldrh	r3, [r7, #6]
 8011e34:	9302      	str	r3, [sp, #8]
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	9301      	str	r3, [sp, #4]
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	9300      	str	r3, [sp, #0]
 8011e3e:	2300      	movs	r3, #0
 8011e40:	2201      	movs	r2, #1
 8011e42:	68f8      	ldr	r0, [r7, #12]
 8011e44:	f00d fb59 	bl	801f4fa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011e48:	2300      	movs	r3, #0

}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}

08011e52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011e52:	b580      	push	{r7, lr}
 8011e54:	b088      	sub	sp, #32
 8011e56:	af04      	add	r7, sp, #16
 8011e58:	60f8      	str	r0, [r7, #12]
 8011e5a:	60b9      	str	r1, [r7, #8]
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	461a      	mov	r2, r3
 8011e60:	460b      	mov	r3, r1
 8011e62:	80fb      	strh	r3, [r7, #6]
 8011e64:	4613      	mov	r3, r2
 8011e66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d001      	beq.n	8011e76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011e72:	2300      	movs	r3, #0
 8011e74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011e76:	7979      	ldrb	r1, [r7, #5]
 8011e78:	7e3b      	ldrb	r3, [r7, #24]
 8011e7a:	9303      	str	r3, [sp, #12]
 8011e7c:	88fb      	ldrh	r3, [r7, #6]
 8011e7e:	9302      	str	r3, [sp, #8]
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	9301      	str	r3, [sp, #4]
 8011e84:	2301      	movs	r3, #1
 8011e86:	9300      	str	r3, [sp, #0]
 8011e88:	2302      	movs	r3, #2
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	68f8      	ldr	r0, [r7, #12]
 8011e8e:	f00d fb34 	bl	801f4fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011e92:	2300      	movs	r3, #0
}
 8011e94:	4618      	mov	r0, r3
 8011e96:	3710      	adds	r7, #16
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b088      	sub	sp, #32
 8011ea0:	af04      	add	r7, sp, #16
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	60b9      	str	r1, [r7, #8]
 8011ea6:	4611      	mov	r1, r2
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	460b      	mov	r3, r1
 8011eac:	80fb      	strh	r3, [r7, #6]
 8011eae:	4613      	mov	r3, r2
 8011eb0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011eb2:	7979      	ldrb	r1, [r7, #5]
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	9303      	str	r3, [sp, #12]
 8011eb8:	88fb      	ldrh	r3, [r7, #6]
 8011eba:	9302      	str	r3, [sp, #8]
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	9301      	str	r3, [sp, #4]
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	2302      	movs	r3, #2
 8011ec6:	2201      	movs	r2, #1
 8011ec8:	68f8      	ldr	r0, [r7, #12]
 8011eca:	f00d fb16 	bl	801f4fa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011ece:	2300      	movs	r3, #0
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b086      	sub	sp, #24
 8011edc:	af04      	add	r7, sp, #16
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	70fb      	strb	r3, [r7, #3]
 8011eea:	460b      	mov	r3, r1
 8011eec:	70bb      	strb	r3, [r7, #2]
 8011eee:	4613      	mov	r3, r2
 8011ef0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011ef2:	7878      	ldrb	r0, [r7, #1]
 8011ef4:	78ba      	ldrb	r2, [r7, #2]
 8011ef6:	78f9      	ldrb	r1, [r7, #3]
 8011ef8:	8b3b      	ldrh	r3, [r7, #24]
 8011efa:	9302      	str	r3, [sp, #8]
 8011efc:	7d3b      	ldrb	r3, [r7, #20]
 8011efe:	9301      	str	r3, [sp, #4]
 8011f00:	7c3b      	ldrb	r3, [r7, #16]
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	4603      	mov	r3, r0
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f00d faa9 	bl	801f45e <USBH_LL_OpenPipe>

  return USBH_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3708      	adds	r7, #8
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b082      	sub	sp, #8
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
 8011f1e:	460b      	mov	r3, r1
 8011f20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011f22:	78fb      	ldrb	r3, [r7, #3]
 8011f24:	4619      	mov	r1, r3
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f00d fac8 	bl	801f4bc <USBH_LL_ClosePipe>

  return USBH_OK;
 8011f2c:	2300      	movs	r3, #0
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3708      	adds	r7, #8
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}

08011f36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b084      	sub	sp, #16
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
 8011f3e:	460b      	mov	r3, r1
 8011f40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 f836 	bl	8011fb4 <USBH_GetFreePipe>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011f4c:	89fb      	ldrh	r3, [r7, #14]
 8011f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d00a      	beq.n	8011f6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011f56:	78fa      	ldrb	r2, [r7, #3]
 8011f58:	89fb      	ldrh	r3, [r7, #14]
 8011f5a:	f003 030f 	and.w	r3, r3, #15
 8011f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011f62:	6879      	ldr	r1, [r7, #4]
 8011f64:	33e0      	adds	r3, #224	; 0xe0
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	440b      	add	r3, r1
 8011f6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011f6c:	89fb      	ldrh	r3, [r7, #14]
 8011f6e:	b2db      	uxtb	r3, r3
}
 8011f70:	4618      	mov	r0, r3
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	460b      	mov	r3, r1
 8011f82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011f84:	78fb      	ldrb	r3, [r7, #3]
 8011f86:	2b0f      	cmp	r3, #15
 8011f88:	d80d      	bhi.n	8011fa6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011f8a:	78fb      	ldrb	r3, [r7, #3]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	33e0      	adds	r3, #224	; 0xe0
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	4413      	add	r3, r2
 8011f94:	685a      	ldr	r2, [r3, #4]
 8011f96:	78fb      	ldrb	r3, [r7, #3]
 8011f98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	33e0      	adds	r3, #224	; 0xe0
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	440b      	add	r3, r1
 8011fa4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	370c      	adds	r7, #12
 8011fac:	46bd      	mov	sp, r7
 8011fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb2:	4770      	bx	lr

08011fb4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	b085      	sub	sp, #20
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	73fb      	strb	r3, [r7, #15]
 8011fc4:	e00f      	b.n	8011fe6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011fc6:	7bfb      	ldrb	r3, [r7, #15]
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	33e0      	adds	r3, #224	; 0xe0
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	4413      	add	r3, r2
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d102      	bne.n	8011fe0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011fda:	7bfb      	ldrb	r3, [r7, #15]
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	e007      	b.n	8011ff0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011fe0:	7bfb      	ldrb	r3, [r7, #15]
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	73fb      	strb	r3, [r7, #15]
 8011fe6:	7bfb      	ldrb	r3, [r7, #15]
 8011fe8:	2b0f      	cmp	r3, #15
 8011fea:	d9ec      	bls.n	8011fc6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3714      	adds	r7, #20
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr

08011ffc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011ffc:	b480      	push	{r7}
 8011ffe:	b087      	sub	sp, #28
 8012000:	af00      	add	r7, sp, #0
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	4613      	mov	r3, r2
 8012008:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801200a:	2301      	movs	r3, #1
 801200c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801200e:	2300      	movs	r3, #0
 8012010:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012012:	4b1f      	ldr	r3, [pc, #124]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 8012014:	7a5b      	ldrb	r3, [r3, #9]
 8012016:	b2db      	uxtb	r3, r3
 8012018:	2b00      	cmp	r3, #0
 801201a:	d131      	bne.n	8012080 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801201c:	4b1c      	ldr	r3, [pc, #112]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 801201e:	7a5b      	ldrb	r3, [r3, #9]
 8012020:	b2db      	uxtb	r3, r3
 8012022:	461a      	mov	r2, r3
 8012024:	4b1a      	ldr	r3, [pc, #104]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 8012026:	2100      	movs	r1, #0
 8012028:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801202a:	4b19      	ldr	r3, [pc, #100]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 801202c:	7a5b      	ldrb	r3, [r3, #9]
 801202e:	b2db      	uxtb	r3, r3
 8012030:	4a17      	ldr	r2, [pc, #92]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801203a:	4b15      	ldr	r3, [pc, #84]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 801203c:	7a5b      	ldrb	r3, [r3, #9]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	461a      	mov	r2, r3
 8012042:	4b13      	ldr	r3, [pc, #76]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 8012044:	4413      	add	r3, r2
 8012046:	79fa      	ldrb	r2, [r7, #7]
 8012048:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801204a:	4b11      	ldr	r3, [pc, #68]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 801204c:	7a5b      	ldrb	r3, [r3, #9]
 801204e:	b2db      	uxtb	r3, r3
 8012050:	1c5a      	adds	r2, r3, #1
 8012052:	b2d1      	uxtb	r1, r2
 8012054:	4a0e      	ldr	r2, [pc, #56]	; (8012090 <FATFS_LinkDriverEx+0x94>)
 8012056:	7251      	strb	r1, [r2, #9]
 8012058:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801205a:	7dbb      	ldrb	r3, [r7, #22]
 801205c:	3330      	adds	r3, #48	; 0x30
 801205e:	b2da      	uxtb	r2, r3
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	3301      	adds	r3, #1
 8012068:	223a      	movs	r2, #58	; 0x3a
 801206a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	3302      	adds	r3, #2
 8012070:	222f      	movs	r2, #47	; 0x2f
 8012072:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	3303      	adds	r3, #3
 8012078:	2200      	movs	r2, #0
 801207a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801207c:	2300      	movs	r3, #0
 801207e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012080:	7dfb      	ldrb	r3, [r7, #23]
}
 8012082:	4618      	mov	r0, r3
 8012084:	371c      	adds	r7, #28
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr
 801208e:	bf00      	nop
 8012090:	200057c4 	.word	0x200057c4

08012094 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801209e:	2200      	movs	r2, #0
 80120a0:	6839      	ldr	r1, [r7, #0]
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f7ff ffaa 	bl	8011ffc <FATFS_LinkDriverEx>
 80120a8:	4603      	mov	r3, r0
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80120b2:	b480      	push	{r7}
 80120b4:	b085      	sub	sp, #20
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	4603      	mov	r3, r0
 80120ba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80120bc:	2300      	movs	r3, #0
 80120be:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80120c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80120c4:	2b84      	cmp	r3, #132	; 0x84
 80120c6:	d005      	beq.n	80120d4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80120c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	4413      	add	r3, r2
 80120d0:	3303      	adds	r3, #3
 80120d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80120d4:	68fb      	ldr	r3, [r7, #12]
}
 80120d6:	4618      	mov	r0, r3
 80120d8:	3714      	adds	r7, #20
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80120e2:	b480      	push	{r7}
 80120e4:	b083      	sub	sp, #12
 80120e6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120e8:	f3ef 8305 	mrs	r3, IPSR
 80120ec:	607b      	str	r3, [r7, #4]
  return(result);
 80120ee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	bf14      	ite	ne
 80120f4:	2301      	movne	r3, #1
 80120f6:	2300      	moveq	r3, #0
 80120f8:	b2db      	uxtb	r3, r3
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	370c      	adds	r7, #12
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr

08012106 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012106:	b580      	push	{r7, lr}
 8012108:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801210a:	f001 fc89 	bl	8013a20 <vTaskStartScheduler>
  
  return osOK;
 801210e:	2300      	movs	r3, #0
}
 8012110:	4618      	mov	r0, r3
 8012112:	bd80      	pop	{r7, pc}

08012114 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8012118:	f002 f8dc 	bl	80142d4 <xTaskGetSchedulerState>
 801211c:	4603      	mov	r3, r0
 801211e:	2b01      	cmp	r3, #1
 8012120:	d101      	bne.n	8012126 <osKernelRunning+0x12>
    return 0;
 8012122:	2300      	movs	r3, #0
 8012124:	e000      	b.n	8012128 <osKernelRunning+0x14>
  else
    return 1;
 8012126:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8012128:	4618      	mov	r0, r3
 801212a:	bd80      	pop	{r7, pc}

0801212c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8012130:	f7ff ffd7 	bl	80120e2 <inHandlerMode>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d003      	beq.n	8012142 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801213a:	f001 fd91 	bl	8013c60 <xTaskGetTickCountFromISR>
 801213e:	4603      	mov	r3, r0
 8012140:	e002      	b.n	8012148 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8012142:	f001 fd7d 	bl	8013c40 <xTaskGetTickCount>
 8012146:	4603      	mov	r3, r0
  }
}
 8012148:	4618      	mov	r0, r3
 801214a:	bd80      	pop	{r7, pc}

0801214c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801214c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801214e:	b089      	sub	sp, #36	; 0x24
 8012150:	af04      	add	r7, sp, #16
 8012152:	6078      	str	r0, [r7, #4]
 8012154:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	695b      	ldr	r3, [r3, #20]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d020      	beq.n	80121a0 <osThreadCreate+0x54>
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	699b      	ldr	r3, [r3, #24]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d01c      	beq.n	80121a0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	685c      	ldr	r4, [r3, #4]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681d      	ldr	r5, [r3, #0]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	691e      	ldr	r6, [r3, #16]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8012178:	4618      	mov	r0, r3
 801217a:	f7ff ff9a 	bl	80120b2 <makeFreeRtosPriority>
 801217e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	695b      	ldr	r3, [r3, #20]
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012188:	9202      	str	r2, [sp, #8]
 801218a:	9301      	str	r3, [sp, #4]
 801218c:	9100      	str	r1, [sp, #0]
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	4632      	mov	r2, r6
 8012192:	4629      	mov	r1, r5
 8012194:	4620      	mov	r0, r4
 8012196:	f001 fa67 	bl	8013668 <xTaskCreateStatic>
 801219a:	4603      	mov	r3, r0
 801219c:	60fb      	str	r3, [r7, #12]
 801219e:	e01c      	b.n	80121da <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	685c      	ldr	r4, [r3, #4]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121ac:	b29e      	uxth	r6, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7ff ff7c 	bl	80120b2 <makeFreeRtosPriority>
 80121ba:	4602      	mov	r2, r0
 80121bc:	f107 030c 	add.w	r3, r7, #12
 80121c0:	9301      	str	r3, [sp, #4]
 80121c2:	9200      	str	r2, [sp, #0]
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	4632      	mov	r2, r6
 80121c8:	4629      	mov	r1, r5
 80121ca:	4620      	mov	r0, r4
 80121cc:	f001 faaf 	bl	801372e <xTaskCreate>
 80121d0:	4603      	mov	r3, r0
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	d001      	beq.n	80121da <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80121d6:	2300      	movs	r3, #0
 80121d8:	e000      	b.n	80121dc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80121da:	68fb      	ldr	r3, [r7, #12]
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3714      	adds	r7, #20
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080121e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b084      	sub	sp, #16
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d001      	beq.n	80121fa <osDelay+0x16>
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	e000      	b.n	80121fc <osDelay+0x18>
 80121fa:	2301      	movs	r3, #1
 80121fc:	4618      	mov	r0, r3
 80121fe:	f001 fbd9 	bl	80139b4 <vTaskDelay>
  
  return osOK;
 8012202:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012204:	4618      	mov	r0, r3
 8012206:	3710      	adds	r7, #16
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	685b      	ldr	r3, [r3, #4]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d007      	beq.n	801222c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	4619      	mov	r1, r3
 8012222:	2001      	movs	r0, #1
 8012224:	f000 fc21 	bl	8012a6a <xQueueCreateMutexStatic>
 8012228:	4603      	mov	r3, r0
 801222a:	e003      	b.n	8012234 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801222c:	2001      	movs	r0, #1
 801222e:	f000 fc04 	bl	8012a3a <xQueueCreateMutex>
 8012232:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8012234:	4618      	mov	r0, r3
 8012236:	3708      	adds	r7, #8
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}

0801223c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b084      	sub	sp, #16
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012246:	2300      	movs	r3, #0
 8012248:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <osMutexWait+0x18>
    return osErrorParameter;
 8012250:	2380      	movs	r3, #128	; 0x80
 8012252:	e03a      	b.n	80122ca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8012254:	2300      	movs	r3, #0
 8012256:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801225e:	d103      	bne.n	8012268 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8012260:	f04f 33ff 	mov.w	r3, #4294967295
 8012264:	60fb      	str	r3, [r7, #12]
 8012266:	e009      	b.n	801227c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d006      	beq.n	801227c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d101      	bne.n	801227c <osMutexWait+0x40>
      ticks = 1;
 8012278:	2301      	movs	r3, #1
 801227a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801227c:	f7ff ff31 	bl	80120e2 <inHandlerMode>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d017      	beq.n	80122b6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8012286:	f107 0308 	add.w	r3, r7, #8
 801228a:	461a      	mov	r2, r3
 801228c:	2100      	movs	r1, #0
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f001 f83c 	bl	801330c <xQueueReceiveFromISR>
 8012294:	4603      	mov	r3, r0
 8012296:	2b01      	cmp	r3, #1
 8012298:	d001      	beq.n	801229e <osMutexWait+0x62>
      return osErrorOS;
 801229a:	23ff      	movs	r3, #255	; 0xff
 801229c:	e015      	b.n	80122ca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d011      	beq.n	80122c8 <osMutexWait+0x8c>
 80122a4:	4b0b      	ldr	r3, [pc, #44]	; (80122d4 <osMutexWait+0x98>)
 80122a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122aa:	601a      	str	r2, [r3, #0]
 80122ac:	f3bf 8f4f 	dsb	sy
 80122b0:	f3bf 8f6f 	isb	sy
 80122b4:	e008      	b.n	80122c8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80122b6:	68f9      	ldr	r1, [r7, #12]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 ff13 	bl	80130e4 <xQueueSemaphoreTake>
 80122be:	4603      	mov	r3, r0
 80122c0:	2b01      	cmp	r3, #1
 80122c2:	d001      	beq.n	80122c8 <osMutexWait+0x8c>
    return osErrorOS;
 80122c4:	23ff      	movs	r3, #255	; 0xff
 80122c6:	e000      	b.n	80122ca <osMutexWait+0x8e>
  }
  
  return osOK;
 80122c8:	2300      	movs	r3, #0
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3710      	adds	r7, #16
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
 80122d2:	bf00      	nop
 80122d4:	e000ed04 	.word	0xe000ed04

080122d8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b084      	sub	sp, #16
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80122e0:	2300      	movs	r3, #0
 80122e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80122e4:	2300      	movs	r3, #0
 80122e6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80122e8:	f7ff fefb 	bl	80120e2 <inHandlerMode>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d016      	beq.n	8012320 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80122f2:	f107 0308 	add.w	r3, r7, #8
 80122f6:	4619      	mov	r1, r3
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f000 fd77 	bl	8012dec <xQueueGiveFromISR>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b01      	cmp	r3, #1
 8012302:	d001      	beq.n	8012308 <osMutexRelease+0x30>
      return osErrorOS;
 8012304:	23ff      	movs	r3, #255	; 0xff
 8012306:	e017      	b.n	8012338 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d013      	beq.n	8012336 <osMutexRelease+0x5e>
 801230e:	4b0c      	ldr	r3, [pc, #48]	; (8012340 <osMutexRelease+0x68>)
 8012310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012314:	601a      	str	r2, [r3, #0]
 8012316:	f3bf 8f4f 	dsb	sy
 801231a:	f3bf 8f6f 	isb	sy
 801231e:	e00a      	b.n	8012336 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8012320:	2300      	movs	r3, #0
 8012322:	2200      	movs	r2, #0
 8012324:	2100      	movs	r1, #0
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 fbba 	bl	8012aa0 <xQueueGenericSend>
 801232c:	4603      	mov	r3, r0
 801232e:	2b01      	cmp	r3, #1
 8012330:	d001      	beq.n	8012336 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8012332:	23ff      	movs	r3, #255	; 0xff
 8012334:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8012336:	68fb      	ldr	r3, [r7, #12]
}
 8012338:	4618      	mov	r0, r3
 801233a:	3710      	adds	r7, #16
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}
 8012340:	e000ed04 	.word	0xe000ed04

08012344 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801234e:	2300      	movs	r3, #0
 8012350:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d101      	bne.n	801235c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012358:	2380      	movs	r3, #128	; 0x80
 801235a:	e03a      	b.n	80123d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801235c:	2300      	movs	r3, #0
 801235e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012366:	d103      	bne.n	8012370 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012368:	f04f 33ff 	mov.w	r3, #4294967295
 801236c:	60fb      	str	r3, [r7, #12]
 801236e:	e009      	b.n	8012384 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d006      	beq.n	8012384 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d101      	bne.n	8012384 <osSemaphoreWait+0x40>
      ticks = 1;
 8012380:	2301      	movs	r3, #1
 8012382:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8012384:	f7ff fead 	bl	80120e2 <inHandlerMode>
 8012388:	4603      	mov	r3, r0
 801238a:	2b00      	cmp	r3, #0
 801238c:	d017      	beq.n	80123be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801238e:	f107 0308 	add.w	r3, r7, #8
 8012392:	461a      	mov	r2, r3
 8012394:	2100      	movs	r1, #0
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f000 ffb8 	bl	801330c <xQueueReceiveFromISR>
 801239c:	4603      	mov	r3, r0
 801239e:	2b01      	cmp	r3, #1
 80123a0:	d001      	beq.n	80123a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80123a2:	23ff      	movs	r3, #255	; 0xff
 80123a4:	e015      	b.n	80123d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d011      	beq.n	80123d0 <osSemaphoreWait+0x8c>
 80123ac:	4b0b      	ldr	r3, [pc, #44]	; (80123dc <osSemaphoreWait+0x98>)
 80123ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123b2:	601a      	str	r2, [r3, #0]
 80123b4:	f3bf 8f4f 	dsb	sy
 80123b8:	f3bf 8f6f 	isb	sy
 80123bc:	e008      	b.n	80123d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80123be:	68f9      	ldr	r1, [r7, #12]
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 fe8f 	bl	80130e4 <xQueueSemaphoreTake>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	d001      	beq.n	80123d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80123cc:	23ff      	movs	r3, #255	; 0xff
 80123ce:	e000      	b.n	80123d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80123d0:	2300      	movs	r3, #0
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3710      	adds	r7, #16
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	e000ed04 	.word	0xe000ed04

080123e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80123e8:	2300      	movs	r3, #0
 80123ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80123ec:	2300      	movs	r3, #0
 80123ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80123f0:	f7ff fe77 	bl	80120e2 <inHandlerMode>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d016      	beq.n	8012428 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80123fa:	f107 0308 	add.w	r3, r7, #8
 80123fe:	4619      	mov	r1, r3
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 fcf3 	bl	8012dec <xQueueGiveFromISR>
 8012406:	4603      	mov	r3, r0
 8012408:	2b01      	cmp	r3, #1
 801240a:	d001      	beq.n	8012410 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801240c:	23ff      	movs	r3, #255	; 0xff
 801240e:	e017      	b.n	8012440 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d013      	beq.n	801243e <osSemaphoreRelease+0x5e>
 8012416:	4b0c      	ldr	r3, [pc, #48]	; (8012448 <osSemaphoreRelease+0x68>)
 8012418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801241c:	601a      	str	r2, [r3, #0]
 801241e:	f3bf 8f4f 	dsb	sy
 8012422:	f3bf 8f6f 	isb	sy
 8012426:	e00a      	b.n	801243e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012428:	2300      	movs	r3, #0
 801242a:	2200      	movs	r2, #0
 801242c:	2100      	movs	r1, #0
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f000 fb36 	bl	8012aa0 <xQueueGenericSend>
 8012434:	4603      	mov	r3, r0
 8012436:	2b01      	cmp	r3, #1
 8012438:	d001      	beq.n	801243e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801243a:	23ff      	movs	r3, #255	; 0xff
 801243c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801243e:	68fb      	ldr	r3, [r7, #12]
}
 8012440:	4618      	mov	r0, r3
 8012442:	3710      	adds	r7, #16
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	e000ed04 	.word	0xe000ed04

0801244c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801244c:	b590      	push	{r4, r7, lr}
 801244e:	b085      	sub	sp, #20
 8012450:	af02      	add	r7, sp, #8
 8012452:	6078      	str	r0, [r7, #4]
 8012454:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	689b      	ldr	r3, [r3, #8]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d011      	beq.n	8012482 <osMessageCreate+0x36>
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d00d      	beq.n	8012482 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6818      	ldr	r0, [r3, #0]
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6859      	ldr	r1, [r3, #4]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	689a      	ldr	r2, [r3, #8]
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	2400      	movs	r4, #0
 8012478:	9400      	str	r4, [sp, #0]
 801247a:	f000 f9e1 	bl	8012840 <xQueueGenericCreateStatic>
 801247e:	4603      	mov	r3, r0
 8012480:	e008      	b.n	8012494 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6818      	ldr	r0, [r3, #0]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	4619      	mov	r1, r3
 801248e:	f000 fa59 	bl	8012944 <xQueueGenericCreate>
 8012492:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8012494:	4618      	mov	r0, r3
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	bd90      	pop	{r4, r7, pc}

0801249c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b086      	sub	sp, #24
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80124a8:	2300      	movs	r3, #0
 80124aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d101      	bne.n	80124ba <osMessagePut+0x1e>
    ticks = 1;
 80124b6:	2301      	movs	r3, #1
 80124b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80124ba:	f7ff fe12 	bl	80120e2 <inHandlerMode>
 80124be:	4603      	mov	r3, r0
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d018      	beq.n	80124f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80124c4:	f107 0210 	add.w	r2, r7, #16
 80124c8:	f107 0108 	add.w	r1, r7, #8
 80124cc:	2300      	movs	r3, #0
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f000 fbec 	bl	8012cac <xQueueGenericSendFromISR>
 80124d4:	4603      	mov	r3, r0
 80124d6:	2b01      	cmp	r3, #1
 80124d8:	d001      	beq.n	80124de <osMessagePut+0x42>
      return osErrorOS;
 80124da:	23ff      	movs	r3, #255	; 0xff
 80124dc:	e018      	b.n	8012510 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d014      	beq.n	801250e <osMessagePut+0x72>
 80124e4:	4b0c      	ldr	r3, [pc, #48]	; (8012518 <osMessagePut+0x7c>)
 80124e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124ea:	601a      	str	r2, [r3, #0]
 80124ec:	f3bf 8f4f 	dsb	sy
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	e00b      	b.n	801250e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80124f6:	f107 0108 	add.w	r1, r7, #8
 80124fa:	2300      	movs	r3, #0
 80124fc:	697a      	ldr	r2, [r7, #20]
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f000 face 	bl	8012aa0 <xQueueGenericSend>
 8012504:	4603      	mov	r3, r0
 8012506:	2b01      	cmp	r3, #1
 8012508:	d001      	beq.n	801250e <osMessagePut+0x72>
      return osErrorOS;
 801250a:	23ff      	movs	r3, #255	; 0xff
 801250c:	e000      	b.n	8012510 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801250e:	2300      	movs	r3, #0
}
 8012510:	4618      	mov	r0, r3
 8012512:	3718      	adds	r7, #24
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}
 8012518:	e000ed04 	.word	0xe000ed04

0801251c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801251c:	b590      	push	{r4, r7, lr}
 801251e:	b08b      	sub	sp, #44	; 0x2c
 8012520:	af00      	add	r7, sp, #0
 8012522:	60f8      	str	r0, [r7, #12]
 8012524:	60b9      	str	r1, [r7, #8]
 8012526:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801252c:	2300      	movs	r3, #0
 801252e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d10a      	bne.n	801254c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8012536:	2380      	movs	r3, #128	; 0x80
 8012538:	617b      	str	r3, [r7, #20]
    return event;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	461c      	mov	r4, r3
 801253e:	f107 0314 	add.w	r3, r7, #20
 8012542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801254a:	e054      	b.n	80125f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801254c:	2300      	movs	r3, #0
 801254e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8012550:	2300      	movs	r3, #0
 8012552:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801255a:	d103      	bne.n	8012564 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801255c:	f04f 33ff 	mov.w	r3, #4294967295
 8012560:	627b      	str	r3, [r7, #36]	; 0x24
 8012562:	e009      	b.n	8012578 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d006      	beq.n	8012578 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012570:	2b00      	cmp	r3, #0
 8012572:	d101      	bne.n	8012578 <osMessageGet+0x5c>
      ticks = 1;
 8012574:	2301      	movs	r3, #1
 8012576:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012578:	f7ff fdb3 	bl	80120e2 <inHandlerMode>
 801257c:	4603      	mov	r3, r0
 801257e:	2b00      	cmp	r3, #0
 8012580:	d01c      	beq.n	80125bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8012582:	f107 0220 	add.w	r2, r7, #32
 8012586:	f107 0314 	add.w	r3, r7, #20
 801258a:	3304      	adds	r3, #4
 801258c:	4619      	mov	r1, r3
 801258e:	68b8      	ldr	r0, [r7, #8]
 8012590:	f000 febc 	bl	801330c <xQueueReceiveFromISR>
 8012594:	4603      	mov	r3, r0
 8012596:	2b01      	cmp	r3, #1
 8012598:	d102      	bne.n	80125a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801259a:	2310      	movs	r3, #16
 801259c:	617b      	str	r3, [r7, #20]
 801259e:	e001      	b.n	80125a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80125a0:	2300      	movs	r3, #0
 80125a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80125a4:	6a3b      	ldr	r3, [r7, #32]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d01d      	beq.n	80125e6 <osMessageGet+0xca>
 80125aa:	4b15      	ldr	r3, [pc, #84]	; (8012600 <osMessageGet+0xe4>)
 80125ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125b0:	601a      	str	r2, [r3, #0]
 80125b2:	f3bf 8f4f 	dsb	sy
 80125b6:	f3bf 8f6f 	isb	sy
 80125ba:	e014      	b.n	80125e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80125bc:	f107 0314 	add.w	r3, r7, #20
 80125c0:	3304      	adds	r3, #4
 80125c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125c4:	4619      	mov	r1, r3
 80125c6:	68b8      	ldr	r0, [r7, #8]
 80125c8:	f000 fca6 	bl	8012f18 <xQueueReceive>
 80125cc:	4603      	mov	r3, r0
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d102      	bne.n	80125d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80125d2:	2310      	movs	r3, #16
 80125d4:	617b      	str	r3, [r7, #20]
 80125d6:	e006      	b.n	80125e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d101      	bne.n	80125e2 <osMessageGet+0xc6>
 80125de:	2300      	movs	r3, #0
 80125e0:	e000      	b.n	80125e4 <osMessageGet+0xc8>
 80125e2:	2340      	movs	r3, #64	; 0x40
 80125e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	461c      	mov	r4, r3
 80125ea:	f107 0314 	add.w	r3, r7, #20
 80125ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80125f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80125f6:	68f8      	ldr	r0, [r7, #12]
 80125f8:	372c      	adds	r7, #44	; 0x2c
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd90      	pop	{r4, r7, pc}
 80125fe:	bf00      	nop
 8012600:	e000ed04 	.word	0xe000ed04

08012604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012604:	b480      	push	{r7}
 8012606:	b083      	sub	sp, #12
 8012608:	af00      	add	r7, sp, #0
 801260a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f103 0208 	add.w	r2, r3, #8
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f04f 32ff 	mov.w	r2, #4294967295
 801261c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f103 0208 	add.w	r2, r3, #8
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f103 0208 	add.w	r2, r3, #8
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2200      	movs	r2, #0
 8012636:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012638:	bf00      	nop
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012652:	bf00      	nop
 8012654:	370c      	adds	r7, #12
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr

0801265e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801265e:	b480      	push	{r7}
 8012660:	b085      	sub	sp, #20
 8012662:	af00      	add	r7, sp, #0
 8012664:	6078      	str	r0, [r7, #4]
 8012666:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	68fa      	ldr	r2, [r7, #12]
 8012672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	689a      	ldr	r2, [r3, #8]
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	683a      	ldr	r2, [r7, #0]
 8012682:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	683a      	ldr	r2, [r7, #0]
 8012688:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	1c5a      	adds	r2, r3, #1
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	601a      	str	r2, [r3, #0]
}
 801269a:	bf00      	nop
 801269c:	3714      	adds	r7, #20
 801269e:	46bd      	mov	sp, r7
 80126a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a4:	4770      	bx	lr

080126a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80126a6:	b480      	push	{r7}
 80126a8:	b085      	sub	sp, #20
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
 80126ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126bc:	d103      	bne.n	80126c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	691b      	ldr	r3, [r3, #16]
 80126c2:	60fb      	str	r3, [r7, #12]
 80126c4:	e00c      	b.n	80126e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	3308      	adds	r3, #8
 80126ca:	60fb      	str	r3, [r7, #12]
 80126cc:	e002      	b.n	80126d4 <vListInsert+0x2e>
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	60fb      	str	r3, [r7, #12]
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	68ba      	ldr	r2, [r7, #8]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d2f6      	bcs.n	80126ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	685a      	ldr	r2, [r3, #4]
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	683a      	ldr	r2, [r7, #0]
 80126ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	68fa      	ldr	r2, [r7, #12]
 80126f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	683a      	ldr	r2, [r7, #0]
 80126fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	1c5a      	adds	r2, r3, #1
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	601a      	str	r2, [r3, #0]
}
 801270c:	bf00      	nop
 801270e:	3714      	adds	r7, #20
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr

08012718 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012718:	b480      	push	{r7}
 801271a:	b085      	sub	sp, #20
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	691b      	ldr	r3, [r3, #16]
 8012724:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	687a      	ldr	r2, [r7, #4]
 801272c:	6892      	ldr	r2, [r2, #8]
 801272e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	689b      	ldr	r3, [r3, #8]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	6852      	ldr	r2, [r2, #4]
 8012738:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	687a      	ldr	r2, [r7, #4]
 8012740:	429a      	cmp	r2, r3
 8012742:	d103      	bne.n	801274c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	689a      	ldr	r2, [r3, #8]
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2200      	movs	r2, #0
 8012750:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	1e5a      	subs	r2, r3, #1
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681b      	ldr	r3, [r3, #0]
}
 8012760:	4618      	mov	r0, r3
 8012762:	3714      	adds	r7, #20
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr

0801276c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b084      	sub	sp, #16
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d10c      	bne.n	801279a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012784:	b672      	cpsid	i
 8012786:	f383 8811 	msr	BASEPRI, r3
 801278a:	f3bf 8f6f 	isb	sy
 801278e:	f3bf 8f4f 	dsb	sy
 8012792:	b662      	cpsie	i
 8012794:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012796:	bf00      	nop
 8012798:	e7fe      	b.n	8012798 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801279a:	f002 f8e7 	bl	801496c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127a6:	68f9      	ldr	r1, [r7, #12]
 80127a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80127aa:	fb01 f303 	mul.w	r3, r1, r3
 80127ae:	441a      	add	r2, r3
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	2200      	movs	r2, #0
 80127b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	681a      	ldr	r2, [r3, #0]
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681a      	ldr	r2, [r3, #0]
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127ca:	3b01      	subs	r3, #1
 80127cc:	68f9      	ldr	r1, [r7, #12]
 80127ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80127d0:	fb01 f303 	mul.w	r3, r1, r3
 80127d4:	441a      	add	r2, r3
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	22ff      	movs	r2, #255	; 0xff
 80127de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	22ff      	movs	r2, #255	; 0xff
 80127e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d114      	bne.n	801281a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d01a      	beq.n	801282e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	3310      	adds	r3, #16
 80127fc:	4618      	mov	r0, r3
 80127fe:	f001 fba3 	bl	8013f48 <xTaskRemoveFromEventList>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d012      	beq.n	801282e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012808:	4b0c      	ldr	r3, [pc, #48]	; (801283c <xQueueGenericReset+0xd0>)
 801280a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801280e:	601a      	str	r2, [r3, #0]
 8012810:	f3bf 8f4f 	dsb	sy
 8012814:	f3bf 8f6f 	isb	sy
 8012818:	e009      	b.n	801282e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	3310      	adds	r3, #16
 801281e:	4618      	mov	r0, r3
 8012820:	f7ff fef0 	bl	8012604 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	3324      	adds	r3, #36	; 0x24
 8012828:	4618      	mov	r0, r3
 801282a:	f7ff feeb 	bl	8012604 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801282e:	f002 f8d1 	bl	80149d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012832:	2301      	movs	r3, #1
}
 8012834:	4618      	mov	r0, r3
 8012836:	3710      	adds	r7, #16
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	e000ed04 	.word	0xe000ed04

08012840 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012840:	b580      	push	{r7, lr}
 8012842:	b08e      	sub	sp, #56	; 0x38
 8012844:	af02      	add	r7, sp, #8
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
 801284c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d10c      	bne.n	801286e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8012854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012858:	b672      	cpsid	i
 801285a:	f383 8811 	msr	BASEPRI, r3
 801285e:	f3bf 8f6f 	isb	sy
 8012862:	f3bf 8f4f 	dsb	sy
 8012866:	b662      	cpsie	i
 8012868:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801286a:	bf00      	nop
 801286c:	e7fe      	b.n	801286c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d10c      	bne.n	801288e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8012874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012878:	b672      	cpsid	i
 801287a:	f383 8811 	msr	BASEPRI, r3
 801287e:	f3bf 8f6f 	isb	sy
 8012882:	f3bf 8f4f 	dsb	sy
 8012886:	b662      	cpsie	i
 8012888:	627b      	str	r3, [r7, #36]	; 0x24
}
 801288a:	bf00      	nop
 801288c:	e7fe      	b.n	801288c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d002      	beq.n	801289a <xQueueGenericCreateStatic+0x5a>
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d001      	beq.n	801289e <xQueueGenericCreateStatic+0x5e>
 801289a:	2301      	movs	r3, #1
 801289c:	e000      	b.n	80128a0 <xQueueGenericCreateStatic+0x60>
 801289e:	2300      	movs	r3, #0
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d10c      	bne.n	80128be <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80128a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a8:	b672      	cpsid	i
 80128aa:	f383 8811 	msr	BASEPRI, r3
 80128ae:	f3bf 8f6f 	isb	sy
 80128b2:	f3bf 8f4f 	dsb	sy
 80128b6:	b662      	cpsie	i
 80128b8:	623b      	str	r3, [r7, #32]
}
 80128ba:	bf00      	nop
 80128bc:	e7fe      	b.n	80128bc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d102      	bne.n	80128ca <xQueueGenericCreateStatic+0x8a>
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d101      	bne.n	80128ce <xQueueGenericCreateStatic+0x8e>
 80128ca:	2301      	movs	r3, #1
 80128cc:	e000      	b.n	80128d0 <xQueueGenericCreateStatic+0x90>
 80128ce:	2300      	movs	r3, #0
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d10c      	bne.n	80128ee <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80128d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d8:	b672      	cpsid	i
 80128da:	f383 8811 	msr	BASEPRI, r3
 80128de:	f3bf 8f6f 	isb	sy
 80128e2:	f3bf 8f4f 	dsb	sy
 80128e6:	b662      	cpsie	i
 80128e8:	61fb      	str	r3, [r7, #28]
}
 80128ea:	bf00      	nop
 80128ec:	e7fe      	b.n	80128ec <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80128ee:	2348      	movs	r3, #72	; 0x48
 80128f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	2b48      	cmp	r3, #72	; 0x48
 80128f6:	d00c      	beq.n	8012912 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80128f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128fc:	b672      	cpsid	i
 80128fe:	f383 8811 	msr	BASEPRI, r3
 8012902:	f3bf 8f6f 	isb	sy
 8012906:	f3bf 8f4f 	dsb	sy
 801290a:	b662      	cpsie	i
 801290c:	61bb      	str	r3, [r7, #24]
}
 801290e:	bf00      	nop
 8012910:	e7fe      	b.n	8012910 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012912:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291a:	2b00      	cmp	r3, #0
 801291c:	d00d      	beq.n	801293a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012920:	2201      	movs	r2, #1
 8012922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012926:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292c:	9300      	str	r3, [sp, #0]
 801292e:	4613      	mov	r3, r2
 8012930:	687a      	ldr	r2, [r7, #4]
 8012932:	68b9      	ldr	r1, [r7, #8]
 8012934:	68f8      	ldr	r0, [r7, #12]
 8012936:	f000 f847 	bl	80129c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801293c:	4618      	mov	r0, r3
 801293e:	3730      	adds	r7, #48	; 0x30
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}

08012944 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012944:	b580      	push	{r7, lr}
 8012946:	b08a      	sub	sp, #40	; 0x28
 8012948:	af02      	add	r7, sp, #8
 801294a:	60f8      	str	r0, [r7, #12]
 801294c:	60b9      	str	r1, [r7, #8]
 801294e:	4613      	mov	r3, r2
 8012950:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d10c      	bne.n	8012972 <xQueueGenericCreate+0x2e>
	__asm volatile
 8012958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801295c:	b672      	cpsid	i
 801295e:	f383 8811 	msr	BASEPRI, r3
 8012962:	f3bf 8f6f 	isb	sy
 8012966:	f3bf 8f4f 	dsb	sy
 801296a:	b662      	cpsie	i
 801296c:	613b      	str	r3, [r7, #16]
}
 801296e:	bf00      	nop
 8012970:	e7fe      	b.n	8012970 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d102      	bne.n	801297e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012978:	2300      	movs	r3, #0
 801297a:	61fb      	str	r3, [r7, #28]
 801297c:	e004      	b.n	8012988 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	68ba      	ldr	r2, [r7, #8]
 8012982:	fb02 f303 	mul.w	r3, r2, r3
 8012986:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	3348      	adds	r3, #72	; 0x48
 801298c:	4618      	mov	r0, r3
 801298e:	f002 f919 	bl	8014bc4 <pvPortMalloc>
 8012992:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012994:	69bb      	ldr	r3, [r7, #24]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d011      	beq.n	80129be <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	3348      	adds	r3, #72	; 0x48
 80129a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80129a4:	69bb      	ldr	r3, [r7, #24]
 80129a6:	2200      	movs	r2, #0
 80129a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80129ac:	79fa      	ldrb	r2, [r7, #7]
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	9300      	str	r3, [sp, #0]
 80129b2:	4613      	mov	r3, r2
 80129b4:	697a      	ldr	r2, [r7, #20]
 80129b6:	68b9      	ldr	r1, [r7, #8]
 80129b8:	68f8      	ldr	r0, [r7, #12]
 80129ba:	f000 f805 	bl	80129c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80129be:	69bb      	ldr	r3, [r7, #24]
	}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3720      	adds	r7, #32
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}

080129c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	60f8      	str	r0, [r7, #12]
 80129d0:	60b9      	str	r1, [r7, #8]
 80129d2:	607a      	str	r2, [r7, #4]
 80129d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d103      	bne.n	80129e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80129dc:	69bb      	ldr	r3, [r7, #24]
 80129de:	69ba      	ldr	r2, [r7, #24]
 80129e0:	601a      	str	r2, [r3, #0]
 80129e2:	e002      	b.n	80129ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	687a      	ldr	r2, [r7, #4]
 80129e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	68fa      	ldr	r2, [r7, #12]
 80129ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80129f0:	69bb      	ldr	r3, [r7, #24]
 80129f2:	68ba      	ldr	r2, [r7, #8]
 80129f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80129f6:	2101      	movs	r1, #1
 80129f8:	69b8      	ldr	r0, [r7, #24]
 80129fa:	f7ff feb7 	bl	801276c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80129fe:	bf00      	nop
 8012a00:	3710      	adds	r7, #16
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b082      	sub	sp, #8
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d00e      	beq.n	8012a32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2200      	movs	r2, #0
 8012a18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012a26:	2300      	movs	r3, #0
 8012a28:	2200      	movs	r2, #0
 8012a2a:	2100      	movs	r1, #0
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f000 f837 	bl	8012aa0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012a32:	bf00      	nop
 8012a34:	3708      	adds	r7, #8
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}

08012a3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b086      	sub	sp, #24
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	4603      	mov	r3, r0
 8012a42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012a44:	2301      	movs	r3, #1
 8012a46:	617b      	str	r3, [r7, #20]
 8012a48:	2300      	movs	r3, #0
 8012a4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012a4c:	79fb      	ldrb	r3, [r7, #7]
 8012a4e:	461a      	mov	r2, r3
 8012a50:	6939      	ldr	r1, [r7, #16]
 8012a52:	6978      	ldr	r0, [r7, #20]
 8012a54:	f7ff ff76 	bl	8012944 <xQueueGenericCreate>
 8012a58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012a5a:	68f8      	ldr	r0, [r7, #12]
 8012a5c:	f7ff ffd3 	bl	8012a06 <prvInitialiseMutex>

		return xNewQueue;
 8012a60:	68fb      	ldr	r3, [r7, #12]
	}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3718      	adds	r7, #24
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}

08012a6a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b088      	sub	sp, #32
 8012a6e:	af02      	add	r7, sp, #8
 8012a70:	4603      	mov	r3, r0
 8012a72:	6039      	str	r1, [r7, #0]
 8012a74:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012a76:	2301      	movs	r3, #1
 8012a78:	617b      	str	r3, [r7, #20]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8012a7e:	79fb      	ldrb	r3, [r7, #7]
 8012a80:	9300      	str	r3, [sp, #0]
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	2200      	movs	r2, #0
 8012a86:	6939      	ldr	r1, [r7, #16]
 8012a88:	6978      	ldr	r0, [r7, #20]
 8012a8a:	f7ff fed9 	bl	8012840 <xQueueGenericCreateStatic>
 8012a8e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012a90:	68f8      	ldr	r0, [r7, #12]
 8012a92:	f7ff ffb8 	bl	8012a06 <prvInitialiseMutex>

		return xNewQueue;
 8012a96:	68fb      	ldr	r3, [r7, #12]
	}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3718      	adds	r7, #24
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}

08012aa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b08e      	sub	sp, #56	; 0x38
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	60f8      	str	r0, [r7, #12]
 8012aa8:	60b9      	str	r1, [r7, #8]
 8012aaa:	607a      	str	r2, [r7, #4]
 8012aac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d10c      	bne.n	8012ad6 <xQueueGenericSend+0x36>
	__asm volatile
 8012abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac0:	b672      	cpsid	i
 8012ac2:	f383 8811 	msr	BASEPRI, r3
 8012ac6:	f3bf 8f6f 	isb	sy
 8012aca:	f3bf 8f4f 	dsb	sy
 8012ace:	b662      	cpsie	i
 8012ad0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012ad2:	bf00      	nop
 8012ad4:	e7fe      	b.n	8012ad4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d103      	bne.n	8012ae4 <xQueueGenericSend+0x44>
 8012adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d101      	bne.n	8012ae8 <xQueueGenericSend+0x48>
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	e000      	b.n	8012aea <xQueueGenericSend+0x4a>
 8012ae8:	2300      	movs	r3, #0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d10c      	bne.n	8012b08 <xQueueGenericSend+0x68>
	__asm volatile
 8012aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af2:	b672      	cpsid	i
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	b662      	cpsie	i
 8012b02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012b04:	bf00      	nop
 8012b06:	e7fe      	b.n	8012b06 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	2b02      	cmp	r3, #2
 8012b0c:	d103      	bne.n	8012b16 <xQueueGenericSend+0x76>
 8012b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b12:	2b01      	cmp	r3, #1
 8012b14:	d101      	bne.n	8012b1a <xQueueGenericSend+0x7a>
 8012b16:	2301      	movs	r3, #1
 8012b18:	e000      	b.n	8012b1c <xQueueGenericSend+0x7c>
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d10c      	bne.n	8012b3a <xQueueGenericSend+0x9a>
	__asm volatile
 8012b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b24:	b672      	cpsid	i
 8012b26:	f383 8811 	msr	BASEPRI, r3
 8012b2a:	f3bf 8f6f 	isb	sy
 8012b2e:	f3bf 8f4f 	dsb	sy
 8012b32:	b662      	cpsie	i
 8012b34:	623b      	str	r3, [r7, #32]
}
 8012b36:	bf00      	nop
 8012b38:	e7fe      	b.n	8012b38 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012b3a:	f001 fbcb 	bl	80142d4 <xTaskGetSchedulerState>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d102      	bne.n	8012b4a <xQueueGenericSend+0xaa>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d101      	bne.n	8012b4e <xQueueGenericSend+0xae>
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	e000      	b.n	8012b50 <xQueueGenericSend+0xb0>
 8012b4e:	2300      	movs	r3, #0
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d10c      	bne.n	8012b6e <xQueueGenericSend+0xce>
	__asm volatile
 8012b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b58:	b672      	cpsid	i
 8012b5a:	f383 8811 	msr	BASEPRI, r3
 8012b5e:	f3bf 8f6f 	isb	sy
 8012b62:	f3bf 8f4f 	dsb	sy
 8012b66:	b662      	cpsie	i
 8012b68:	61fb      	str	r3, [r7, #28]
}
 8012b6a:	bf00      	nop
 8012b6c:	e7fe      	b.n	8012b6c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b6e:	f001 fefd 	bl	801496c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d302      	bcc.n	8012b84 <xQueueGenericSend+0xe4>
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	2b02      	cmp	r3, #2
 8012b82:	d129      	bne.n	8012bd8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012b84:	683a      	ldr	r2, [r7, #0]
 8012b86:	68b9      	ldr	r1, [r7, #8]
 8012b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b8a:	f000 fc5d 	bl	8013448 <prvCopyDataToQueue>
 8012b8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d010      	beq.n	8012bba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b9a:	3324      	adds	r3, #36	; 0x24
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f001 f9d3 	bl	8013f48 <xTaskRemoveFromEventList>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d013      	beq.n	8012bd0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012ba8:	4b3f      	ldr	r3, [pc, #252]	; (8012ca8 <xQueueGenericSend+0x208>)
 8012baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bae:	601a      	str	r2, [r3, #0]
 8012bb0:	f3bf 8f4f 	dsb	sy
 8012bb4:	f3bf 8f6f 	isb	sy
 8012bb8:	e00a      	b.n	8012bd0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d007      	beq.n	8012bd0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012bc0:	4b39      	ldr	r3, [pc, #228]	; (8012ca8 <xQueueGenericSend+0x208>)
 8012bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	f3bf 8f4f 	dsb	sy
 8012bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012bd0:	f001 ff00 	bl	80149d4 <vPortExitCritical>
				return pdPASS;
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	e063      	b.n	8012ca0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d103      	bne.n	8012be6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012bde:	f001 fef9 	bl	80149d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012be2:	2300      	movs	r3, #0
 8012be4:	e05c      	b.n	8012ca0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d106      	bne.n	8012bfa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012bec:	f107 0314 	add.w	r3, r7, #20
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f001 fa0d 	bl	8014010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012bfa:	f001 feeb 	bl	80149d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012bfe:	f000 ff73 	bl	8013ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012c02:	f001 feb3 	bl	801496c <vPortEnterCritical>
 8012c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c0c:	b25b      	sxtb	r3, r3
 8012c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c12:	d103      	bne.n	8012c1c <xQueueGenericSend+0x17c>
 8012c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c16:	2200      	movs	r2, #0
 8012c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012c22:	b25b      	sxtb	r3, r3
 8012c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c28:	d103      	bne.n	8012c32 <xQueueGenericSend+0x192>
 8012c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012c32:	f001 fecf 	bl	80149d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012c36:	1d3a      	adds	r2, r7, #4
 8012c38:	f107 0314 	add.w	r3, r7, #20
 8012c3c:	4611      	mov	r1, r2
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f001 f9fc 	bl	801403c <xTaskCheckForTimeOut>
 8012c44:	4603      	mov	r3, r0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d124      	bne.n	8012c94 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c4c:	f000 fcf4 	bl	8013638 <prvIsQueueFull>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d018      	beq.n	8012c88 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c58:	3310      	adds	r3, #16
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	4611      	mov	r1, r2
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f001 f94c 	bl	8013efc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c66:	f000 fc7f 	bl	8013568 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012c6a:	f000 ff4b 	bl	8013b04 <xTaskResumeAll>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	f47f af7c 	bne.w	8012b6e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8012c76:	4b0c      	ldr	r3, [pc, #48]	; (8012ca8 <xQueueGenericSend+0x208>)
 8012c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c7c:	601a      	str	r2, [r3, #0]
 8012c7e:	f3bf 8f4f 	dsb	sy
 8012c82:	f3bf 8f6f 	isb	sy
 8012c86:	e772      	b.n	8012b6e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c8a:	f000 fc6d 	bl	8013568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c8e:	f000 ff39 	bl	8013b04 <xTaskResumeAll>
 8012c92:	e76c      	b.n	8012b6e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c96:	f000 fc67 	bl	8013568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c9a:	f000 ff33 	bl	8013b04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012c9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3738      	adds	r7, #56	; 0x38
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	e000ed04 	.word	0xe000ed04

08012cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b08e      	sub	sp, #56	; 0x38
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	60f8      	str	r0, [r7, #12]
 8012cb4:	60b9      	str	r1, [r7, #8]
 8012cb6:	607a      	str	r2, [r7, #4]
 8012cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10c      	bne.n	8012cde <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8012cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc8:	b672      	cpsid	i
 8012cca:	f383 8811 	msr	BASEPRI, r3
 8012cce:	f3bf 8f6f 	isb	sy
 8012cd2:	f3bf 8f4f 	dsb	sy
 8012cd6:	b662      	cpsie	i
 8012cd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012cda:	bf00      	nop
 8012cdc:	e7fe      	b.n	8012cdc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d103      	bne.n	8012cec <xQueueGenericSendFromISR+0x40>
 8012ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d101      	bne.n	8012cf0 <xQueueGenericSendFromISR+0x44>
 8012cec:	2301      	movs	r3, #1
 8012cee:	e000      	b.n	8012cf2 <xQueueGenericSendFromISR+0x46>
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d10c      	bne.n	8012d10 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8012cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cfa:	b672      	cpsid	i
 8012cfc:	f383 8811 	msr	BASEPRI, r3
 8012d00:	f3bf 8f6f 	isb	sy
 8012d04:	f3bf 8f4f 	dsb	sy
 8012d08:	b662      	cpsie	i
 8012d0a:	623b      	str	r3, [r7, #32]
}
 8012d0c:	bf00      	nop
 8012d0e:	e7fe      	b.n	8012d0e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	2b02      	cmp	r3, #2
 8012d14:	d103      	bne.n	8012d1e <xQueueGenericSendFromISR+0x72>
 8012d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d1a:	2b01      	cmp	r3, #1
 8012d1c:	d101      	bne.n	8012d22 <xQueueGenericSendFromISR+0x76>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e000      	b.n	8012d24 <xQueueGenericSendFromISR+0x78>
 8012d22:	2300      	movs	r3, #0
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d10c      	bne.n	8012d42 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8012d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2c:	b672      	cpsid	i
 8012d2e:	f383 8811 	msr	BASEPRI, r3
 8012d32:	f3bf 8f6f 	isb	sy
 8012d36:	f3bf 8f4f 	dsb	sy
 8012d3a:	b662      	cpsie	i
 8012d3c:	61fb      	str	r3, [r7, #28]
}
 8012d3e:	bf00      	nop
 8012d40:	e7fe      	b.n	8012d40 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d42:	f001 fefb 	bl	8014b3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012d46:	f3ef 8211 	mrs	r2, BASEPRI
 8012d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d4e:	b672      	cpsid	i
 8012d50:	f383 8811 	msr	BASEPRI, r3
 8012d54:	f3bf 8f6f 	isb	sy
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	b662      	cpsie	i
 8012d5e:	61ba      	str	r2, [r7, #24]
 8012d60:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012d62:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d302      	bcc.n	8012d78 <xQueueGenericSendFromISR+0xcc>
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	2b02      	cmp	r3, #2
 8012d76:	d12c      	bne.n	8012dd2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012d82:	683a      	ldr	r2, [r7, #0]
 8012d84:	68b9      	ldr	r1, [r7, #8]
 8012d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d88:	f000 fb5e 	bl	8013448 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012d8c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d94:	d112      	bne.n	8012dbc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d016      	beq.n	8012dcc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da0:	3324      	adds	r3, #36	; 0x24
 8012da2:	4618      	mov	r0, r3
 8012da4:	f001 f8d0 	bl	8013f48 <xTaskRemoveFromEventList>
 8012da8:	4603      	mov	r3, r0
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d00e      	beq.n	8012dcc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d00b      	beq.n	8012dcc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2201      	movs	r2, #1
 8012db8:	601a      	str	r2, [r3, #0]
 8012dba:	e007      	b.n	8012dcc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	b2db      	uxtb	r3, r3
 8012dc4:	b25a      	sxtb	r2, r3
 8012dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012dcc:	2301      	movs	r3, #1
 8012dce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012dd0:	e001      	b.n	8012dd6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8012dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012de0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012de4:	4618      	mov	r0, r3
 8012de6:	3738      	adds	r7, #56	; 0x38
 8012de8:	46bd      	mov	sp, r7
 8012dea:	bd80      	pop	{r7, pc}

08012dec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b08e      	sub	sp, #56	; 0x38
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
 8012df4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d10c      	bne.n	8012e1a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8012e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e04:	b672      	cpsid	i
 8012e06:	f383 8811 	msr	BASEPRI, r3
 8012e0a:	f3bf 8f6f 	isb	sy
 8012e0e:	f3bf 8f4f 	dsb	sy
 8012e12:	b662      	cpsie	i
 8012e14:	623b      	str	r3, [r7, #32]
}
 8012e16:	bf00      	nop
 8012e18:	e7fe      	b.n	8012e18 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d00c      	beq.n	8012e3c <xQueueGiveFromISR+0x50>
	__asm volatile
 8012e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e26:	b672      	cpsid	i
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	b662      	cpsie	i
 8012e36:	61fb      	str	r3, [r7, #28]
}
 8012e38:	bf00      	nop
 8012e3a:	e7fe      	b.n	8012e3a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d103      	bne.n	8012e4c <xQueueGiveFromISR+0x60>
 8012e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e46:	689b      	ldr	r3, [r3, #8]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d101      	bne.n	8012e50 <xQueueGiveFromISR+0x64>
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	e000      	b.n	8012e52 <xQueueGiveFromISR+0x66>
 8012e50:	2300      	movs	r3, #0
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d10c      	bne.n	8012e70 <xQueueGiveFromISR+0x84>
	__asm volatile
 8012e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e5a:	b672      	cpsid	i
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	b662      	cpsie	i
 8012e6a:	61bb      	str	r3, [r7, #24]
}
 8012e6c:	bf00      	nop
 8012e6e:	e7fe      	b.n	8012e6e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012e70:	f001 fe64 	bl	8014b3c <vPortValidateInterruptPriority>
	__asm volatile
 8012e74:	f3ef 8211 	mrs	r2, BASEPRI
 8012e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e7c:	b672      	cpsid	i
 8012e7e:	f383 8811 	msr	BASEPRI, r3
 8012e82:	f3bf 8f6f 	isb	sy
 8012e86:	f3bf 8f4f 	dsb	sy
 8012e8a:	b662      	cpsie	i
 8012e8c:	617a      	str	r2, [r7, #20]
 8012e8e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012e90:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012e92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e98:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d22b      	bcs.n	8012efc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb0:	1c5a      	adds	r2, r3, #1
 8012eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012eb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ebe:	d112      	bne.n	8012ee6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d016      	beq.n	8012ef6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eca:	3324      	adds	r3, #36	; 0x24
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f001 f83b 	bl	8013f48 <xTaskRemoveFromEventList>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d00e      	beq.n	8012ef6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d00b      	beq.n	8012ef6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	601a      	str	r2, [r3, #0]
 8012ee4:	e007      	b.n	8012ef6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012eea:	3301      	adds	r3, #1
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	b25a      	sxtb	r2, r3
 8012ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8012efa:	e001      	b.n	8012f00 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012efc:	2300      	movs	r3, #0
 8012efe:	637b      	str	r3, [r7, #52]	; 0x34
 8012f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f02:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	f383 8811 	msr	BASEPRI, r3
}
 8012f0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3738      	adds	r7, #56	; 0x38
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
	...

08012f18 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b08c      	sub	sp, #48	; 0x30
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012f24:	2300      	movs	r3, #0
 8012f26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d10c      	bne.n	8012f4c <xQueueReceive+0x34>
	__asm volatile
 8012f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f36:	b672      	cpsid	i
 8012f38:	f383 8811 	msr	BASEPRI, r3
 8012f3c:	f3bf 8f6f 	isb	sy
 8012f40:	f3bf 8f4f 	dsb	sy
 8012f44:	b662      	cpsie	i
 8012f46:	623b      	str	r3, [r7, #32]
}
 8012f48:	bf00      	nop
 8012f4a:	e7fe      	b.n	8012f4a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d103      	bne.n	8012f5a <xQueueReceive+0x42>
 8012f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d101      	bne.n	8012f5e <xQueueReceive+0x46>
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	e000      	b.n	8012f60 <xQueueReceive+0x48>
 8012f5e:	2300      	movs	r3, #0
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d10c      	bne.n	8012f7e <xQueueReceive+0x66>
	__asm volatile
 8012f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f68:	b672      	cpsid	i
 8012f6a:	f383 8811 	msr	BASEPRI, r3
 8012f6e:	f3bf 8f6f 	isb	sy
 8012f72:	f3bf 8f4f 	dsb	sy
 8012f76:	b662      	cpsie	i
 8012f78:	61fb      	str	r3, [r7, #28]
}
 8012f7a:	bf00      	nop
 8012f7c:	e7fe      	b.n	8012f7c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f7e:	f001 f9a9 	bl	80142d4 <xTaskGetSchedulerState>
 8012f82:	4603      	mov	r3, r0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d102      	bne.n	8012f8e <xQueueReceive+0x76>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d101      	bne.n	8012f92 <xQueueReceive+0x7a>
 8012f8e:	2301      	movs	r3, #1
 8012f90:	e000      	b.n	8012f94 <xQueueReceive+0x7c>
 8012f92:	2300      	movs	r3, #0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d10c      	bne.n	8012fb2 <xQueueReceive+0x9a>
	__asm volatile
 8012f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f9c:	b672      	cpsid	i
 8012f9e:	f383 8811 	msr	BASEPRI, r3
 8012fa2:	f3bf 8f6f 	isb	sy
 8012fa6:	f3bf 8f4f 	dsb	sy
 8012faa:	b662      	cpsie	i
 8012fac:	61bb      	str	r3, [r7, #24]
}
 8012fae:	bf00      	nop
 8012fb0:	e7fe      	b.n	8012fb0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012fb2:	f001 fcdb 	bl	801496c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d01f      	beq.n	8013002 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012fc2:	68b9      	ldr	r1, [r7, #8]
 8012fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012fc6:	f000 faa9 	bl	801351c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fcc:	1e5a      	subs	r2, r3, #1
 8012fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd4:	691b      	ldr	r3, [r3, #16]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d00f      	beq.n	8012ffa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fdc:	3310      	adds	r3, #16
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f000 ffb2 	bl	8013f48 <xTaskRemoveFromEventList>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d007      	beq.n	8012ffa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012fea:	4b3d      	ldr	r3, [pc, #244]	; (80130e0 <xQueueReceive+0x1c8>)
 8012fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ff0:	601a      	str	r2, [r3, #0]
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012ffa:	f001 fceb 	bl	80149d4 <vPortExitCritical>
				return pdPASS;
 8012ffe:	2301      	movs	r3, #1
 8013000:	e069      	b.n	80130d6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d103      	bne.n	8013010 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013008:	f001 fce4 	bl	80149d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801300c:	2300      	movs	r3, #0
 801300e:	e062      	b.n	80130d6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013016:	f107 0310 	add.w	r3, r7, #16
 801301a:	4618      	mov	r0, r3
 801301c:	f000 fff8 	bl	8014010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013020:	2301      	movs	r3, #1
 8013022:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013024:	f001 fcd6 	bl	80149d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013028:	f000 fd5e 	bl	8013ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801302c:	f001 fc9e 	bl	801496c <vPortEnterCritical>
 8013030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013036:	b25b      	sxtb	r3, r3
 8013038:	f1b3 3fff 	cmp.w	r3, #4294967295
 801303c:	d103      	bne.n	8013046 <xQueueReceive+0x12e>
 801303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013040:	2200      	movs	r2, #0
 8013042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801304c:	b25b      	sxtb	r3, r3
 801304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013052:	d103      	bne.n	801305c <xQueueReceive+0x144>
 8013054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013056:	2200      	movs	r2, #0
 8013058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801305c:	f001 fcba 	bl	80149d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013060:	1d3a      	adds	r2, r7, #4
 8013062:	f107 0310 	add.w	r3, r7, #16
 8013066:	4611      	mov	r1, r2
 8013068:	4618      	mov	r0, r3
 801306a:	f000 ffe7 	bl	801403c <xTaskCheckForTimeOut>
 801306e:	4603      	mov	r3, r0
 8013070:	2b00      	cmp	r3, #0
 8013072:	d123      	bne.n	80130bc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013076:	f000 fac9 	bl	801360c <prvIsQueueEmpty>
 801307a:	4603      	mov	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d017      	beq.n	80130b0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013082:	3324      	adds	r3, #36	; 0x24
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	4611      	mov	r1, r2
 8013088:	4618      	mov	r0, r3
 801308a:	f000 ff37 	bl	8013efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801308e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013090:	f000 fa6a 	bl	8013568 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013094:	f000 fd36 	bl	8013b04 <xTaskResumeAll>
 8013098:	4603      	mov	r3, r0
 801309a:	2b00      	cmp	r3, #0
 801309c:	d189      	bne.n	8012fb2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801309e:	4b10      	ldr	r3, [pc, #64]	; (80130e0 <xQueueReceive+0x1c8>)
 80130a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130a4:	601a      	str	r2, [r3, #0]
 80130a6:	f3bf 8f4f 	dsb	sy
 80130aa:	f3bf 8f6f 	isb	sy
 80130ae:	e780      	b.n	8012fb2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80130b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130b2:	f000 fa59 	bl	8013568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130b6:	f000 fd25 	bl	8013b04 <xTaskResumeAll>
 80130ba:	e77a      	b.n	8012fb2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80130bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130be:	f000 fa53 	bl	8013568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130c2:	f000 fd1f 	bl	8013b04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130c8:	f000 faa0 	bl	801360c <prvIsQueueEmpty>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	f43f af6f 	beq.w	8012fb2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80130d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3730      	adds	r7, #48	; 0x30
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	e000ed04 	.word	0xe000ed04

080130e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b08e      	sub	sp, #56	; 0x38
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80130ee:	2300      	movs	r3, #0
 80130f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80130f6:	2300      	movs	r3, #0
 80130f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80130fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d10c      	bne.n	801311a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8013100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013104:	b672      	cpsid	i
 8013106:	f383 8811 	msr	BASEPRI, r3
 801310a:	f3bf 8f6f 	isb	sy
 801310e:	f3bf 8f4f 	dsb	sy
 8013112:	b662      	cpsie	i
 8013114:	623b      	str	r3, [r7, #32]
}
 8013116:	bf00      	nop
 8013118:	e7fe      	b.n	8013118 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801311e:	2b00      	cmp	r3, #0
 8013120:	d00c      	beq.n	801313c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8013122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013126:	b672      	cpsid	i
 8013128:	f383 8811 	msr	BASEPRI, r3
 801312c:	f3bf 8f6f 	isb	sy
 8013130:	f3bf 8f4f 	dsb	sy
 8013134:	b662      	cpsie	i
 8013136:	61fb      	str	r3, [r7, #28]
}
 8013138:	bf00      	nop
 801313a:	e7fe      	b.n	801313a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801313c:	f001 f8ca 	bl	80142d4 <xTaskGetSchedulerState>
 8013140:	4603      	mov	r3, r0
 8013142:	2b00      	cmp	r3, #0
 8013144:	d102      	bne.n	801314c <xQueueSemaphoreTake+0x68>
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d101      	bne.n	8013150 <xQueueSemaphoreTake+0x6c>
 801314c:	2301      	movs	r3, #1
 801314e:	e000      	b.n	8013152 <xQueueSemaphoreTake+0x6e>
 8013150:	2300      	movs	r3, #0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d10c      	bne.n	8013170 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8013156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315a:	b672      	cpsid	i
 801315c:	f383 8811 	msr	BASEPRI, r3
 8013160:	f3bf 8f6f 	isb	sy
 8013164:	f3bf 8f4f 	dsb	sy
 8013168:	b662      	cpsie	i
 801316a:	61bb      	str	r3, [r7, #24]
}
 801316c:	bf00      	nop
 801316e:	e7fe      	b.n	801316e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013170:	f001 fbfc 	bl	801496c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013178:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801317a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317c:	2b00      	cmp	r3, #0
 801317e:	d024      	beq.n	80131ca <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8013180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013182:	1e5a      	subs	r2, r3, #1
 8013184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013186:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d104      	bne.n	801319a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013190:	f001 fa66 	bl	8014660 <pvTaskIncrementMutexHeldCount>
 8013194:	4602      	mov	r2, r0
 8013196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013198:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319c:	691b      	ldr	r3, [r3, #16]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00f      	beq.n	80131c2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131a4:	3310      	adds	r3, #16
 80131a6:	4618      	mov	r0, r3
 80131a8:	f000 fece 	bl	8013f48 <xTaskRemoveFromEventList>
 80131ac:	4603      	mov	r3, r0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d007      	beq.n	80131c2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80131b2:	4b55      	ldr	r3, [pc, #340]	; (8013308 <xQueueSemaphoreTake+0x224>)
 80131b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131b8:	601a      	str	r2, [r3, #0]
 80131ba:	f3bf 8f4f 	dsb	sy
 80131be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80131c2:	f001 fc07 	bl	80149d4 <vPortExitCritical>
				return pdPASS;
 80131c6:	2301      	movs	r3, #1
 80131c8:	e099      	b.n	80132fe <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d113      	bne.n	80131f8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80131d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d00c      	beq.n	80131f0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80131d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131da:	b672      	cpsid	i
 80131dc:	f383 8811 	msr	BASEPRI, r3
 80131e0:	f3bf 8f6f 	isb	sy
 80131e4:	f3bf 8f4f 	dsb	sy
 80131e8:	b662      	cpsie	i
 80131ea:	617b      	str	r3, [r7, #20]
}
 80131ec:	bf00      	nop
 80131ee:	e7fe      	b.n	80131ee <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80131f0:	f001 fbf0 	bl	80149d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80131f4:	2300      	movs	r3, #0
 80131f6:	e082      	b.n	80132fe <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80131f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d106      	bne.n	801320c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80131fe:	f107 030c 	add.w	r3, r7, #12
 8013202:	4618      	mov	r0, r3
 8013204:	f000 ff04 	bl	8014010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013208:	2301      	movs	r3, #1
 801320a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801320c:	f001 fbe2 	bl	80149d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013210:	f000 fc6a 	bl	8013ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013214:	f001 fbaa 	bl	801496c <vPortEnterCritical>
 8013218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801321e:	b25b      	sxtb	r3, r3
 8013220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013224:	d103      	bne.n	801322e <xQueueSemaphoreTake+0x14a>
 8013226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013228:	2200      	movs	r2, #0
 801322a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013234:	b25b      	sxtb	r3, r3
 8013236:	f1b3 3fff 	cmp.w	r3, #4294967295
 801323a:	d103      	bne.n	8013244 <xQueueSemaphoreTake+0x160>
 801323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801323e:	2200      	movs	r2, #0
 8013240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013244:	f001 fbc6 	bl	80149d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013248:	463a      	mov	r2, r7
 801324a:	f107 030c 	add.w	r3, r7, #12
 801324e:	4611      	mov	r1, r2
 8013250:	4618      	mov	r0, r3
 8013252:	f000 fef3 	bl	801403c <xTaskCheckForTimeOut>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d132      	bne.n	80132c2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801325c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801325e:	f000 f9d5 	bl	801360c <prvIsQueueEmpty>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d026      	beq.n	80132b6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d109      	bne.n	8013284 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8013270:	f001 fb7c 	bl	801496c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013276:	689b      	ldr	r3, [r3, #8]
 8013278:	4618      	mov	r0, r3
 801327a:	f001 f849 	bl	8014310 <xTaskPriorityInherit>
 801327e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8013280:	f001 fba8 	bl	80149d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013286:	3324      	adds	r3, #36	; 0x24
 8013288:	683a      	ldr	r2, [r7, #0]
 801328a:	4611      	mov	r1, r2
 801328c:	4618      	mov	r0, r3
 801328e:	f000 fe35 	bl	8013efc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013292:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013294:	f000 f968 	bl	8013568 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013298:	f000 fc34 	bl	8013b04 <xTaskResumeAll>
 801329c:	4603      	mov	r3, r0
 801329e:	2b00      	cmp	r3, #0
 80132a0:	f47f af66 	bne.w	8013170 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80132a4:	4b18      	ldr	r3, [pc, #96]	; (8013308 <xQueueSemaphoreTake+0x224>)
 80132a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132aa:	601a      	str	r2, [r3, #0]
 80132ac:	f3bf 8f4f 	dsb	sy
 80132b0:	f3bf 8f6f 	isb	sy
 80132b4:	e75c      	b.n	8013170 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80132b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132b8:	f000 f956 	bl	8013568 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132bc:	f000 fc22 	bl	8013b04 <xTaskResumeAll>
 80132c0:	e756      	b.n	8013170 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80132c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132c4:	f000 f950 	bl	8013568 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80132c8:	f000 fc1c 	bl	8013b04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132ce:	f000 f99d 	bl	801360c <prvIsQueueEmpty>
 80132d2:	4603      	mov	r3, r0
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	f43f af4b 	beq.w	8013170 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80132da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d00d      	beq.n	80132fc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80132e0:	f001 fb44 	bl	801496c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80132e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132e6:	f000 f897 	bl	8013418 <prvGetDisinheritPriorityAfterTimeout>
 80132ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80132ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ee:	689b      	ldr	r3, [r3, #8]
 80132f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132f2:	4618      	mov	r0, r3
 80132f4:	f001 f916 	bl	8014524 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80132f8:	f001 fb6c 	bl	80149d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80132fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3738      	adds	r7, #56	; 0x38
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	e000ed04 	.word	0xe000ed04

0801330c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b08e      	sub	sp, #56	; 0x38
 8013310:	af00      	add	r7, sp, #0
 8013312:	60f8      	str	r0, [r7, #12]
 8013314:	60b9      	str	r1, [r7, #8]
 8013316:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801331e:	2b00      	cmp	r3, #0
 8013320:	d10c      	bne.n	801333c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8013322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013326:	b672      	cpsid	i
 8013328:	f383 8811 	msr	BASEPRI, r3
 801332c:	f3bf 8f6f 	isb	sy
 8013330:	f3bf 8f4f 	dsb	sy
 8013334:	b662      	cpsie	i
 8013336:	623b      	str	r3, [r7, #32]
}
 8013338:	bf00      	nop
 801333a:	e7fe      	b.n	801333a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d103      	bne.n	801334a <xQueueReceiveFromISR+0x3e>
 8013342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013346:	2b00      	cmp	r3, #0
 8013348:	d101      	bne.n	801334e <xQueueReceiveFromISR+0x42>
 801334a:	2301      	movs	r3, #1
 801334c:	e000      	b.n	8013350 <xQueueReceiveFromISR+0x44>
 801334e:	2300      	movs	r3, #0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d10c      	bne.n	801336e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8013354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013358:	b672      	cpsid	i
 801335a:	f383 8811 	msr	BASEPRI, r3
 801335e:	f3bf 8f6f 	isb	sy
 8013362:	f3bf 8f4f 	dsb	sy
 8013366:	b662      	cpsie	i
 8013368:	61fb      	str	r3, [r7, #28]
}
 801336a:	bf00      	nop
 801336c:	e7fe      	b.n	801336c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801336e:	f001 fbe5 	bl	8014b3c <vPortValidateInterruptPriority>
	__asm volatile
 8013372:	f3ef 8211 	mrs	r2, BASEPRI
 8013376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801337a:	b672      	cpsid	i
 801337c:	f383 8811 	msr	BASEPRI, r3
 8013380:	f3bf 8f6f 	isb	sy
 8013384:	f3bf 8f4f 	dsb	sy
 8013388:	b662      	cpsie	i
 801338a:	61ba      	str	r2, [r7, #24]
 801338c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801338e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013390:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013396:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339a:	2b00      	cmp	r3, #0
 801339c:	d02f      	beq.n	80133fe <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133a8:	68b9      	ldr	r1, [r7, #8]
 80133aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133ac:	f000 f8b6 	bl	801351c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b2:	1e5a      	subs	r2, r3, #1
 80133b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80133b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80133bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133c0:	d112      	bne.n	80133e8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c4:	691b      	ldr	r3, [r3, #16]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d016      	beq.n	80133f8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133cc:	3310      	adds	r3, #16
 80133ce:	4618      	mov	r0, r3
 80133d0:	f000 fdba 	bl	8013f48 <xTaskRemoveFromEventList>
 80133d4:	4603      	mov	r3, r0
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00e      	beq.n	80133f8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00b      	beq.n	80133f8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2201      	movs	r2, #1
 80133e4:	601a      	str	r2, [r3, #0]
 80133e6:	e007      	b.n	80133f8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80133e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133ec:	3301      	adds	r3, #1
 80133ee:	b2db      	uxtb	r3, r3
 80133f0:	b25a      	sxtb	r2, r3
 80133f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80133f8:	2301      	movs	r3, #1
 80133fa:	637b      	str	r3, [r7, #52]	; 0x34
 80133fc:	e001      	b.n	8013402 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80133fe:	2300      	movs	r3, #0
 8013400:	637b      	str	r3, [r7, #52]	; 0x34
 8013402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013404:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	f383 8811 	msr	BASEPRI, r3
}
 801340c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801340e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013410:	4618      	mov	r0, r3
 8013412:	3738      	adds	r7, #56	; 0x38
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}

08013418 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013418:	b480      	push	{r7}
 801341a:	b085      	sub	sp, #20
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013424:	2b00      	cmp	r3, #0
 8013426:	d006      	beq.n	8013436 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	f1c3 0307 	rsb	r3, r3, #7
 8013432:	60fb      	str	r3, [r7, #12]
 8013434:	e001      	b.n	801343a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013436:	2300      	movs	r3, #0
 8013438:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801343a:	68fb      	ldr	r3, [r7, #12]
	}
 801343c:	4618      	mov	r0, r3
 801343e:	3714      	adds	r7, #20
 8013440:	46bd      	mov	sp, r7
 8013442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013446:	4770      	bx	lr

08013448 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b086      	sub	sp, #24
 801344c:	af00      	add	r7, sp, #0
 801344e:	60f8      	str	r0, [r7, #12]
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013454:	2300      	movs	r3, #0
 8013456:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801345c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013462:	2b00      	cmp	r3, #0
 8013464:	d10d      	bne.n	8013482 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d14d      	bne.n	801350a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	689b      	ldr	r3, [r3, #8]
 8013472:	4618      	mov	r0, r3
 8013474:	f000 ffcc 	bl	8014410 <xTaskPriorityDisinherit>
 8013478:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	2200      	movs	r2, #0
 801347e:	609a      	str	r2, [r3, #8]
 8013480:	e043      	b.n	801350a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d119      	bne.n	80134bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	6858      	ldr	r0, [r3, #4]
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013490:	461a      	mov	r2, r3
 8013492:	68b9      	ldr	r1, [r7, #8]
 8013494:	f00c fb22 	bl	801fadc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	685a      	ldr	r2, [r3, #4]
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134a0:	441a      	add	r2, r3
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	685a      	ldr	r2, [r3, #4]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	429a      	cmp	r2, r3
 80134b0:	d32b      	bcc.n	801350a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	681a      	ldr	r2, [r3, #0]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	605a      	str	r2, [r3, #4]
 80134ba:	e026      	b.n	801350a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	68d8      	ldr	r0, [r3, #12]
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c4:	461a      	mov	r2, r3
 80134c6:	68b9      	ldr	r1, [r7, #8]
 80134c8:	f00c fb08 	bl	801fadc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	68da      	ldr	r2, [r3, #12]
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134d4:	425b      	negs	r3, r3
 80134d6:	441a      	add	r2, r3
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	68da      	ldr	r2, [r3, #12]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d207      	bcs.n	80134f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	689a      	ldr	r2, [r3, #8]
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134f0:	425b      	negs	r3, r3
 80134f2:	441a      	add	r2, r3
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2b02      	cmp	r3, #2
 80134fc:	d105      	bne.n	801350a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d002      	beq.n	801350a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	3b01      	subs	r3, #1
 8013508:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	1c5a      	adds	r2, r3, #1
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013512:	697b      	ldr	r3, [r7, #20]
}
 8013514:	4618      	mov	r0, r3
 8013516:	3718      	adds	r7, #24
 8013518:	46bd      	mov	sp, r7
 801351a:	bd80      	pop	{r7, pc}

0801351c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
 8013524:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801352a:	2b00      	cmp	r3, #0
 801352c:	d018      	beq.n	8013560 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	68da      	ldr	r2, [r3, #12]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013536:	441a      	add	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	68da      	ldr	r2, [r3, #12]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	689b      	ldr	r3, [r3, #8]
 8013544:	429a      	cmp	r2, r3
 8013546:	d303      	bcc.n	8013550 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681a      	ldr	r2, [r3, #0]
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	68d9      	ldr	r1, [r3, #12]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013558:	461a      	mov	r2, r3
 801355a:	6838      	ldr	r0, [r7, #0]
 801355c:	f00c fabe 	bl	801fadc <memcpy>
	}
}
 8013560:	bf00      	nop
 8013562:	3708      	adds	r7, #8
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}

08013568 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b084      	sub	sp, #16
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013570:	f001 f9fc 	bl	801496c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801357a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801357c:	e011      	b.n	80135a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013582:	2b00      	cmp	r3, #0
 8013584:	d012      	beq.n	80135ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	3324      	adds	r3, #36	; 0x24
 801358a:	4618      	mov	r0, r3
 801358c:	f000 fcdc 	bl	8013f48 <xTaskRemoveFromEventList>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d001      	beq.n	801359a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013596:	f000 fdb7 	bl	8014108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801359a:	7bfb      	ldrb	r3, [r7, #15]
 801359c:	3b01      	subs	r3, #1
 801359e:	b2db      	uxtb	r3, r3
 80135a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	dce9      	bgt.n	801357e <prvUnlockQueue+0x16>
 80135aa:	e000      	b.n	80135ae <prvUnlockQueue+0x46>
					break;
 80135ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	22ff      	movs	r2, #255	; 0xff
 80135b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80135b6:	f001 fa0d 	bl	80149d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80135ba:	f001 f9d7 	bl	801496c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80135c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135c6:	e011      	b.n	80135ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	691b      	ldr	r3, [r3, #16]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d012      	beq.n	80135f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	3310      	adds	r3, #16
 80135d4:	4618      	mov	r0, r3
 80135d6:	f000 fcb7 	bl	8013f48 <xTaskRemoveFromEventList>
 80135da:	4603      	mov	r3, r0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d001      	beq.n	80135e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80135e0:	f000 fd92 	bl	8014108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80135e4:	7bbb      	ldrb	r3, [r7, #14]
 80135e6:	3b01      	subs	r3, #1
 80135e8:	b2db      	uxtb	r3, r3
 80135ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80135ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	dce9      	bgt.n	80135c8 <prvUnlockQueue+0x60>
 80135f4:	e000      	b.n	80135f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80135f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	22ff      	movs	r2, #255	; 0xff
 80135fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013600:	f001 f9e8 	bl	80149d4 <vPortExitCritical>
}
 8013604:	bf00      	nop
 8013606:	3710      	adds	r7, #16
 8013608:	46bd      	mov	sp, r7
 801360a:	bd80      	pop	{r7, pc}

0801360c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b084      	sub	sp, #16
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013614:	f001 f9aa 	bl	801496c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801361c:	2b00      	cmp	r3, #0
 801361e:	d102      	bne.n	8013626 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013620:	2301      	movs	r3, #1
 8013622:	60fb      	str	r3, [r7, #12]
 8013624:	e001      	b.n	801362a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013626:	2300      	movs	r3, #0
 8013628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801362a:	f001 f9d3 	bl	80149d4 <vPortExitCritical>

	return xReturn;
 801362e:	68fb      	ldr	r3, [r7, #12]
}
 8013630:	4618      	mov	r0, r3
 8013632:	3710      	adds	r7, #16
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b084      	sub	sp, #16
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013640:	f001 f994 	bl	801496c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801364c:	429a      	cmp	r2, r3
 801364e:	d102      	bne.n	8013656 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013650:	2301      	movs	r3, #1
 8013652:	60fb      	str	r3, [r7, #12]
 8013654:	e001      	b.n	801365a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013656:	2300      	movs	r3, #0
 8013658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801365a:	f001 f9bb 	bl	80149d4 <vPortExitCritical>

	return xReturn;
 801365e:	68fb      	ldr	r3, [r7, #12]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3710      	adds	r7, #16
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013668:	b580      	push	{r7, lr}
 801366a:	b08e      	sub	sp, #56	; 0x38
 801366c:	af04      	add	r7, sp, #16
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013678:	2b00      	cmp	r3, #0
 801367a:	d10c      	bne.n	8013696 <xTaskCreateStatic+0x2e>
	__asm volatile
 801367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013680:	b672      	cpsid	i
 8013682:	f383 8811 	msr	BASEPRI, r3
 8013686:	f3bf 8f6f 	isb	sy
 801368a:	f3bf 8f4f 	dsb	sy
 801368e:	b662      	cpsie	i
 8013690:	623b      	str	r3, [r7, #32]
}
 8013692:	bf00      	nop
 8013694:	e7fe      	b.n	8013694 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013698:	2b00      	cmp	r3, #0
 801369a:	d10c      	bne.n	80136b6 <xTaskCreateStatic+0x4e>
	__asm volatile
 801369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a0:	b672      	cpsid	i
 80136a2:	f383 8811 	msr	BASEPRI, r3
 80136a6:	f3bf 8f6f 	isb	sy
 80136aa:	f3bf 8f4f 	dsb	sy
 80136ae:	b662      	cpsie	i
 80136b0:	61fb      	str	r3, [r7, #28]
}
 80136b2:	bf00      	nop
 80136b4:	e7fe      	b.n	80136b4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80136b6:	2358      	movs	r3, #88	; 0x58
 80136b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	2b58      	cmp	r3, #88	; 0x58
 80136be:	d00c      	beq.n	80136da <xTaskCreateStatic+0x72>
	__asm volatile
 80136c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c4:	b672      	cpsid	i
 80136c6:	f383 8811 	msr	BASEPRI, r3
 80136ca:	f3bf 8f6f 	isb	sy
 80136ce:	f3bf 8f4f 	dsb	sy
 80136d2:	b662      	cpsie	i
 80136d4:	61bb      	str	r3, [r7, #24]
}
 80136d6:	bf00      	nop
 80136d8:	e7fe      	b.n	80136d8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80136da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80136dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d01e      	beq.n	8013720 <xTaskCreateStatic+0xb8>
 80136e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d01b      	beq.n	8013720 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80136e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80136ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80136f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80136f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f4:	2202      	movs	r2, #2
 80136f6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80136fa:	2300      	movs	r3, #0
 80136fc:	9303      	str	r3, [sp, #12]
 80136fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013700:	9302      	str	r3, [sp, #8]
 8013702:	f107 0314 	add.w	r3, r7, #20
 8013706:	9301      	str	r3, [sp, #4]
 8013708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370a:	9300      	str	r3, [sp, #0]
 801370c:	683b      	ldr	r3, [r7, #0]
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	68b9      	ldr	r1, [r7, #8]
 8013712:	68f8      	ldr	r0, [r7, #12]
 8013714:	f000 f850 	bl	80137b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801371a:	f000 f8e1 	bl	80138e0 <prvAddNewTaskToReadyList>
 801371e:	e001      	b.n	8013724 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8013720:	2300      	movs	r3, #0
 8013722:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013724:	697b      	ldr	r3, [r7, #20]
	}
 8013726:	4618      	mov	r0, r3
 8013728:	3728      	adds	r7, #40	; 0x28
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}

0801372e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801372e:	b580      	push	{r7, lr}
 8013730:	b08c      	sub	sp, #48	; 0x30
 8013732:	af04      	add	r7, sp, #16
 8013734:	60f8      	str	r0, [r7, #12]
 8013736:	60b9      	str	r1, [r7, #8]
 8013738:	603b      	str	r3, [r7, #0]
 801373a:	4613      	mov	r3, r2
 801373c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801373e:	88fb      	ldrh	r3, [r7, #6]
 8013740:	009b      	lsls	r3, r3, #2
 8013742:	4618      	mov	r0, r3
 8013744:	f001 fa3e 	bl	8014bc4 <pvPortMalloc>
 8013748:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801374a:	697b      	ldr	r3, [r7, #20]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d00e      	beq.n	801376e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013750:	2058      	movs	r0, #88	; 0x58
 8013752:	f001 fa37 	bl	8014bc4 <pvPortMalloc>
 8013756:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013758:	69fb      	ldr	r3, [r7, #28]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d003      	beq.n	8013766 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801375e:	69fb      	ldr	r3, [r7, #28]
 8013760:	697a      	ldr	r2, [r7, #20]
 8013762:	631a      	str	r2, [r3, #48]	; 0x30
 8013764:	e005      	b.n	8013772 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013766:	6978      	ldr	r0, [r7, #20]
 8013768:	f001 fafc 	bl	8014d64 <vPortFree>
 801376c:	e001      	b.n	8013772 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801376e:	2300      	movs	r3, #0
 8013770:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013772:	69fb      	ldr	r3, [r7, #28]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d017      	beq.n	80137a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	2200      	movs	r2, #0
 801377c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013780:	88fa      	ldrh	r2, [r7, #6]
 8013782:	2300      	movs	r3, #0
 8013784:	9303      	str	r3, [sp, #12]
 8013786:	69fb      	ldr	r3, [r7, #28]
 8013788:	9302      	str	r3, [sp, #8]
 801378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801378c:	9301      	str	r3, [sp, #4]
 801378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	68b9      	ldr	r1, [r7, #8]
 8013796:	68f8      	ldr	r0, [r7, #12]
 8013798:	f000 f80e 	bl	80137b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801379c:	69f8      	ldr	r0, [r7, #28]
 801379e:	f000 f89f 	bl	80138e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80137a2:	2301      	movs	r3, #1
 80137a4:	61bb      	str	r3, [r7, #24]
 80137a6:	e002      	b.n	80137ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80137a8:	f04f 33ff 	mov.w	r3, #4294967295
 80137ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80137ae:	69bb      	ldr	r3, [r7, #24]
	}
 80137b0:	4618      	mov	r0, r3
 80137b2:	3720      	adds	r7, #32
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b088      	sub	sp, #32
 80137bc:	af00      	add	r7, sp, #0
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	607a      	str	r2, [r7, #4]
 80137c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80137c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	461a      	mov	r2, r3
 80137d0:	21a5      	movs	r1, #165	; 0xa5
 80137d2:	f00c f991 	bl	801faf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80137d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137da:	6879      	ldr	r1, [r7, #4]
 80137dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80137e0:	440b      	add	r3, r1
 80137e2:	009b      	lsls	r3, r3, #2
 80137e4:	4413      	add	r3, r2
 80137e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	f023 0307 	bic.w	r3, r3, #7
 80137ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	f003 0307 	and.w	r3, r3, #7
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d00c      	beq.n	8013814 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80137fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137fe:	b672      	cpsid	i
 8013800:	f383 8811 	msr	BASEPRI, r3
 8013804:	f3bf 8f6f 	isb	sy
 8013808:	f3bf 8f4f 	dsb	sy
 801380c:	b662      	cpsie	i
 801380e:	617b      	str	r3, [r7, #20]
}
 8013810:	bf00      	nop
 8013812:	e7fe      	b.n	8013812 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d01f      	beq.n	801385a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801381a:	2300      	movs	r3, #0
 801381c:	61fb      	str	r3, [r7, #28]
 801381e:	e012      	b.n	8013846 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013820:	68ba      	ldr	r2, [r7, #8]
 8013822:	69fb      	ldr	r3, [r7, #28]
 8013824:	4413      	add	r3, r2
 8013826:	7819      	ldrb	r1, [r3, #0]
 8013828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801382a:	69fb      	ldr	r3, [r7, #28]
 801382c:	4413      	add	r3, r2
 801382e:	3334      	adds	r3, #52	; 0x34
 8013830:	460a      	mov	r2, r1
 8013832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013834:	68ba      	ldr	r2, [r7, #8]
 8013836:	69fb      	ldr	r3, [r7, #28]
 8013838:	4413      	add	r3, r2
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d006      	beq.n	801384e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	3301      	adds	r3, #1
 8013844:	61fb      	str	r3, [r7, #28]
 8013846:	69fb      	ldr	r3, [r7, #28]
 8013848:	2b0f      	cmp	r3, #15
 801384a:	d9e9      	bls.n	8013820 <prvInitialiseNewTask+0x68>
 801384c:	e000      	b.n	8013850 <prvInitialiseNewTask+0x98>
			{
				break;
 801384e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013852:	2200      	movs	r2, #0
 8013854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013858:	e003      	b.n	8013862 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385c:	2200      	movs	r2, #0
 801385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013864:	2b06      	cmp	r3, #6
 8013866:	d901      	bls.n	801386c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013868:	2306      	movs	r3, #6
 801386a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801386c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013876:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387a:	2200      	movs	r2, #0
 801387c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013880:	3304      	adds	r3, #4
 8013882:	4618      	mov	r0, r3
 8013884:	f7fe fede 	bl	8012644 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388a:	3318      	adds	r3, #24
 801388c:	4618      	mov	r0, r3
 801388e:	f7fe fed9 	bl	8012644 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801389a:	f1c3 0207 	rsb	r2, r3, #7
 801389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80138a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80138a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138aa:	2200      	movs	r2, #0
 80138ac:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80138ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b0:	2200      	movs	r2, #0
 80138b2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80138b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b6:	2200      	movs	r2, #0
 80138b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80138bc:	683a      	ldr	r2, [r7, #0]
 80138be:	68f9      	ldr	r1, [r7, #12]
 80138c0:	69b8      	ldr	r0, [r7, #24]
 80138c2:	f000 ff47 	bl	8014754 <pxPortInitialiseStack>
 80138c6:	4602      	mov	r2, r0
 80138c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80138cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d002      	beq.n	80138d8 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80138d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80138d8:	bf00      	nop
 80138da:	3720      	adds	r7, #32
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80138e8:	f001 f840 	bl	801496c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80138ec:	4b2a      	ldr	r3, [pc, #168]	; (8013998 <prvAddNewTaskToReadyList+0xb8>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	3301      	adds	r3, #1
 80138f2:	4a29      	ldr	r2, [pc, #164]	; (8013998 <prvAddNewTaskToReadyList+0xb8>)
 80138f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80138f6:	4b29      	ldr	r3, [pc, #164]	; (801399c <prvAddNewTaskToReadyList+0xbc>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d109      	bne.n	8013912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80138fe:	4a27      	ldr	r2, [pc, #156]	; (801399c <prvAddNewTaskToReadyList+0xbc>)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013904:	4b24      	ldr	r3, [pc, #144]	; (8013998 <prvAddNewTaskToReadyList+0xb8>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	2b01      	cmp	r3, #1
 801390a:	d110      	bne.n	801392e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801390c:	f000 fc22 	bl	8014154 <prvInitialiseTaskLists>
 8013910:	e00d      	b.n	801392e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013912:	4b23      	ldr	r3, [pc, #140]	; (80139a0 <prvAddNewTaskToReadyList+0xc0>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d109      	bne.n	801392e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801391a:	4b20      	ldr	r3, [pc, #128]	; (801399c <prvAddNewTaskToReadyList+0xbc>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013924:	429a      	cmp	r2, r3
 8013926:	d802      	bhi.n	801392e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013928:	4a1c      	ldr	r2, [pc, #112]	; (801399c <prvAddNewTaskToReadyList+0xbc>)
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801392e:	4b1d      	ldr	r3, [pc, #116]	; (80139a4 <prvAddNewTaskToReadyList+0xc4>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	3301      	adds	r3, #1
 8013934:	4a1b      	ldr	r2, [pc, #108]	; (80139a4 <prvAddNewTaskToReadyList+0xc4>)
 8013936:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801393c:	2201      	movs	r2, #1
 801393e:	409a      	lsls	r2, r3
 8013940:	4b19      	ldr	r3, [pc, #100]	; (80139a8 <prvAddNewTaskToReadyList+0xc8>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	4313      	orrs	r3, r2
 8013946:	4a18      	ldr	r2, [pc, #96]	; (80139a8 <prvAddNewTaskToReadyList+0xc8>)
 8013948:	6013      	str	r3, [r2, #0]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801394e:	4613      	mov	r3, r2
 8013950:	009b      	lsls	r3, r3, #2
 8013952:	4413      	add	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	4a15      	ldr	r2, [pc, #84]	; (80139ac <prvAddNewTaskToReadyList+0xcc>)
 8013958:	441a      	add	r2, r3
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	3304      	adds	r3, #4
 801395e:	4619      	mov	r1, r3
 8013960:	4610      	mov	r0, r2
 8013962:	f7fe fe7c 	bl	801265e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013966:	f001 f835 	bl	80149d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801396a:	4b0d      	ldr	r3, [pc, #52]	; (80139a0 <prvAddNewTaskToReadyList+0xc0>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d00e      	beq.n	8013990 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013972:	4b0a      	ldr	r3, [pc, #40]	; (801399c <prvAddNewTaskToReadyList+0xbc>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801397c:	429a      	cmp	r2, r3
 801397e:	d207      	bcs.n	8013990 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013980:	4b0b      	ldr	r3, [pc, #44]	; (80139b0 <prvAddNewTaskToReadyList+0xd0>)
 8013982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013986:	601a      	str	r2, [r3, #0]
 8013988:	f3bf 8f4f 	dsb	sy
 801398c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013990:	bf00      	nop
 8013992:	3708      	adds	r7, #8
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}
 8013998:	200058d0 	.word	0x200058d0
 801399c:	200057d0 	.word	0x200057d0
 80139a0:	200058dc 	.word	0x200058dc
 80139a4:	200058ec 	.word	0x200058ec
 80139a8:	200058d8 	.word	0x200058d8
 80139ac:	200057d4 	.word	0x200057d4
 80139b0:	e000ed04 	.word	0xe000ed04

080139b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80139bc:	2300      	movs	r3, #0
 80139be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d019      	beq.n	80139fa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80139c6:	4b14      	ldr	r3, [pc, #80]	; (8013a18 <vTaskDelay+0x64>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d00c      	beq.n	80139e8 <vTaskDelay+0x34>
	__asm volatile
 80139ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d2:	b672      	cpsid	i
 80139d4:	f383 8811 	msr	BASEPRI, r3
 80139d8:	f3bf 8f6f 	isb	sy
 80139dc:	f3bf 8f4f 	dsb	sy
 80139e0:	b662      	cpsie	i
 80139e2:	60bb      	str	r3, [r7, #8]
}
 80139e4:	bf00      	nop
 80139e6:	e7fe      	b.n	80139e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80139e8:	f000 f87e 	bl	8013ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80139ec:	2100      	movs	r1, #0
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f000 fe4a 	bl	8014688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80139f4:	f000 f886 	bl	8013b04 <xTaskResumeAll>
 80139f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d107      	bne.n	8013a10 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8013a00:	4b06      	ldr	r3, [pc, #24]	; (8013a1c <vTaskDelay+0x68>)
 8013a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a06:	601a      	str	r2, [r3, #0]
 8013a08:	f3bf 8f4f 	dsb	sy
 8013a0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a10:	bf00      	nop
 8013a12:	3710      	adds	r7, #16
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	200058f8 	.word	0x200058f8
 8013a1c:	e000ed04 	.word	0xe000ed04

08013a20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b08a      	sub	sp, #40	; 0x28
 8013a24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a26:	2300      	movs	r3, #0
 8013a28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a2e:	463a      	mov	r2, r7
 8013a30:	1d39      	adds	r1, r7, #4
 8013a32:	f107 0308 	add.w	r3, r7, #8
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7ec fdd6 	bl	80005e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a3c:	6839      	ldr	r1, [r7, #0]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	68ba      	ldr	r2, [r7, #8]
 8013a42:	9202      	str	r2, [sp, #8]
 8013a44:	9301      	str	r3, [sp, #4]
 8013a46:	2300      	movs	r3, #0
 8013a48:	9300      	str	r3, [sp, #0]
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	460a      	mov	r2, r1
 8013a4e:	4920      	ldr	r1, [pc, #128]	; (8013ad0 <vTaskStartScheduler+0xb0>)
 8013a50:	4820      	ldr	r0, [pc, #128]	; (8013ad4 <vTaskStartScheduler+0xb4>)
 8013a52:	f7ff fe09 	bl	8013668 <xTaskCreateStatic>
 8013a56:	4603      	mov	r3, r0
 8013a58:	4a1f      	ldr	r2, [pc, #124]	; (8013ad8 <vTaskStartScheduler+0xb8>)
 8013a5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013a5c:	4b1e      	ldr	r3, [pc, #120]	; (8013ad8 <vTaskStartScheduler+0xb8>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d002      	beq.n	8013a6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013a64:	2301      	movs	r3, #1
 8013a66:	617b      	str	r3, [r7, #20]
 8013a68:	e001      	b.n	8013a6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013a6a:	2300      	movs	r3, #0
 8013a6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d118      	bne.n	8013aa6 <vTaskStartScheduler+0x86>
	__asm volatile
 8013a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a78:	b672      	cpsid	i
 8013a7a:	f383 8811 	msr	BASEPRI, r3
 8013a7e:	f3bf 8f6f 	isb	sy
 8013a82:	f3bf 8f4f 	dsb	sy
 8013a86:	b662      	cpsie	i
 8013a88:	613b      	str	r3, [r7, #16]
}
 8013a8a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013a8c:	4b13      	ldr	r3, [pc, #76]	; (8013adc <vTaskStartScheduler+0xbc>)
 8013a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8013a92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013a94:	4b12      	ldr	r3, [pc, #72]	; (8013ae0 <vTaskStartScheduler+0xc0>)
 8013a96:	2201      	movs	r2, #1
 8013a98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013a9a:	4b12      	ldr	r3, [pc, #72]	; (8013ae4 <vTaskStartScheduler+0xc4>)
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013aa0:	f000 fee6 	bl	8014870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013aa4:	e010      	b.n	8013ac8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aac:	d10c      	bne.n	8013ac8 <vTaskStartScheduler+0xa8>
	__asm volatile
 8013aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ab2:	b672      	cpsid	i
 8013ab4:	f383 8811 	msr	BASEPRI, r3
 8013ab8:	f3bf 8f6f 	isb	sy
 8013abc:	f3bf 8f4f 	dsb	sy
 8013ac0:	b662      	cpsie	i
 8013ac2:	60fb      	str	r3, [r7, #12]
}
 8013ac4:	bf00      	nop
 8013ac6:	e7fe      	b.n	8013ac6 <vTaskStartScheduler+0xa6>
}
 8013ac8:	bf00      	nop
 8013aca:	3718      	adds	r7, #24
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	080209a0 	.word	0x080209a0
 8013ad4:	08014121 	.word	0x08014121
 8013ad8:	200058f4 	.word	0x200058f4
 8013adc:	200058f0 	.word	0x200058f0
 8013ae0:	200058dc 	.word	0x200058dc
 8013ae4:	200058d4 	.word	0x200058d4

08013ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013ae8:	b480      	push	{r7}
 8013aea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013aec:	4b04      	ldr	r3, [pc, #16]	; (8013b00 <vTaskSuspendAll+0x18>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	3301      	adds	r3, #1
 8013af2:	4a03      	ldr	r2, [pc, #12]	; (8013b00 <vTaskSuspendAll+0x18>)
 8013af4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013af6:	bf00      	nop
 8013af8:	46bd      	mov	sp, r7
 8013afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afe:	4770      	bx	lr
 8013b00:	200058f8 	.word	0x200058f8

08013b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b084      	sub	sp, #16
 8013b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b12:	4b42      	ldr	r3, [pc, #264]	; (8013c1c <xTaskResumeAll+0x118>)
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d10c      	bne.n	8013b34 <xTaskResumeAll+0x30>
	__asm volatile
 8013b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b1e:	b672      	cpsid	i
 8013b20:	f383 8811 	msr	BASEPRI, r3
 8013b24:	f3bf 8f6f 	isb	sy
 8013b28:	f3bf 8f4f 	dsb	sy
 8013b2c:	b662      	cpsie	i
 8013b2e:	603b      	str	r3, [r7, #0]
}
 8013b30:	bf00      	nop
 8013b32:	e7fe      	b.n	8013b32 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013b34:	f000 ff1a 	bl	801496c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013b38:	4b38      	ldr	r3, [pc, #224]	; (8013c1c <xTaskResumeAll+0x118>)
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	3b01      	subs	r3, #1
 8013b3e:	4a37      	ldr	r2, [pc, #220]	; (8013c1c <xTaskResumeAll+0x118>)
 8013b40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b42:	4b36      	ldr	r3, [pc, #216]	; (8013c1c <xTaskResumeAll+0x118>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d161      	bne.n	8013c0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013b4a:	4b35      	ldr	r3, [pc, #212]	; (8013c20 <xTaskResumeAll+0x11c>)
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d05d      	beq.n	8013c0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013b52:	e02e      	b.n	8013bb2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b54:	4b33      	ldr	r3, [pc, #204]	; (8013c24 <xTaskResumeAll+0x120>)
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	3318      	adds	r3, #24
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7fe fdd9 	bl	8012718 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	3304      	adds	r3, #4
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7fe fdd4 	bl	8012718 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b74:	2201      	movs	r2, #1
 8013b76:	409a      	lsls	r2, r3
 8013b78:	4b2b      	ldr	r3, [pc, #172]	; (8013c28 <xTaskResumeAll+0x124>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	4313      	orrs	r3, r2
 8013b7e:	4a2a      	ldr	r2, [pc, #168]	; (8013c28 <xTaskResumeAll+0x124>)
 8013b80:	6013      	str	r3, [r2, #0]
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b86:	4613      	mov	r3, r2
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	4413      	add	r3, r2
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	4a27      	ldr	r2, [pc, #156]	; (8013c2c <xTaskResumeAll+0x128>)
 8013b90:	441a      	add	r2, r3
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	3304      	adds	r3, #4
 8013b96:	4619      	mov	r1, r3
 8013b98:	4610      	mov	r0, r2
 8013b9a:	f7fe fd60 	bl	801265e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ba2:	4b23      	ldr	r3, [pc, #140]	; (8013c30 <xTaskResumeAll+0x12c>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	d302      	bcc.n	8013bb2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013bac:	4b21      	ldr	r3, [pc, #132]	; (8013c34 <xTaskResumeAll+0x130>)
 8013bae:	2201      	movs	r2, #1
 8013bb0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bb2:	4b1c      	ldr	r3, [pc, #112]	; (8013c24 <xTaskResumeAll+0x120>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1cc      	bne.n	8013b54 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d001      	beq.n	8013bc4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013bc0:	f000 fb68 	bl	8014294 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013bc4:	4b1c      	ldr	r3, [pc, #112]	; (8013c38 <xTaskResumeAll+0x134>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d010      	beq.n	8013bf2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013bd0:	f000 f858 	bl	8013c84 <xTaskIncrementTick>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d002      	beq.n	8013be0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013bda:	4b16      	ldr	r3, [pc, #88]	; (8013c34 <xTaskResumeAll+0x130>)
 8013bdc:	2201      	movs	r2, #1
 8013bde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	3b01      	subs	r3, #1
 8013be4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d1f1      	bne.n	8013bd0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013bec:	4b12      	ldr	r3, [pc, #72]	; (8013c38 <xTaskResumeAll+0x134>)
 8013bee:	2200      	movs	r2, #0
 8013bf0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013bf2:	4b10      	ldr	r3, [pc, #64]	; (8013c34 <xTaskResumeAll+0x130>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d009      	beq.n	8013c0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013bfe:	4b0f      	ldr	r3, [pc, #60]	; (8013c3c <xTaskResumeAll+0x138>)
 8013c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c04:	601a      	str	r2, [r3, #0]
 8013c06:	f3bf 8f4f 	dsb	sy
 8013c0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c0e:	f000 fee1 	bl	80149d4 <vPortExitCritical>

	return xAlreadyYielded;
 8013c12:	68bb      	ldr	r3, [r7, #8]
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3710      	adds	r7, #16
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	200058f8 	.word	0x200058f8
 8013c20:	200058d0 	.word	0x200058d0
 8013c24:	20005890 	.word	0x20005890
 8013c28:	200058d8 	.word	0x200058d8
 8013c2c:	200057d4 	.word	0x200057d4
 8013c30:	200057d0 	.word	0x200057d0
 8013c34:	200058e4 	.word	0x200058e4
 8013c38:	200058e0 	.word	0x200058e0
 8013c3c:	e000ed04 	.word	0xe000ed04

08013c40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013c40:	b480      	push	{r7}
 8013c42:	b083      	sub	sp, #12
 8013c44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013c46:	4b05      	ldr	r3, [pc, #20]	; (8013c5c <xTaskGetTickCount+0x1c>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013c4c:	687b      	ldr	r3, [r7, #4]
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	370c      	adds	r7, #12
 8013c52:	46bd      	mov	sp, r7
 8013c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c58:	4770      	bx	lr
 8013c5a:	bf00      	nop
 8013c5c:	200058d4 	.word	0x200058d4

08013c60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c66:	f000 ff69 	bl	8014b3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013c6e:	4b04      	ldr	r3, [pc, #16]	; (8013c80 <xTaskGetTickCountFromISR+0x20>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c74:	683b      	ldr	r3, [r7, #0]
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3708      	adds	r7, #8
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}
 8013c7e:	bf00      	nop
 8013c80:	200058d4 	.word	0x200058d4

08013c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c8e:	4b4f      	ldr	r3, [pc, #316]	; (8013dcc <xTaskIncrementTick+0x148>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f040 808a 	bne.w	8013dac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013c98:	4b4d      	ldr	r3, [pc, #308]	; (8013dd0 <xTaskIncrementTick+0x14c>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013ca0:	4a4b      	ldr	r2, [pc, #300]	; (8013dd0 <xTaskIncrementTick+0x14c>)
 8013ca2:	693b      	ldr	r3, [r7, #16]
 8013ca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d122      	bne.n	8013cf2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013cac:	4b49      	ldr	r3, [pc, #292]	; (8013dd4 <xTaskIncrementTick+0x150>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d00c      	beq.n	8013cd0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8013cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cba:	b672      	cpsid	i
 8013cbc:	f383 8811 	msr	BASEPRI, r3
 8013cc0:	f3bf 8f6f 	isb	sy
 8013cc4:	f3bf 8f4f 	dsb	sy
 8013cc8:	b662      	cpsie	i
 8013cca:	603b      	str	r3, [r7, #0]
}
 8013ccc:	bf00      	nop
 8013cce:	e7fe      	b.n	8013cce <xTaskIncrementTick+0x4a>
 8013cd0:	4b40      	ldr	r3, [pc, #256]	; (8013dd4 <xTaskIncrementTick+0x150>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	60fb      	str	r3, [r7, #12]
 8013cd6:	4b40      	ldr	r3, [pc, #256]	; (8013dd8 <xTaskIncrementTick+0x154>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	4a3e      	ldr	r2, [pc, #248]	; (8013dd4 <xTaskIncrementTick+0x150>)
 8013cdc:	6013      	str	r3, [r2, #0]
 8013cde:	4a3e      	ldr	r2, [pc, #248]	; (8013dd8 <xTaskIncrementTick+0x154>)
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	6013      	str	r3, [r2, #0]
 8013ce4:	4b3d      	ldr	r3, [pc, #244]	; (8013ddc <xTaskIncrementTick+0x158>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	4a3c      	ldr	r2, [pc, #240]	; (8013ddc <xTaskIncrementTick+0x158>)
 8013cec:	6013      	str	r3, [r2, #0]
 8013cee:	f000 fad1 	bl	8014294 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013cf2:	4b3b      	ldr	r3, [pc, #236]	; (8013de0 <xTaskIncrementTick+0x15c>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	693a      	ldr	r2, [r7, #16]
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d348      	bcc.n	8013d8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013cfc:	4b35      	ldr	r3, [pc, #212]	; (8013dd4 <xTaskIncrementTick+0x150>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d104      	bne.n	8013d10 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d06:	4b36      	ldr	r3, [pc, #216]	; (8013de0 <xTaskIncrementTick+0x15c>)
 8013d08:	f04f 32ff 	mov.w	r2, #4294967295
 8013d0c:	601a      	str	r2, [r3, #0]
					break;
 8013d0e:	e03e      	b.n	8013d8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d10:	4b30      	ldr	r3, [pc, #192]	; (8013dd4 <xTaskIncrementTick+0x150>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	68db      	ldr	r3, [r3, #12]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	685b      	ldr	r3, [r3, #4]
 8013d1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d20:	693a      	ldr	r2, [r7, #16]
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d203      	bcs.n	8013d30 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d28:	4a2d      	ldr	r2, [pc, #180]	; (8013de0 <xTaskIncrementTick+0x15c>)
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d2e:	e02e      	b.n	8013d8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	3304      	adds	r3, #4
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fe fcef 	bl	8012718 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d3a:	68bb      	ldr	r3, [r7, #8]
 8013d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d004      	beq.n	8013d4c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	3318      	adds	r3, #24
 8013d46:	4618      	mov	r0, r3
 8013d48:	f7fe fce6 	bl	8012718 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d50:	2201      	movs	r2, #1
 8013d52:	409a      	lsls	r2, r3
 8013d54:	4b23      	ldr	r3, [pc, #140]	; (8013de4 <xTaskIncrementTick+0x160>)
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4313      	orrs	r3, r2
 8013d5a:	4a22      	ldr	r2, [pc, #136]	; (8013de4 <xTaskIncrementTick+0x160>)
 8013d5c:	6013      	str	r3, [r2, #0]
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d62:	4613      	mov	r3, r2
 8013d64:	009b      	lsls	r3, r3, #2
 8013d66:	4413      	add	r3, r2
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	4a1f      	ldr	r2, [pc, #124]	; (8013de8 <xTaskIncrementTick+0x164>)
 8013d6c:	441a      	add	r2, r3
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	3304      	adds	r3, #4
 8013d72:	4619      	mov	r1, r3
 8013d74:	4610      	mov	r0, r2
 8013d76:	f7fe fc72 	bl	801265e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d7e:	4b1b      	ldr	r3, [pc, #108]	; (8013dec <xTaskIncrementTick+0x168>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d3b9      	bcc.n	8013cfc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8013d88:	2301      	movs	r3, #1
 8013d8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d8c:	e7b6      	b.n	8013cfc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013d8e:	4b17      	ldr	r3, [pc, #92]	; (8013dec <xTaskIncrementTick+0x168>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d94:	4914      	ldr	r1, [pc, #80]	; (8013de8 <xTaskIncrementTick+0x164>)
 8013d96:	4613      	mov	r3, r2
 8013d98:	009b      	lsls	r3, r3, #2
 8013d9a:	4413      	add	r3, r2
 8013d9c:	009b      	lsls	r3, r3, #2
 8013d9e:	440b      	add	r3, r1
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	2b01      	cmp	r3, #1
 8013da4:	d907      	bls.n	8013db6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013da6:	2301      	movs	r3, #1
 8013da8:	617b      	str	r3, [r7, #20]
 8013daa:	e004      	b.n	8013db6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013dac:	4b10      	ldr	r3, [pc, #64]	; (8013df0 <xTaskIncrementTick+0x16c>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	3301      	adds	r3, #1
 8013db2:	4a0f      	ldr	r2, [pc, #60]	; (8013df0 <xTaskIncrementTick+0x16c>)
 8013db4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013db6:	4b0f      	ldr	r3, [pc, #60]	; (8013df4 <xTaskIncrementTick+0x170>)
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d001      	beq.n	8013dc2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013dc2:	697b      	ldr	r3, [r7, #20]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3718      	adds	r7, #24
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}
 8013dcc:	200058f8 	.word	0x200058f8
 8013dd0:	200058d4 	.word	0x200058d4
 8013dd4:	20005888 	.word	0x20005888
 8013dd8:	2000588c 	.word	0x2000588c
 8013ddc:	200058e8 	.word	0x200058e8
 8013de0:	200058f0 	.word	0x200058f0
 8013de4:	200058d8 	.word	0x200058d8
 8013de8:	200057d4 	.word	0x200057d4
 8013dec:	200057d0 	.word	0x200057d0
 8013df0:	200058e0 	.word	0x200058e0
 8013df4:	200058e4 	.word	0x200058e4

08013df8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b088      	sub	sp, #32
 8013dfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013dfe:	4b3a      	ldr	r3, [pc, #232]	; (8013ee8 <vTaskSwitchContext+0xf0>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d003      	beq.n	8013e0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e06:	4b39      	ldr	r3, [pc, #228]	; (8013eec <vTaskSwitchContext+0xf4>)
 8013e08:	2201      	movs	r2, #1
 8013e0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e0c:	e068      	b.n	8013ee0 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8013e0e:	4b37      	ldr	r3, [pc, #220]	; (8013eec <vTaskSwitchContext+0xf4>)
 8013e10:	2200      	movs	r2, #0
 8013e12:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013e14:	4b36      	ldr	r3, [pc, #216]	; (8013ef0 <vTaskSwitchContext+0xf8>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e1a:	61fb      	str	r3, [r7, #28]
 8013e1c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8013e20:	61bb      	str	r3, [r7, #24]
 8013e22:	69fb      	ldr	r3, [r7, #28]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	69ba      	ldr	r2, [r7, #24]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d111      	bne.n	8013e50 <vTaskSwitchContext+0x58>
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	3304      	adds	r3, #4
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	69ba      	ldr	r2, [r7, #24]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d10b      	bne.n	8013e50 <vTaskSwitchContext+0x58>
 8013e38:	69fb      	ldr	r3, [r7, #28]
 8013e3a:	3308      	adds	r3, #8
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	69ba      	ldr	r2, [r7, #24]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d105      	bne.n	8013e50 <vTaskSwitchContext+0x58>
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	330c      	adds	r3, #12
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	69ba      	ldr	r2, [r7, #24]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d008      	beq.n	8013e62 <vTaskSwitchContext+0x6a>
 8013e50:	4b27      	ldr	r3, [pc, #156]	; (8013ef0 <vTaskSwitchContext+0xf8>)
 8013e52:	681a      	ldr	r2, [r3, #0]
 8013e54:	4b26      	ldr	r3, [pc, #152]	; (8013ef0 <vTaskSwitchContext+0xf8>)
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	3334      	adds	r3, #52	; 0x34
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	4610      	mov	r0, r2
 8013e5e:	f7ec fbb0 	bl	80005c2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e62:	4b24      	ldr	r3, [pc, #144]	; (8013ef4 <vTaskSwitchContext+0xfc>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	fab3 f383 	clz	r3, r3
 8013e6e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013e70:	7afb      	ldrb	r3, [r7, #11]
 8013e72:	f1c3 031f 	rsb	r3, r3, #31
 8013e76:	617b      	str	r3, [r7, #20]
 8013e78:	491f      	ldr	r1, [pc, #124]	; (8013ef8 <vTaskSwitchContext+0x100>)
 8013e7a:	697a      	ldr	r2, [r7, #20]
 8013e7c:	4613      	mov	r3, r2
 8013e7e:	009b      	lsls	r3, r3, #2
 8013e80:	4413      	add	r3, r2
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	440b      	add	r3, r1
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d10c      	bne.n	8013ea6 <vTaskSwitchContext+0xae>
	__asm volatile
 8013e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e90:	b672      	cpsid	i
 8013e92:	f383 8811 	msr	BASEPRI, r3
 8013e96:	f3bf 8f6f 	isb	sy
 8013e9a:	f3bf 8f4f 	dsb	sy
 8013e9e:	b662      	cpsie	i
 8013ea0:	607b      	str	r3, [r7, #4]
}
 8013ea2:	bf00      	nop
 8013ea4:	e7fe      	b.n	8013ea4 <vTaskSwitchContext+0xac>
 8013ea6:	697a      	ldr	r2, [r7, #20]
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	009b      	lsls	r3, r3, #2
 8013eac:	4413      	add	r3, r2
 8013eae:	009b      	lsls	r3, r3, #2
 8013eb0:	4a11      	ldr	r2, [pc, #68]	; (8013ef8 <vTaskSwitchContext+0x100>)
 8013eb2:	4413      	add	r3, r2
 8013eb4:	613b      	str	r3, [r7, #16]
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	685a      	ldr	r2, [r3, #4]
 8013ebc:	693b      	ldr	r3, [r7, #16]
 8013ebe:	605a      	str	r2, [r3, #4]
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	685a      	ldr	r2, [r3, #4]
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	3308      	adds	r3, #8
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d104      	bne.n	8013ed6 <vTaskSwitchContext+0xde>
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	605a      	str	r2, [r3, #4]
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	68db      	ldr	r3, [r3, #12]
 8013edc:	4a04      	ldr	r2, [pc, #16]	; (8013ef0 <vTaskSwitchContext+0xf8>)
 8013ede:	6013      	str	r3, [r2, #0]
}
 8013ee0:	bf00      	nop
 8013ee2:	3720      	adds	r7, #32
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}
 8013ee8:	200058f8 	.word	0x200058f8
 8013eec:	200058e4 	.word	0x200058e4
 8013ef0:	200057d0 	.word	0x200057d0
 8013ef4:	200058d8 	.word	0x200058d8
 8013ef8:	200057d4 	.word	0x200057d4

08013efc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d10c      	bne.n	8013f26 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f10:	b672      	cpsid	i
 8013f12:	f383 8811 	msr	BASEPRI, r3
 8013f16:	f3bf 8f6f 	isb	sy
 8013f1a:	f3bf 8f4f 	dsb	sy
 8013f1e:	b662      	cpsie	i
 8013f20:	60fb      	str	r3, [r7, #12]
}
 8013f22:	bf00      	nop
 8013f24:	e7fe      	b.n	8013f24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f26:	4b07      	ldr	r3, [pc, #28]	; (8013f44 <vTaskPlaceOnEventList+0x48>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	3318      	adds	r3, #24
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f7fe fbb9 	bl	80126a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f34:	2101      	movs	r1, #1
 8013f36:	6838      	ldr	r0, [r7, #0]
 8013f38:	f000 fba6 	bl	8014688 <prvAddCurrentTaskToDelayedList>
}
 8013f3c:	bf00      	nop
 8013f3e:	3710      	adds	r7, #16
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	200057d0 	.word	0x200057d0

08013f48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b086      	sub	sp, #24
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	68db      	ldr	r3, [r3, #12]
 8013f56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d10c      	bne.n	8013f78 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8013f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f62:	b672      	cpsid	i
 8013f64:	f383 8811 	msr	BASEPRI, r3
 8013f68:	f3bf 8f6f 	isb	sy
 8013f6c:	f3bf 8f4f 	dsb	sy
 8013f70:	b662      	cpsie	i
 8013f72:	60fb      	str	r3, [r7, #12]
}
 8013f74:	bf00      	nop
 8013f76:	e7fe      	b.n	8013f76 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	3318      	adds	r3, #24
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7fe fbcb 	bl	8012718 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f82:	4b1d      	ldr	r3, [pc, #116]	; (8013ff8 <xTaskRemoveFromEventList+0xb0>)
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d11c      	bne.n	8013fc4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	3304      	adds	r3, #4
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f7fe fbc2 	bl	8012718 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f98:	2201      	movs	r2, #1
 8013f9a:	409a      	lsls	r2, r3
 8013f9c:	4b17      	ldr	r3, [pc, #92]	; (8013ffc <xTaskRemoveFromEventList+0xb4>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	4313      	orrs	r3, r2
 8013fa2:	4a16      	ldr	r2, [pc, #88]	; (8013ffc <xTaskRemoveFromEventList+0xb4>)
 8013fa4:	6013      	str	r3, [r2, #0]
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013faa:	4613      	mov	r3, r2
 8013fac:	009b      	lsls	r3, r3, #2
 8013fae:	4413      	add	r3, r2
 8013fb0:	009b      	lsls	r3, r3, #2
 8013fb2:	4a13      	ldr	r2, [pc, #76]	; (8014000 <xTaskRemoveFromEventList+0xb8>)
 8013fb4:	441a      	add	r2, r3
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	3304      	adds	r3, #4
 8013fba:	4619      	mov	r1, r3
 8013fbc:	4610      	mov	r0, r2
 8013fbe:	f7fe fb4e 	bl	801265e <vListInsertEnd>
 8013fc2:	e005      	b.n	8013fd0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	3318      	adds	r3, #24
 8013fc8:	4619      	mov	r1, r3
 8013fca:	480e      	ldr	r0, [pc, #56]	; (8014004 <xTaskRemoveFromEventList+0xbc>)
 8013fcc:	f7fe fb47 	bl	801265e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fd4:	4b0c      	ldr	r3, [pc, #48]	; (8014008 <xTaskRemoveFromEventList+0xc0>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d905      	bls.n	8013fea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013fde:	2301      	movs	r3, #1
 8013fe0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013fe2:	4b0a      	ldr	r3, [pc, #40]	; (801400c <xTaskRemoveFromEventList+0xc4>)
 8013fe4:	2201      	movs	r2, #1
 8013fe6:	601a      	str	r2, [r3, #0]
 8013fe8:	e001      	b.n	8013fee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013fea:	2300      	movs	r3, #0
 8013fec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013fee:	697b      	ldr	r3, [r7, #20]
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3718      	adds	r7, #24
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	200058f8 	.word	0x200058f8
 8013ffc:	200058d8 	.word	0x200058d8
 8014000:	200057d4 	.word	0x200057d4
 8014004:	20005890 	.word	0x20005890
 8014008:	200057d0 	.word	0x200057d0
 801400c:	200058e4 	.word	0x200058e4

08014010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014010:	b480      	push	{r7}
 8014012:	b083      	sub	sp, #12
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014018:	4b06      	ldr	r3, [pc, #24]	; (8014034 <vTaskInternalSetTimeOutState+0x24>)
 801401a:	681a      	ldr	r2, [r3, #0]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014020:	4b05      	ldr	r3, [pc, #20]	; (8014038 <vTaskInternalSetTimeOutState+0x28>)
 8014022:	681a      	ldr	r2, [r3, #0]
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	605a      	str	r2, [r3, #4]
}
 8014028:	bf00      	nop
 801402a:	370c      	adds	r7, #12
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr
 8014034:	200058e8 	.word	0x200058e8
 8014038:	200058d4 	.word	0x200058d4

0801403c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b088      	sub	sp, #32
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d10c      	bne.n	8014066 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014050:	b672      	cpsid	i
 8014052:	f383 8811 	msr	BASEPRI, r3
 8014056:	f3bf 8f6f 	isb	sy
 801405a:	f3bf 8f4f 	dsb	sy
 801405e:	b662      	cpsie	i
 8014060:	613b      	str	r3, [r7, #16]
}
 8014062:	bf00      	nop
 8014064:	e7fe      	b.n	8014064 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d10c      	bne.n	8014086 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014070:	b672      	cpsid	i
 8014072:	f383 8811 	msr	BASEPRI, r3
 8014076:	f3bf 8f6f 	isb	sy
 801407a:	f3bf 8f4f 	dsb	sy
 801407e:	b662      	cpsie	i
 8014080:	60fb      	str	r3, [r7, #12]
}
 8014082:	bf00      	nop
 8014084:	e7fe      	b.n	8014084 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8014086:	f000 fc71 	bl	801496c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801408a:	4b1d      	ldr	r3, [pc, #116]	; (8014100 <xTaskCheckForTimeOut+0xc4>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	69ba      	ldr	r2, [r7, #24]
 8014096:	1ad3      	subs	r3, r2, r3
 8014098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140a2:	d102      	bne.n	80140aa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80140a4:	2300      	movs	r3, #0
 80140a6:	61fb      	str	r3, [r7, #28]
 80140a8:	e023      	b.n	80140f2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681a      	ldr	r2, [r3, #0]
 80140ae:	4b15      	ldr	r3, [pc, #84]	; (8014104 <xTaskCheckForTimeOut+0xc8>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d007      	beq.n	80140c6 <xTaskCheckForTimeOut+0x8a>
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	69ba      	ldr	r2, [r7, #24]
 80140bc:	429a      	cmp	r2, r3
 80140be:	d302      	bcc.n	80140c6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80140c0:	2301      	movs	r3, #1
 80140c2:	61fb      	str	r3, [r7, #28]
 80140c4:	e015      	b.n	80140f2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	697a      	ldr	r2, [r7, #20]
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d20b      	bcs.n	80140e8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	681a      	ldr	r2, [r3, #0]
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	1ad2      	subs	r2, r2, r3
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f7ff ff97 	bl	8014010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140e2:	2300      	movs	r3, #0
 80140e4:	61fb      	str	r3, [r7, #28]
 80140e6:	e004      	b.n	80140f2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	2200      	movs	r2, #0
 80140ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80140ee:	2301      	movs	r3, #1
 80140f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80140f2:	f000 fc6f 	bl	80149d4 <vPortExitCritical>

	return xReturn;
 80140f6:	69fb      	ldr	r3, [r7, #28]
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3720      	adds	r7, #32
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	200058d4 	.word	0x200058d4
 8014104:	200058e8 	.word	0x200058e8

08014108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014108:	b480      	push	{r7}
 801410a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801410c:	4b03      	ldr	r3, [pc, #12]	; (801411c <vTaskMissedYield+0x14>)
 801410e:	2201      	movs	r2, #1
 8014110:	601a      	str	r2, [r3, #0]
}
 8014112:	bf00      	nop
 8014114:	46bd      	mov	sp, r7
 8014116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411a:	4770      	bx	lr
 801411c:	200058e4 	.word	0x200058e4

08014120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014128:	f000 f854 	bl	80141d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801412c:	4b07      	ldr	r3, [pc, #28]	; (801414c <prvIdleTask+0x2c>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	2b01      	cmp	r3, #1
 8014132:	d907      	bls.n	8014144 <prvIdleTask+0x24>
			{
				taskYIELD();
 8014134:	4b06      	ldr	r3, [pc, #24]	; (8014150 <prvIdleTask+0x30>)
 8014136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801413a:	601a      	str	r2, [r3, #0]
 801413c:	f3bf 8f4f 	dsb	sy
 8014140:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8014144:	f7ec fa36 	bl	80005b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014148:	e7ee      	b.n	8014128 <prvIdleTask+0x8>
 801414a:	bf00      	nop
 801414c:	200057d4 	.word	0x200057d4
 8014150:	e000ed04 	.word	0xe000ed04

08014154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801415a:	2300      	movs	r3, #0
 801415c:	607b      	str	r3, [r7, #4]
 801415e:	e00c      	b.n	801417a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	4613      	mov	r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	4413      	add	r3, r2
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	4a12      	ldr	r2, [pc, #72]	; (80141b4 <prvInitialiseTaskLists+0x60>)
 801416c:	4413      	add	r3, r2
 801416e:	4618      	mov	r0, r3
 8014170:	f7fe fa48 	bl	8012604 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	3301      	adds	r3, #1
 8014178:	607b      	str	r3, [r7, #4]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2b06      	cmp	r3, #6
 801417e:	d9ef      	bls.n	8014160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014180:	480d      	ldr	r0, [pc, #52]	; (80141b8 <prvInitialiseTaskLists+0x64>)
 8014182:	f7fe fa3f 	bl	8012604 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014186:	480d      	ldr	r0, [pc, #52]	; (80141bc <prvInitialiseTaskLists+0x68>)
 8014188:	f7fe fa3c 	bl	8012604 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801418c:	480c      	ldr	r0, [pc, #48]	; (80141c0 <prvInitialiseTaskLists+0x6c>)
 801418e:	f7fe fa39 	bl	8012604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014192:	480c      	ldr	r0, [pc, #48]	; (80141c4 <prvInitialiseTaskLists+0x70>)
 8014194:	f7fe fa36 	bl	8012604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014198:	480b      	ldr	r0, [pc, #44]	; (80141c8 <prvInitialiseTaskLists+0x74>)
 801419a:	f7fe fa33 	bl	8012604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801419e:	4b0b      	ldr	r3, [pc, #44]	; (80141cc <prvInitialiseTaskLists+0x78>)
 80141a0:	4a05      	ldr	r2, [pc, #20]	; (80141b8 <prvInitialiseTaskLists+0x64>)
 80141a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80141a4:	4b0a      	ldr	r3, [pc, #40]	; (80141d0 <prvInitialiseTaskLists+0x7c>)
 80141a6:	4a05      	ldr	r2, [pc, #20]	; (80141bc <prvInitialiseTaskLists+0x68>)
 80141a8:	601a      	str	r2, [r3, #0]
}
 80141aa:	bf00      	nop
 80141ac:	3708      	adds	r7, #8
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	200057d4 	.word	0x200057d4
 80141b8:	20005860 	.word	0x20005860
 80141bc:	20005874 	.word	0x20005874
 80141c0:	20005890 	.word	0x20005890
 80141c4:	200058a4 	.word	0x200058a4
 80141c8:	200058bc 	.word	0x200058bc
 80141cc:	20005888 	.word	0x20005888
 80141d0:	2000588c 	.word	0x2000588c

080141d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141da:	e019      	b.n	8014210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141dc:	f000 fbc6 	bl	801496c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141e0:	4b10      	ldr	r3, [pc, #64]	; (8014224 <prvCheckTasksWaitingTermination+0x50>)
 80141e2:	68db      	ldr	r3, [r3, #12]
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	3304      	adds	r3, #4
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7fe fa93 	bl	8012718 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80141f2:	4b0d      	ldr	r3, [pc, #52]	; (8014228 <prvCheckTasksWaitingTermination+0x54>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	3b01      	subs	r3, #1
 80141f8:	4a0b      	ldr	r2, [pc, #44]	; (8014228 <prvCheckTasksWaitingTermination+0x54>)
 80141fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80141fc:	4b0b      	ldr	r3, [pc, #44]	; (801422c <prvCheckTasksWaitingTermination+0x58>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	3b01      	subs	r3, #1
 8014202:	4a0a      	ldr	r2, [pc, #40]	; (801422c <prvCheckTasksWaitingTermination+0x58>)
 8014204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014206:	f000 fbe5 	bl	80149d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f000 f810 	bl	8014230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014210:	4b06      	ldr	r3, [pc, #24]	; (801422c <prvCheckTasksWaitingTermination+0x58>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d1e1      	bne.n	80141dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014218:	bf00      	nop
 801421a:	bf00      	nop
 801421c:	3708      	adds	r7, #8
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	200058a4 	.word	0x200058a4
 8014228:	200058d0 	.word	0x200058d0
 801422c:	200058b8 	.word	0x200058b8

08014230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014230:	b580      	push	{r7, lr}
 8014232:	b084      	sub	sp, #16
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801423e:	2b00      	cmp	r3, #0
 8014240:	d108      	bne.n	8014254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014246:	4618      	mov	r0, r3
 8014248:	f000 fd8c 	bl	8014d64 <vPortFree>
				vPortFree( pxTCB );
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f000 fd89 	bl	8014d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014252:	e01a      	b.n	801428a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801425a:	2b01      	cmp	r3, #1
 801425c:	d103      	bne.n	8014266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 fd80 	bl	8014d64 <vPortFree>
	}
 8014264:	e011      	b.n	801428a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801426c:	2b02      	cmp	r3, #2
 801426e:	d00c      	beq.n	801428a <prvDeleteTCB+0x5a>
	__asm volatile
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	b672      	cpsid	i
 8014276:	f383 8811 	msr	BASEPRI, r3
 801427a:	f3bf 8f6f 	isb	sy
 801427e:	f3bf 8f4f 	dsb	sy
 8014282:	b662      	cpsie	i
 8014284:	60fb      	str	r3, [r7, #12]
}
 8014286:	bf00      	nop
 8014288:	e7fe      	b.n	8014288 <prvDeleteTCB+0x58>
	}
 801428a:	bf00      	nop
 801428c:	3710      	adds	r7, #16
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
	...

08014294 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014294:	b480      	push	{r7}
 8014296:	b083      	sub	sp, #12
 8014298:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801429a:	4b0c      	ldr	r3, [pc, #48]	; (80142cc <prvResetNextTaskUnblockTime+0x38>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d104      	bne.n	80142ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80142a4:	4b0a      	ldr	r3, [pc, #40]	; (80142d0 <prvResetNextTaskUnblockTime+0x3c>)
 80142a6:	f04f 32ff 	mov.w	r2, #4294967295
 80142aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80142ac:	e008      	b.n	80142c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142ae:	4b07      	ldr	r3, [pc, #28]	; (80142cc <prvResetNextTaskUnblockTime+0x38>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	68db      	ldr	r3, [r3, #12]
 80142b4:	68db      	ldr	r3, [r3, #12]
 80142b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	4a04      	ldr	r2, [pc, #16]	; (80142d0 <prvResetNextTaskUnblockTime+0x3c>)
 80142be:	6013      	str	r3, [r2, #0]
}
 80142c0:	bf00      	nop
 80142c2:	370c      	adds	r7, #12
 80142c4:	46bd      	mov	sp, r7
 80142c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ca:	4770      	bx	lr
 80142cc:	20005888 	.word	0x20005888
 80142d0:	200058f0 	.word	0x200058f0

080142d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80142d4:	b480      	push	{r7}
 80142d6:	b083      	sub	sp, #12
 80142d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80142da:	4b0b      	ldr	r3, [pc, #44]	; (8014308 <xTaskGetSchedulerState+0x34>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d102      	bne.n	80142e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80142e2:	2301      	movs	r3, #1
 80142e4:	607b      	str	r3, [r7, #4]
 80142e6:	e008      	b.n	80142fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80142e8:	4b08      	ldr	r3, [pc, #32]	; (801430c <xTaskGetSchedulerState+0x38>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d102      	bne.n	80142f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80142f0:	2302      	movs	r3, #2
 80142f2:	607b      	str	r3, [r7, #4]
 80142f4:	e001      	b.n	80142fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80142f6:	2300      	movs	r3, #0
 80142f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80142fa:	687b      	ldr	r3, [r7, #4]
	}
 80142fc:	4618      	mov	r0, r3
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr
 8014308:	200058dc 	.word	0x200058dc
 801430c:	200058f8 	.word	0x200058f8

08014310 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014310:	b580      	push	{r7, lr}
 8014312:	b084      	sub	sp, #16
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801431c:	2300      	movs	r3, #0
 801431e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d069      	beq.n	80143fa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801432a:	4b36      	ldr	r3, [pc, #216]	; (8014404 <xTaskPriorityInherit+0xf4>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014330:	429a      	cmp	r2, r3
 8014332:	d259      	bcs.n	80143e8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	699b      	ldr	r3, [r3, #24]
 8014338:	2b00      	cmp	r3, #0
 801433a:	db06      	blt.n	801434a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801433c:	4b31      	ldr	r3, [pc, #196]	; (8014404 <xTaskPriorityInherit+0xf4>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014342:	f1c3 0207 	rsb	r2, r3, #7
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	6959      	ldr	r1, [r3, #20]
 801434e:	68bb      	ldr	r3, [r7, #8]
 8014350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014352:	4613      	mov	r3, r2
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	4413      	add	r3, r2
 8014358:	009b      	lsls	r3, r3, #2
 801435a:	4a2b      	ldr	r2, [pc, #172]	; (8014408 <xTaskPriorityInherit+0xf8>)
 801435c:	4413      	add	r3, r2
 801435e:	4299      	cmp	r1, r3
 8014360:	d13a      	bne.n	80143d8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	3304      	adds	r3, #4
 8014366:	4618      	mov	r0, r3
 8014368:	f7fe f9d6 	bl	8012718 <uxListRemove>
 801436c:	4603      	mov	r3, r0
 801436e:	2b00      	cmp	r3, #0
 8014370:	d115      	bne.n	801439e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014376:	4924      	ldr	r1, [pc, #144]	; (8014408 <xTaskPriorityInherit+0xf8>)
 8014378:	4613      	mov	r3, r2
 801437a:	009b      	lsls	r3, r3, #2
 801437c:	4413      	add	r3, r2
 801437e:	009b      	lsls	r3, r3, #2
 8014380:	440b      	add	r3, r1
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d10a      	bne.n	801439e <xTaskPriorityInherit+0x8e>
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801438c:	2201      	movs	r2, #1
 801438e:	fa02 f303 	lsl.w	r3, r2, r3
 8014392:	43da      	mvns	r2, r3
 8014394:	4b1d      	ldr	r3, [pc, #116]	; (801440c <xTaskPriorityInherit+0xfc>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	4013      	ands	r3, r2
 801439a:	4a1c      	ldr	r2, [pc, #112]	; (801440c <xTaskPriorityInherit+0xfc>)
 801439c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801439e:	4b19      	ldr	r3, [pc, #100]	; (8014404 <xTaskPriorityInherit+0xf4>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143ac:	2201      	movs	r2, #1
 80143ae:	409a      	lsls	r2, r3
 80143b0:	4b16      	ldr	r3, [pc, #88]	; (801440c <xTaskPriorityInherit+0xfc>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	4313      	orrs	r3, r2
 80143b6:	4a15      	ldr	r2, [pc, #84]	; (801440c <xTaskPriorityInherit+0xfc>)
 80143b8:	6013      	str	r3, [r2, #0]
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143be:	4613      	mov	r3, r2
 80143c0:	009b      	lsls	r3, r3, #2
 80143c2:	4413      	add	r3, r2
 80143c4:	009b      	lsls	r3, r3, #2
 80143c6:	4a10      	ldr	r2, [pc, #64]	; (8014408 <xTaskPriorityInherit+0xf8>)
 80143c8:	441a      	add	r2, r3
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	3304      	adds	r3, #4
 80143ce:	4619      	mov	r1, r3
 80143d0:	4610      	mov	r0, r2
 80143d2:	f7fe f944 	bl	801265e <vListInsertEnd>
 80143d6:	e004      	b.n	80143e2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80143d8:	4b0a      	ldr	r3, [pc, #40]	; (8014404 <xTaskPriorityInherit+0xf4>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80143e2:	2301      	movs	r3, #1
 80143e4:	60fb      	str	r3, [r7, #12]
 80143e6:	e008      	b.n	80143fa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143ec:	4b05      	ldr	r3, [pc, #20]	; (8014404 <xTaskPriorityInherit+0xf4>)
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d201      	bcs.n	80143fa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80143f6:	2301      	movs	r3, #1
 80143f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80143fa:	68fb      	ldr	r3, [r7, #12]
	}
 80143fc:	4618      	mov	r0, r3
 80143fe:	3710      	adds	r7, #16
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	200057d0 	.word	0x200057d0
 8014408:	200057d4 	.word	0x200057d4
 801440c:	200058d8 	.word	0x200058d8

08014410 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014410:	b580      	push	{r7, lr}
 8014412:	b086      	sub	sp, #24
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801441c:	2300      	movs	r3, #0
 801441e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d072      	beq.n	801450c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014426:	4b3c      	ldr	r3, [pc, #240]	; (8014518 <xTaskPriorityDisinherit+0x108>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	693a      	ldr	r2, [r7, #16]
 801442c:	429a      	cmp	r2, r3
 801442e:	d00c      	beq.n	801444a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8014430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014434:	b672      	cpsid	i
 8014436:	f383 8811 	msr	BASEPRI, r3
 801443a:	f3bf 8f6f 	isb	sy
 801443e:	f3bf 8f4f 	dsb	sy
 8014442:	b662      	cpsie	i
 8014444:	60fb      	str	r3, [r7, #12]
}
 8014446:	bf00      	nop
 8014448:	e7fe      	b.n	8014448 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801444e:	2b00      	cmp	r3, #0
 8014450:	d10c      	bne.n	801446c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8014452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014456:	b672      	cpsid	i
 8014458:	f383 8811 	msr	BASEPRI, r3
 801445c:	f3bf 8f6f 	isb	sy
 8014460:	f3bf 8f4f 	dsb	sy
 8014464:	b662      	cpsie	i
 8014466:	60bb      	str	r3, [r7, #8]
}
 8014468:	bf00      	nop
 801446a:	e7fe      	b.n	801446a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014470:	1e5a      	subs	r2, r3, #1
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801447e:	429a      	cmp	r2, r3
 8014480:	d044      	beq.n	801450c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014486:	2b00      	cmp	r3, #0
 8014488:	d140      	bne.n	801450c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	3304      	adds	r3, #4
 801448e:	4618      	mov	r0, r3
 8014490:	f7fe f942 	bl	8012718 <uxListRemove>
 8014494:	4603      	mov	r3, r0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d115      	bne.n	80144c6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801449e:	491f      	ldr	r1, [pc, #124]	; (801451c <xTaskPriorityDisinherit+0x10c>)
 80144a0:	4613      	mov	r3, r2
 80144a2:	009b      	lsls	r3, r3, #2
 80144a4:	4413      	add	r3, r2
 80144a6:	009b      	lsls	r3, r3, #2
 80144a8:	440b      	add	r3, r1
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d10a      	bne.n	80144c6 <xTaskPriorityDisinherit+0xb6>
 80144b0:	693b      	ldr	r3, [r7, #16]
 80144b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144b4:	2201      	movs	r2, #1
 80144b6:	fa02 f303 	lsl.w	r3, r2, r3
 80144ba:	43da      	mvns	r2, r3
 80144bc:	4b18      	ldr	r3, [pc, #96]	; (8014520 <xTaskPriorityDisinherit+0x110>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	4013      	ands	r3, r2
 80144c2:	4a17      	ldr	r2, [pc, #92]	; (8014520 <xTaskPriorityDisinherit+0x110>)
 80144c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144d2:	f1c3 0207 	rsb	r2, r3, #7
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80144da:	693b      	ldr	r3, [r7, #16]
 80144dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144de:	2201      	movs	r2, #1
 80144e0:	409a      	lsls	r2, r3
 80144e2:	4b0f      	ldr	r3, [pc, #60]	; (8014520 <xTaskPriorityDisinherit+0x110>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	4313      	orrs	r3, r2
 80144e8:	4a0d      	ldr	r2, [pc, #52]	; (8014520 <xTaskPriorityDisinherit+0x110>)
 80144ea:	6013      	str	r3, [r2, #0]
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144f0:	4613      	mov	r3, r2
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	4413      	add	r3, r2
 80144f6:	009b      	lsls	r3, r3, #2
 80144f8:	4a08      	ldr	r2, [pc, #32]	; (801451c <xTaskPriorityDisinherit+0x10c>)
 80144fa:	441a      	add	r2, r3
 80144fc:	693b      	ldr	r3, [r7, #16]
 80144fe:	3304      	adds	r3, #4
 8014500:	4619      	mov	r1, r3
 8014502:	4610      	mov	r0, r2
 8014504:	f7fe f8ab 	bl	801265e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014508:	2301      	movs	r3, #1
 801450a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801450c:	697b      	ldr	r3, [r7, #20]
	}
 801450e:	4618      	mov	r0, r3
 8014510:	3718      	adds	r7, #24
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
 8014516:	bf00      	nop
 8014518:	200057d0 	.word	0x200057d0
 801451c:	200057d4 	.word	0x200057d4
 8014520:	200058d8 	.word	0x200058d8

08014524 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014524:	b580      	push	{r7, lr}
 8014526:	b088      	sub	sp, #32
 8014528:	af00      	add	r7, sp, #0
 801452a:	6078      	str	r0, [r7, #4]
 801452c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014532:	2301      	movs	r3, #1
 8014534:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2b00      	cmp	r3, #0
 801453a:	f000 8087 	beq.w	801464c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801453e:	69bb      	ldr	r3, [r7, #24]
 8014540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014542:	2b00      	cmp	r3, #0
 8014544:	d10c      	bne.n	8014560 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8014546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801454a:	b672      	cpsid	i
 801454c:	f383 8811 	msr	BASEPRI, r3
 8014550:	f3bf 8f6f 	isb	sy
 8014554:	f3bf 8f4f 	dsb	sy
 8014558:	b662      	cpsie	i
 801455a:	60fb      	str	r3, [r7, #12]
}
 801455c:	bf00      	nop
 801455e:	e7fe      	b.n	801455e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014564:	683a      	ldr	r2, [r7, #0]
 8014566:	429a      	cmp	r2, r3
 8014568:	d902      	bls.n	8014570 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	61fb      	str	r3, [r7, #28]
 801456e:	e002      	b.n	8014576 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014570:	69bb      	ldr	r3, [r7, #24]
 8014572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014574:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801457a:	69fa      	ldr	r2, [r7, #28]
 801457c:	429a      	cmp	r2, r3
 801457e:	d065      	beq.n	801464c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014580:	69bb      	ldr	r3, [r7, #24]
 8014582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014584:	697a      	ldr	r2, [r7, #20]
 8014586:	429a      	cmp	r2, r3
 8014588:	d160      	bne.n	801464c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801458a:	4b32      	ldr	r3, [pc, #200]	; (8014654 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	69ba      	ldr	r2, [r7, #24]
 8014590:	429a      	cmp	r2, r3
 8014592:	d10c      	bne.n	80145ae <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8014594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014598:	b672      	cpsid	i
 801459a:	f383 8811 	msr	BASEPRI, r3
 801459e:	f3bf 8f6f 	isb	sy
 80145a2:	f3bf 8f4f 	dsb	sy
 80145a6:	b662      	cpsie	i
 80145a8:	60bb      	str	r3, [r7, #8]
}
 80145aa:	bf00      	nop
 80145ac:	e7fe      	b.n	80145ac <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	69fa      	ldr	r2, [r7, #28]
 80145b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80145ba:	69bb      	ldr	r3, [r7, #24]
 80145bc:	699b      	ldr	r3, [r3, #24]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	db04      	blt.n	80145cc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145c2:	69fb      	ldr	r3, [r7, #28]
 80145c4:	f1c3 0207 	rsb	r2, r3, #7
 80145c8:	69bb      	ldr	r3, [r7, #24]
 80145ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80145cc:	69bb      	ldr	r3, [r7, #24]
 80145ce:	6959      	ldr	r1, [r3, #20]
 80145d0:	693a      	ldr	r2, [r7, #16]
 80145d2:	4613      	mov	r3, r2
 80145d4:	009b      	lsls	r3, r3, #2
 80145d6:	4413      	add	r3, r2
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	4a1f      	ldr	r2, [pc, #124]	; (8014658 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80145dc:	4413      	add	r3, r2
 80145de:	4299      	cmp	r1, r3
 80145e0:	d134      	bne.n	801464c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80145e2:	69bb      	ldr	r3, [r7, #24]
 80145e4:	3304      	adds	r3, #4
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fe f896 	bl	8012718 <uxListRemove>
 80145ec:	4603      	mov	r3, r0
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d115      	bne.n	801461e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145f6:	4918      	ldr	r1, [pc, #96]	; (8014658 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80145f8:	4613      	mov	r3, r2
 80145fa:	009b      	lsls	r3, r3, #2
 80145fc:	4413      	add	r3, r2
 80145fe:	009b      	lsls	r3, r3, #2
 8014600:	440b      	add	r3, r1
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d10a      	bne.n	801461e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801460c:	2201      	movs	r2, #1
 801460e:	fa02 f303 	lsl.w	r3, r2, r3
 8014612:	43da      	mvns	r2, r3
 8014614:	4b11      	ldr	r3, [pc, #68]	; (801465c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	4013      	ands	r3, r2
 801461a:	4a10      	ldr	r2, [pc, #64]	; (801465c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801461c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014622:	2201      	movs	r2, #1
 8014624:	409a      	lsls	r2, r3
 8014626:	4b0d      	ldr	r3, [pc, #52]	; (801465c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	4313      	orrs	r3, r2
 801462c:	4a0b      	ldr	r2, [pc, #44]	; (801465c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801462e:	6013      	str	r3, [r2, #0]
 8014630:	69bb      	ldr	r3, [r7, #24]
 8014632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014634:	4613      	mov	r3, r2
 8014636:	009b      	lsls	r3, r3, #2
 8014638:	4413      	add	r3, r2
 801463a:	009b      	lsls	r3, r3, #2
 801463c:	4a06      	ldr	r2, [pc, #24]	; (8014658 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801463e:	441a      	add	r2, r3
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	3304      	adds	r3, #4
 8014644:	4619      	mov	r1, r3
 8014646:	4610      	mov	r0, r2
 8014648:	f7fe f809 	bl	801265e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801464c:	bf00      	nop
 801464e:	3720      	adds	r7, #32
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}
 8014654:	200057d0 	.word	0x200057d0
 8014658:	200057d4 	.word	0x200057d4
 801465c:	200058d8 	.word	0x200058d8

08014660 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014660:	b480      	push	{r7}
 8014662:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014664:	4b07      	ldr	r3, [pc, #28]	; (8014684 <pvTaskIncrementMutexHeldCount+0x24>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d004      	beq.n	8014676 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801466c:	4b05      	ldr	r3, [pc, #20]	; (8014684 <pvTaskIncrementMutexHeldCount+0x24>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014672:	3201      	adds	r2, #1
 8014674:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8014676:	4b03      	ldr	r3, [pc, #12]	; (8014684 <pvTaskIncrementMutexHeldCount+0x24>)
 8014678:	681b      	ldr	r3, [r3, #0]
	}
 801467a:	4618      	mov	r0, r3
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr
 8014684:	200057d0 	.word	0x200057d0

08014688 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b084      	sub	sp, #16
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
 8014690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014692:	4b29      	ldr	r3, [pc, #164]	; (8014738 <prvAddCurrentTaskToDelayedList+0xb0>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014698:	4b28      	ldr	r3, [pc, #160]	; (801473c <prvAddCurrentTaskToDelayedList+0xb4>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	3304      	adds	r3, #4
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fe f83a 	bl	8012718 <uxListRemove>
 80146a4:	4603      	mov	r3, r0
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d10b      	bne.n	80146c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80146aa:	4b24      	ldr	r3, [pc, #144]	; (801473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146b0:	2201      	movs	r2, #1
 80146b2:	fa02 f303 	lsl.w	r3, r2, r3
 80146b6:	43da      	mvns	r2, r3
 80146b8:	4b21      	ldr	r3, [pc, #132]	; (8014740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4013      	ands	r3, r2
 80146be:	4a20      	ldr	r2, [pc, #128]	; (8014740 <prvAddCurrentTaskToDelayedList+0xb8>)
 80146c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146c8:	d10a      	bne.n	80146e0 <prvAddCurrentTaskToDelayedList+0x58>
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d007      	beq.n	80146e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146d0:	4b1a      	ldr	r3, [pc, #104]	; (801473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	3304      	adds	r3, #4
 80146d6:	4619      	mov	r1, r3
 80146d8:	481a      	ldr	r0, [pc, #104]	; (8014744 <prvAddCurrentTaskToDelayedList+0xbc>)
 80146da:	f7fd ffc0 	bl	801265e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80146de:	e026      	b.n	801472e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80146e0:	68fa      	ldr	r2, [r7, #12]
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	4413      	add	r3, r2
 80146e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80146e8:	4b14      	ldr	r3, [pc, #80]	; (801473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	68ba      	ldr	r2, [r7, #8]
 80146ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80146f0:	68ba      	ldr	r2, [r7, #8]
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d209      	bcs.n	801470c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146f8:	4b13      	ldr	r3, [pc, #76]	; (8014748 <prvAddCurrentTaskToDelayedList+0xc0>)
 80146fa:	681a      	ldr	r2, [r3, #0]
 80146fc:	4b0f      	ldr	r3, [pc, #60]	; (801473c <prvAddCurrentTaskToDelayedList+0xb4>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	3304      	adds	r3, #4
 8014702:	4619      	mov	r1, r3
 8014704:	4610      	mov	r0, r2
 8014706:	f7fd ffce 	bl	80126a6 <vListInsert>
}
 801470a:	e010      	b.n	801472e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801470c:	4b0f      	ldr	r3, [pc, #60]	; (801474c <prvAddCurrentTaskToDelayedList+0xc4>)
 801470e:	681a      	ldr	r2, [r3, #0]
 8014710:	4b0a      	ldr	r3, [pc, #40]	; (801473c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	3304      	adds	r3, #4
 8014716:	4619      	mov	r1, r3
 8014718:	4610      	mov	r0, r2
 801471a:	f7fd ffc4 	bl	80126a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801471e:	4b0c      	ldr	r3, [pc, #48]	; (8014750 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	68ba      	ldr	r2, [r7, #8]
 8014724:	429a      	cmp	r2, r3
 8014726:	d202      	bcs.n	801472e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014728:	4a09      	ldr	r2, [pc, #36]	; (8014750 <prvAddCurrentTaskToDelayedList+0xc8>)
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	6013      	str	r3, [r2, #0]
}
 801472e:	bf00      	nop
 8014730:	3710      	adds	r7, #16
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
 8014736:	bf00      	nop
 8014738:	200058d4 	.word	0x200058d4
 801473c:	200057d0 	.word	0x200057d0
 8014740:	200058d8 	.word	0x200058d8
 8014744:	200058bc 	.word	0x200058bc
 8014748:	2000588c 	.word	0x2000588c
 801474c:	20005888 	.word	0x20005888
 8014750:	200058f0 	.word	0x200058f0

08014754 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014754:	b480      	push	{r7}
 8014756:	b085      	sub	sp, #20
 8014758:	af00      	add	r7, sp, #0
 801475a:	60f8      	str	r0, [r7, #12]
 801475c:	60b9      	str	r1, [r7, #8]
 801475e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	3b04      	subs	r3, #4
 8014764:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801476c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	3b04      	subs	r3, #4
 8014772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	f023 0201 	bic.w	r2, r3, #1
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	3b04      	subs	r3, #4
 8014782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014784:	4a0c      	ldr	r2, [pc, #48]	; (80147b8 <pxPortInitialiseStack+0x64>)
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	3b14      	subs	r3, #20
 801478e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	3b04      	subs	r3, #4
 801479a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f06f 0202 	mvn.w	r2, #2
 80147a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	3b20      	subs	r3, #32
 80147a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80147aa:	68fb      	ldr	r3, [r7, #12]
}
 80147ac:	4618      	mov	r0, r3
 80147ae:	3714      	adds	r7, #20
 80147b0:	46bd      	mov	sp, r7
 80147b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b6:	4770      	bx	lr
 80147b8:	080147bd 	.word	0x080147bd

080147bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80147bc:	b480      	push	{r7}
 80147be:	b085      	sub	sp, #20
 80147c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80147c2:	2300      	movs	r3, #0
 80147c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80147c6:	4b14      	ldr	r3, [pc, #80]	; (8014818 <prvTaskExitError+0x5c>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147ce:	d00c      	beq.n	80147ea <prvTaskExitError+0x2e>
	__asm volatile
 80147d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d4:	b672      	cpsid	i
 80147d6:	f383 8811 	msr	BASEPRI, r3
 80147da:	f3bf 8f6f 	isb	sy
 80147de:	f3bf 8f4f 	dsb	sy
 80147e2:	b662      	cpsie	i
 80147e4:	60fb      	str	r3, [r7, #12]
}
 80147e6:	bf00      	nop
 80147e8:	e7fe      	b.n	80147e8 <prvTaskExitError+0x2c>
	__asm volatile
 80147ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ee:	b672      	cpsid	i
 80147f0:	f383 8811 	msr	BASEPRI, r3
 80147f4:	f3bf 8f6f 	isb	sy
 80147f8:	f3bf 8f4f 	dsb	sy
 80147fc:	b662      	cpsie	i
 80147fe:	60bb      	str	r3, [r7, #8]
}
 8014800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014802:	bf00      	nop
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d0fc      	beq.n	8014804 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801480a:	bf00      	nop
 801480c:	bf00      	nop
 801480e:	3714      	adds	r7, #20
 8014810:	46bd      	mov	sp, r7
 8014812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014816:	4770      	bx	lr
 8014818:	20000040 	.word	0x20000040
 801481c:	00000000 	.word	0x00000000

08014820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014820:	4b07      	ldr	r3, [pc, #28]	; (8014840 <pxCurrentTCBConst2>)
 8014822:	6819      	ldr	r1, [r3, #0]
 8014824:	6808      	ldr	r0, [r1, #0]
 8014826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482a:	f380 8809 	msr	PSP, r0
 801482e:	f3bf 8f6f 	isb	sy
 8014832:	f04f 0000 	mov.w	r0, #0
 8014836:	f380 8811 	msr	BASEPRI, r0
 801483a:	4770      	bx	lr
 801483c:	f3af 8000 	nop.w

08014840 <pxCurrentTCBConst2>:
 8014840:	200057d0 	.word	0x200057d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014844:	bf00      	nop
 8014846:	bf00      	nop

08014848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014848:	4808      	ldr	r0, [pc, #32]	; (801486c <prvPortStartFirstTask+0x24>)
 801484a:	6800      	ldr	r0, [r0, #0]
 801484c:	6800      	ldr	r0, [r0, #0]
 801484e:	f380 8808 	msr	MSP, r0
 8014852:	f04f 0000 	mov.w	r0, #0
 8014856:	f380 8814 	msr	CONTROL, r0
 801485a:	b662      	cpsie	i
 801485c:	b661      	cpsie	f
 801485e:	f3bf 8f4f 	dsb	sy
 8014862:	f3bf 8f6f 	isb	sy
 8014866:	df00      	svc	0
 8014868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801486a:	bf00      	nop
 801486c:	e000ed08 	.word	0xe000ed08

08014870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014876:	4b37      	ldr	r3, [pc, #220]	; (8014954 <xPortStartScheduler+0xe4>)
 8014878:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	b2db      	uxtb	r3, r3
 8014880:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	22ff      	movs	r2, #255	; 0xff
 8014886:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	b2db      	uxtb	r3, r3
 801488e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014890:	78fb      	ldrb	r3, [r7, #3]
 8014892:	b2db      	uxtb	r3, r3
 8014894:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014898:	b2da      	uxtb	r2, r3
 801489a:	4b2f      	ldr	r3, [pc, #188]	; (8014958 <xPortStartScheduler+0xe8>)
 801489c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801489e:	4b2f      	ldr	r3, [pc, #188]	; (801495c <xPortStartScheduler+0xec>)
 80148a0:	2207      	movs	r2, #7
 80148a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148a4:	e009      	b.n	80148ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80148a6:	4b2d      	ldr	r3, [pc, #180]	; (801495c <xPortStartScheduler+0xec>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	3b01      	subs	r3, #1
 80148ac:	4a2b      	ldr	r2, [pc, #172]	; (801495c <xPortStartScheduler+0xec>)
 80148ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80148b0:	78fb      	ldrb	r3, [r7, #3]
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148ba:	78fb      	ldrb	r3, [r7, #3]
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148c2:	2b80      	cmp	r3, #128	; 0x80
 80148c4:	d0ef      	beq.n	80148a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80148c6:	4b25      	ldr	r3, [pc, #148]	; (801495c <xPortStartScheduler+0xec>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	f1c3 0307 	rsb	r3, r3, #7
 80148ce:	2b04      	cmp	r3, #4
 80148d0:	d00c      	beq.n	80148ec <xPortStartScheduler+0x7c>
	__asm volatile
 80148d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148d6:	b672      	cpsid	i
 80148d8:	f383 8811 	msr	BASEPRI, r3
 80148dc:	f3bf 8f6f 	isb	sy
 80148e0:	f3bf 8f4f 	dsb	sy
 80148e4:	b662      	cpsie	i
 80148e6:	60bb      	str	r3, [r7, #8]
}
 80148e8:	bf00      	nop
 80148ea:	e7fe      	b.n	80148ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80148ec:	4b1b      	ldr	r3, [pc, #108]	; (801495c <xPortStartScheduler+0xec>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	021b      	lsls	r3, r3, #8
 80148f2:	4a1a      	ldr	r2, [pc, #104]	; (801495c <xPortStartScheduler+0xec>)
 80148f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80148f6:	4b19      	ldr	r3, [pc, #100]	; (801495c <xPortStartScheduler+0xec>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80148fe:	4a17      	ldr	r2, [pc, #92]	; (801495c <xPortStartScheduler+0xec>)
 8014900:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	b2da      	uxtb	r2, r3
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801490a:	4b15      	ldr	r3, [pc, #84]	; (8014960 <xPortStartScheduler+0xf0>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	4a14      	ldr	r2, [pc, #80]	; (8014960 <xPortStartScheduler+0xf0>)
 8014910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014914:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014916:	4b12      	ldr	r3, [pc, #72]	; (8014960 <xPortStartScheduler+0xf0>)
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4a11      	ldr	r2, [pc, #68]	; (8014960 <xPortStartScheduler+0xf0>)
 801491c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014920:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014922:	f000 f8dd 	bl	8014ae0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014926:	4b0f      	ldr	r3, [pc, #60]	; (8014964 <xPortStartScheduler+0xf4>)
 8014928:	2200      	movs	r2, #0
 801492a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801492c:	f000 f8fc 	bl	8014b28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014930:	4b0d      	ldr	r3, [pc, #52]	; (8014968 <xPortStartScheduler+0xf8>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	4a0c      	ldr	r2, [pc, #48]	; (8014968 <xPortStartScheduler+0xf8>)
 8014936:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801493a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801493c:	f7ff ff84 	bl	8014848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014940:	f7ff fa5a 	bl	8013df8 <vTaskSwitchContext>
	prvTaskExitError();
 8014944:	f7ff ff3a 	bl	80147bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014948:	2300      	movs	r3, #0
}
 801494a:	4618      	mov	r0, r3
 801494c:	3710      	adds	r7, #16
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}
 8014952:	bf00      	nop
 8014954:	e000e400 	.word	0xe000e400
 8014958:	200058fc 	.word	0x200058fc
 801495c:	20005900 	.word	0x20005900
 8014960:	e000ed20 	.word	0xe000ed20
 8014964:	20000040 	.word	0x20000040
 8014968:	e000ef34 	.word	0xe000ef34

0801496c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801496c:	b480      	push	{r7}
 801496e:	b083      	sub	sp, #12
 8014970:	af00      	add	r7, sp, #0
	__asm volatile
 8014972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014976:	b672      	cpsid	i
 8014978:	f383 8811 	msr	BASEPRI, r3
 801497c:	f3bf 8f6f 	isb	sy
 8014980:	f3bf 8f4f 	dsb	sy
 8014984:	b662      	cpsie	i
 8014986:	607b      	str	r3, [r7, #4]
}
 8014988:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801498a:	4b10      	ldr	r3, [pc, #64]	; (80149cc <vPortEnterCritical+0x60>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	3301      	adds	r3, #1
 8014990:	4a0e      	ldr	r2, [pc, #56]	; (80149cc <vPortEnterCritical+0x60>)
 8014992:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014994:	4b0d      	ldr	r3, [pc, #52]	; (80149cc <vPortEnterCritical+0x60>)
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	2b01      	cmp	r3, #1
 801499a:	d111      	bne.n	80149c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801499c:	4b0c      	ldr	r3, [pc, #48]	; (80149d0 <vPortEnterCritical+0x64>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d00c      	beq.n	80149c0 <vPortEnterCritical+0x54>
	__asm volatile
 80149a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149aa:	b672      	cpsid	i
 80149ac:	f383 8811 	msr	BASEPRI, r3
 80149b0:	f3bf 8f6f 	isb	sy
 80149b4:	f3bf 8f4f 	dsb	sy
 80149b8:	b662      	cpsie	i
 80149ba:	603b      	str	r3, [r7, #0]
}
 80149bc:	bf00      	nop
 80149be:	e7fe      	b.n	80149be <vPortEnterCritical+0x52>
	}
}
 80149c0:	bf00      	nop
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr
 80149cc:	20000040 	.word	0x20000040
 80149d0:	e000ed04 	.word	0xe000ed04

080149d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80149d4:	b480      	push	{r7}
 80149d6:	b083      	sub	sp, #12
 80149d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80149da:	4b13      	ldr	r3, [pc, #76]	; (8014a28 <vPortExitCritical+0x54>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d10c      	bne.n	80149fc <vPortExitCritical+0x28>
	__asm volatile
 80149e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e6:	b672      	cpsid	i
 80149e8:	f383 8811 	msr	BASEPRI, r3
 80149ec:	f3bf 8f6f 	isb	sy
 80149f0:	f3bf 8f4f 	dsb	sy
 80149f4:	b662      	cpsie	i
 80149f6:	607b      	str	r3, [r7, #4]
}
 80149f8:	bf00      	nop
 80149fa:	e7fe      	b.n	80149fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80149fc:	4b0a      	ldr	r3, [pc, #40]	; (8014a28 <vPortExitCritical+0x54>)
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	3b01      	subs	r3, #1
 8014a02:	4a09      	ldr	r2, [pc, #36]	; (8014a28 <vPortExitCritical+0x54>)
 8014a04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014a06:	4b08      	ldr	r3, [pc, #32]	; (8014a28 <vPortExitCritical+0x54>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d105      	bne.n	8014a1a <vPortExitCritical+0x46>
 8014a0e:	2300      	movs	r3, #0
 8014a10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	f383 8811 	msr	BASEPRI, r3
}
 8014a18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014a1a:	bf00      	nop
 8014a1c:	370c      	adds	r7, #12
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a24:	4770      	bx	lr
 8014a26:	bf00      	nop
 8014a28:	20000040 	.word	0x20000040
 8014a2c:	00000000 	.word	0x00000000

08014a30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014a30:	f3ef 8009 	mrs	r0, PSP
 8014a34:	f3bf 8f6f 	isb	sy
 8014a38:	4b15      	ldr	r3, [pc, #84]	; (8014a90 <pxCurrentTCBConst>)
 8014a3a:	681a      	ldr	r2, [r3, #0]
 8014a3c:	f01e 0f10 	tst.w	lr, #16
 8014a40:	bf08      	it	eq
 8014a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a4a:	6010      	str	r0, [r2, #0]
 8014a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014a54:	b672      	cpsid	i
 8014a56:	f380 8811 	msr	BASEPRI, r0
 8014a5a:	f3bf 8f4f 	dsb	sy
 8014a5e:	f3bf 8f6f 	isb	sy
 8014a62:	b662      	cpsie	i
 8014a64:	f7ff f9c8 	bl	8013df8 <vTaskSwitchContext>
 8014a68:	f04f 0000 	mov.w	r0, #0
 8014a6c:	f380 8811 	msr	BASEPRI, r0
 8014a70:	bc09      	pop	{r0, r3}
 8014a72:	6819      	ldr	r1, [r3, #0]
 8014a74:	6808      	ldr	r0, [r1, #0]
 8014a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a7a:	f01e 0f10 	tst.w	lr, #16
 8014a7e:	bf08      	it	eq
 8014a80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014a84:	f380 8809 	msr	PSP, r0
 8014a88:	f3bf 8f6f 	isb	sy
 8014a8c:	4770      	bx	lr
 8014a8e:	bf00      	nop

08014a90 <pxCurrentTCBConst>:
 8014a90:	200057d0 	.word	0x200057d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014a94:	bf00      	nop
 8014a96:	bf00      	nop

08014a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8014a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa2:	b672      	cpsid	i
 8014aa4:	f383 8811 	msr	BASEPRI, r3
 8014aa8:	f3bf 8f6f 	isb	sy
 8014aac:	f3bf 8f4f 	dsb	sy
 8014ab0:	b662      	cpsie	i
 8014ab2:	607b      	str	r3, [r7, #4]
}
 8014ab4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ab6:	f7ff f8e5 	bl	8013c84 <xTaskIncrementTick>
 8014aba:	4603      	mov	r3, r0
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d003      	beq.n	8014ac8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014ac0:	4b06      	ldr	r3, [pc, #24]	; (8014adc <SysTick_Handler+0x44>)
 8014ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014ac6:	601a      	str	r2, [r3, #0]
 8014ac8:	2300      	movs	r3, #0
 8014aca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	f383 8811 	msr	BASEPRI, r3
}
 8014ad2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ad4:	bf00      	nop
 8014ad6:	3708      	adds	r7, #8
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	e000ed04 	.word	0xe000ed04

08014ae0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014ae0:	b480      	push	{r7}
 8014ae2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ae4:	4b0b      	ldr	r3, [pc, #44]	; (8014b14 <vPortSetupTimerInterrupt+0x34>)
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014aea:	4b0b      	ldr	r3, [pc, #44]	; (8014b18 <vPortSetupTimerInterrupt+0x38>)
 8014aec:	2200      	movs	r2, #0
 8014aee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014af0:	4b0a      	ldr	r3, [pc, #40]	; (8014b1c <vPortSetupTimerInterrupt+0x3c>)
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4a0a      	ldr	r2, [pc, #40]	; (8014b20 <vPortSetupTimerInterrupt+0x40>)
 8014af6:	fba2 2303 	umull	r2, r3, r2, r3
 8014afa:	099b      	lsrs	r3, r3, #6
 8014afc:	4a09      	ldr	r2, [pc, #36]	; (8014b24 <vPortSetupTimerInterrupt+0x44>)
 8014afe:	3b01      	subs	r3, #1
 8014b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014b02:	4b04      	ldr	r3, [pc, #16]	; (8014b14 <vPortSetupTimerInterrupt+0x34>)
 8014b04:	2207      	movs	r2, #7
 8014b06:	601a      	str	r2, [r3, #0]
}
 8014b08:	bf00      	nop
 8014b0a:	46bd      	mov	sp, r7
 8014b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b10:	4770      	bx	lr
 8014b12:	bf00      	nop
 8014b14:	e000e010 	.word	0xe000e010
 8014b18:	e000e018 	.word	0xe000e018
 8014b1c:	20000000 	.word	0x20000000
 8014b20:	10624dd3 	.word	0x10624dd3
 8014b24:	e000e014 	.word	0xe000e014

08014b28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014b28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014b38 <vPortEnableVFP+0x10>
 8014b2c:	6801      	ldr	r1, [r0, #0]
 8014b2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014b32:	6001      	str	r1, [r0, #0]
 8014b34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014b36:	bf00      	nop
 8014b38:	e000ed88 	.word	0xe000ed88

08014b3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b085      	sub	sp, #20
 8014b40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014b42:	f3ef 8305 	mrs	r3, IPSR
 8014b46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	2b0f      	cmp	r3, #15
 8014b4c:	d916      	bls.n	8014b7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014b4e:	4a19      	ldr	r2, [pc, #100]	; (8014bb4 <vPortValidateInterruptPriority+0x78>)
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	4413      	add	r3, r2
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014b58:	4b17      	ldr	r3, [pc, #92]	; (8014bb8 <vPortValidateInterruptPriority+0x7c>)
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	7afa      	ldrb	r2, [r7, #11]
 8014b5e:	429a      	cmp	r2, r3
 8014b60:	d20c      	bcs.n	8014b7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8014b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b66:	b672      	cpsid	i
 8014b68:	f383 8811 	msr	BASEPRI, r3
 8014b6c:	f3bf 8f6f 	isb	sy
 8014b70:	f3bf 8f4f 	dsb	sy
 8014b74:	b662      	cpsie	i
 8014b76:	607b      	str	r3, [r7, #4]
}
 8014b78:	bf00      	nop
 8014b7a:	e7fe      	b.n	8014b7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014b7c:	4b0f      	ldr	r3, [pc, #60]	; (8014bbc <vPortValidateInterruptPriority+0x80>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014b84:	4b0e      	ldr	r3, [pc, #56]	; (8014bc0 <vPortValidateInterruptPriority+0x84>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	d90c      	bls.n	8014ba6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8014b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b90:	b672      	cpsid	i
 8014b92:	f383 8811 	msr	BASEPRI, r3
 8014b96:	f3bf 8f6f 	isb	sy
 8014b9a:	f3bf 8f4f 	dsb	sy
 8014b9e:	b662      	cpsie	i
 8014ba0:	603b      	str	r3, [r7, #0]
}
 8014ba2:	bf00      	nop
 8014ba4:	e7fe      	b.n	8014ba4 <vPortValidateInterruptPriority+0x68>
	}
 8014ba6:	bf00      	nop
 8014ba8:	3714      	adds	r7, #20
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr
 8014bb2:	bf00      	nop
 8014bb4:	e000e3f0 	.word	0xe000e3f0
 8014bb8:	200058fc 	.word	0x200058fc
 8014bbc:	e000ed0c 	.word	0xe000ed0c
 8014bc0:	20005900 	.word	0x20005900

08014bc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b08a      	sub	sp, #40	; 0x28
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014bd0:	f7fe ff8a 	bl	8013ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014bd4:	4b5e      	ldr	r3, [pc, #376]	; (8014d50 <pvPortMalloc+0x18c>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d101      	bne.n	8014be0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014bdc:	f000 f920 	bl	8014e20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014be0:	4b5c      	ldr	r3, [pc, #368]	; (8014d54 <pvPortMalloc+0x190>)
 8014be2:	681a      	ldr	r2, [r3, #0]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	4013      	ands	r3, r2
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	f040 8092 	bne.w	8014d12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d01f      	beq.n	8014c34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8014bf4:	2208      	movs	r2, #8
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	4413      	add	r3, r2
 8014bfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f003 0307 	and.w	r3, r3, #7
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d016      	beq.n	8014c34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f023 0307 	bic.w	r3, r3, #7
 8014c0c:	3308      	adds	r3, #8
 8014c0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	f003 0307 	and.w	r3, r3, #7
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d00c      	beq.n	8014c34 <pvPortMalloc+0x70>
	__asm volatile
 8014c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c1e:	b672      	cpsid	i
 8014c20:	f383 8811 	msr	BASEPRI, r3
 8014c24:	f3bf 8f6f 	isb	sy
 8014c28:	f3bf 8f4f 	dsb	sy
 8014c2c:	b662      	cpsie	i
 8014c2e:	617b      	str	r3, [r7, #20]
}
 8014c30:	bf00      	nop
 8014c32:	e7fe      	b.n	8014c32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d06b      	beq.n	8014d12 <pvPortMalloc+0x14e>
 8014c3a:	4b47      	ldr	r3, [pc, #284]	; (8014d58 <pvPortMalloc+0x194>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d866      	bhi.n	8014d12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014c44:	4b45      	ldr	r3, [pc, #276]	; (8014d5c <pvPortMalloc+0x198>)
 8014c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014c48:	4b44      	ldr	r3, [pc, #272]	; (8014d5c <pvPortMalloc+0x198>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014c4e:	e004      	b.n	8014c5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8014c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	687a      	ldr	r2, [r7, #4]
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d903      	bls.n	8014c6c <pvPortMalloc+0xa8>
 8014c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d1f1      	bne.n	8014c50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014c6c:	4b38      	ldr	r3, [pc, #224]	; (8014d50 <pvPortMalloc+0x18c>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d04d      	beq.n	8014d12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014c76:	6a3b      	ldr	r3, [r7, #32]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	2208      	movs	r2, #8
 8014c7c:	4413      	add	r3, r2
 8014c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c82:	681a      	ldr	r2, [r3, #0]
 8014c84:	6a3b      	ldr	r3, [r7, #32]
 8014c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c8a:	685a      	ldr	r2, [r3, #4]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	1ad2      	subs	r2, r2, r3
 8014c90:	2308      	movs	r3, #8
 8014c92:	005b      	lsls	r3, r3, #1
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d921      	bls.n	8014cdc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	4413      	add	r3, r2
 8014c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014ca0:	69bb      	ldr	r3, [r7, #24]
 8014ca2:	f003 0307 	and.w	r3, r3, #7
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d00c      	beq.n	8014cc4 <pvPortMalloc+0x100>
	__asm volatile
 8014caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cae:	b672      	cpsid	i
 8014cb0:	f383 8811 	msr	BASEPRI, r3
 8014cb4:	f3bf 8f6f 	isb	sy
 8014cb8:	f3bf 8f4f 	dsb	sy
 8014cbc:	b662      	cpsie	i
 8014cbe:	613b      	str	r3, [r7, #16]
}
 8014cc0:	bf00      	nop
 8014cc2:	e7fe      	b.n	8014cc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cc6:	685a      	ldr	r2, [r3, #4]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	1ad2      	subs	r2, r2, r3
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014cd6:	69b8      	ldr	r0, [r7, #24]
 8014cd8:	f000 f904 	bl	8014ee4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014cdc:	4b1e      	ldr	r3, [pc, #120]	; (8014d58 <pvPortMalloc+0x194>)
 8014cde:	681a      	ldr	r2, [r3, #0]
 8014ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	1ad3      	subs	r3, r2, r3
 8014ce6:	4a1c      	ldr	r2, [pc, #112]	; (8014d58 <pvPortMalloc+0x194>)
 8014ce8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014cea:	4b1b      	ldr	r3, [pc, #108]	; (8014d58 <pvPortMalloc+0x194>)
 8014cec:	681a      	ldr	r2, [r3, #0]
 8014cee:	4b1c      	ldr	r3, [pc, #112]	; (8014d60 <pvPortMalloc+0x19c>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d203      	bcs.n	8014cfe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014cf6:	4b18      	ldr	r3, [pc, #96]	; (8014d58 <pvPortMalloc+0x194>)
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	4a19      	ldr	r2, [pc, #100]	; (8014d60 <pvPortMalloc+0x19c>)
 8014cfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d00:	685a      	ldr	r2, [r3, #4]
 8014d02:	4b14      	ldr	r3, [pc, #80]	; (8014d54 <pvPortMalloc+0x190>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	431a      	orrs	r2, r3
 8014d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0e:	2200      	movs	r2, #0
 8014d10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014d12:	f7fe fef7 	bl	8013b04 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8014d16:	69fb      	ldr	r3, [r7, #28]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d101      	bne.n	8014d20 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8014d1c:	f7eb fc5c 	bl	80005d8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	f003 0307 	and.w	r3, r3, #7
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d00c      	beq.n	8014d44 <pvPortMalloc+0x180>
	__asm volatile
 8014d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2e:	b672      	cpsid	i
 8014d30:	f383 8811 	msr	BASEPRI, r3
 8014d34:	f3bf 8f6f 	isb	sy
 8014d38:	f3bf 8f4f 	dsb	sy
 8014d3c:	b662      	cpsie	i
 8014d3e:	60fb      	str	r3, [r7, #12]
}
 8014d40:	bf00      	nop
 8014d42:	e7fe      	b.n	8014d42 <pvPortMalloc+0x17e>
	return pvReturn;
 8014d44:	69fb      	ldr	r3, [r7, #28]
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	3728      	adds	r7, #40	; 0x28
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	bd80      	pop	{r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	2000d90c 	.word	0x2000d90c
 8014d54:	2000d918 	.word	0x2000d918
 8014d58:	2000d910 	.word	0x2000d910
 8014d5c:	2000d904 	.word	0x2000d904
 8014d60:	2000d914 	.word	0x2000d914

08014d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b086      	sub	sp, #24
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d04c      	beq.n	8014e10 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014d76:	2308      	movs	r3, #8
 8014d78:	425b      	negs	r3, r3
 8014d7a:	697a      	ldr	r2, [r7, #20]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	685a      	ldr	r2, [r3, #4]
 8014d88:	4b23      	ldr	r3, [pc, #140]	; (8014e18 <vPortFree+0xb4>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	4013      	ands	r3, r2
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d10c      	bne.n	8014dac <vPortFree+0x48>
	__asm volatile
 8014d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d96:	b672      	cpsid	i
 8014d98:	f383 8811 	msr	BASEPRI, r3
 8014d9c:	f3bf 8f6f 	isb	sy
 8014da0:	f3bf 8f4f 	dsb	sy
 8014da4:	b662      	cpsie	i
 8014da6:	60fb      	str	r3, [r7, #12]
}
 8014da8:	bf00      	nop
 8014daa:	e7fe      	b.n	8014daa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d00c      	beq.n	8014dce <vPortFree+0x6a>
	__asm volatile
 8014db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db8:	b672      	cpsid	i
 8014dba:	f383 8811 	msr	BASEPRI, r3
 8014dbe:	f3bf 8f6f 	isb	sy
 8014dc2:	f3bf 8f4f 	dsb	sy
 8014dc6:	b662      	cpsie	i
 8014dc8:	60bb      	str	r3, [r7, #8]
}
 8014dca:	bf00      	nop
 8014dcc:	e7fe      	b.n	8014dcc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	685a      	ldr	r2, [r3, #4]
 8014dd2:	4b11      	ldr	r3, [pc, #68]	; (8014e18 <vPortFree+0xb4>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	4013      	ands	r3, r2
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d019      	beq.n	8014e10 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d115      	bne.n	8014e10 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	685a      	ldr	r2, [r3, #4]
 8014de8:	4b0b      	ldr	r3, [pc, #44]	; (8014e18 <vPortFree+0xb4>)
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	43db      	mvns	r3, r3
 8014dee:	401a      	ands	r2, r3
 8014df0:	693b      	ldr	r3, [r7, #16]
 8014df2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014df4:	f7fe fe78 	bl	8013ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	685a      	ldr	r2, [r3, #4]
 8014dfc:	4b07      	ldr	r3, [pc, #28]	; (8014e1c <vPortFree+0xb8>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4413      	add	r3, r2
 8014e02:	4a06      	ldr	r2, [pc, #24]	; (8014e1c <vPortFree+0xb8>)
 8014e04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014e06:	6938      	ldr	r0, [r7, #16]
 8014e08:	f000 f86c 	bl	8014ee4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014e0c:	f7fe fe7a 	bl	8013b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014e10:	bf00      	nop
 8014e12:	3718      	adds	r7, #24
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	2000d918 	.word	0x2000d918
 8014e1c:	2000d910 	.word	0x2000d910

08014e20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014e20:	b480      	push	{r7}
 8014e22:	b085      	sub	sp, #20
 8014e24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014e2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014e2c:	4b27      	ldr	r3, [pc, #156]	; (8014ecc <prvHeapInit+0xac>)
 8014e2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f003 0307 	and.w	r3, r3, #7
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d00c      	beq.n	8014e54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	3307      	adds	r3, #7
 8014e3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	f023 0307 	bic.w	r3, r3, #7
 8014e46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014e48:	68ba      	ldr	r2, [r7, #8]
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	1ad3      	subs	r3, r2, r3
 8014e4e:	4a1f      	ldr	r2, [pc, #124]	; (8014ecc <prvHeapInit+0xac>)
 8014e50:	4413      	add	r3, r2
 8014e52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014e58:	4a1d      	ldr	r2, [pc, #116]	; (8014ed0 <prvHeapInit+0xb0>)
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014e5e:	4b1c      	ldr	r3, [pc, #112]	; (8014ed0 <prvHeapInit+0xb0>)
 8014e60:	2200      	movs	r2, #0
 8014e62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	68ba      	ldr	r2, [r7, #8]
 8014e68:	4413      	add	r3, r2
 8014e6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014e6c:	2208      	movs	r2, #8
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	1a9b      	subs	r3, r3, r2
 8014e72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f023 0307 	bic.w	r3, r3, #7
 8014e7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	4a15      	ldr	r2, [pc, #84]	; (8014ed4 <prvHeapInit+0xb4>)
 8014e80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014e82:	4b14      	ldr	r3, [pc, #80]	; (8014ed4 <prvHeapInit+0xb4>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	2200      	movs	r2, #0
 8014e88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014e8a:	4b12      	ldr	r3, [pc, #72]	; (8014ed4 <prvHeapInit+0xb4>)
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	68fa      	ldr	r2, [r7, #12]
 8014e9a:	1ad2      	subs	r2, r2, r3
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014ea0:	4b0c      	ldr	r3, [pc, #48]	; (8014ed4 <prvHeapInit+0xb4>)
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	4a0a      	ldr	r2, [pc, #40]	; (8014ed8 <prvHeapInit+0xb8>)
 8014eae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	685b      	ldr	r3, [r3, #4]
 8014eb4:	4a09      	ldr	r2, [pc, #36]	; (8014edc <prvHeapInit+0xbc>)
 8014eb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014eb8:	4b09      	ldr	r3, [pc, #36]	; (8014ee0 <prvHeapInit+0xc0>)
 8014eba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014ebe:	601a      	str	r2, [r3, #0]
}
 8014ec0:	bf00      	nop
 8014ec2:	3714      	adds	r7, #20
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr
 8014ecc:	20005904 	.word	0x20005904
 8014ed0:	2000d904 	.word	0x2000d904
 8014ed4:	2000d90c 	.word	0x2000d90c
 8014ed8:	2000d914 	.word	0x2000d914
 8014edc:	2000d910 	.word	0x2000d910
 8014ee0:	2000d918 	.word	0x2000d918

08014ee4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b085      	sub	sp, #20
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014eec:	4b28      	ldr	r3, [pc, #160]	; (8014f90 <prvInsertBlockIntoFreeList+0xac>)
 8014eee:	60fb      	str	r3, [r7, #12]
 8014ef0:	e002      	b.n	8014ef8 <prvInsertBlockIntoFreeList+0x14>
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	60fb      	str	r3, [r7, #12]
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	687a      	ldr	r2, [r7, #4]
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d8f7      	bhi.n	8014ef2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	68ba      	ldr	r2, [r7, #8]
 8014f0c:	4413      	add	r3, r2
 8014f0e:	687a      	ldr	r2, [r7, #4]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d108      	bne.n	8014f26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	685a      	ldr	r2, [r3, #4]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	685b      	ldr	r3, [r3, #4]
 8014f1c:	441a      	add	r2, r3
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	68ba      	ldr	r2, [r7, #8]
 8014f30:	441a      	add	r2, r3
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d118      	bne.n	8014f6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	681a      	ldr	r2, [r3, #0]
 8014f3e:	4b15      	ldr	r3, [pc, #84]	; (8014f94 <prvInsertBlockIntoFreeList+0xb0>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d00d      	beq.n	8014f62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	685a      	ldr	r2, [r3, #4]
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	685b      	ldr	r3, [r3, #4]
 8014f50:	441a      	add	r2, r3
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	681a      	ldr	r2, [r3, #0]
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	601a      	str	r2, [r3, #0]
 8014f60:	e008      	b.n	8014f74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014f62:	4b0c      	ldr	r3, [pc, #48]	; (8014f94 <prvInsertBlockIntoFreeList+0xb0>)
 8014f64:	681a      	ldr	r2, [r3, #0]
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	601a      	str	r2, [r3, #0]
 8014f6a:	e003      	b.n	8014f74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	681a      	ldr	r2, [r3, #0]
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014f74:	68fa      	ldr	r2, [r7, #12]
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d002      	beq.n	8014f82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	687a      	ldr	r2, [r7, #4]
 8014f80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014f82:	bf00      	nop
 8014f84:	3714      	adds	r7, #20
 8014f86:	46bd      	mov	sp, r7
 8014f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8c:	4770      	bx	lr
 8014f8e:	bf00      	nop
 8014f90:	2000d904 	.word	0x2000d904
 8014f94:	2000d90c 	.word	0x2000d90c

08014f98 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b084      	sub	sp, #16
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
 8014fa0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8014fa2:	f007 fac5 	bl	801c530 <sys_timeouts_sleeptime>
 8014fa6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fae:	d10b      	bne.n	8014fc8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8014fb0:	4813      	ldr	r0, [pc, #76]	; (8015000 <tcpip_timeouts_mbox_fetch+0x68>)
 8014fb2:	f00a f83a 	bl	801f02a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	6839      	ldr	r1, [r7, #0]
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f009 ffac 	bl	801ef18 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8014fc0:	480f      	ldr	r0, [pc, #60]	; (8015000 <tcpip_timeouts_mbox_fetch+0x68>)
 8014fc2:	f00a f823 	bl	801f00c <sys_mutex_lock>
    return;
 8014fc6:	e018      	b.n	8014ffa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d102      	bne.n	8014fd4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8014fce:	f007 fa75 	bl	801c4bc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014fd2:	e7e6      	b.n	8014fa2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8014fd4:	480a      	ldr	r0, [pc, #40]	; (8015000 <tcpip_timeouts_mbox_fetch+0x68>)
 8014fd6:	f00a f828 	bl	801f02a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8014fda:	68fa      	ldr	r2, [r7, #12]
 8014fdc:	6839      	ldr	r1, [r7, #0]
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f009 ff9a 	bl	801ef18 <sys_arch_mbox_fetch>
 8014fe4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8014fe6:	4806      	ldr	r0, [pc, #24]	; (8015000 <tcpip_timeouts_mbox_fetch+0x68>)
 8014fe8:	f00a f810 	bl	801f00c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8014fec:	68bb      	ldr	r3, [r7, #8]
 8014fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ff2:	d102      	bne.n	8014ffa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8014ff4:	f007 fa62 	bl	801c4bc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014ff8:	e7d3      	b.n	8014fa2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8014ffa:	3710      	adds	r7, #16
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}
 8015000:	2000d928 	.word	0x2000d928

08015004 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801500c:	4810      	ldr	r0, [pc, #64]	; (8015050 <tcpip_thread+0x4c>)
 801500e:	f009 fffd 	bl	801f00c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8015012:	4b10      	ldr	r3, [pc, #64]	; (8015054 <tcpip_thread+0x50>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d005      	beq.n	8015026 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801501a:	4b0e      	ldr	r3, [pc, #56]	; (8015054 <tcpip_thread+0x50>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	4a0e      	ldr	r2, [pc, #56]	; (8015058 <tcpip_thread+0x54>)
 8015020:	6812      	ldr	r2, [r2, #0]
 8015022:	4610      	mov	r0, r2
 8015024:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8015026:	f107 030c 	add.w	r3, r7, #12
 801502a:	4619      	mov	r1, r3
 801502c:	480b      	ldr	r0, [pc, #44]	; (801505c <tcpip_thread+0x58>)
 801502e:	f7ff ffb3 	bl	8014f98 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d106      	bne.n	8015046 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015038:	4b09      	ldr	r3, [pc, #36]	; (8015060 <tcpip_thread+0x5c>)
 801503a:	2291      	movs	r2, #145	; 0x91
 801503c:	4909      	ldr	r1, [pc, #36]	; (8015064 <tcpip_thread+0x60>)
 801503e:	480a      	ldr	r0, [pc, #40]	; (8015068 <tcpip_thread+0x64>)
 8015040:	f00a fe42 	bl	801fcc8 <iprintf>
      continue;
 8015044:	e003      	b.n	801504e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	4618      	mov	r0, r3
 801504a:	f000 f80f 	bl	801506c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801504e:	e7ea      	b.n	8015026 <tcpip_thread+0x22>
 8015050:	2000d928 	.word	0x2000d928
 8015054:	2000d91c 	.word	0x2000d91c
 8015058:	2000d920 	.word	0x2000d920
 801505c:	2000d924 	.word	0x2000d924
 8015060:	080209a8 	.word	0x080209a8
 8015064:	080209d8 	.word	0x080209d8
 8015068:	080209f8 	.word	0x080209f8

0801506c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	2b02      	cmp	r3, #2
 801507a:	d026      	beq.n	80150ca <tcpip_thread_handle_msg+0x5e>
 801507c:	2b02      	cmp	r3, #2
 801507e:	dc2b      	bgt.n	80150d8 <tcpip_thread_handle_msg+0x6c>
 8015080:	2b00      	cmp	r3, #0
 8015082:	d002      	beq.n	801508a <tcpip_thread_handle_msg+0x1e>
 8015084:	2b01      	cmp	r3, #1
 8015086:	d015      	beq.n	80150b4 <tcpip_thread_handle_msg+0x48>
 8015088:	e026      	b.n	80150d8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	687a      	ldr	r2, [r7, #4]
 8015090:	6850      	ldr	r0, [r2, #4]
 8015092:	687a      	ldr	r2, [r7, #4]
 8015094:	6892      	ldr	r2, [r2, #8]
 8015096:	4611      	mov	r1, r2
 8015098:	4798      	blx	r3
 801509a:	4603      	mov	r3, r0
 801509c:	2b00      	cmp	r3, #0
 801509e:	d004      	beq.n	80150aa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	4618      	mov	r0, r3
 80150a6:	f001 fd0b 	bl	8016ac0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80150aa:	6879      	ldr	r1, [r7, #4]
 80150ac:	2009      	movs	r0, #9
 80150ae:	f000 fe63 	bl	8015d78 <memp_free>
      break;
 80150b2:	e018      	b.n	80150e6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	687a      	ldr	r2, [r7, #4]
 80150ba:	6892      	ldr	r2, [r2, #8]
 80150bc:	4610      	mov	r0, r2
 80150be:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80150c0:	6879      	ldr	r1, [r7, #4]
 80150c2:	2008      	movs	r0, #8
 80150c4:	f000 fe58 	bl	8015d78 <memp_free>
      break;
 80150c8:	e00d      	b.n	80150e6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	687a      	ldr	r2, [r7, #4]
 80150d0:	6892      	ldr	r2, [r2, #8]
 80150d2:	4610      	mov	r0, r2
 80150d4:	4798      	blx	r3
      break;
 80150d6:	e006      	b.n	80150e6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80150d8:	4b05      	ldr	r3, [pc, #20]	; (80150f0 <tcpip_thread_handle_msg+0x84>)
 80150da:	22cf      	movs	r2, #207	; 0xcf
 80150dc:	4905      	ldr	r1, [pc, #20]	; (80150f4 <tcpip_thread_handle_msg+0x88>)
 80150de:	4806      	ldr	r0, [pc, #24]	; (80150f8 <tcpip_thread_handle_msg+0x8c>)
 80150e0:	f00a fdf2 	bl	801fcc8 <iprintf>
      break;
 80150e4:	bf00      	nop
  }
}
 80150e6:	bf00      	nop
 80150e8:	3708      	adds	r7, #8
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}
 80150ee:	bf00      	nop
 80150f0:	080209a8 	.word	0x080209a8
 80150f4:	080209d8 	.word	0x080209d8
 80150f8:	080209f8 	.word	0x080209f8

080150fc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b086      	sub	sp, #24
 8015100:	af00      	add	r7, sp, #0
 8015102:	60f8      	str	r0, [r7, #12]
 8015104:	60b9      	str	r1, [r7, #8]
 8015106:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015108:	481a      	ldr	r0, [pc, #104]	; (8015174 <tcpip_inpkt+0x78>)
 801510a:	f009 ff44 	bl	801ef96 <sys_mbox_valid>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d105      	bne.n	8015120 <tcpip_inpkt+0x24>
 8015114:	4b18      	ldr	r3, [pc, #96]	; (8015178 <tcpip_inpkt+0x7c>)
 8015116:	22fc      	movs	r2, #252	; 0xfc
 8015118:	4918      	ldr	r1, [pc, #96]	; (801517c <tcpip_inpkt+0x80>)
 801511a:	4819      	ldr	r0, [pc, #100]	; (8015180 <tcpip_inpkt+0x84>)
 801511c:	f00a fdd4 	bl	801fcc8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015120:	2009      	movs	r0, #9
 8015122:	f000 fdb3 	bl	8015c8c <memp_malloc>
 8015126:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8015128:	697b      	ldr	r3, [r7, #20]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d102      	bne.n	8015134 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801512e:	f04f 33ff 	mov.w	r3, #4294967295
 8015132:	e01a      	b.n	801516a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	2200      	movs	r2, #0
 8015138:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801513a:	697b      	ldr	r3, [r7, #20]
 801513c:	68fa      	ldr	r2, [r7, #12]
 801513e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	68ba      	ldr	r2, [r7, #8]
 8015144:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	687a      	ldr	r2, [r7, #4]
 801514a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801514c:	6979      	ldr	r1, [r7, #20]
 801514e:	4809      	ldr	r0, [pc, #36]	; (8015174 <tcpip_inpkt+0x78>)
 8015150:	f009 fec8 	bl	801eee4 <sys_mbox_trypost>
 8015154:	4603      	mov	r3, r0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d006      	beq.n	8015168 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801515a:	6979      	ldr	r1, [r7, #20]
 801515c:	2009      	movs	r0, #9
 801515e:	f000 fe0b 	bl	8015d78 <memp_free>
    return ERR_MEM;
 8015162:	f04f 33ff 	mov.w	r3, #4294967295
 8015166:	e000      	b.n	801516a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8015168:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801516a:	4618      	mov	r0, r3
 801516c:	3718      	adds	r7, #24
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	2000d924 	.word	0x2000d924
 8015178:	080209a8 	.word	0x080209a8
 801517c:	08020a20 	.word	0x08020a20
 8015180:	080209f8 	.word	0x080209f8

08015184 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
 801518c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015194:	f003 0318 	and.w	r3, r3, #24
 8015198:	2b00      	cmp	r3, #0
 801519a:	d006      	beq.n	80151aa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801519c:	4a08      	ldr	r2, [pc, #32]	; (80151c0 <tcpip_input+0x3c>)
 801519e:	6839      	ldr	r1, [r7, #0]
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f7ff ffab 	bl	80150fc <tcpip_inpkt>
 80151a6:	4603      	mov	r3, r0
 80151a8:	e005      	b.n	80151b6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80151aa:	4a06      	ldr	r2, [pc, #24]	; (80151c4 <tcpip_input+0x40>)
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f7ff ffa4 	bl	80150fc <tcpip_inpkt>
 80151b4:	4603      	mov	r3, r0
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3708      	adds	r7, #8
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd80      	pop	{r7, pc}
 80151be:	bf00      	nop
 80151c0:	0801ecf5 	.word	0x0801ecf5
 80151c4:	0801dbfd 	.word	0x0801dbfd

080151c8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b084      	sub	sp, #16
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
 80151d0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80151d2:	4819      	ldr	r0, [pc, #100]	; (8015238 <tcpip_try_callback+0x70>)
 80151d4:	f009 fedf 	bl	801ef96 <sys_mbox_valid>
 80151d8:	4603      	mov	r3, r0
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d106      	bne.n	80151ec <tcpip_try_callback+0x24>
 80151de:	4b17      	ldr	r3, [pc, #92]	; (801523c <tcpip_try_callback+0x74>)
 80151e0:	f240 125d 	movw	r2, #349	; 0x15d
 80151e4:	4916      	ldr	r1, [pc, #88]	; (8015240 <tcpip_try_callback+0x78>)
 80151e6:	4817      	ldr	r0, [pc, #92]	; (8015244 <tcpip_try_callback+0x7c>)
 80151e8:	f00a fd6e 	bl	801fcc8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80151ec:	2008      	movs	r0, #8
 80151ee:	f000 fd4d 	bl	8015c8c <memp_malloc>
 80151f2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d102      	bne.n	8015200 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80151fa:	f04f 33ff 	mov.w	r3, #4294967295
 80151fe:	e017      	b.n	8015230 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	2201      	movs	r2, #1
 8015204:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	687a      	ldr	r2, [r7, #4]
 801520a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	683a      	ldr	r2, [r7, #0]
 8015210:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015212:	68f9      	ldr	r1, [r7, #12]
 8015214:	4808      	ldr	r0, [pc, #32]	; (8015238 <tcpip_try_callback+0x70>)
 8015216:	f009 fe65 	bl	801eee4 <sys_mbox_trypost>
 801521a:	4603      	mov	r3, r0
 801521c:	2b00      	cmp	r3, #0
 801521e:	d006      	beq.n	801522e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8015220:	68f9      	ldr	r1, [r7, #12]
 8015222:	2008      	movs	r0, #8
 8015224:	f000 fda8 	bl	8015d78 <memp_free>
    return ERR_MEM;
 8015228:	f04f 33ff 	mov.w	r3, #4294967295
 801522c:	e000      	b.n	8015230 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801522e:	2300      	movs	r3, #0
}
 8015230:	4618      	mov	r0, r3
 8015232:	3710      	adds	r7, #16
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	2000d924 	.word	0x2000d924
 801523c:	080209a8 	.word	0x080209a8
 8015240:	08020a20 	.word	0x08020a20
 8015244:	080209f8 	.word	0x080209f8

08015248 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b084      	sub	sp, #16
 801524c:	af02      	add	r7, sp, #8
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	6039      	str	r1, [r7, #0]
  lwip_init();
 8015252:	f000 f871 	bl	8015338 <lwip_init>

  tcpip_init_done = initfunc;
 8015256:	4a17      	ldr	r2, [pc, #92]	; (80152b4 <tcpip_init+0x6c>)
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801525c:	4a16      	ldr	r2, [pc, #88]	; (80152b8 <tcpip_init+0x70>)
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015262:	2106      	movs	r1, #6
 8015264:	4815      	ldr	r0, [pc, #84]	; (80152bc <tcpip_init+0x74>)
 8015266:	f009 fe1b 	bl	801eea0 <sys_mbox_new>
 801526a:	4603      	mov	r3, r0
 801526c:	2b00      	cmp	r3, #0
 801526e:	d006      	beq.n	801527e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8015270:	4b13      	ldr	r3, [pc, #76]	; (80152c0 <tcpip_init+0x78>)
 8015272:	f240 2261 	movw	r2, #609	; 0x261
 8015276:	4913      	ldr	r1, [pc, #76]	; (80152c4 <tcpip_init+0x7c>)
 8015278:	4813      	ldr	r0, [pc, #76]	; (80152c8 <tcpip_init+0x80>)
 801527a:	f00a fd25 	bl	801fcc8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801527e:	4813      	ldr	r0, [pc, #76]	; (80152cc <tcpip_init+0x84>)
 8015280:	f009 fea8 	bl	801efd4 <sys_mutex_new>
 8015284:	4603      	mov	r3, r0
 8015286:	2b00      	cmp	r3, #0
 8015288:	d006      	beq.n	8015298 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801528a:	4b0d      	ldr	r3, [pc, #52]	; (80152c0 <tcpip_init+0x78>)
 801528c:	f240 2265 	movw	r2, #613	; 0x265
 8015290:	490f      	ldr	r1, [pc, #60]	; (80152d0 <tcpip_init+0x88>)
 8015292:	480d      	ldr	r0, [pc, #52]	; (80152c8 <tcpip_init+0x80>)
 8015294:	f00a fd18 	bl	801fcc8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015298:	2300      	movs	r3, #0
 801529a:	9300      	str	r3, [sp, #0]
 801529c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152a0:	2200      	movs	r2, #0
 80152a2:	490c      	ldr	r1, [pc, #48]	; (80152d4 <tcpip_init+0x8c>)
 80152a4:	480c      	ldr	r0, [pc, #48]	; (80152d8 <tcpip_init+0x90>)
 80152a6:	f009 fecd 	bl	801f044 <sys_thread_new>
}
 80152aa:	bf00      	nop
 80152ac:	3708      	adds	r7, #8
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	2000d91c 	.word	0x2000d91c
 80152b8:	2000d920 	.word	0x2000d920
 80152bc:	2000d924 	.word	0x2000d924
 80152c0:	080209a8 	.word	0x080209a8
 80152c4:	08020a30 	.word	0x08020a30
 80152c8:	080209f8 	.word	0x080209f8
 80152cc:	2000d928 	.word	0x2000d928
 80152d0:	08020a54 	.word	0x08020a54
 80152d4:	08015005 	.word	0x08015005
 80152d8:	08020a78 	.word	0x08020a78

080152dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80152dc:	b480      	push	{r7}
 80152de:	b083      	sub	sp, #12
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	4603      	mov	r3, r0
 80152e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80152e6:	88fb      	ldrh	r3, [r7, #6]
 80152e8:	021b      	lsls	r3, r3, #8
 80152ea:	b21a      	sxth	r2, r3
 80152ec:	88fb      	ldrh	r3, [r7, #6]
 80152ee:	0a1b      	lsrs	r3, r3, #8
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	b21b      	sxth	r3, r3
 80152f4:	4313      	orrs	r3, r2
 80152f6:	b21b      	sxth	r3, r3
 80152f8:	b29b      	uxth	r3, r3
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	370c      	adds	r7, #12
 80152fe:	46bd      	mov	sp, r7
 8015300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015304:	4770      	bx	lr

08015306 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8015306:	b480      	push	{r7}
 8015308:	b083      	sub	sp, #12
 801530a:	af00      	add	r7, sp, #0
 801530c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	061a      	lsls	r2, r3, #24
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	021b      	lsls	r3, r3, #8
 8015316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801531a:	431a      	orrs	r2, r3
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	0a1b      	lsrs	r3, r3, #8
 8015320:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015324:	431a      	orrs	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	0e1b      	lsrs	r3, r3, #24
 801532a:	4313      	orrs	r3, r2
}
 801532c:	4618      	mov	r0, r3
 801532e:	370c      	adds	r7, #12
 8015330:	46bd      	mov	sp, r7
 8015332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015336:	4770      	bx	lr

08015338 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b082      	sub	sp, #8
 801533c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801533e:	2300      	movs	r3, #0
 8015340:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8015342:	f009 fe39 	bl	801efb8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015346:	f000 f8d5 	bl	80154f4 <mem_init>
  memp_init();
 801534a:	f000 fc31 	bl	8015bb0 <memp_init>
  pbuf_init();
  netif_init();
 801534e:	f000 fd3d 	bl	8015dcc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8015352:	f007 f925 	bl	801c5a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015356:	f001 fe4d 	bl	8016ff4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801535a:	f007 f867 	bl	801c42c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801535e:	bf00      	nop
 8015360:	3708      	adds	r7, #8
 8015362:	46bd      	mov	sp, r7
 8015364:	bd80      	pop	{r7, pc}
	...

08015368 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015368:	b480      	push	{r7}
 801536a:	b083      	sub	sp, #12
 801536c:	af00      	add	r7, sp, #0
 801536e:	4603      	mov	r3, r0
 8015370:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8015372:	4b05      	ldr	r3, [pc, #20]	; (8015388 <ptr_to_mem+0x20>)
 8015374:	681a      	ldr	r2, [r3, #0]
 8015376:	88fb      	ldrh	r3, [r7, #6]
 8015378:	4413      	add	r3, r2
}
 801537a:	4618      	mov	r0, r3
 801537c:	370c      	adds	r7, #12
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr
 8015386:	bf00      	nop
 8015388:	2000df98 	.word	0x2000df98

0801538c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801538c:	b480      	push	{r7}
 801538e:	b083      	sub	sp, #12
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8015394:	4b05      	ldr	r3, [pc, #20]	; (80153ac <mem_to_ptr+0x20>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	687a      	ldr	r2, [r7, #4]
 801539a:	1ad3      	subs	r3, r2, r3
 801539c:	b29b      	uxth	r3, r3
}
 801539e:	4618      	mov	r0, r3
 80153a0:	370c      	adds	r7, #12
 80153a2:	46bd      	mov	sp, r7
 80153a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a8:	4770      	bx	lr
 80153aa:	bf00      	nop
 80153ac:	2000df98 	.word	0x2000df98

080153b0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80153b0:	b590      	push	{r4, r7, lr}
 80153b2:	b085      	sub	sp, #20
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80153b8:	4b45      	ldr	r3, [pc, #276]	; (80154d0 <plug_holes+0x120>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d206      	bcs.n	80153d0 <plug_holes+0x20>
 80153c2:	4b44      	ldr	r3, [pc, #272]	; (80154d4 <plug_holes+0x124>)
 80153c4:	f240 12df 	movw	r2, #479	; 0x1df
 80153c8:	4943      	ldr	r1, [pc, #268]	; (80154d8 <plug_holes+0x128>)
 80153ca:	4844      	ldr	r0, [pc, #272]	; (80154dc <plug_holes+0x12c>)
 80153cc:	f00a fc7c 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80153d0:	4b43      	ldr	r3, [pc, #268]	; (80154e0 <plug_holes+0x130>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	429a      	cmp	r2, r3
 80153d8:	d306      	bcc.n	80153e8 <plug_holes+0x38>
 80153da:	4b3e      	ldr	r3, [pc, #248]	; (80154d4 <plug_holes+0x124>)
 80153dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80153e0:	4940      	ldr	r1, [pc, #256]	; (80154e4 <plug_holes+0x134>)
 80153e2:	483e      	ldr	r0, [pc, #248]	; (80154dc <plug_holes+0x12c>)
 80153e4:	f00a fc70 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	791b      	ldrb	r3, [r3, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d006      	beq.n	80153fe <plug_holes+0x4e>
 80153f0:	4b38      	ldr	r3, [pc, #224]	; (80154d4 <plug_holes+0x124>)
 80153f2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80153f6:	493c      	ldr	r1, [pc, #240]	; (80154e8 <plug_holes+0x138>)
 80153f8:	4838      	ldr	r0, [pc, #224]	; (80154dc <plug_holes+0x12c>)
 80153fa:	f00a fc65 	bl	801fcc8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	881b      	ldrh	r3, [r3, #0]
 8015402:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015406:	d906      	bls.n	8015416 <plug_holes+0x66>
 8015408:	4b32      	ldr	r3, [pc, #200]	; (80154d4 <plug_holes+0x124>)
 801540a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801540e:	4937      	ldr	r1, [pc, #220]	; (80154ec <plug_holes+0x13c>)
 8015410:	4832      	ldr	r0, [pc, #200]	; (80154dc <plug_holes+0x12c>)
 8015412:	f00a fc59 	bl	801fcc8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	881b      	ldrh	r3, [r3, #0]
 801541a:	4618      	mov	r0, r3
 801541c:	f7ff ffa4 	bl	8015368 <ptr_to_mem>
 8015420:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	429a      	cmp	r2, r3
 8015428:	d024      	beq.n	8015474 <plug_holes+0xc4>
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	791b      	ldrb	r3, [r3, #4]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d120      	bne.n	8015474 <plug_holes+0xc4>
 8015432:	4b2b      	ldr	r3, [pc, #172]	; (80154e0 <plug_holes+0x130>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	68fa      	ldr	r2, [r7, #12]
 8015438:	429a      	cmp	r2, r3
 801543a:	d01b      	beq.n	8015474 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801543c:	4b2c      	ldr	r3, [pc, #176]	; (80154f0 <plug_holes+0x140>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	68fa      	ldr	r2, [r7, #12]
 8015442:	429a      	cmp	r2, r3
 8015444:	d102      	bne.n	801544c <plug_holes+0x9c>
      lfree = mem;
 8015446:	4a2a      	ldr	r2, [pc, #168]	; (80154f0 <plug_holes+0x140>)
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	881a      	ldrh	r2, [r3, #0]
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	881b      	ldrh	r3, [r3, #0]
 8015458:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801545c:	d00a      	beq.n	8015474 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	881b      	ldrh	r3, [r3, #0]
 8015462:	4618      	mov	r0, r3
 8015464:	f7ff ff80 	bl	8015368 <ptr_to_mem>
 8015468:	4604      	mov	r4, r0
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f7ff ff8e 	bl	801538c <mem_to_ptr>
 8015470:	4603      	mov	r3, r0
 8015472:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	885b      	ldrh	r3, [r3, #2]
 8015478:	4618      	mov	r0, r3
 801547a:	f7ff ff75 	bl	8015368 <ptr_to_mem>
 801547e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8015480:	68ba      	ldr	r2, [r7, #8]
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	429a      	cmp	r2, r3
 8015486:	d01f      	beq.n	80154c8 <plug_holes+0x118>
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	791b      	ldrb	r3, [r3, #4]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d11b      	bne.n	80154c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8015490:	4b17      	ldr	r3, [pc, #92]	; (80154f0 <plug_holes+0x140>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	687a      	ldr	r2, [r7, #4]
 8015496:	429a      	cmp	r2, r3
 8015498:	d102      	bne.n	80154a0 <plug_holes+0xf0>
      lfree = pmem;
 801549a:	4a15      	ldr	r2, [pc, #84]	; (80154f0 <plug_holes+0x140>)
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	881a      	ldrh	r2, [r3, #0]
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	881b      	ldrh	r3, [r3, #0]
 80154ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80154b0:	d00a      	beq.n	80154c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	881b      	ldrh	r3, [r3, #0]
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7ff ff56 	bl	8015368 <ptr_to_mem>
 80154bc:	4604      	mov	r4, r0
 80154be:	68b8      	ldr	r0, [r7, #8]
 80154c0:	f7ff ff64 	bl	801538c <mem_to_ptr>
 80154c4:	4603      	mov	r3, r0
 80154c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80154c8:	bf00      	nop
 80154ca:	3714      	adds	r7, #20
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd90      	pop	{r4, r7, pc}
 80154d0:	2000df98 	.word	0x2000df98
 80154d4:	08020a88 	.word	0x08020a88
 80154d8:	08020ab8 	.word	0x08020ab8
 80154dc:	08020ad0 	.word	0x08020ad0
 80154e0:	2000df9c 	.word	0x2000df9c
 80154e4:	08020af8 	.word	0x08020af8
 80154e8:	08020b14 	.word	0x08020b14
 80154ec:	08020b30 	.word	0x08020b30
 80154f0:	2000dfa4 	.word	0x2000dfa4

080154f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80154fa:	4b1f      	ldr	r3, [pc, #124]	; (8015578 <mem_init+0x84>)
 80154fc:	3303      	adds	r3, #3
 80154fe:	f023 0303 	bic.w	r3, r3, #3
 8015502:	461a      	mov	r2, r3
 8015504:	4b1d      	ldr	r3, [pc, #116]	; (801557c <mem_init+0x88>)
 8015506:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8015508:	4b1c      	ldr	r3, [pc, #112]	; (801557c <mem_init+0x88>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015514:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	2200      	movs	r2, #0
 801551a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8015522:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8015526:	f7ff ff1f 	bl	8015368 <ptr_to_mem>
 801552a:	4603      	mov	r3, r0
 801552c:	4a14      	ldr	r2, [pc, #80]	; (8015580 <mem_init+0x8c>)
 801552e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8015530:	4b13      	ldr	r3, [pc, #76]	; (8015580 <mem_init+0x8c>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	2201      	movs	r2, #1
 8015536:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8015538:	4b11      	ldr	r3, [pc, #68]	; (8015580 <mem_init+0x8c>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015540:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8015542:	4b0f      	ldr	r3, [pc, #60]	; (8015580 <mem_init+0x8c>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801554a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801554c:	4b0b      	ldr	r3, [pc, #44]	; (801557c <mem_init+0x88>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	4a0c      	ldr	r2, [pc, #48]	; (8015584 <mem_init+0x90>)
 8015552:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8015554:	480c      	ldr	r0, [pc, #48]	; (8015588 <mem_init+0x94>)
 8015556:	f009 fd3d 	bl	801efd4 <sys_mutex_new>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d006      	beq.n	801556e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8015560:	4b0a      	ldr	r3, [pc, #40]	; (801558c <mem_init+0x98>)
 8015562:	f240 221f 	movw	r2, #543	; 0x21f
 8015566:	490a      	ldr	r1, [pc, #40]	; (8015590 <mem_init+0x9c>)
 8015568:	480a      	ldr	r0, [pc, #40]	; (8015594 <mem_init+0xa0>)
 801556a:	f00a fbad 	bl	801fcc8 <iprintf>
  }
}
 801556e:	bf00      	nop
 8015570:	3708      	adds	r7, #8
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}
 8015576:	bf00      	nop
 8015578:	2000d944 	.word	0x2000d944
 801557c:	2000df98 	.word	0x2000df98
 8015580:	2000df9c 	.word	0x2000df9c
 8015584:	2000dfa4 	.word	0x2000dfa4
 8015588:	2000dfa0 	.word	0x2000dfa0
 801558c:	08020a88 	.word	0x08020a88
 8015590:	08020b5c 	.word	0x08020b5c
 8015594:	08020ad0 	.word	0x08020ad0

08015598 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b086      	sub	sp, #24
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f7ff fef3 	bl	801538c <mem_to_ptr>
 80155a6:	4603      	mov	r3, r0
 80155a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	881b      	ldrh	r3, [r3, #0]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7ff feda 	bl	8015368 <ptr_to_mem>
 80155b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	885b      	ldrh	r3, [r3, #2]
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7ff fed4 	bl	8015368 <ptr_to_mem>
 80155c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	881b      	ldrh	r3, [r3, #0]
 80155c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80155ca:	d818      	bhi.n	80155fe <mem_link_valid+0x66>
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	885b      	ldrh	r3, [r3, #2]
 80155d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80155d4:	d813      	bhi.n	80155fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80155da:	8afa      	ldrh	r2, [r7, #22]
 80155dc:	429a      	cmp	r2, r3
 80155de:	d004      	beq.n	80155ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	881b      	ldrh	r3, [r3, #0]
 80155e4:	8afa      	ldrh	r2, [r7, #22]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d109      	bne.n	80155fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80155ea:	4b08      	ldr	r3, [pc, #32]	; (801560c <mem_link_valid+0x74>)
 80155ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80155ee:	693a      	ldr	r2, [r7, #16]
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d006      	beq.n	8015602 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80155f4:	693b      	ldr	r3, [r7, #16]
 80155f6:	885b      	ldrh	r3, [r3, #2]
 80155f8:	8afa      	ldrh	r2, [r7, #22]
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d001      	beq.n	8015602 <mem_link_valid+0x6a>
    return 0;
 80155fe:	2300      	movs	r3, #0
 8015600:	e000      	b.n	8015604 <mem_link_valid+0x6c>
  }
  return 1;
 8015602:	2301      	movs	r3, #1
}
 8015604:	4618      	mov	r0, r3
 8015606:	3718      	adds	r7, #24
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}
 801560c:	2000df9c 	.word	0x2000df9c

08015610 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b088      	sub	sp, #32
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d070      	beq.n	8015700 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f003 0303 	and.w	r3, r3, #3
 8015624:	2b00      	cmp	r3, #0
 8015626:	d00d      	beq.n	8015644 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8015628:	4b37      	ldr	r3, [pc, #220]	; (8015708 <mem_free+0xf8>)
 801562a:	f240 2273 	movw	r2, #627	; 0x273
 801562e:	4937      	ldr	r1, [pc, #220]	; (801570c <mem_free+0xfc>)
 8015630:	4837      	ldr	r0, [pc, #220]	; (8015710 <mem_free+0x100>)
 8015632:	f00a fb49 	bl	801fcc8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015636:	f009 fd2b 	bl	801f090 <sys_arch_protect>
 801563a:	60f8      	str	r0, [r7, #12]
 801563c:	68f8      	ldr	r0, [r7, #12]
 801563e:	f009 fd35 	bl	801f0ac <sys_arch_unprotect>
    return;
 8015642:	e05e      	b.n	8015702 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	3b08      	subs	r3, #8
 8015648:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801564a:	4b32      	ldr	r3, [pc, #200]	; (8015714 <mem_free+0x104>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	69fa      	ldr	r2, [r7, #28]
 8015650:	429a      	cmp	r2, r3
 8015652:	d306      	bcc.n	8015662 <mem_free+0x52>
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f103 020c 	add.w	r2, r3, #12
 801565a:	4b2f      	ldr	r3, [pc, #188]	; (8015718 <mem_free+0x108>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	429a      	cmp	r2, r3
 8015660:	d90d      	bls.n	801567e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8015662:	4b29      	ldr	r3, [pc, #164]	; (8015708 <mem_free+0xf8>)
 8015664:	f240 227f 	movw	r2, #639	; 0x27f
 8015668:	492c      	ldr	r1, [pc, #176]	; (801571c <mem_free+0x10c>)
 801566a:	4829      	ldr	r0, [pc, #164]	; (8015710 <mem_free+0x100>)
 801566c:	f00a fb2c 	bl	801fcc8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8015670:	f009 fd0e 	bl	801f090 <sys_arch_protect>
 8015674:	6138      	str	r0, [r7, #16]
 8015676:	6938      	ldr	r0, [r7, #16]
 8015678:	f009 fd18 	bl	801f0ac <sys_arch_unprotect>
    return;
 801567c:	e041      	b.n	8015702 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801567e:	4828      	ldr	r0, [pc, #160]	; (8015720 <mem_free+0x110>)
 8015680:	f009 fcc4 	bl	801f00c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8015684:	69fb      	ldr	r3, [r7, #28]
 8015686:	791b      	ldrb	r3, [r3, #4]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d110      	bne.n	80156ae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801568c:	4b1e      	ldr	r3, [pc, #120]	; (8015708 <mem_free+0xf8>)
 801568e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8015692:	4924      	ldr	r1, [pc, #144]	; (8015724 <mem_free+0x114>)
 8015694:	481e      	ldr	r0, [pc, #120]	; (8015710 <mem_free+0x100>)
 8015696:	f00a fb17 	bl	801fcc8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801569a:	4821      	ldr	r0, [pc, #132]	; (8015720 <mem_free+0x110>)
 801569c:	f009 fcc5 	bl	801f02a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80156a0:	f009 fcf6 	bl	801f090 <sys_arch_protect>
 80156a4:	6178      	str	r0, [r7, #20]
 80156a6:	6978      	ldr	r0, [r7, #20]
 80156a8:	f009 fd00 	bl	801f0ac <sys_arch_unprotect>
    return;
 80156ac:	e029      	b.n	8015702 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80156ae:	69f8      	ldr	r0, [r7, #28]
 80156b0:	f7ff ff72 	bl	8015598 <mem_link_valid>
 80156b4:	4603      	mov	r3, r0
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d110      	bne.n	80156dc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80156ba:	4b13      	ldr	r3, [pc, #76]	; (8015708 <mem_free+0xf8>)
 80156bc:	f240 2295 	movw	r2, #661	; 0x295
 80156c0:	4919      	ldr	r1, [pc, #100]	; (8015728 <mem_free+0x118>)
 80156c2:	4813      	ldr	r0, [pc, #76]	; (8015710 <mem_free+0x100>)
 80156c4:	f00a fb00 	bl	801fcc8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80156c8:	4815      	ldr	r0, [pc, #84]	; (8015720 <mem_free+0x110>)
 80156ca:	f009 fcae 	bl	801f02a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80156ce:	f009 fcdf 	bl	801f090 <sys_arch_protect>
 80156d2:	61b8      	str	r0, [r7, #24]
 80156d4:	69b8      	ldr	r0, [r7, #24]
 80156d6:	f009 fce9 	bl	801f0ac <sys_arch_unprotect>
    return;
 80156da:	e012      	b.n	8015702 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80156dc:	69fb      	ldr	r3, [r7, #28]
 80156de:	2200      	movs	r2, #0
 80156e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80156e2:	4b12      	ldr	r3, [pc, #72]	; (801572c <mem_free+0x11c>)
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	69fa      	ldr	r2, [r7, #28]
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d202      	bcs.n	80156f2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80156ec:	4a0f      	ldr	r2, [pc, #60]	; (801572c <mem_free+0x11c>)
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80156f2:	69f8      	ldr	r0, [r7, #28]
 80156f4:	f7ff fe5c 	bl	80153b0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80156f8:	4809      	ldr	r0, [pc, #36]	; (8015720 <mem_free+0x110>)
 80156fa:	f009 fc96 	bl	801f02a <sys_mutex_unlock>
 80156fe:	e000      	b.n	8015702 <mem_free+0xf2>
    return;
 8015700:	bf00      	nop
}
 8015702:	3720      	adds	r7, #32
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	08020a88 	.word	0x08020a88
 801570c:	08020b78 	.word	0x08020b78
 8015710:	08020ad0 	.word	0x08020ad0
 8015714:	2000df98 	.word	0x2000df98
 8015718:	2000df9c 	.word	0x2000df9c
 801571c:	08020b9c 	.word	0x08020b9c
 8015720:	2000dfa0 	.word	0x2000dfa0
 8015724:	08020bb8 	.word	0x08020bb8
 8015728:	08020be0 	.word	0x08020be0
 801572c:	2000dfa4 	.word	0x2000dfa4

08015730 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b088      	sub	sp, #32
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
 8015738:	460b      	mov	r3, r1
 801573a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801573c:	887b      	ldrh	r3, [r7, #2]
 801573e:	3303      	adds	r3, #3
 8015740:	b29b      	uxth	r3, r3
 8015742:	f023 0303 	bic.w	r3, r3, #3
 8015746:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015748:	8bfb      	ldrh	r3, [r7, #30]
 801574a:	2b0b      	cmp	r3, #11
 801574c:	d801      	bhi.n	8015752 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801574e:	230c      	movs	r3, #12
 8015750:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8015752:	8bfb      	ldrh	r3, [r7, #30]
 8015754:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015758:	d803      	bhi.n	8015762 <mem_trim+0x32>
 801575a:	8bfa      	ldrh	r2, [r7, #30]
 801575c:	887b      	ldrh	r3, [r7, #2]
 801575e:	429a      	cmp	r2, r3
 8015760:	d201      	bcs.n	8015766 <mem_trim+0x36>
    return NULL;
 8015762:	2300      	movs	r3, #0
 8015764:	e0d8      	b.n	8015918 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015766:	4b6e      	ldr	r3, [pc, #440]	; (8015920 <mem_trim+0x1f0>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	429a      	cmp	r2, r3
 801576e:	d304      	bcc.n	801577a <mem_trim+0x4a>
 8015770:	4b6c      	ldr	r3, [pc, #432]	; (8015924 <mem_trim+0x1f4>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	687a      	ldr	r2, [r7, #4]
 8015776:	429a      	cmp	r2, r3
 8015778:	d306      	bcc.n	8015788 <mem_trim+0x58>
 801577a:	4b6b      	ldr	r3, [pc, #428]	; (8015928 <mem_trim+0x1f8>)
 801577c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015780:	496a      	ldr	r1, [pc, #424]	; (801592c <mem_trim+0x1fc>)
 8015782:	486b      	ldr	r0, [pc, #428]	; (8015930 <mem_trim+0x200>)
 8015784:	f00a faa0 	bl	801fcc8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8015788:	4b65      	ldr	r3, [pc, #404]	; (8015920 <mem_trim+0x1f0>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	687a      	ldr	r2, [r7, #4]
 801578e:	429a      	cmp	r2, r3
 8015790:	d304      	bcc.n	801579c <mem_trim+0x6c>
 8015792:	4b64      	ldr	r3, [pc, #400]	; (8015924 <mem_trim+0x1f4>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	429a      	cmp	r2, r3
 801579a:	d307      	bcc.n	80157ac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801579c:	f009 fc78 	bl	801f090 <sys_arch_protect>
 80157a0:	60b8      	str	r0, [r7, #8]
 80157a2:	68b8      	ldr	r0, [r7, #8]
 80157a4:	f009 fc82 	bl	801f0ac <sys_arch_unprotect>
    return rmem;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	e0b5      	b.n	8015918 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	3b08      	subs	r3, #8
 80157b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80157b2:	69b8      	ldr	r0, [r7, #24]
 80157b4:	f7ff fdea 	bl	801538c <mem_to_ptr>
 80157b8:	4603      	mov	r3, r0
 80157ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80157bc:	69bb      	ldr	r3, [r7, #24]
 80157be:	881a      	ldrh	r2, [r3, #0]
 80157c0:	8afb      	ldrh	r3, [r7, #22]
 80157c2:	1ad3      	subs	r3, r2, r3
 80157c4:	b29b      	uxth	r3, r3
 80157c6:	3b08      	subs	r3, #8
 80157c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80157ca:	8bfa      	ldrh	r2, [r7, #30]
 80157cc:	8abb      	ldrh	r3, [r7, #20]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d906      	bls.n	80157e0 <mem_trim+0xb0>
 80157d2:	4b55      	ldr	r3, [pc, #340]	; (8015928 <mem_trim+0x1f8>)
 80157d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80157d8:	4956      	ldr	r1, [pc, #344]	; (8015934 <mem_trim+0x204>)
 80157da:	4855      	ldr	r0, [pc, #340]	; (8015930 <mem_trim+0x200>)
 80157dc:	f00a fa74 	bl	801fcc8 <iprintf>
  if (newsize > size) {
 80157e0:	8bfa      	ldrh	r2, [r7, #30]
 80157e2:	8abb      	ldrh	r3, [r7, #20]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d901      	bls.n	80157ec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80157e8:	2300      	movs	r3, #0
 80157ea:	e095      	b.n	8015918 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80157ec:	8bfa      	ldrh	r2, [r7, #30]
 80157ee:	8abb      	ldrh	r3, [r7, #20]
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d101      	bne.n	80157f8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	e08f      	b.n	8015918 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80157f8:	484f      	ldr	r0, [pc, #316]	; (8015938 <mem_trim+0x208>)
 80157fa:	f009 fc07 	bl	801f00c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80157fe:	69bb      	ldr	r3, [r7, #24]
 8015800:	881b      	ldrh	r3, [r3, #0]
 8015802:	4618      	mov	r0, r3
 8015804:	f7ff fdb0 	bl	8015368 <ptr_to_mem>
 8015808:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801580a:	693b      	ldr	r3, [r7, #16]
 801580c:	791b      	ldrb	r3, [r3, #4]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d13f      	bne.n	8015892 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8015812:	69bb      	ldr	r3, [r7, #24]
 8015814:	881b      	ldrh	r3, [r3, #0]
 8015816:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801581a:	d106      	bne.n	801582a <mem_trim+0xfa>
 801581c:	4b42      	ldr	r3, [pc, #264]	; (8015928 <mem_trim+0x1f8>)
 801581e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8015822:	4946      	ldr	r1, [pc, #280]	; (801593c <mem_trim+0x20c>)
 8015824:	4842      	ldr	r0, [pc, #264]	; (8015930 <mem_trim+0x200>)
 8015826:	f00a fa4f 	bl	801fcc8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801582a:	693b      	ldr	r3, [r7, #16]
 801582c:	881b      	ldrh	r3, [r3, #0]
 801582e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8015830:	8afa      	ldrh	r2, [r7, #22]
 8015832:	8bfb      	ldrh	r3, [r7, #30]
 8015834:	4413      	add	r3, r2
 8015836:	b29b      	uxth	r3, r3
 8015838:	3308      	adds	r3, #8
 801583a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801583c:	4b40      	ldr	r3, [pc, #256]	; (8015940 <mem_trim+0x210>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	693a      	ldr	r2, [r7, #16]
 8015842:	429a      	cmp	r2, r3
 8015844:	d106      	bne.n	8015854 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8015846:	89fb      	ldrh	r3, [r7, #14]
 8015848:	4618      	mov	r0, r3
 801584a:	f7ff fd8d 	bl	8015368 <ptr_to_mem>
 801584e:	4603      	mov	r3, r0
 8015850:	4a3b      	ldr	r2, [pc, #236]	; (8015940 <mem_trim+0x210>)
 8015852:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8015854:	89fb      	ldrh	r3, [r7, #14]
 8015856:	4618      	mov	r0, r3
 8015858:	f7ff fd86 	bl	8015368 <ptr_to_mem>
 801585c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801585e:	693b      	ldr	r3, [r7, #16]
 8015860:	2200      	movs	r2, #0
 8015862:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8015864:	693b      	ldr	r3, [r7, #16]
 8015866:	89ba      	ldrh	r2, [r7, #12]
 8015868:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801586a:	693b      	ldr	r3, [r7, #16]
 801586c:	8afa      	ldrh	r2, [r7, #22]
 801586e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8015870:	69bb      	ldr	r3, [r7, #24]
 8015872:	89fa      	ldrh	r2, [r7, #14]
 8015874:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	881b      	ldrh	r3, [r3, #0]
 801587a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801587e:	d047      	beq.n	8015910 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	881b      	ldrh	r3, [r3, #0]
 8015884:	4618      	mov	r0, r3
 8015886:	f7ff fd6f 	bl	8015368 <ptr_to_mem>
 801588a:	4602      	mov	r2, r0
 801588c:	89fb      	ldrh	r3, [r7, #14]
 801588e:	8053      	strh	r3, [r2, #2]
 8015890:	e03e      	b.n	8015910 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8015892:	8bfb      	ldrh	r3, [r7, #30]
 8015894:	f103 0214 	add.w	r2, r3, #20
 8015898:	8abb      	ldrh	r3, [r7, #20]
 801589a:	429a      	cmp	r2, r3
 801589c:	d838      	bhi.n	8015910 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801589e:	8afa      	ldrh	r2, [r7, #22]
 80158a0:	8bfb      	ldrh	r3, [r7, #30]
 80158a2:	4413      	add	r3, r2
 80158a4:	b29b      	uxth	r3, r3
 80158a6:	3308      	adds	r3, #8
 80158a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80158aa:	69bb      	ldr	r3, [r7, #24]
 80158ac:	881b      	ldrh	r3, [r3, #0]
 80158ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80158b2:	d106      	bne.n	80158c2 <mem_trim+0x192>
 80158b4:	4b1c      	ldr	r3, [pc, #112]	; (8015928 <mem_trim+0x1f8>)
 80158b6:	f240 3216 	movw	r2, #790	; 0x316
 80158ba:	4920      	ldr	r1, [pc, #128]	; (801593c <mem_trim+0x20c>)
 80158bc:	481c      	ldr	r0, [pc, #112]	; (8015930 <mem_trim+0x200>)
 80158be:	f00a fa03 	bl	801fcc8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80158c2:	89fb      	ldrh	r3, [r7, #14]
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7ff fd4f 	bl	8015368 <ptr_to_mem>
 80158ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80158cc:	4b1c      	ldr	r3, [pc, #112]	; (8015940 <mem_trim+0x210>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	693a      	ldr	r2, [r7, #16]
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d202      	bcs.n	80158dc <mem_trim+0x1ac>
      lfree = mem2;
 80158d6:	4a1a      	ldr	r2, [pc, #104]	; (8015940 <mem_trim+0x210>)
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80158dc:	693b      	ldr	r3, [r7, #16]
 80158de:	2200      	movs	r2, #0
 80158e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	881a      	ldrh	r2, [r3, #0]
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	8afa      	ldrh	r2, [r7, #22]
 80158ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80158f0:	69bb      	ldr	r3, [r7, #24]
 80158f2:	89fa      	ldrh	r2, [r7, #14]
 80158f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80158f6:	693b      	ldr	r3, [r7, #16]
 80158f8:	881b      	ldrh	r3, [r3, #0]
 80158fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80158fe:	d007      	beq.n	8015910 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8015900:	693b      	ldr	r3, [r7, #16]
 8015902:	881b      	ldrh	r3, [r3, #0]
 8015904:	4618      	mov	r0, r3
 8015906:	f7ff fd2f 	bl	8015368 <ptr_to_mem>
 801590a:	4602      	mov	r2, r0
 801590c:	89fb      	ldrh	r3, [r7, #14]
 801590e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8015910:	4809      	ldr	r0, [pc, #36]	; (8015938 <mem_trim+0x208>)
 8015912:	f009 fb8a 	bl	801f02a <sys_mutex_unlock>
  return rmem;
 8015916:	687b      	ldr	r3, [r7, #4]
}
 8015918:	4618      	mov	r0, r3
 801591a:	3720      	adds	r7, #32
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}
 8015920:	2000df98 	.word	0x2000df98
 8015924:	2000df9c 	.word	0x2000df9c
 8015928:	08020a88 	.word	0x08020a88
 801592c:	08020c14 	.word	0x08020c14
 8015930:	08020ad0 	.word	0x08020ad0
 8015934:	08020c2c 	.word	0x08020c2c
 8015938:	2000dfa0 	.word	0x2000dfa0
 801593c:	08020c4c 	.word	0x08020c4c
 8015940:	2000dfa4 	.word	0x2000dfa4

08015944 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b088      	sub	sp, #32
 8015948:	af00      	add	r7, sp, #0
 801594a:	4603      	mov	r3, r0
 801594c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801594e:	88fb      	ldrh	r3, [r7, #6]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d101      	bne.n	8015958 <mem_malloc+0x14>
    return NULL;
 8015954:	2300      	movs	r3, #0
 8015956:	e0e2      	b.n	8015b1e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015958:	88fb      	ldrh	r3, [r7, #6]
 801595a:	3303      	adds	r3, #3
 801595c:	b29b      	uxth	r3, r3
 801595e:	f023 0303 	bic.w	r3, r3, #3
 8015962:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8015964:	8bbb      	ldrh	r3, [r7, #28]
 8015966:	2b0b      	cmp	r3, #11
 8015968:	d801      	bhi.n	801596e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801596a:	230c      	movs	r3, #12
 801596c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801596e:	8bbb      	ldrh	r3, [r7, #28]
 8015970:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015974:	d803      	bhi.n	801597e <mem_malloc+0x3a>
 8015976:	8bba      	ldrh	r2, [r7, #28]
 8015978:	88fb      	ldrh	r3, [r7, #6]
 801597a:	429a      	cmp	r2, r3
 801597c:	d201      	bcs.n	8015982 <mem_malloc+0x3e>
    return NULL;
 801597e:	2300      	movs	r3, #0
 8015980:	e0cd      	b.n	8015b1e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8015982:	4869      	ldr	r0, [pc, #420]	; (8015b28 <mem_malloc+0x1e4>)
 8015984:	f009 fb42 	bl	801f00c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015988:	4b68      	ldr	r3, [pc, #416]	; (8015b2c <mem_malloc+0x1e8>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	4618      	mov	r0, r3
 801598e:	f7ff fcfd 	bl	801538c <mem_to_ptr>
 8015992:	4603      	mov	r3, r0
 8015994:	83fb      	strh	r3, [r7, #30]
 8015996:	e0b7      	b.n	8015b08 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8015998:	8bfb      	ldrh	r3, [r7, #30]
 801599a:	4618      	mov	r0, r3
 801599c:	f7ff fce4 	bl	8015368 <ptr_to_mem>
 80159a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80159a2:	697b      	ldr	r3, [r7, #20]
 80159a4:	791b      	ldrb	r3, [r3, #4]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	f040 80a7 	bne.w	8015afa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	881b      	ldrh	r3, [r3, #0]
 80159b0:	461a      	mov	r2, r3
 80159b2:	8bfb      	ldrh	r3, [r7, #30]
 80159b4:	1ad3      	subs	r3, r2, r3
 80159b6:	f1a3 0208 	sub.w	r2, r3, #8
 80159ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80159bc:	429a      	cmp	r2, r3
 80159be:	f0c0 809c 	bcc.w	8015afa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80159c2:	697b      	ldr	r3, [r7, #20]
 80159c4:	881b      	ldrh	r3, [r3, #0]
 80159c6:	461a      	mov	r2, r3
 80159c8:	8bfb      	ldrh	r3, [r7, #30]
 80159ca:	1ad3      	subs	r3, r2, r3
 80159cc:	f1a3 0208 	sub.w	r2, r3, #8
 80159d0:	8bbb      	ldrh	r3, [r7, #28]
 80159d2:	3314      	adds	r3, #20
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d333      	bcc.n	8015a40 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80159d8:	8bfa      	ldrh	r2, [r7, #30]
 80159da:	8bbb      	ldrh	r3, [r7, #28]
 80159dc:	4413      	add	r3, r2
 80159de:	b29b      	uxth	r3, r3
 80159e0:	3308      	adds	r3, #8
 80159e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80159e4:	8a7b      	ldrh	r3, [r7, #18]
 80159e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80159ea:	d106      	bne.n	80159fa <mem_malloc+0xb6>
 80159ec:	4b50      	ldr	r3, [pc, #320]	; (8015b30 <mem_malloc+0x1ec>)
 80159ee:	f240 3287 	movw	r2, #903	; 0x387
 80159f2:	4950      	ldr	r1, [pc, #320]	; (8015b34 <mem_malloc+0x1f0>)
 80159f4:	4850      	ldr	r0, [pc, #320]	; (8015b38 <mem_malloc+0x1f4>)
 80159f6:	f00a f967 	bl	801fcc8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80159fa:	8a7b      	ldrh	r3, [r7, #18]
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7ff fcb3 	bl	8015368 <ptr_to_mem>
 8015a02:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	2200      	movs	r2, #0
 8015a08:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8015a0a:	697b      	ldr	r3, [r7, #20]
 8015a0c:	881a      	ldrh	r2, [r3, #0]
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	8bfa      	ldrh	r2, [r7, #30]
 8015a16:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	8a7a      	ldrh	r2, [r7, #18]
 8015a1c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	2201      	movs	r2, #1
 8015a22:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	881b      	ldrh	r3, [r3, #0]
 8015a28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015a2c:	d00b      	beq.n	8015a46 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	881b      	ldrh	r3, [r3, #0]
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7ff fc98 	bl	8015368 <ptr_to_mem>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	8a7b      	ldrh	r3, [r7, #18]
 8015a3c:	8053      	strh	r3, [r2, #2]
 8015a3e:	e002      	b.n	8015a46 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8015a40:	697b      	ldr	r3, [r7, #20]
 8015a42:	2201      	movs	r2, #1
 8015a44:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8015a46:	4b39      	ldr	r3, [pc, #228]	; (8015b2c <mem_malloc+0x1e8>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	697a      	ldr	r2, [r7, #20]
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	d127      	bne.n	8015aa0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8015a50:	4b36      	ldr	r3, [pc, #216]	; (8015b2c <mem_malloc+0x1e8>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8015a56:	e005      	b.n	8015a64 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8015a58:	69bb      	ldr	r3, [r7, #24]
 8015a5a:	881b      	ldrh	r3, [r3, #0]
 8015a5c:	4618      	mov	r0, r3
 8015a5e:	f7ff fc83 	bl	8015368 <ptr_to_mem>
 8015a62:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8015a64:	69bb      	ldr	r3, [r7, #24]
 8015a66:	791b      	ldrb	r3, [r3, #4]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d004      	beq.n	8015a76 <mem_malloc+0x132>
 8015a6c:	4b33      	ldr	r3, [pc, #204]	; (8015b3c <mem_malloc+0x1f8>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	69ba      	ldr	r2, [r7, #24]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d1f0      	bne.n	8015a58 <mem_malloc+0x114>
          }
          lfree = cur;
 8015a76:	4a2d      	ldr	r2, [pc, #180]	; (8015b2c <mem_malloc+0x1e8>)
 8015a78:	69bb      	ldr	r3, [r7, #24]
 8015a7a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015a7c:	4b2b      	ldr	r3, [pc, #172]	; (8015b2c <mem_malloc+0x1e8>)
 8015a7e:	681a      	ldr	r2, [r3, #0]
 8015a80:	4b2e      	ldr	r3, [pc, #184]	; (8015b3c <mem_malloc+0x1f8>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d00b      	beq.n	8015aa0 <mem_malloc+0x15c>
 8015a88:	4b28      	ldr	r3, [pc, #160]	; (8015b2c <mem_malloc+0x1e8>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	791b      	ldrb	r3, [r3, #4]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d006      	beq.n	8015aa0 <mem_malloc+0x15c>
 8015a92:	4b27      	ldr	r3, [pc, #156]	; (8015b30 <mem_malloc+0x1ec>)
 8015a94:	f240 32b5 	movw	r2, #949	; 0x3b5
 8015a98:	4929      	ldr	r1, [pc, #164]	; (8015b40 <mem_malloc+0x1fc>)
 8015a9a:	4827      	ldr	r0, [pc, #156]	; (8015b38 <mem_malloc+0x1f4>)
 8015a9c:	f00a f914 	bl	801fcc8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8015aa0:	4821      	ldr	r0, [pc, #132]	; (8015b28 <mem_malloc+0x1e4>)
 8015aa2:	f009 fac2 	bl	801f02a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8015aa6:	8bba      	ldrh	r2, [r7, #28]
 8015aa8:	697b      	ldr	r3, [r7, #20]
 8015aaa:	4413      	add	r3, r2
 8015aac:	3308      	adds	r3, #8
 8015aae:	4a23      	ldr	r2, [pc, #140]	; (8015b3c <mem_malloc+0x1f8>)
 8015ab0:	6812      	ldr	r2, [r2, #0]
 8015ab2:	4293      	cmp	r3, r2
 8015ab4:	d906      	bls.n	8015ac4 <mem_malloc+0x180>
 8015ab6:	4b1e      	ldr	r3, [pc, #120]	; (8015b30 <mem_malloc+0x1ec>)
 8015ab8:	f240 32b9 	movw	r2, #953	; 0x3b9
 8015abc:	4921      	ldr	r1, [pc, #132]	; (8015b44 <mem_malloc+0x200>)
 8015abe:	481e      	ldr	r0, [pc, #120]	; (8015b38 <mem_malloc+0x1f4>)
 8015ac0:	f00a f902 	bl	801fcc8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8015ac4:	697b      	ldr	r3, [r7, #20]
 8015ac6:	f003 0303 	and.w	r3, r3, #3
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d006      	beq.n	8015adc <mem_malloc+0x198>
 8015ace:	4b18      	ldr	r3, [pc, #96]	; (8015b30 <mem_malloc+0x1ec>)
 8015ad0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8015ad4:	491c      	ldr	r1, [pc, #112]	; (8015b48 <mem_malloc+0x204>)
 8015ad6:	4818      	ldr	r0, [pc, #96]	; (8015b38 <mem_malloc+0x1f4>)
 8015ad8:	f00a f8f6 	bl	801fcc8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8015adc:	697b      	ldr	r3, [r7, #20]
 8015ade:	f003 0303 	and.w	r3, r3, #3
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d006      	beq.n	8015af4 <mem_malloc+0x1b0>
 8015ae6:	4b12      	ldr	r3, [pc, #72]	; (8015b30 <mem_malloc+0x1ec>)
 8015ae8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8015aec:	4917      	ldr	r1, [pc, #92]	; (8015b4c <mem_malloc+0x208>)
 8015aee:	4812      	ldr	r0, [pc, #72]	; (8015b38 <mem_malloc+0x1f4>)
 8015af0:	f00a f8ea 	bl	801fcc8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8015af4:	697b      	ldr	r3, [r7, #20]
 8015af6:	3308      	adds	r3, #8
 8015af8:	e011      	b.n	8015b1e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8015afa:	8bfb      	ldrh	r3, [r7, #30]
 8015afc:	4618      	mov	r0, r3
 8015afe:	f7ff fc33 	bl	8015368 <ptr_to_mem>
 8015b02:	4603      	mov	r3, r0
 8015b04:	881b      	ldrh	r3, [r3, #0]
 8015b06:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015b08:	8bfa      	ldrh	r2, [r7, #30]
 8015b0a:	8bbb      	ldrh	r3, [r7, #28]
 8015b0c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8015b10:	429a      	cmp	r2, r3
 8015b12:	f4ff af41 	bcc.w	8015998 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8015b16:	4804      	ldr	r0, [pc, #16]	; (8015b28 <mem_malloc+0x1e4>)
 8015b18:	f009 fa87 	bl	801f02a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8015b1c:	2300      	movs	r3, #0
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3720      	adds	r7, #32
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	2000dfa0 	.word	0x2000dfa0
 8015b2c:	2000dfa4 	.word	0x2000dfa4
 8015b30:	08020a88 	.word	0x08020a88
 8015b34:	08020c4c 	.word	0x08020c4c
 8015b38:	08020ad0 	.word	0x08020ad0
 8015b3c:	2000df9c 	.word	0x2000df9c
 8015b40:	08020c60 	.word	0x08020c60
 8015b44:	08020c7c 	.word	0x08020c7c
 8015b48:	08020cac 	.word	0x08020cac
 8015b4c:	08020cdc 	.word	0x08020cdc

08015b50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015b50:	b480      	push	{r7}
 8015b52:	b085      	sub	sp, #20
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	689b      	ldr	r3, [r3, #8]
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	3303      	adds	r3, #3
 8015b66:	f023 0303 	bic.w	r3, r3, #3
 8015b6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	60fb      	str	r3, [r7, #12]
 8015b70:	e011      	b.n	8015b96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	689b      	ldr	r3, [r3, #8]
 8015b76:	681a      	ldr	r2, [r3, #0]
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	689b      	ldr	r3, [r3, #8]
 8015b80:	68ba      	ldr	r2, [r7, #8]
 8015b82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	881b      	ldrh	r3, [r3, #0]
 8015b88:	461a      	mov	r2, r3
 8015b8a:	68bb      	ldr	r3, [r7, #8]
 8015b8c:	4413      	add	r3, r2
 8015b8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	3301      	adds	r3, #1
 8015b94:	60fb      	str	r3, [r7, #12]
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	885b      	ldrh	r3, [r3, #2]
 8015b9a:	461a      	mov	r2, r3
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	dbe7      	blt.n	8015b72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8015ba2:	bf00      	nop
 8015ba4:	bf00      	nop
 8015ba6:	3714      	adds	r7, #20
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bae:	4770      	bx	lr

08015bb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	80fb      	strh	r3, [r7, #6]
 8015bba:	e009      	b.n	8015bd0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8015bbc:	88fb      	ldrh	r3, [r7, #6]
 8015bbe:	4a08      	ldr	r2, [pc, #32]	; (8015be0 <memp_init+0x30>)
 8015bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7ff ffc3 	bl	8015b50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8015bca:	88fb      	ldrh	r3, [r7, #6]
 8015bcc:	3301      	adds	r3, #1
 8015bce:	80fb      	strh	r3, [r7, #6]
 8015bd0:	88fb      	ldrh	r3, [r7, #6]
 8015bd2:	2b0c      	cmp	r3, #12
 8015bd4:	d9f2      	bls.n	8015bbc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8015bd6:	bf00      	nop
 8015bd8:	bf00      	nop
 8015bda:	3708      	adds	r7, #8
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}
 8015be0:	08023504 	.word	0x08023504

08015be4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b084      	sub	sp, #16
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8015bec:	f009 fa50 	bl	801f090 <sys_arch_protect>
 8015bf0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	689b      	ldr	r3, [r3, #8]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8015bfa:	68bb      	ldr	r3, [r7, #8]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d015      	beq.n	8015c2c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	689b      	ldr	r3, [r3, #8]
 8015c04:	68ba      	ldr	r2, [r7, #8]
 8015c06:	6812      	ldr	r2, [r2, #0]
 8015c08:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	f003 0303 	and.w	r3, r3, #3
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d006      	beq.n	8015c22 <do_memp_malloc_pool+0x3e>
 8015c14:	4b09      	ldr	r3, [pc, #36]	; (8015c3c <do_memp_malloc_pool+0x58>)
 8015c16:	f44f 728c 	mov.w	r2, #280	; 0x118
 8015c1a:	4909      	ldr	r1, [pc, #36]	; (8015c40 <do_memp_malloc_pool+0x5c>)
 8015c1c:	4809      	ldr	r0, [pc, #36]	; (8015c44 <do_memp_malloc_pool+0x60>)
 8015c1e:	f00a f853 	bl	801fcc8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015c22:	68f8      	ldr	r0, [r7, #12]
 8015c24:	f009 fa42 	bl	801f0ac <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	e003      	b.n	8015c34 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8015c2c:	68f8      	ldr	r0, [r7, #12]
 8015c2e:	f009 fa3d 	bl	801f0ac <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015c32:	2300      	movs	r3, #0
}
 8015c34:	4618      	mov	r0, r3
 8015c36:	3710      	adds	r7, #16
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}
 8015c3c:	08020d00 	.word	0x08020d00
 8015c40:	08020d30 	.word	0x08020d30
 8015c44:	08020d54 	.word	0x08020d54

08015c48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d106      	bne.n	8015c64 <memp_malloc_pool+0x1c>
 8015c56:	4b0a      	ldr	r3, [pc, #40]	; (8015c80 <memp_malloc_pool+0x38>)
 8015c58:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8015c5c:	4909      	ldr	r1, [pc, #36]	; (8015c84 <memp_malloc_pool+0x3c>)
 8015c5e:	480a      	ldr	r0, [pc, #40]	; (8015c88 <memp_malloc_pool+0x40>)
 8015c60:	f00a f832 	bl	801fcc8 <iprintf>
  if (desc == NULL) {
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d101      	bne.n	8015c6e <memp_malloc_pool+0x26>
    return NULL;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	e003      	b.n	8015c76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8015c6e:	6878      	ldr	r0, [r7, #4]
 8015c70:	f7ff ffb8 	bl	8015be4 <do_memp_malloc_pool>
 8015c74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3708      	adds	r7, #8
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	08020d00 	.word	0x08020d00
 8015c84:	08020d7c 	.word	0x08020d7c
 8015c88:	08020d54 	.word	0x08020d54

08015c8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b084      	sub	sp, #16
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	4603      	mov	r3, r0
 8015c94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8015c96:	79fb      	ldrb	r3, [r7, #7]
 8015c98:	2b0c      	cmp	r3, #12
 8015c9a:	d908      	bls.n	8015cae <memp_malloc+0x22>
 8015c9c:	4b0a      	ldr	r3, [pc, #40]	; (8015cc8 <memp_malloc+0x3c>)
 8015c9e:	f240 1257 	movw	r2, #343	; 0x157
 8015ca2:	490a      	ldr	r1, [pc, #40]	; (8015ccc <memp_malloc+0x40>)
 8015ca4:	480a      	ldr	r0, [pc, #40]	; (8015cd0 <memp_malloc+0x44>)
 8015ca6:	f00a f80f 	bl	801fcc8 <iprintf>
 8015caa:	2300      	movs	r3, #0
 8015cac:	e008      	b.n	8015cc0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015cae:	79fb      	ldrb	r3, [r7, #7]
 8015cb0:	4a08      	ldr	r2, [pc, #32]	; (8015cd4 <memp_malloc+0x48>)
 8015cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7ff ff94 	bl	8015be4 <do_memp_malloc_pool>
 8015cbc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015cbe:	68fb      	ldr	r3, [r7, #12]
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	3710      	adds	r7, #16
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	08020d00 	.word	0x08020d00
 8015ccc:	08020d90 	.word	0x08020d90
 8015cd0:	08020d54 	.word	0x08020d54
 8015cd4:	08023504 	.word	0x08023504

08015cd8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b084      	sub	sp, #16
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	f003 0303 	and.w	r3, r3, #3
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d006      	beq.n	8015cfa <do_memp_free_pool+0x22>
 8015cec:	4b0d      	ldr	r3, [pc, #52]	; (8015d24 <do_memp_free_pool+0x4c>)
 8015cee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8015cf2:	490d      	ldr	r1, [pc, #52]	; (8015d28 <do_memp_free_pool+0x50>)
 8015cf4:	480d      	ldr	r0, [pc, #52]	; (8015d2c <do_memp_free_pool+0x54>)
 8015cf6:	f009 ffe7 	bl	801fcc8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8015cfe:	f009 f9c7 	bl	801f090 <sys_arch_protect>
 8015d02:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	689b      	ldr	r3, [r3, #8]
 8015d08:	681a      	ldr	r2, [r3, #0]
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	689b      	ldr	r3, [r3, #8]
 8015d12:	68fa      	ldr	r2, [r7, #12]
 8015d14:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8015d16:	68b8      	ldr	r0, [r7, #8]
 8015d18:	f009 f9c8 	bl	801f0ac <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8015d1c:	bf00      	nop
 8015d1e:	3710      	adds	r7, #16
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}
 8015d24:	08020d00 	.word	0x08020d00
 8015d28:	08020db0 	.word	0x08020db0
 8015d2c:	08020d54 	.word	0x08020d54

08015d30 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b082      	sub	sp, #8
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d106      	bne.n	8015d4e <memp_free_pool+0x1e>
 8015d40:	4b0a      	ldr	r3, [pc, #40]	; (8015d6c <memp_free_pool+0x3c>)
 8015d42:	f240 1295 	movw	r2, #405	; 0x195
 8015d46:	490a      	ldr	r1, [pc, #40]	; (8015d70 <memp_free_pool+0x40>)
 8015d48:	480a      	ldr	r0, [pc, #40]	; (8015d74 <memp_free_pool+0x44>)
 8015d4a:	f009 ffbd 	bl	801fcc8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d007      	beq.n	8015d64 <memp_free_pool+0x34>
 8015d54:	683b      	ldr	r3, [r7, #0]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d004      	beq.n	8015d64 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8015d5a:	6839      	ldr	r1, [r7, #0]
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f7ff ffbb 	bl	8015cd8 <do_memp_free_pool>
 8015d62:	e000      	b.n	8015d66 <memp_free_pool+0x36>
    return;
 8015d64:	bf00      	nop
}
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	08020d00 	.word	0x08020d00
 8015d70:	08020d7c 	.word	0x08020d7c
 8015d74:	08020d54 	.word	0x08020d54

08015d78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b082      	sub	sp, #8
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	4603      	mov	r3, r0
 8015d80:	6039      	str	r1, [r7, #0]
 8015d82:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8015d84:	79fb      	ldrb	r3, [r7, #7]
 8015d86:	2b0c      	cmp	r3, #12
 8015d88:	d907      	bls.n	8015d9a <memp_free+0x22>
 8015d8a:	4b0c      	ldr	r3, [pc, #48]	; (8015dbc <memp_free+0x44>)
 8015d8c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8015d90:	490b      	ldr	r1, [pc, #44]	; (8015dc0 <memp_free+0x48>)
 8015d92:	480c      	ldr	r0, [pc, #48]	; (8015dc4 <memp_free+0x4c>)
 8015d94:	f009 ff98 	bl	801fcc8 <iprintf>
 8015d98:	e00c      	b.n	8015db4 <memp_free+0x3c>

  if (mem == NULL) {
 8015d9a:	683b      	ldr	r3, [r7, #0]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d008      	beq.n	8015db2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8015da0:	79fb      	ldrb	r3, [r7, #7]
 8015da2:	4a09      	ldr	r2, [pc, #36]	; (8015dc8 <memp_free+0x50>)
 8015da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015da8:	6839      	ldr	r1, [r7, #0]
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7ff ff94 	bl	8015cd8 <do_memp_free_pool>
 8015db0:	e000      	b.n	8015db4 <memp_free+0x3c>
    return;
 8015db2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015db4:	3708      	adds	r7, #8
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}
 8015dba:	bf00      	nop
 8015dbc:	08020d00 	.word	0x08020d00
 8015dc0:	08020dd0 	.word	0x08020dd0
 8015dc4:	08020d54 	.word	0x08020d54
 8015dc8:	08023504 	.word	0x08023504

08015dcc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015dcc:	b480      	push	{r7}
 8015dce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015dd0:	bf00      	nop
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd8:	4770      	bx	lr
	...

08015ddc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b086      	sub	sp, #24
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	60f8      	str	r0, [r7, #12]
 8015de4:	60b9      	str	r1, [r7, #8]
 8015de6:	607a      	str	r2, [r7, #4]
 8015de8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d108      	bne.n	8015e02 <netif_add+0x26>
 8015df0:	4b57      	ldr	r3, [pc, #348]	; (8015f50 <netif_add+0x174>)
 8015df2:	f240 1227 	movw	r2, #295	; 0x127
 8015df6:	4957      	ldr	r1, [pc, #348]	; (8015f54 <netif_add+0x178>)
 8015df8:	4857      	ldr	r0, [pc, #348]	; (8015f58 <netif_add+0x17c>)
 8015dfa:	f009 ff65 	bl	801fcc8 <iprintf>
 8015dfe:	2300      	movs	r3, #0
 8015e00:	e0a2      	b.n	8015f48 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d108      	bne.n	8015e1a <netif_add+0x3e>
 8015e08:	4b51      	ldr	r3, [pc, #324]	; (8015f50 <netif_add+0x174>)
 8015e0a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015e0e:	4953      	ldr	r1, [pc, #332]	; (8015f5c <netif_add+0x180>)
 8015e10:	4851      	ldr	r0, [pc, #324]	; (8015f58 <netif_add+0x17c>)
 8015e12:	f009 ff59 	bl	801fcc8 <iprintf>
 8015e16:	2300      	movs	r3, #0
 8015e18:	e096      	b.n	8015f48 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015e1a:	68bb      	ldr	r3, [r7, #8]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d101      	bne.n	8015e24 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015e20:	4b4f      	ldr	r3, [pc, #316]	; (8015f60 <netif_add+0x184>)
 8015e22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d101      	bne.n	8015e2e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015e2a:	4b4d      	ldr	r3, [pc, #308]	; (8015f60 <netif_add+0x184>)
 8015e2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d101      	bne.n	8015e38 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8015e34:	4b4a      	ldr	r3, [pc, #296]	; (8015f60 <netif_add+0x184>)
 8015e36:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	2200      	movs	r2, #0
 8015e42:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2200      	movs	r2, #0
 8015e48:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	4a45      	ldr	r2, [pc, #276]	; (8015f64 <netif_add+0x188>)
 8015e4e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	2200      	movs	r2, #0
 8015e54:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	2200      	movs	r2, #0
 8015e5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	2200      	movs	r2, #0
 8015e62:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	6a3a      	ldr	r2, [r7, #32]
 8015e68:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015e6a:	4b3f      	ldr	r3, [pc, #252]	; (8015f68 <netif_add+0x18c>)
 8015e6c:	781a      	ldrb	r2, [r3, #0]
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e78:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	68b9      	ldr	r1, [r7, #8]
 8015e80:	68f8      	ldr	r0, [r7, #12]
 8015e82:	f000 f913 	bl	80160ac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e88:	68f8      	ldr	r0, [r7, #12]
 8015e8a:	4798      	blx	r3
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d001      	beq.n	8015e96 <netif_add+0xba>
    return NULL;
 8015e92:	2300      	movs	r3, #0
 8015e94:	e058      	b.n	8015f48 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015e9c:	2bff      	cmp	r3, #255	; 0xff
 8015e9e:	d103      	bne.n	8015ea8 <netif_add+0xcc>
        netif->num = 0;
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015eac:	4b2f      	ldr	r3, [pc, #188]	; (8015f6c <netif_add+0x190>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	617b      	str	r3, [r7, #20]
 8015eb2:	e02b      	b.n	8015f0c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015eb4:	697a      	ldr	r2, [r7, #20]
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	429a      	cmp	r2, r3
 8015eba:	d106      	bne.n	8015eca <netif_add+0xee>
 8015ebc:	4b24      	ldr	r3, [pc, #144]	; (8015f50 <netif_add+0x174>)
 8015ebe:	f240 128b 	movw	r2, #395	; 0x18b
 8015ec2:	492b      	ldr	r1, [pc, #172]	; (8015f70 <netif_add+0x194>)
 8015ec4:	4824      	ldr	r0, [pc, #144]	; (8015f58 <netif_add+0x17c>)
 8015ec6:	f009 feff 	bl	801fcc8 <iprintf>
        num_netifs++;
 8015eca:	693b      	ldr	r3, [r7, #16]
 8015ecc:	3301      	adds	r3, #1
 8015ece:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015ed0:	693b      	ldr	r3, [r7, #16]
 8015ed2:	2bff      	cmp	r3, #255	; 0xff
 8015ed4:	dd06      	ble.n	8015ee4 <netif_add+0x108>
 8015ed6:	4b1e      	ldr	r3, [pc, #120]	; (8015f50 <netif_add+0x174>)
 8015ed8:	f240 128d 	movw	r2, #397	; 0x18d
 8015edc:	4925      	ldr	r1, [pc, #148]	; (8015f74 <netif_add+0x198>)
 8015ede:	481e      	ldr	r0, [pc, #120]	; (8015f58 <netif_add+0x17c>)
 8015ee0:	f009 fef2 	bl	801fcc8 <iprintf>
        if (netif2->num == netif->num) {
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d108      	bne.n	8015f06 <netif_add+0x12a>
          netif->num++;
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015efa:	3301      	adds	r3, #1
 8015efc:	b2da      	uxtb	r2, r3
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8015f04:	e005      	b.n	8015f12 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	617b      	str	r3, [r7, #20]
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d1d0      	bne.n	8015eb4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8015f12:	697b      	ldr	r3, [r7, #20]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d1be      	bne.n	8015e96 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f1e:	2bfe      	cmp	r3, #254	; 0xfe
 8015f20:	d103      	bne.n	8015f2a <netif_add+0x14e>
    netif_num = 0;
 8015f22:	4b11      	ldr	r3, [pc, #68]	; (8015f68 <netif_add+0x18c>)
 8015f24:	2200      	movs	r2, #0
 8015f26:	701a      	strb	r2, [r3, #0]
 8015f28:	e006      	b.n	8015f38 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f30:	3301      	adds	r3, #1
 8015f32:	b2da      	uxtb	r2, r3
 8015f34:	4b0c      	ldr	r3, [pc, #48]	; (8015f68 <netif_add+0x18c>)
 8015f36:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8015f38:	4b0c      	ldr	r3, [pc, #48]	; (8015f6c <netif_add+0x190>)
 8015f3a:	681a      	ldr	r2, [r3, #0]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015f40:	4a0a      	ldr	r2, [pc, #40]	; (8015f6c <netif_add+0x190>)
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8015f46:	68fb      	ldr	r3, [r7, #12]
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3718      	adds	r7, #24
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}
 8015f50:	08020dec 	.word	0x08020dec
 8015f54:	08020e80 	.word	0x08020e80
 8015f58:	08020e3c 	.word	0x08020e3c
 8015f5c:	08020e9c 	.word	0x08020e9c
 8015f60:	08023578 	.word	0x08023578
 8015f64:	08016387 	.word	0x08016387
 8015f68:	2001107c 	.word	0x2001107c
 8015f6c:	20011074 	.word	0x20011074
 8015f70:	08020ec0 	.word	0x08020ec0
 8015f74:	08020ed4 	.word	0x08020ed4

08015f78 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015f82:	6839      	ldr	r1, [r7, #0]
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f002 fb7d 	bl	8018684 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015f8a:	6839      	ldr	r1, [r7, #0]
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f006 fc91 	bl	801c8b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015f92:	bf00      	nop
 8015f94:	3708      	adds	r7, #8
 8015f96:	46bd      	mov	sp, r7
 8015f98:	bd80      	pop	{r7, pc}
	...

08015f9c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b086      	sub	sp, #24
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	60f8      	str	r0, [r7, #12]
 8015fa4:	60b9      	str	r1, [r7, #8]
 8015fa6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d106      	bne.n	8015fbc <netif_do_set_ipaddr+0x20>
 8015fae:	4b1d      	ldr	r3, [pc, #116]	; (8016024 <netif_do_set_ipaddr+0x88>)
 8015fb0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015fb4:	491c      	ldr	r1, [pc, #112]	; (8016028 <netif_do_set_ipaddr+0x8c>)
 8015fb6:	481d      	ldr	r0, [pc, #116]	; (801602c <netif_do_set_ipaddr+0x90>)
 8015fb8:	f009 fe86 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d106      	bne.n	8015fd0 <netif_do_set_ipaddr+0x34>
 8015fc2:	4b18      	ldr	r3, [pc, #96]	; (8016024 <netif_do_set_ipaddr+0x88>)
 8015fc4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015fc8:	4917      	ldr	r1, [pc, #92]	; (8016028 <netif_do_set_ipaddr+0x8c>)
 8015fca:	4818      	ldr	r0, [pc, #96]	; (801602c <netif_do_set_ipaddr+0x90>)
 8015fcc:	f009 fe7c 	bl	801fcc8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015fd0:	68bb      	ldr	r3, [r7, #8]
 8015fd2:	681a      	ldr	r2, [r3, #0]
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	3304      	adds	r3, #4
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d01c      	beq.n	8016018 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	3304      	adds	r3, #4
 8015fe8:	681a      	ldr	r2, [r3, #0]
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015fee:	f107 0314 	add.w	r3, r7, #20
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f7ff ffbf 	bl	8015f78 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d002      	beq.n	8016006 <netif_do_set_ipaddr+0x6a>
 8016000:	68bb      	ldr	r3, [r7, #8]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	e000      	b.n	8016008 <netif_do_set_ipaddr+0x6c>
 8016006:	2300      	movs	r3, #0
 8016008:	68fa      	ldr	r2, [r7, #12]
 801600a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801600c:	2101      	movs	r1, #1
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	f000 f8d2 	bl	80161b8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8016014:	2301      	movs	r3, #1
 8016016:	e000      	b.n	801601a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8016018:	2300      	movs	r3, #0
}
 801601a:	4618      	mov	r0, r3
 801601c:	3718      	adds	r7, #24
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	08020dec 	.word	0x08020dec
 8016028:	08020f04 	.word	0x08020f04
 801602c:	08020e3c 	.word	0x08020e3c

08016030 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8016030:	b480      	push	{r7}
 8016032:	b085      	sub	sp, #20
 8016034:	af00      	add	r7, sp, #0
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	681a      	ldr	r2, [r3, #0]
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	3308      	adds	r3, #8
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	429a      	cmp	r2, r3
 8016048:	d00a      	beq.n	8016060 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d002      	beq.n	8016056 <netif_do_set_netmask+0x26>
 8016050:	68bb      	ldr	r3, [r7, #8]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	e000      	b.n	8016058 <netif_do_set_netmask+0x28>
 8016056:	2300      	movs	r3, #0
 8016058:	68fa      	ldr	r2, [r7, #12]
 801605a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801605c:	2301      	movs	r3, #1
 801605e:	e000      	b.n	8016062 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8016060:	2300      	movs	r3, #0
}
 8016062:	4618      	mov	r0, r3
 8016064:	3714      	adds	r7, #20
 8016066:	46bd      	mov	sp, r7
 8016068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606c:	4770      	bx	lr

0801606e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801606e:	b480      	push	{r7}
 8016070:	b085      	sub	sp, #20
 8016072:	af00      	add	r7, sp, #0
 8016074:	60f8      	str	r0, [r7, #12]
 8016076:	60b9      	str	r1, [r7, #8]
 8016078:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	681a      	ldr	r2, [r3, #0]
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	330c      	adds	r3, #12
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	429a      	cmp	r2, r3
 8016086:	d00a      	beq.n	801609e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d002      	beq.n	8016094 <netif_do_set_gw+0x26>
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	e000      	b.n	8016096 <netif_do_set_gw+0x28>
 8016094:	2300      	movs	r3, #0
 8016096:	68fa      	ldr	r2, [r7, #12]
 8016098:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801609a:	2301      	movs	r3, #1
 801609c:	e000      	b.n	80160a0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801609e:	2300      	movs	r3, #0
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3714      	adds	r7, #20
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr

080160ac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b088      	sub	sp, #32
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
 80160b8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80160ba:	2300      	movs	r3, #0
 80160bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80160be:	2300      	movs	r3, #0
 80160c0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d101      	bne.n	80160cc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80160c8:	4b1c      	ldr	r3, [pc, #112]	; (801613c <netif_set_addr+0x90>)
 80160ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d101      	bne.n	80160d6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80160d2:	4b1a      	ldr	r3, [pc, #104]	; (801613c <netif_set_addr+0x90>)
 80160d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d101      	bne.n	80160e0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80160dc:	4b17      	ldr	r3, [pc, #92]	; (801613c <netif_set_addr+0x90>)
 80160de:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d003      	beq.n	80160ee <netif_set_addr+0x42>
 80160e6:	68bb      	ldr	r3, [r7, #8]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d101      	bne.n	80160f2 <netif_set_addr+0x46>
 80160ee:	2301      	movs	r3, #1
 80160f0:	e000      	b.n	80160f4 <netif_set_addr+0x48>
 80160f2:	2300      	movs	r3, #0
 80160f4:	617b      	str	r3, [r7, #20]
  if (remove) {
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d006      	beq.n	801610a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80160fc:	f107 0310 	add.w	r3, r7, #16
 8016100:	461a      	mov	r2, r3
 8016102:	68b9      	ldr	r1, [r7, #8]
 8016104:	68f8      	ldr	r0, [r7, #12]
 8016106:	f7ff ff49 	bl	8015f9c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801610a:	69fa      	ldr	r2, [r7, #28]
 801610c:	6879      	ldr	r1, [r7, #4]
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f7ff ff8e 	bl	8016030 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8016114:	69ba      	ldr	r2, [r7, #24]
 8016116:	6839      	ldr	r1, [r7, #0]
 8016118:	68f8      	ldr	r0, [r7, #12]
 801611a:	f7ff ffa8 	bl	801606e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d106      	bne.n	8016132 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016124:	f107 0310 	add.w	r3, r7, #16
 8016128:	461a      	mov	r2, r3
 801612a:	68b9      	ldr	r1, [r7, #8]
 801612c:	68f8      	ldr	r0, [r7, #12]
 801612e:	f7ff ff35 	bl	8015f9c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8016132:	bf00      	nop
 8016134:	3720      	adds	r7, #32
 8016136:	46bd      	mov	sp, r7
 8016138:	bd80      	pop	{r7, pc}
 801613a:	bf00      	nop
 801613c:	08023578 	.word	0x08023578

08016140 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8016140:	b480      	push	{r7}
 8016142:	b083      	sub	sp, #12
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8016148:	4a04      	ldr	r2, [pc, #16]	; (801615c <netif_set_default+0x1c>)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801614e:	bf00      	nop
 8016150:	370c      	adds	r7, #12
 8016152:	46bd      	mov	sp, r7
 8016154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016158:	4770      	bx	lr
 801615a:	bf00      	nop
 801615c:	20011078 	.word	0x20011078

08016160 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b082      	sub	sp, #8
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d107      	bne.n	801617e <netif_set_up+0x1e>
 801616e:	4b0f      	ldr	r3, [pc, #60]	; (80161ac <netif_set_up+0x4c>)
 8016170:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016174:	490e      	ldr	r1, [pc, #56]	; (80161b0 <netif_set_up+0x50>)
 8016176:	480f      	ldr	r0, [pc, #60]	; (80161b4 <netif_set_up+0x54>)
 8016178:	f009 fda6 	bl	801fcc8 <iprintf>
 801617c:	e013      	b.n	80161a6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016184:	f003 0301 	and.w	r3, r3, #1
 8016188:	2b00      	cmp	r3, #0
 801618a:	d10c      	bne.n	80161a6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016192:	f043 0301 	orr.w	r3, r3, #1
 8016196:	b2da      	uxtb	r2, r3
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801619e:	2103      	movs	r1, #3
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f000 f809 	bl	80161b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80161a6:	3708      	adds	r7, #8
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	08020dec 	.word	0x08020dec
 80161b0:	08020f74 	.word	0x08020f74
 80161b4:	08020e3c 	.word	0x08020e3c

080161b8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	460b      	mov	r3, r1
 80161c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d106      	bne.n	80161d8 <netif_issue_reports+0x20>
 80161ca:	4b18      	ldr	r3, [pc, #96]	; (801622c <netif_issue_reports+0x74>)
 80161cc:	f240 326d 	movw	r2, #877	; 0x36d
 80161d0:	4917      	ldr	r1, [pc, #92]	; (8016230 <netif_issue_reports+0x78>)
 80161d2:	4818      	ldr	r0, [pc, #96]	; (8016234 <netif_issue_reports+0x7c>)
 80161d4:	f009 fd78 	bl	801fcc8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161de:	f003 0304 	and.w	r3, r3, #4
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d01e      	beq.n	8016224 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161ec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d017      	beq.n	8016224 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80161f4:	78fb      	ldrb	r3, [r7, #3]
 80161f6:	f003 0301 	and.w	r3, r3, #1
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d013      	beq.n	8016226 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	3304      	adds	r3, #4
 8016202:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016204:	2b00      	cmp	r3, #0
 8016206:	d00e      	beq.n	8016226 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801620e:	f003 0308 	and.w	r3, r3, #8
 8016212:	2b00      	cmp	r3, #0
 8016214:	d007      	beq.n	8016226 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	3304      	adds	r3, #4
 801621a:	4619      	mov	r1, r3
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f007 fab3 	bl	801d788 <etharp_request>
 8016222:	e000      	b.n	8016226 <netif_issue_reports+0x6e>
    return;
 8016224:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8016226:	3708      	adds	r7, #8
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}
 801622c:	08020dec 	.word	0x08020dec
 8016230:	08020f90 	.word	0x08020f90
 8016234:	08020e3c 	.word	0x08020e3c

08016238 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b082      	sub	sp, #8
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d107      	bne.n	8016256 <netif_set_down+0x1e>
 8016246:	4b12      	ldr	r3, [pc, #72]	; (8016290 <netif_set_down+0x58>)
 8016248:	f240 329b 	movw	r2, #923	; 0x39b
 801624c:	4911      	ldr	r1, [pc, #68]	; (8016294 <netif_set_down+0x5c>)
 801624e:	4812      	ldr	r0, [pc, #72]	; (8016298 <netif_set_down+0x60>)
 8016250:	f009 fd3a 	bl	801fcc8 <iprintf>
 8016254:	e019      	b.n	801628a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801625c:	f003 0301 	and.w	r3, r3, #1
 8016260:	2b00      	cmp	r3, #0
 8016262:	d012      	beq.n	801628a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801626a:	f023 0301 	bic.w	r3, r3, #1
 801626e:	b2da      	uxtb	r2, r3
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801627c:	f003 0308 	and.w	r3, r3, #8
 8016280:	2b00      	cmp	r3, #0
 8016282:	d002      	beq.n	801628a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f006 fe3d 	bl	801cf04 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801628a:	3708      	adds	r7, #8
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	08020dec 	.word	0x08020dec
 8016294:	08020fb4 	.word	0x08020fb4
 8016298:	08020e3c 	.word	0x08020e3c

0801629c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801629c:	b580      	push	{r7, lr}
 801629e:	b082      	sub	sp, #8
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d107      	bne.n	80162ba <netif_set_link_up+0x1e>
 80162aa:	4b13      	ldr	r3, [pc, #76]	; (80162f8 <netif_set_link_up+0x5c>)
 80162ac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80162b0:	4912      	ldr	r1, [pc, #72]	; (80162fc <netif_set_link_up+0x60>)
 80162b2:	4813      	ldr	r0, [pc, #76]	; (8016300 <netif_set_link_up+0x64>)
 80162b4:	f009 fd08 	bl	801fcc8 <iprintf>
 80162b8:	e01b      	b.n	80162f2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80162c0:	f003 0304 	and.w	r3, r3, #4
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d114      	bne.n	80162f2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80162ce:	f043 0304 	orr.w	r3, r3, #4
 80162d2:	b2da      	uxtb	r2, r3
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80162da:	2103      	movs	r1, #3
 80162dc:	6878      	ldr	r0, [r7, #4]
 80162de:	f7ff ff6b 	bl	80161b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	69db      	ldr	r3, [r3, #28]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d003      	beq.n	80162f2 <netif_set_link_up+0x56>
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	69db      	ldr	r3, [r3, #28]
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80162f2:	3708      	adds	r7, #8
 80162f4:	46bd      	mov	sp, r7
 80162f6:	bd80      	pop	{r7, pc}
 80162f8:	08020dec 	.word	0x08020dec
 80162fc:	08020fd4 	.word	0x08020fd4
 8016300:	08020e3c 	.word	0x08020e3c

08016304 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d107      	bne.n	8016322 <netif_set_link_down+0x1e>
 8016312:	4b11      	ldr	r3, [pc, #68]	; (8016358 <netif_set_link_down+0x54>)
 8016314:	f240 4206 	movw	r2, #1030	; 0x406
 8016318:	4910      	ldr	r1, [pc, #64]	; (801635c <netif_set_link_down+0x58>)
 801631a:	4811      	ldr	r0, [pc, #68]	; (8016360 <netif_set_link_down+0x5c>)
 801631c:	f009 fcd4 	bl	801fcc8 <iprintf>
 8016320:	e017      	b.n	8016352 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016328:	f003 0304 	and.w	r3, r3, #4
 801632c:	2b00      	cmp	r3, #0
 801632e:	d010      	beq.n	8016352 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016336:	f023 0304 	bic.w	r3, r3, #4
 801633a:	b2da      	uxtb	r2, r3
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	69db      	ldr	r3, [r3, #28]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d003      	beq.n	8016352 <netif_set_link_down+0x4e>
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	69db      	ldr	r3, [r3, #28]
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016352:	3708      	adds	r7, #8
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}
 8016358:	08020dec 	.word	0x08020dec
 801635c:	08020ff8 	.word	0x08020ff8
 8016360:	08020e3c 	.word	0x08020e3c

08016364 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016364:	b480      	push	{r7}
 8016366:	b083      	sub	sp, #12
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d002      	beq.n	801637a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	683a      	ldr	r2, [r7, #0]
 8016378:	61da      	str	r2, [r3, #28]
  }
}
 801637a:	bf00      	nop
 801637c:	370c      	adds	r7, #12
 801637e:	46bd      	mov	sp, r7
 8016380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016384:	4770      	bx	lr

08016386 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016386:	b480      	push	{r7}
 8016388:	b085      	sub	sp, #20
 801638a:	af00      	add	r7, sp, #0
 801638c:	60f8      	str	r0, [r7, #12]
 801638e:	60b9      	str	r1, [r7, #8]
 8016390:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8016392:	f06f 030b 	mvn.w	r3, #11
}
 8016396:	4618      	mov	r0, r3
 8016398:	3714      	adds	r7, #20
 801639a:	46bd      	mov	sp, r7
 801639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a0:	4770      	bx	lr
	...

080163a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80163a4:	b480      	push	{r7}
 80163a6:	b085      	sub	sp, #20
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	4603      	mov	r3, r0
 80163ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80163ae:	79fb      	ldrb	r3, [r7, #7]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d013      	beq.n	80163dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80163b4:	4b0d      	ldr	r3, [pc, #52]	; (80163ec <netif_get_by_index+0x48>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	60fb      	str	r3, [r7, #12]
 80163ba:	e00c      	b.n	80163d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80163c2:	3301      	adds	r3, #1
 80163c4:	b2db      	uxtb	r3, r3
 80163c6:	79fa      	ldrb	r2, [r7, #7]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d101      	bne.n	80163d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	e006      	b.n	80163de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	60fb      	str	r3, [r7, #12]
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d1ef      	bne.n	80163bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80163dc:	2300      	movs	r3, #0
}
 80163de:	4618      	mov	r0, r3
 80163e0:	3714      	adds	r7, #20
 80163e2:	46bd      	mov	sp, r7
 80163e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e8:	4770      	bx	lr
 80163ea:	bf00      	nop
 80163ec:	20011074 	.word	0x20011074

080163f0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80163f6:	f008 fe4b 	bl	801f090 <sys_arch_protect>
 80163fa:	6038      	str	r0, [r7, #0]
 80163fc:	4b0d      	ldr	r3, [pc, #52]	; (8016434 <pbuf_free_ooseq+0x44>)
 80163fe:	2200      	movs	r2, #0
 8016400:	701a      	strb	r2, [r3, #0]
 8016402:	6838      	ldr	r0, [r7, #0]
 8016404:	f008 fe52 	bl	801f0ac <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016408:	4b0b      	ldr	r3, [pc, #44]	; (8016438 <pbuf_free_ooseq+0x48>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	607b      	str	r3, [r7, #4]
 801640e:	e00a      	b.n	8016426 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016414:	2b00      	cmp	r3, #0
 8016416:	d003      	beq.n	8016420 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8016418:	6878      	ldr	r0, [r7, #4]
 801641a:	f002 f971 	bl	8018700 <tcp_free_ooseq>
      return;
 801641e:	e005      	b.n	801642c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	68db      	ldr	r3, [r3, #12]
 8016424:	607b      	str	r3, [r7, #4]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d1f1      	bne.n	8016410 <pbuf_free_ooseq+0x20>
    }
  }
}
 801642c:	3708      	adds	r7, #8
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	2001107d 	.word	0x2001107d
 8016438:	2001108c 	.word	0x2001108c

0801643c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8016444:	f7ff ffd4 	bl	80163f0 <pbuf_free_ooseq>
}
 8016448:	bf00      	nop
 801644a:	3708      	adds	r7, #8
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}

08016450 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b082      	sub	sp, #8
 8016454:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8016456:	f008 fe1b 	bl	801f090 <sys_arch_protect>
 801645a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801645c:	4b0f      	ldr	r3, [pc, #60]	; (801649c <pbuf_pool_is_empty+0x4c>)
 801645e:	781b      	ldrb	r3, [r3, #0]
 8016460:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8016462:	4b0e      	ldr	r3, [pc, #56]	; (801649c <pbuf_pool_is_empty+0x4c>)
 8016464:	2201      	movs	r2, #1
 8016466:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f008 fe1f 	bl	801f0ac <sys_arch_unprotect>

  if (!queued) {
 801646e:	78fb      	ldrb	r3, [r7, #3]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d10f      	bne.n	8016494 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8016474:	2100      	movs	r1, #0
 8016476:	480a      	ldr	r0, [pc, #40]	; (80164a0 <pbuf_pool_is_empty+0x50>)
 8016478:	f7fe fea6 	bl	80151c8 <tcpip_try_callback>
 801647c:	4603      	mov	r3, r0
 801647e:	2b00      	cmp	r3, #0
 8016480:	d008      	beq.n	8016494 <pbuf_pool_is_empty+0x44>
 8016482:	f008 fe05 	bl	801f090 <sys_arch_protect>
 8016486:	6078      	str	r0, [r7, #4]
 8016488:	4b04      	ldr	r3, [pc, #16]	; (801649c <pbuf_pool_is_empty+0x4c>)
 801648a:	2200      	movs	r2, #0
 801648c:	701a      	strb	r2, [r3, #0]
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f008 fe0c 	bl	801f0ac <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8016494:	bf00      	nop
 8016496:	3708      	adds	r7, #8
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	2001107d 	.word	0x2001107d
 80164a0:	0801643d 	.word	0x0801643d

080164a4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80164a4:	b480      	push	{r7}
 80164a6:	b085      	sub	sp, #20
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	60f8      	str	r0, [r7, #12]
 80164ac:	60b9      	str	r1, [r7, #8]
 80164ae:	4611      	mov	r1, r2
 80164b0:	461a      	mov	r2, r3
 80164b2:	460b      	mov	r3, r1
 80164b4:	80fb      	strh	r3, [r7, #6]
 80164b6:	4613      	mov	r3, r2
 80164b8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	2200      	movs	r2, #0
 80164be:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	68ba      	ldr	r2, [r7, #8]
 80164c4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	88fa      	ldrh	r2, [r7, #6]
 80164ca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	88ba      	ldrh	r2, [r7, #4]
 80164d0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80164d2:	8b3b      	ldrh	r3, [r7, #24]
 80164d4:	b2da      	uxtb	r2, r3
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	7f3a      	ldrb	r2, [r7, #28]
 80164de:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	2201      	movs	r2, #1
 80164e4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	2200      	movs	r2, #0
 80164ea:	73da      	strb	r2, [r3, #15]
}
 80164ec:	bf00      	nop
 80164ee:	3714      	adds	r7, #20
 80164f0:	46bd      	mov	sp, r7
 80164f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f6:	4770      	bx	lr

080164f8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b08c      	sub	sp, #48	; 0x30
 80164fc:	af02      	add	r7, sp, #8
 80164fe:	4603      	mov	r3, r0
 8016500:	71fb      	strb	r3, [r7, #7]
 8016502:	460b      	mov	r3, r1
 8016504:	80bb      	strh	r3, [r7, #4]
 8016506:	4613      	mov	r3, r2
 8016508:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801650a:	79fb      	ldrb	r3, [r7, #7]
 801650c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801650e:	887b      	ldrh	r3, [r7, #2]
 8016510:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016514:	d07f      	beq.n	8016616 <pbuf_alloc+0x11e>
 8016516:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801651a:	f300 80c8 	bgt.w	80166ae <pbuf_alloc+0x1b6>
 801651e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016522:	d010      	beq.n	8016546 <pbuf_alloc+0x4e>
 8016524:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8016528:	f300 80c1 	bgt.w	80166ae <pbuf_alloc+0x1b6>
 801652c:	2b01      	cmp	r3, #1
 801652e:	d002      	beq.n	8016536 <pbuf_alloc+0x3e>
 8016530:	2b41      	cmp	r3, #65	; 0x41
 8016532:	f040 80bc 	bne.w	80166ae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8016536:	887a      	ldrh	r2, [r7, #2]
 8016538:	88bb      	ldrh	r3, [r7, #4]
 801653a:	4619      	mov	r1, r3
 801653c:	2000      	movs	r0, #0
 801653e:	f000 f8d1 	bl	80166e4 <pbuf_alloc_reference>
 8016542:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8016544:	e0bd      	b.n	80166c2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8016546:	2300      	movs	r3, #0
 8016548:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801654a:	2300      	movs	r3, #0
 801654c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801654e:	88bb      	ldrh	r3, [r7, #4]
 8016550:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016552:	200c      	movs	r0, #12
 8016554:	f7ff fb9a 	bl	8015c8c <memp_malloc>
 8016558:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801655a:	693b      	ldr	r3, [r7, #16]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d109      	bne.n	8016574 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8016560:	f7ff ff76 	bl	8016450 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8016564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016566:	2b00      	cmp	r3, #0
 8016568:	d002      	beq.n	8016570 <pbuf_alloc+0x78>
            pbuf_free(p);
 801656a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801656c:	f000 faa8 	bl	8016ac0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8016570:	2300      	movs	r3, #0
 8016572:	e0a7      	b.n	80166c4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016576:	3303      	adds	r3, #3
 8016578:	b29b      	uxth	r3, r3
 801657a:	f023 0303 	bic.w	r3, r3, #3
 801657e:	b29b      	uxth	r3, r3
 8016580:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8016584:	b29b      	uxth	r3, r3
 8016586:	8b7a      	ldrh	r2, [r7, #26]
 8016588:	4293      	cmp	r3, r2
 801658a:	bf28      	it	cs
 801658c:	4613      	movcs	r3, r2
 801658e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016590:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016592:	3310      	adds	r3, #16
 8016594:	693a      	ldr	r2, [r7, #16]
 8016596:	4413      	add	r3, r2
 8016598:	3303      	adds	r3, #3
 801659a:	f023 0303 	bic.w	r3, r3, #3
 801659e:	4618      	mov	r0, r3
 80165a0:	89f9      	ldrh	r1, [r7, #14]
 80165a2:	8b7a      	ldrh	r2, [r7, #26]
 80165a4:	2300      	movs	r3, #0
 80165a6:	9301      	str	r3, [sp, #4]
 80165a8:	887b      	ldrh	r3, [r7, #2]
 80165aa:	9300      	str	r3, [sp, #0]
 80165ac:	460b      	mov	r3, r1
 80165ae:	4601      	mov	r1, r0
 80165b0:	6938      	ldr	r0, [r7, #16]
 80165b2:	f7ff ff77 	bl	80164a4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	685b      	ldr	r3, [r3, #4]
 80165ba:	f003 0303 	and.w	r3, r3, #3
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d006      	beq.n	80165d0 <pbuf_alloc+0xd8>
 80165c2:	4b42      	ldr	r3, [pc, #264]	; (80166cc <pbuf_alloc+0x1d4>)
 80165c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80165c8:	4941      	ldr	r1, [pc, #260]	; (80166d0 <pbuf_alloc+0x1d8>)
 80165ca:	4842      	ldr	r0, [pc, #264]	; (80166d4 <pbuf_alloc+0x1dc>)
 80165cc:	f009 fb7c 	bl	801fcc8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80165d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165d2:	3303      	adds	r3, #3
 80165d4:	f023 0303 	bic.w	r3, r3, #3
 80165d8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80165dc:	d106      	bne.n	80165ec <pbuf_alloc+0xf4>
 80165de:	4b3b      	ldr	r3, [pc, #236]	; (80166cc <pbuf_alloc+0x1d4>)
 80165e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 80165e4:	493c      	ldr	r1, [pc, #240]	; (80166d8 <pbuf_alloc+0x1e0>)
 80165e6:	483b      	ldr	r0, [pc, #236]	; (80166d4 <pbuf_alloc+0x1dc>)
 80165e8:	f009 fb6e 	bl	801fcc8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80165ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d102      	bne.n	80165f8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80165f2:	693b      	ldr	r3, [r7, #16]
 80165f4:	627b      	str	r3, [r7, #36]	; 0x24
 80165f6:	e002      	b.n	80165fe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	693a      	ldr	r2, [r7, #16]
 80165fc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8016602:	8b7a      	ldrh	r2, [r7, #26]
 8016604:	89fb      	ldrh	r3, [r7, #14]
 8016606:	1ad3      	subs	r3, r2, r3
 8016608:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801660a:	2300      	movs	r3, #0
 801660c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801660e:	8b7b      	ldrh	r3, [r7, #26]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d19e      	bne.n	8016552 <pbuf_alloc+0x5a>
      break;
 8016614:	e055      	b.n	80166c2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016618:	3303      	adds	r3, #3
 801661a:	b29b      	uxth	r3, r3
 801661c:	f023 0303 	bic.w	r3, r3, #3
 8016620:	b29a      	uxth	r2, r3
 8016622:	88bb      	ldrh	r3, [r7, #4]
 8016624:	3303      	adds	r3, #3
 8016626:	b29b      	uxth	r3, r3
 8016628:	f023 0303 	bic.w	r3, r3, #3
 801662c:	b29b      	uxth	r3, r3
 801662e:	4413      	add	r3, r2
 8016630:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016632:	8b3b      	ldrh	r3, [r7, #24]
 8016634:	3310      	adds	r3, #16
 8016636:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016638:	8b3a      	ldrh	r2, [r7, #24]
 801663a:	88bb      	ldrh	r3, [r7, #4]
 801663c:	3303      	adds	r3, #3
 801663e:	f023 0303 	bic.w	r3, r3, #3
 8016642:	429a      	cmp	r2, r3
 8016644:	d306      	bcc.n	8016654 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8016646:	8afa      	ldrh	r2, [r7, #22]
 8016648:	88bb      	ldrh	r3, [r7, #4]
 801664a:	3303      	adds	r3, #3
 801664c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016650:	429a      	cmp	r2, r3
 8016652:	d201      	bcs.n	8016658 <pbuf_alloc+0x160>
        return NULL;
 8016654:	2300      	movs	r3, #0
 8016656:	e035      	b.n	80166c4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8016658:	8afb      	ldrh	r3, [r7, #22]
 801665a:	4618      	mov	r0, r3
 801665c:	f7ff f972 	bl	8015944 <mem_malloc>
 8016660:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8016662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016664:	2b00      	cmp	r3, #0
 8016666:	d101      	bne.n	801666c <pbuf_alloc+0x174>
        return NULL;
 8016668:	2300      	movs	r3, #0
 801666a:	e02b      	b.n	80166c4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801666c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801666e:	3310      	adds	r3, #16
 8016670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016672:	4413      	add	r3, r2
 8016674:	3303      	adds	r3, #3
 8016676:	f023 0303 	bic.w	r3, r3, #3
 801667a:	4618      	mov	r0, r3
 801667c:	88b9      	ldrh	r1, [r7, #4]
 801667e:	88ba      	ldrh	r2, [r7, #4]
 8016680:	2300      	movs	r3, #0
 8016682:	9301      	str	r3, [sp, #4]
 8016684:	887b      	ldrh	r3, [r7, #2]
 8016686:	9300      	str	r3, [sp, #0]
 8016688:	460b      	mov	r3, r1
 801668a:	4601      	mov	r1, r0
 801668c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801668e:	f7ff ff09 	bl	80164a4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8016692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	f003 0303 	and.w	r3, r3, #3
 801669a:	2b00      	cmp	r3, #0
 801669c:	d010      	beq.n	80166c0 <pbuf_alloc+0x1c8>
 801669e:	4b0b      	ldr	r3, [pc, #44]	; (80166cc <pbuf_alloc+0x1d4>)
 80166a0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80166a4:	490d      	ldr	r1, [pc, #52]	; (80166dc <pbuf_alloc+0x1e4>)
 80166a6:	480b      	ldr	r0, [pc, #44]	; (80166d4 <pbuf_alloc+0x1dc>)
 80166a8:	f009 fb0e 	bl	801fcc8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80166ac:	e008      	b.n	80166c0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80166ae:	4b07      	ldr	r3, [pc, #28]	; (80166cc <pbuf_alloc+0x1d4>)
 80166b0:	f240 1227 	movw	r2, #295	; 0x127
 80166b4:	490a      	ldr	r1, [pc, #40]	; (80166e0 <pbuf_alloc+0x1e8>)
 80166b6:	4807      	ldr	r0, [pc, #28]	; (80166d4 <pbuf_alloc+0x1dc>)
 80166b8:	f009 fb06 	bl	801fcc8 <iprintf>
      return NULL;
 80166bc:	2300      	movs	r3, #0
 80166be:	e001      	b.n	80166c4 <pbuf_alloc+0x1cc>
      break;
 80166c0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80166c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80166c4:	4618      	mov	r0, r3
 80166c6:	3728      	adds	r7, #40	; 0x28
 80166c8:	46bd      	mov	sp, r7
 80166ca:	bd80      	pop	{r7, pc}
 80166cc:	0802101c 	.word	0x0802101c
 80166d0:	0802104c 	.word	0x0802104c
 80166d4:	0802107c 	.word	0x0802107c
 80166d8:	080210a4 	.word	0x080210a4
 80166dc:	080210d8 	.word	0x080210d8
 80166e0:	08021104 	.word	0x08021104

080166e4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b086      	sub	sp, #24
 80166e8:	af02      	add	r7, sp, #8
 80166ea:	6078      	str	r0, [r7, #4]
 80166ec:	460b      	mov	r3, r1
 80166ee:	807b      	strh	r3, [r7, #2]
 80166f0:	4613      	mov	r3, r2
 80166f2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80166f4:	883b      	ldrh	r3, [r7, #0]
 80166f6:	2b41      	cmp	r3, #65	; 0x41
 80166f8:	d009      	beq.n	801670e <pbuf_alloc_reference+0x2a>
 80166fa:	883b      	ldrh	r3, [r7, #0]
 80166fc:	2b01      	cmp	r3, #1
 80166fe:	d006      	beq.n	801670e <pbuf_alloc_reference+0x2a>
 8016700:	4b0f      	ldr	r3, [pc, #60]	; (8016740 <pbuf_alloc_reference+0x5c>)
 8016702:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8016706:	490f      	ldr	r1, [pc, #60]	; (8016744 <pbuf_alloc_reference+0x60>)
 8016708:	480f      	ldr	r0, [pc, #60]	; (8016748 <pbuf_alloc_reference+0x64>)
 801670a:	f009 fadd 	bl	801fcc8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801670e:	200b      	movs	r0, #11
 8016710:	f7ff fabc 	bl	8015c8c <memp_malloc>
 8016714:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d101      	bne.n	8016720 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801671c:	2300      	movs	r3, #0
 801671e:	e00b      	b.n	8016738 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8016720:	8879      	ldrh	r1, [r7, #2]
 8016722:	887a      	ldrh	r2, [r7, #2]
 8016724:	2300      	movs	r3, #0
 8016726:	9301      	str	r3, [sp, #4]
 8016728:	883b      	ldrh	r3, [r7, #0]
 801672a:	9300      	str	r3, [sp, #0]
 801672c:	460b      	mov	r3, r1
 801672e:	6879      	ldr	r1, [r7, #4]
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	f7ff feb7 	bl	80164a4 <pbuf_init_alloced_pbuf>
  return p;
 8016736:	68fb      	ldr	r3, [r7, #12]
}
 8016738:	4618      	mov	r0, r3
 801673a:	3710      	adds	r7, #16
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}
 8016740:	0802101c 	.word	0x0802101c
 8016744:	08021120 	.word	0x08021120
 8016748:	0802107c 	.word	0x0802107c

0801674c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b088      	sub	sp, #32
 8016750:	af02      	add	r7, sp, #8
 8016752:	607b      	str	r3, [r7, #4]
 8016754:	4603      	mov	r3, r0
 8016756:	73fb      	strb	r3, [r7, #15]
 8016758:	460b      	mov	r3, r1
 801675a:	81bb      	strh	r3, [r7, #12]
 801675c:	4613      	mov	r3, r2
 801675e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8016760:	7bfb      	ldrb	r3, [r7, #15]
 8016762:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016764:	8a7b      	ldrh	r3, [r7, #18]
 8016766:	3303      	adds	r3, #3
 8016768:	f023 0203 	bic.w	r2, r3, #3
 801676c:	89bb      	ldrh	r3, [r7, #12]
 801676e:	441a      	add	r2, r3
 8016770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016772:	429a      	cmp	r2, r3
 8016774:	d901      	bls.n	801677a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8016776:	2300      	movs	r3, #0
 8016778:	e018      	b.n	80167ac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801677a:	6a3b      	ldr	r3, [r7, #32]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d007      	beq.n	8016790 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8016780:	8a7b      	ldrh	r3, [r7, #18]
 8016782:	3303      	adds	r3, #3
 8016784:	f023 0303 	bic.w	r3, r3, #3
 8016788:	6a3a      	ldr	r2, [r7, #32]
 801678a:	4413      	add	r3, r2
 801678c:	617b      	str	r3, [r7, #20]
 801678e:	e001      	b.n	8016794 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8016790:	2300      	movs	r3, #0
 8016792:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016794:	6878      	ldr	r0, [r7, #4]
 8016796:	89b9      	ldrh	r1, [r7, #12]
 8016798:	89ba      	ldrh	r2, [r7, #12]
 801679a:	2302      	movs	r3, #2
 801679c:	9301      	str	r3, [sp, #4]
 801679e:	897b      	ldrh	r3, [r7, #10]
 80167a0:	9300      	str	r3, [sp, #0]
 80167a2:	460b      	mov	r3, r1
 80167a4:	6979      	ldr	r1, [r7, #20]
 80167a6:	f7ff fe7d 	bl	80164a4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80167aa:	687b      	ldr	r3, [r7, #4]
}
 80167ac:	4618      	mov	r0, r3
 80167ae:	3718      	adds	r7, #24
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}

080167b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b084      	sub	sp, #16
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	460b      	mov	r3, r1
 80167be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d106      	bne.n	80167d4 <pbuf_realloc+0x20>
 80167c6:	4b3a      	ldr	r3, [pc, #232]	; (80168b0 <pbuf_realloc+0xfc>)
 80167c8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80167cc:	4939      	ldr	r1, [pc, #228]	; (80168b4 <pbuf_realloc+0x100>)
 80167ce:	483a      	ldr	r0, [pc, #232]	; (80168b8 <pbuf_realloc+0x104>)
 80167d0:	f009 fa7a 	bl	801fcc8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	891b      	ldrh	r3, [r3, #8]
 80167d8:	887a      	ldrh	r2, [r7, #2]
 80167da:	429a      	cmp	r2, r3
 80167dc:	d263      	bcs.n	80168a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	891a      	ldrh	r2, [r3, #8]
 80167e2:	887b      	ldrh	r3, [r7, #2]
 80167e4:	1ad3      	subs	r3, r2, r3
 80167e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80167e8:	887b      	ldrh	r3, [r7, #2]
 80167ea:	817b      	strh	r3, [r7, #10]
  q = p;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80167f0:	e018      	b.n	8016824 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	895b      	ldrh	r3, [r3, #10]
 80167f6:	897a      	ldrh	r2, [r7, #10]
 80167f8:	1ad3      	subs	r3, r2, r3
 80167fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	891a      	ldrh	r2, [r3, #8]
 8016800:	893b      	ldrh	r3, [r7, #8]
 8016802:	1ad3      	subs	r3, r2, r3
 8016804:	b29a      	uxth	r2, r3
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d106      	bne.n	8016824 <pbuf_realloc+0x70>
 8016816:	4b26      	ldr	r3, [pc, #152]	; (80168b0 <pbuf_realloc+0xfc>)
 8016818:	f240 12af 	movw	r2, #431	; 0x1af
 801681c:	4927      	ldr	r1, [pc, #156]	; (80168bc <pbuf_realloc+0x108>)
 801681e:	4826      	ldr	r0, [pc, #152]	; (80168b8 <pbuf_realloc+0x104>)
 8016820:	f009 fa52 	bl	801fcc8 <iprintf>
  while (rem_len > q->len) {
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	895b      	ldrh	r3, [r3, #10]
 8016828:	897a      	ldrh	r2, [r7, #10]
 801682a:	429a      	cmp	r2, r3
 801682c:	d8e1      	bhi.n	80167f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	7b1b      	ldrb	r3, [r3, #12]
 8016832:	f003 030f 	and.w	r3, r3, #15
 8016836:	2b00      	cmp	r3, #0
 8016838:	d121      	bne.n	801687e <pbuf_realloc+0xca>
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	895b      	ldrh	r3, [r3, #10]
 801683e:	897a      	ldrh	r2, [r7, #10]
 8016840:	429a      	cmp	r2, r3
 8016842:	d01c      	beq.n	801687e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	7b5b      	ldrb	r3, [r3, #13]
 8016848:	f003 0302 	and.w	r3, r3, #2
 801684c:	2b00      	cmp	r3, #0
 801684e:	d116      	bne.n	801687e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	685a      	ldr	r2, [r3, #4]
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	1ad3      	subs	r3, r2, r3
 8016858:	b29a      	uxth	r2, r3
 801685a:	897b      	ldrh	r3, [r7, #10]
 801685c:	4413      	add	r3, r2
 801685e:	b29b      	uxth	r3, r3
 8016860:	4619      	mov	r1, r3
 8016862:	68f8      	ldr	r0, [r7, #12]
 8016864:	f7fe ff64 	bl	8015730 <mem_trim>
 8016868:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d106      	bne.n	801687e <pbuf_realloc+0xca>
 8016870:	4b0f      	ldr	r3, [pc, #60]	; (80168b0 <pbuf_realloc+0xfc>)
 8016872:	f240 12bd 	movw	r2, #445	; 0x1bd
 8016876:	4912      	ldr	r1, [pc, #72]	; (80168c0 <pbuf_realloc+0x10c>)
 8016878:	480f      	ldr	r0, [pc, #60]	; (80168b8 <pbuf_realloc+0x104>)
 801687a:	f009 fa25 	bl	801fcc8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	897a      	ldrh	r2, [r7, #10]
 8016882:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	895a      	ldrh	r2, [r3, #10]
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d004      	beq.n	801689e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	4618      	mov	r0, r3
 801689a:	f000 f911 	bl	8016ac0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	2200      	movs	r2, #0
 80168a2:	601a      	str	r2, [r3, #0]
 80168a4:	e000      	b.n	80168a8 <pbuf_realloc+0xf4>
    return;
 80168a6:	bf00      	nop

}
 80168a8:	3710      	adds	r7, #16
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop
 80168b0:	0802101c 	.word	0x0802101c
 80168b4:	08021134 	.word	0x08021134
 80168b8:	0802107c 	.word	0x0802107c
 80168bc:	0802114c 	.word	0x0802114c
 80168c0:	08021164 	.word	0x08021164

080168c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b086      	sub	sp, #24
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	60f8      	str	r0, [r7, #12]
 80168cc:	60b9      	str	r1, [r7, #8]
 80168ce:	4613      	mov	r3, r2
 80168d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d106      	bne.n	80168e6 <pbuf_add_header_impl+0x22>
 80168d8:	4b2b      	ldr	r3, [pc, #172]	; (8016988 <pbuf_add_header_impl+0xc4>)
 80168da:	f240 12df 	movw	r2, #479	; 0x1df
 80168de:	492b      	ldr	r1, [pc, #172]	; (801698c <pbuf_add_header_impl+0xc8>)
 80168e0:	482b      	ldr	r0, [pc, #172]	; (8016990 <pbuf_add_header_impl+0xcc>)
 80168e2:	f009 f9f1 	bl	801fcc8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d003      	beq.n	80168f4 <pbuf_add_header_impl+0x30>
 80168ec:	68bb      	ldr	r3, [r7, #8]
 80168ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168f2:	d301      	bcc.n	80168f8 <pbuf_add_header_impl+0x34>
    return 1;
 80168f4:	2301      	movs	r3, #1
 80168f6:	e043      	b.n	8016980 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d101      	bne.n	8016902 <pbuf_add_header_impl+0x3e>
    return 0;
 80168fe:	2300      	movs	r3, #0
 8016900:	e03e      	b.n	8016980 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	891a      	ldrh	r2, [r3, #8]
 801690a:	8a7b      	ldrh	r3, [r7, #18]
 801690c:	4413      	add	r3, r2
 801690e:	b29b      	uxth	r3, r3
 8016910:	8a7a      	ldrh	r2, [r7, #18]
 8016912:	429a      	cmp	r2, r3
 8016914:	d901      	bls.n	801691a <pbuf_add_header_impl+0x56>
    return 1;
 8016916:	2301      	movs	r3, #1
 8016918:	e032      	b.n	8016980 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	7b1b      	ldrb	r3, [r3, #12]
 801691e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8016920:	8a3b      	ldrh	r3, [r7, #16]
 8016922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016926:	2b00      	cmp	r3, #0
 8016928:	d00c      	beq.n	8016944 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	685a      	ldr	r2, [r3, #4]
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	425b      	negs	r3, r3
 8016932:	4413      	add	r3, r2
 8016934:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	3310      	adds	r3, #16
 801693a:	697a      	ldr	r2, [r7, #20]
 801693c:	429a      	cmp	r2, r3
 801693e:	d20d      	bcs.n	801695c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8016940:	2301      	movs	r3, #1
 8016942:	e01d      	b.n	8016980 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8016944:	79fb      	ldrb	r3, [r7, #7]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d006      	beq.n	8016958 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	685a      	ldr	r2, [r3, #4]
 801694e:	68bb      	ldr	r3, [r7, #8]
 8016950:	425b      	negs	r3, r3
 8016952:	4413      	add	r3, r2
 8016954:	617b      	str	r3, [r7, #20]
 8016956:	e001      	b.n	801695c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8016958:	2301      	movs	r3, #1
 801695a:	e011      	b.n	8016980 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	697a      	ldr	r2, [r7, #20]
 8016960:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	895a      	ldrh	r2, [r3, #10]
 8016966:	8a7b      	ldrh	r3, [r7, #18]
 8016968:	4413      	add	r3, r2
 801696a:	b29a      	uxth	r2, r3
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	891a      	ldrh	r2, [r3, #8]
 8016974:	8a7b      	ldrh	r3, [r7, #18]
 8016976:	4413      	add	r3, r2
 8016978:	b29a      	uxth	r2, r3
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	811a      	strh	r2, [r3, #8]


  return 0;
 801697e:	2300      	movs	r3, #0
}
 8016980:	4618      	mov	r0, r3
 8016982:	3718      	adds	r7, #24
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}
 8016988:	0802101c 	.word	0x0802101c
 801698c:	08021180 	.word	0x08021180
 8016990:	0802107c 	.word	0x0802107c

08016994 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b082      	sub	sp, #8
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
 801699c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801699e:	2200      	movs	r2, #0
 80169a0:	6839      	ldr	r1, [r7, #0]
 80169a2:	6878      	ldr	r0, [r7, #4]
 80169a4:	f7ff ff8e 	bl	80168c4 <pbuf_add_header_impl>
 80169a8:	4603      	mov	r3, r0
}
 80169aa:	4618      	mov	r0, r3
 80169ac:	3708      	adds	r7, #8
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
	...

080169b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b084      	sub	sp, #16
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d106      	bne.n	80169d2 <pbuf_remove_header+0x1e>
 80169c4:	4b20      	ldr	r3, [pc, #128]	; (8016a48 <pbuf_remove_header+0x94>)
 80169c6:	f240 224b 	movw	r2, #587	; 0x24b
 80169ca:	4920      	ldr	r1, [pc, #128]	; (8016a4c <pbuf_remove_header+0x98>)
 80169cc:	4820      	ldr	r0, [pc, #128]	; (8016a50 <pbuf_remove_header+0x9c>)
 80169ce:	f009 f97b 	bl	801fcc8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d003      	beq.n	80169e0 <pbuf_remove_header+0x2c>
 80169d8:	683b      	ldr	r3, [r7, #0]
 80169da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80169de:	d301      	bcc.n	80169e4 <pbuf_remove_header+0x30>
    return 1;
 80169e0:	2301      	movs	r3, #1
 80169e2:	e02c      	b.n	8016a3e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d101      	bne.n	80169ee <pbuf_remove_header+0x3a>
    return 0;
 80169ea:	2300      	movs	r3, #0
 80169ec:	e027      	b.n	8016a3e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	895b      	ldrh	r3, [r3, #10]
 80169f6:	89fa      	ldrh	r2, [r7, #14]
 80169f8:	429a      	cmp	r2, r3
 80169fa:	d908      	bls.n	8016a0e <pbuf_remove_header+0x5a>
 80169fc:	4b12      	ldr	r3, [pc, #72]	; (8016a48 <pbuf_remove_header+0x94>)
 80169fe:	f240 2255 	movw	r2, #597	; 0x255
 8016a02:	4914      	ldr	r1, [pc, #80]	; (8016a54 <pbuf_remove_header+0xa0>)
 8016a04:	4812      	ldr	r0, [pc, #72]	; (8016a50 <pbuf_remove_header+0x9c>)
 8016a06:	f009 f95f 	bl	801fcc8 <iprintf>
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	e017      	b.n	8016a3e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	685a      	ldr	r2, [r3, #4]
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	441a      	add	r2, r3
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	895a      	ldrh	r2, [r3, #10]
 8016a24:	89fb      	ldrh	r3, [r7, #14]
 8016a26:	1ad3      	subs	r3, r2, r3
 8016a28:	b29a      	uxth	r2, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	891a      	ldrh	r2, [r3, #8]
 8016a32:	89fb      	ldrh	r3, [r7, #14]
 8016a34:	1ad3      	subs	r3, r2, r3
 8016a36:	b29a      	uxth	r2, r3
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8016a3c:	2300      	movs	r3, #0
}
 8016a3e:	4618      	mov	r0, r3
 8016a40:	3710      	adds	r7, #16
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}
 8016a46:	bf00      	nop
 8016a48:	0802101c 	.word	0x0802101c
 8016a4c:	08021180 	.word	0x08021180
 8016a50:	0802107c 	.word	0x0802107c
 8016a54:	0802118c 	.word	0x0802118c

08016a58 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	460b      	mov	r3, r1
 8016a62:	807b      	strh	r3, [r7, #2]
 8016a64:	4613      	mov	r3, r2
 8016a66:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8016a68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	da08      	bge.n	8016a82 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016a70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016a74:	425b      	negs	r3, r3
 8016a76:	4619      	mov	r1, r3
 8016a78:	6878      	ldr	r0, [r7, #4]
 8016a7a:	f7ff ff9b 	bl	80169b4 <pbuf_remove_header>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	e007      	b.n	8016a92 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8016a82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016a86:	787a      	ldrb	r2, [r7, #1]
 8016a88:	4619      	mov	r1, r3
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	f7ff ff1a 	bl	80168c4 <pbuf_add_header_impl>
 8016a90:	4603      	mov	r3, r0
  }
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	3708      	adds	r7, #8
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}

08016a9a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8016a9a:	b580      	push	{r7, lr}
 8016a9c:	b082      	sub	sp, #8
 8016a9e:	af00      	add	r7, sp, #0
 8016aa0:	6078      	str	r0, [r7, #4]
 8016aa2:	460b      	mov	r3, r1
 8016aa4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8016aa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016aaa:	2201      	movs	r2, #1
 8016aac:	4619      	mov	r1, r3
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f7ff ffd2 	bl	8016a58 <pbuf_header_impl>
 8016ab4:	4603      	mov	r3, r0
}
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	3708      	adds	r7, #8
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}
	...

08016ac0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b088      	sub	sp, #32
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d10b      	bne.n	8016ae6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d106      	bne.n	8016ae2 <pbuf_free+0x22>
 8016ad4:	4b3b      	ldr	r3, [pc, #236]	; (8016bc4 <pbuf_free+0x104>)
 8016ad6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8016ada:	493b      	ldr	r1, [pc, #236]	; (8016bc8 <pbuf_free+0x108>)
 8016adc:	483b      	ldr	r0, [pc, #236]	; (8016bcc <pbuf_free+0x10c>)
 8016ade:	f009 f8f3 	bl	801fcc8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	e069      	b.n	8016bba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8016aea:	e062      	b.n	8016bb2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8016aec:	f008 fad0 	bl	801f090 <sys_arch_protect>
 8016af0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	7b9b      	ldrb	r3, [r3, #14]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d106      	bne.n	8016b08 <pbuf_free+0x48>
 8016afa:	4b32      	ldr	r3, [pc, #200]	; (8016bc4 <pbuf_free+0x104>)
 8016afc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8016b00:	4933      	ldr	r1, [pc, #204]	; (8016bd0 <pbuf_free+0x110>)
 8016b02:	4832      	ldr	r0, [pc, #200]	; (8016bcc <pbuf_free+0x10c>)
 8016b04:	f009 f8e0 	bl	801fcc8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	7b9b      	ldrb	r3, [r3, #14]
 8016b0c:	3b01      	subs	r3, #1
 8016b0e:	b2da      	uxtb	r2, r3
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	739a      	strb	r2, [r3, #14]
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	7b9b      	ldrb	r3, [r3, #14]
 8016b18:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8016b1a:	69b8      	ldr	r0, [r7, #24]
 8016b1c:	f008 fac6 	bl	801f0ac <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016b20:	7dfb      	ldrb	r3, [r7, #23]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d143      	bne.n	8016bae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	7b1b      	ldrb	r3, [r3, #12]
 8016b30:	f003 030f 	and.w	r3, r3, #15
 8016b34:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	7b5b      	ldrb	r3, [r3, #13]
 8016b3a:	f003 0302 	and.w	r3, r3, #2
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d011      	beq.n	8016b66 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8016b46:	68bb      	ldr	r3, [r7, #8]
 8016b48:	691b      	ldr	r3, [r3, #16]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d106      	bne.n	8016b5c <pbuf_free+0x9c>
 8016b4e:	4b1d      	ldr	r3, [pc, #116]	; (8016bc4 <pbuf_free+0x104>)
 8016b50:	f240 22ff 	movw	r2, #767	; 0x2ff
 8016b54:	491f      	ldr	r1, [pc, #124]	; (8016bd4 <pbuf_free+0x114>)
 8016b56:	481d      	ldr	r0, [pc, #116]	; (8016bcc <pbuf_free+0x10c>)
 8016b58:	f009 f8b6 	bl	801fcc8 <iprintf>
        pc->custom_free_function(p);
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	691b      	ldr	r3, [r3, #16]
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	4798      	blx	r3
 8016b64:	e01d      	b.n	8016ba2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8016b66:	7bfb      	ldrb	r3, [r7, #15]
 8016b68:	2b02      	cmp	r3, #2
 8016b6a:	d104      	bne.n	8016b76 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8016b6c:	6879      	ldr	r1, [r7, #4]
 8016b6e:	200c      	movs	r0, #12
 8016b70:	f7ff f902 	bl	8015d78 <memp_free>
 8016b74:	e015      	b.n	8016ba2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8016b76:	7bfb      	ldrb	r3, [r7, #15]
 8016b78:	2b01      	cmp	r3, #1
 8016b7a:	d104      	bne.n	8016b86 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8016b7c:	6879      	ldr	r1, [r7, #4]
 8016b7e:	200b      	movs	r0, #11
 8016b80:	f7ff f8fa 	bl	8015d78 <memp_free>
 8016b84:	e00d      	b.n	8016ba2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8016b86:	7bfb      	ldrb	r3, [r7, #15]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d103      	bne.n	8016b94 <pbuf_free+0xd4>
          mem_free(p);
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f7fe fd3f 	bl	8015610 <mem_free>
 8016b92:	e006      	b.n	8016ba2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8016b94:	4b0b      	ldr	r3, [pc, #44]	; (8016bc4 <pbuf_free+0x104>)
 8016b96:	f240 320f 	movw	r2, #783	; 0x30f
 8016b9a:	490f      	ldr	r1, [pc, #60]	; (8016bd8 <pbuf_free+0x118>)
 8016b9c:	480b      	ldr	r0, [pc, #44]	; (8016bcc <pbuf_free+0x10c>)
 8016b9e:	f009 f893 	bl	801fcc8 <iprintf>
        }
      }
      count++;
 8016ba2:	7ffb      	ldrb	r3, [r7, #31]
 8016ba4:	3301      	adds	r3, #1
 8016ba6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	607b      	str	r3, [r7, #4]
 8016bac:	e001      	b.n	8016bb2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d199      	bne.n	8016aec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8016bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3720      	adds	r7, #32
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}
 8016bc2:	bf00      	nop
 8016bc4:	0802101c 	.word	0x0802101c
 8016bc8:	08021180 	.word	0x08021180
 8016bcc:	0802107c 	.word	0x0802107c
 8016bd0:	080211ac 	.word	0x080211ac
 8016bd4:	080211c4 	.word	0x080211c4
 8016bd8:	080211e8 	.word	0x080211e8

08016bdc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b085      	sub	sp, #20
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8016be4:	2300      	movs	r3, #0
 8016be6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8016be8:	e005      	b.n	8016bf6 <pbuf_clen+0x1a>
    ++len;
 8016bea:	89fb      	ldrh	r3, [r7, #14]
 8016bec:	3301      	adds	r3, #1
 8016bee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d1f6      	bne.n	8016bea <pbuf_clen+0xe>
  }
  return len;
 8016bfc:	89fb      	ldrh	r3, [r7, #14]
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	3714      	adds	r7, #20
 8016c02:	46bd      	mov	sp, r7
 8016c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c08:	4770      	bx	lr
	...

08016c0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b084      	sub	sp, #16
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d016      	beq.n	8016c48 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016c1a:	f008 fa39 	bl	801f090 <sys_arch_protect>
 8016c1e:	60f8      	str	r0, [r7, #12]
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	7b9b      	ldrb	r3, [r3, #14]
 8016c24:	3301      	adds	r3, #1
 8016c26:	b2da      	uxtb	r2, r3
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	739a      	strb	r2, [r3, #14]
 8016c2c:	68f8      	ldr	r0, [r7, #12]
 8016c2e:	f008 fa3d 	bl	801f0ac <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	7b9b      	ldrb	r3, [r3, #14]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d106      	bne.n	8016c48 <pbuf_ref+0x3c>
 8016c3a:	4b05      	ldr	r3, [pc, #20]	; (8016c50 <pbuf_ref+0x44>)
 8016c3c:	f240 3242 	movw	r2, #834	; 0x342
 8016c40:	4904      	ldr	r1, [pc, #16]	; (8016c54 <pbuf_ref+0x48>)
 8016c42:	4805      	ldr	r0, [pc, #20]	; (8016c58 <pbuf_ref+0x4c>)
 8016c44:	f009 f840 	bl	801fcc8 <iprintf>
  }
}
 8016c48:	bf00      	nop
 8016c4a:	3710      	adds	r7, #16
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}
 8016c50:	0802101c 	.word	0x0802101c
 8016c54:	080211fc 	.word	0x080211fc
 8016c58:	0802107c 	.word	0x0802107c

08016c5c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b084      	sub	sp, #16
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d002      	beq.n	8016c72 <pbuf_cat+0x16>
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d107      	bne.n	8016c82 <pbuf_cat+0x26>
 8016c72:	4b20      	ldr	r3, [pc, #128]	; (8016cf4 <pbuf_cat+0x98>)
 8016c74:	f240 3259 	movw	r2, #857	; 0x359
 8016c78:	491f      	ldr	r1, [pc, #124]	; (8016cf8 <pbuf_cat+0x9c>)
 8016c7a:	4820      	ldr	r0, [pc, #128]	; (8016cfc <pbuf_cat+0xa0>)
 8016c7c:	f009 f824 	bl	801fcc8 <iprintf>
 8016c80:	e034      	b.n	8016cec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	60fb      	str	r3, [r7, #12]
 8016c86:	e00a      	b.n	8016c9e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	891a      	ldrh	r2, [r3, #8]
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	891b      	ldrh	r3, [r3, #8]
 8016c90:	4413      	add	r3, r2
 8016c92:	b29a      	uxth	r2, r3
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	60fb      	str	r3, [r7, #12]
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d1f0      	bne.n	8016c88 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	891a      	ldrh	r2, [r3, #8]
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	895b      	ldrh	r3, [r3, #10]
 8016cae:	429a      	cmp	r2, r3
 8016cb0:	d006      	beq.n	8016cc0 <pbuf_cat+0x64>
 8016cb2:	4b10      	ldr	r3, [pc, #64]	; (8016cf4 <pbuf_cat+0x98>)
 8016cb4:	f240 3262 	movw	r2, #866	; 0x362
 8016cb8:	4911      	ldr	r1, [pc, #68]	; (8016d00 <pbuf_cat+0xa4>)
 8016cba:	4810      	ldr	r0, [pc, #64]	; (8016cfc <pbuf_cat+0xa0>)
 8016cbc:	f009 f804 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d006      	beq.n	8016cd6 <pbuf_cat+0x7a>
 8016cc8:	4b0a      	ldr	r3, [pc, #40]	; (8016cf4 <pbuf_cat+0x98>)
 8016cca:	f240 3263 	movw	r2, #867	; 0x363
 8016cce:	490d      	ldr	r1, [pc, #52]	; (8016d04 <pbuf_cat+0xa8>)
 8016cd0:	480a      	ldr	r0, [pc, #40]	; (8016cfc <pbuf_cat+0xa0>)
 8016cd2:	f008 fff9 	bl	801fcc8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	891a      	ldrh	r2, [r3, #8]
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	891b      	ldrh	r3, [r3, #8]
 8016cde:	4413      	add	r3, r2
 8016ce0:	b29a      	uxth	r2, r3
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	683a      	ldr	r2, [r7, #0]
 8016cea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8016cec:	3710      	adds	r7, #16
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd80      	pop	{r7, pc}
 8016cf2:	bf00      	nop
 8016cf4:	0802101c 	.word	0x0802101c
 8016cf8:	08021210 	.word	0x08021210
 8016cfc:	0802107c 	.word	0x0802107c
 8016d00:	08021248 	.word	0x08021248
 8016d04:	08021278 	.word	0x08021278

08016d08 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b086      	sub	sp, #24
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	6078      	str	r0, [r7, #4]
 8016d10:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8016d12:	2300      	movs	r3, #0
 8016d14:	617b      	str	r3, [r7, #20]
 8016d16:	2300      	movs	r3, #0
 8016d18:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d008      	beq.n	8016d32 <pbuf_copy+0x2a>
 8016d20:	683b      	ldr	r3, [r7, #0]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d005      	beq.n	8016d32 <pbuf_copy+0x2a>
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	891a      	ldrh	r2, [r3, #8]
 8016d2a:	683b      	ldr	r3, [r7, #0]
 8016d2c:	891b      	ldrh	r3, [r3, #8]
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	d209      	bcs.n	8016d46 <pbuf_copy+0x3e>
 8016d32:	4b57      	ldr	r3, [pc, #348]	; (8016e90 <pbuf_copy+0x188>)
 8016d34:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016d38:	4956      	ldr	r1, [pc, #344]	; (8016e94 <pbuf_copy+0x18c>)
 8016d3a:	4857      	ldr	r0, [pc, #348]	; (8016e98 <pbuf_copy+0x190>)
 8016d3c:	f008 ffc4 	bl	801fcc8 <iprintf>
 8016d40:	f06f 030f 	mvn.w	r3, #15
 8016d44:	e09f      	b.n	8016e86 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	895b      	ldrh	r3, [r3, #10]
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	1ad2      	subs	r2, r2, r3
 8016d50:	683b      	ldr	r3, [r7, #0]
 8016d52:	895b      	ldrh	r3, [r3, #10]
 8016d54:	4619      	mov	r1, r3
 8016d56:	693b      	ldr	r3, [r7, #16]
 8016d58:	1acb      	subs	r3, r1, r3
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d306      	bcc.n	8016d6c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8016d5e:	683b      	ldr	r3, [r7, #0]
 8016d60:	895b      	ldrh	r3, [r3, #10]
 8016d62:	461a      	mov	r2, r3
 8016d64:	693b      	ldr	r3, [r7, #16]
 8016d66:	1ad3      	subs	r3, r2, r3
 8016d68:	60fb      	str	r3, [r7, #12]
 8016d6a:	e005      	b.n	8016d78 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	895b      	ldrh	r3, [r3, #10]
 8016d70:	461a      	mov	r2, r3
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	1ad3      	subs	r3, r2, r3
 8016d76:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	685a      	ldr	r2, [r3, #4]
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	18d0      	adds	r0, r2, r3
 8016d80:	683b      	ldr	r3, [r7, #0]
 8016d82:	685a      	ldr	r2, [r3, #4]
 8016d84:	693b      	ldr	r3, [r7, #16]
 8016d86:	4413      	add	r3, r2
 8016d88:	68fa      	ldr	r2, [r7, #12]
 8016d8a:	4619      	mov	r1, r3
 8016d8c:	f008 fea6 	bl	801fadc <memcpy>
    offset_to += len;
 8016d90:	697a      	ldr	r2, [r7, #20]
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	4413      	add	r3, r2
 8016d96:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016d98:	693a      	ldr	r2, [r7, #16]
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	4413      	add	r3, r2
 8016d9e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	895b      	ldrh	r3, [r3, #10]
 8016da4:	461a      	mov	r2, r3
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	4293      	cmp	r3, r2
 8016daa:	d906      	bls.n	8016dba <pbuf_copy+0xb2>
 8016dac:	4b38      	ldr	r3, [pc, #224]	; (8016e90 <pbuf_copy+0x188>)
 8016dae:	f240 32d9 	movw	r2, #985	; 0x3d9
 8016db2:	493a      	ldr	r1, [pc, #232]	; (8016e9c <pbuf_copy+0x194>)
 8016db4:	4838      	ldr	r0, [pc, #224]	; (8016e98 <pbuf_copy+0x190>)
 8016db6:	f008 ff87 	bl	801fcc8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	895b      	ldrh	r3, [r3, #10]
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	693b      	ldr	r3, [r7, #16]
 8016dc2:	4293      	cmp	r3, r2
 8016dc4:	d906      	bls.n	8016dd4 <pbuf_copy+0xcc>
 8016dc6:	4b32      	ldr	r3, [pc, #200]	; (8016e90 <pbuf_copy+0x188>)
 8016dc8:	f240 32da 	movw	r2, #986	; 0x3da
 8016dcc:	4934      	ldr	r1, [pc, #208]	; (8016ea0 <pbuf_copy+0x198>)
 8016dce:	4832      	ldr	r0, [pc, #200]	; (8016e98 <pbuf_copy+0x190>)
 8016dd0:	f008 ff7a 	bl	801fcc8 <iprintf>
    if (offset_from >= p_from->len) {
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	895b      	ldrh	r3, [r3, #10]
 8016dd8:	461a      	mov	r2, r3
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	4293      	cmp	r3, r2
 8016dde:	d304      	bcc.n	8016dea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8016de0:	2300      	movs	r3, #0
 8016de2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	895b      	ldrh	r3, [r3, #10]
 8016dee:	461a      	mov	r2, r3
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	4293      	cmp	r3, r2
 8016df4:	d114      	bne.n	8016e20 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8016df6:	2300      	movs	r3, #0
 8016df8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d10c      	bne.n	8016e20 <pbuf_copy+0x118>
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d009      	beq.n	8016e20 <pbuf_copy+0x118>
 8016e0c:	4b20      	ldr	r3, [pc, #128]	; (8016e90 <pbuf_copy+0x188>)
 8016e0e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016e12:	4924      	ldr	r1, [pc, #144]	; (8016ea4 <pbuf_copy+0x19c>)
 8016e14:	4820      	ldr	r0, [pc, #128]	; (8016e98 <pbuf_copy+0x190>)
 8016e16:	f008 ff57 	bl	801fcc8 <iprintf>
 8016e1a:	f06f 030f 	mvn.w	r3, #15
 8016e1e:	e032      	b.n	8016e86 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d013      	beq.n	8016e4e <pbuf_copy+0x146>
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	895a      	ldrh	r2, [r3, #10]
 8016e2a:	683b      	ldr	r3, [r7, #0]
 8016e2c:	891b      	ldrh	r3, [r3, #8]
 8016e2e:	429a      	cmp	r2, r3
 8016e30:	d10d      	bne.n	8016e4e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016e32:	683b      	ldr	r3, [r7, #0]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d009      	beq.n	8016e4e <pbuf_copy+0x146>
 8016e3a:	4b15      	ldr	r3, [pc, #84]	; (8016e90 <pbuf_copy+0x188>)
 8016e3c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8016e40:	4919      	ldr	r1, [pc, #100]	; (8016ea8 <pbuf_copy+0x1a0>)
 8016e42:	4815      	ldr	r0, [pc, #84]	; (8016e98 <pbuf_copy+0x190>)
 8016e44:	f008 ff40 	bl	801fcc8 <iprintf>
 8016e48:	f06f 0305 	mvn.w	r3, #5
 8016e4c:	e01b      	b.n	8016e86 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d013      	beq.n	8016e7c <pbuf_copy+0x174>
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	895a      	ldrh	r2, [r3, #10]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	891b      	ldrh	r3, [r3, #8]
 8016e5c:	429a      	cmp	r2, r3
 8016e5e:	d10d      	bne.n	8016e7c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d009      	beq.n	8016e7c <pbuf_copy+0x174>
 8016e68:	4b09      	ldr	r3, [pc, #36]	; (8016e90 <pbuf_copy+0x188>)
 8016e6a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8016e6e:	490e      	ldr	r1, [pc, #56]	; (8016ea8 <pbuf_copy+0x1a0>)
 8016e70:	4809      	ldr	r0, [pc, #36]	; (8016e98 <pbuf_copy+0x190>)
 8016e72:	f008 ff29 	bl	801fcc8 <iprintf>
 8016e76:	f06f 0305 	mvn.w	r3, #5
 8016e7a:	e004      	b.n	8016e86 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	f47f af61 	bne.w	8016d46 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016e84:	2300      	movs	r3, #0
}
 8016e86:	4618      	mov	r0, r3
 8016e88:	3718      	adds	r7, #24
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}
 8016e8e:	bf00      	nop
 8016e90:	0802101c 	.word	0x0802101c
 8016e94:	080212c4 	.word	0x080212c4
 8016e98:	0802107c 	.word	0x0802107c
 8016e9c:	080212f4 	.word	0x080212f4
 8016ea0:	0802130c 	.word	0x0802130c
 8016ea4:	08021328 	.word	0x08021328
 8016ea8:	08021338 	.word	0x08021338

08016eac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b088      	sub	sp, #32
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	60f8      	str	r0, [r7, #12]
 8016eb4:	60b9      	str	r1, [r7, #8]
 8016eb6:	4611      	mov	r1, r2
 8016eb8:	461a      	mov	r2, r3
 8016eba:	460b      	mov	r3, r1
 8016ebc:	80fb      	strh	r3, [r7, #6]
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d108      	bne.n	8016ee2 <pbuf_copy_partial+0x36>
 8016ed0:	4b2b      	ldr	r3, [pc, #172]	; (8016f80 <pbuf_copy_partial+0xd4>)
 8016ed2:	f240 420a 	movw	r2, #1034	; 0x40a
 8016ed6:	492b      	ldr	r1, [pc, #172]	; (8016f84 <pbuf_copy_partial+0xd8>)
 8016ed8:	482b      	ldr	r0, [pc, #172]	; (8016f88 <pbuf_copy_partial+0xdc>)
 8016eda:	f008 fef5 	bl	801fcc8 <iprintf>
 8016ede:	2300      	movs	r3, #0
 8016ee0:	e04a      	b.n	8016f78 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d108      	bne.n	8016efa <pbuf_copy_partial+0x4e>
 8016ee8:	4b25      	ldr	r3, [pc, #148]	; (8016f80 <pbuf_copy_partial+0xd4>)
 8016eea:	f240 420b 	movw	r2, #1035	; 0x40b
 8016eee:	4927      	ldr	r1, [pc, #156]	; (8016f8c <pbuf_copy_partial+0xe0>)
 8016ef0:	4825      	ldr	r0, [pc, #148]	; (8016f88 <pbuf_copy_partial+0xdc>)
 8016ef2:	f008 fee9 	bl	801fcc8 <iprintf>
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	e03e      	b.n	8016f78 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	61fb      	str	r3, [r7, #28]
 8016efe:	e034      	b.n	8016f6a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8016f00:	88bb      	ldrh	r3, [r7, #4]
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d00a      	beq.n	8016f1c <pbuf_copy_partial+0x70>
 8016f06:	69fb      	ldr	r3, [r7, #28]
 8016f08:	895b      	ldrh	r3, [r3, #10]
 8016f0a:	88ba      	ldrh	r2, [r7, #4]
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	d305      	bcc.n	8016f1c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016f10:	69fb      	ldr	r3, [r7, #28]
 8016f12:	895b      	ldrh	r3, [r3, #10]
 8016f14:	88ba      	ldrh	r2, [r7, #4]
 8016f16:	1ad3      	subs	r3, r2, r3
 8016f18:	80bb      	strh	r3, [r7, #4]
 8016f1a:	e023      	b.n	8016f64 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	895a      	ldrh	r2, [r3, #10]
 8016f20:	88bb      	ldrh	r3, [r7, #4]
 8016f22:	1ad3      	subs	r3, r2, r3
 8016f24:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016f26:	8b3a      	ldrh	r2, [r7, #24]
 8016f28:	88fb      	ldrh	r3, [r7, #6]
 8016f2a:	429a      	cmp	r2, r3
 8016f2c:	d901      	bls.n	8016f32 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8016f2e:	88fb      	ldrh	r3, [r7, #6]
 8016f30:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016f32:	8b7b      	ldrh	r3, [r7, #26]
 8016f34:	68ba      	ldr	r2, [r7, #8]
 8016f36:	18d0      	adds	r0, r2, r3
 8016f38:	69fb      	ldr	r3, [r7, #28]
 8016f3a:	685a      	ldr	r2, [r3, #4]
 8016f3c:	88bb      	ldrh	r3, [r7, #4]
 8016f3e:	4413      	add	r3, r2
 8016f40:	8b3a      	ldrh	r2, [r7, #24]
 8016f42:	4619      	mov	r1, r3
 8016f44:	f008 fdca 	bl	801fadc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016f48:	8afa      	ldrh	r2, [r7, #22]
 8016f4a:	8b3b      	ldrh	r3, [r7, #24]
 8016f4c:	4413      	add	r3, r2
 8016f4e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016f50:	8b7a      	ldrh	r2, [r7, #26]
 8016f52:	8b3b      	ldrh	r3, [r7, #24]
 8016f54:	4413      	add	r3, r2
 8016f56:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016f58:	88fa      	ldrh	r2, [r7, #6]
 8016f5a:	8b3b      	ldrh	r3, [r7, #24]
 8016f5c:	1ad3      	subs	r3, r2, r3
 8016f5e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016f60:	2300      	movs	r3, #0
 8016f62:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016f64:	69fb      	ldr	r3, [r7, #28]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	61fb      	str	r3, [r7, #28]
 8016f6a:	88fb      	ldrh	r3, [r7, #6]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d002      	beq.n	8016f76 <pbuf_copy_partial+0xca>
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d1c4      	bne.n	8016f00 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016f76:	8afb      	ldrh	r3, [r7, #22]
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3720      	adds	r7, #32
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	0802101c 	.word	0x0802101c
 8016f84:	08021364 	.word	0x08021364
 8016f88:	0802107c 	.word	0x0802107c
 8016f8c:	08021384 	.word	0x08021384

08016f90 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b084      	sub	sp, #16
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	4603      	mov	r3, r0
 8016f98:	603a      	str	r2, [r7, #0]
 8016f9a:	71fb      	strb	r3, [r7, #7]
 8016f9c:	460b      	mov	r3, r1
 8016f9e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	8919      	ldrh	r1, [r3, #8]
 8016fa4:	88ba      	ldrh	r2, [r7, #4]
 8016fa6:	79fb      	ldrb	r3, [r7, #7]
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f7ff faa5 	bl	80164f8 <pbuf_alloc>
 8016fae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d101      	bne.n	8016fba <pbuf_clone+0x2a>
    return NULL;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	e011      	b.n	8016fde <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016fba:	6839      	ldr	r1, [r7, #0]
 8016fbc:	68f8      	ldr	r0, [r7, #12]
 8016fbe:	f7ff fea3 	bl	8016d08 <pbuf_copy>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016fc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d006      	beq.n	8016fdc <pbuf_clone+0x4c>
 8016fce:	4b06      	ldr	r3, [pc, #24]	; (8016fe8 <pbuf_clone+0x58>)
 8016fd0:	f240 5224 	movw	r2, #1316	; 0x524
 8016fd4:	4905      	ldr	r1, [pc, #20]	; (8016fec <pbuf_clone+0x5c>)
 8016fd6:	4806      	ldr	r0, [pc, #24]	; (8016ff0 <pbuf_clone+0x60>)
 8016fd8:	f008 fe76 	bl	801fcc8 <iprintf>
  return q;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
}
 8016fde:	4618      	mov	r0, r3
 8016fe0:	3710      	adds	r7, #16
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	bd80      	pop	{r7, pc}
 8016fe6:	bf00      	nop
 8016fe8:	0802101c 	.word	0x0802101c
 8016fec:	08021490 	.word	0x08021490
 8016ff0:	0802107c 	.word	0x0802107c

08016ff4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016ff8:	f008 fe7e 	bl	801fcf8 <rand>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017004:	b29b      	uxth	r3, r3
 8017006:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801700a:	b29a      	uxth	r2, r3
 801700c:	4b01      	ldr	r3, [pc, #4]	; (8017014 <tcp_init+0x20>)
 801700e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017010:	bf00      	nop
 8017012:	bd80      	pop	{r7, pc}
 8017014:	20000044 	.word	0x20000044

08017018 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b082      	sub	sp, #8
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	7d1b      	ldrb	r3, [r3, #20]
 8017024:	2b01      	cmp	r3, #1
 8017026:	d105      	bne.n	8017034 <tcp_free+0x1c>
 8017028:	4b06      	ldr	r3, [pc, #24]	; (8017044 <tcp_free+0x2c>)
 801702a:	22d4      	movs	r2, #212	; 0xd4
 801702c:	4906      	ldr	r1, [pc, #24]	; (8017048 <tcp_free+0x30>)
 801702e:	4807      	ldr	r0, [pc, #28]	; (801704c <tcp_free+0x34>)
 8017030:	f008 fe4a 	bl	801fcc8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8017034:	6879      	ldr	r1, [r7, #4]
 8017036:	2001      	movs	r0, #1
 8017038:	f7fe fe9e 	bl	8015d78 <memp_free>
}
 801703c:	bf00      	nop
 801703e:	3708      	adds	r7, #8
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	0802151c 	.word	0x0802151c
 8017048:	0802154c 	.word	0x0802154c
 801704c:	08021560 	.word	0x08021560

08017050 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b082      	sub	sp, #8
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	7d1b      	ldrb	r3, [r3, #20]
 801705c:	2b01      	cmp	r3, #1
 801705e:	d105      	bne.n	801706c <tcp_free_listen+0x1c>
 8017060:	4b06      	ldr	r3, [pc, #24]	; (801707c <tcp_free_listen+0x2c>)
 8017062:	22df      	movs	r2, #223	; 0xdf
 8017064:	4906      	ldr	r1, [pc, #24]	; (8017080 <tcp_free_listen+0x30>)
 8017066:	4807      	ldr	r0, [pc, #28]	; (8017084 <tcp_free_listen+0x34>)
 8017068:	f008 fe2e 	bl	801fcc8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801706c:	6879      	ldr	r1, [r7, #4]
 801706e:	2002      	movs	r0, #2
 8017070:	f7fe fe82 	bl	8015d78 <memp_free>
}
 8017074:	bf00      	nop
 8017076:	3708      	adds	r7, #8
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}
 801707c:	0802151c 	.word	0x0802151c
 8017080:	08021588 	.word	0x08021588
 8017084:	08021560 	.word	0x08021560

08017088 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801708c:	f000 fea2 	bl	8017dd4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8017090:	4b07      	ldr	r3, [pc, #28]	; (80170b0 <tcp_tmr+0x28>)
 8017092:	781b      	ldrb	r3, [r3, #0]
 8017094:	3301      	adds	r3, #1
 8017096:	b2da      	uxtb	r2, r3
 8017098:	4b05      	ldr	r3, [pc, #20]	; (80170b0 <tcp_tmr+0x28>)
 801709a:	701a      	strb	r2, [r3, #0]
 801709c:	4b04      	ldr	r3, [pc, #16]	; (80170b0 <tcp_tmr+0x28>)
 801709e:	781b      	ldrb	r3, [r3, #0]
 80170a0:	f003 0301 	and.w	r3, r3, #1
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d001      	beq.n	80170ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80170a8:	f000 fb54 	bl	8017754 <tcp_slowtmr>
  }
}
 80170ac:	bf00      	nop
 80170ae:	bd80      	pop	{r7, pc}
 80170b0:	20011095 	.word	0x20011095

080170b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b084      	sub	sp, #16
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
 80170bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d105      	bne.n	80170d0 <tcp_remove_listener+0x1c>
 80170c4:	4b0d      	ldr	r3, [pc, #52]	; (80170fc <tcp_remove_listener+0x48>)
 80170c6:	22ff      	movs	r2, #255	; 0xff
 80170c8:	490d      	ldr	r1, [pc, #52]	; (8017100 <tcp_remove_listener+0x4c>)
 80170ca:	480e      	ldr	r0, [pc, #56]	; (8017104 <tcp_remove_listener+0x50>)
 80170cc:	f008 fdfc 	bl	801fcc8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	60fb      	str	r3, [r7, #12]
 80170d4:	e00a      	b.n	80170ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80170da:	683a      	ldr	r2, [r7, #0]
 80170dc:	429a      	cmp	r2, r3
 80170de:	d102      	bne.n	80170e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	2200      	movs	r2, #0
 80170e4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	68db      	ldr	r3, [r3, #12]
 80170ea:	60fb      	str	r3, [r7, #12]
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d1f1      	bne.n	80170d6 <tcp_remove_listener+0x22>
    }
  }
}
 80170f2:	bf00      	nop
 80170f4:	bf00      	nop
 80170f6:	3710      	adds	r7, #16
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	0802151c 	.word	0x0802151c
 8017100:	080215a4 	.word	0x080215a4
 8017104:	08021560 	.word	0x08021560

08017108 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8017108:	b580      	push	{r7, lr}
 801710a:	b084      	sub	sp, #16
 801710c:	af00      	add	r7, sp, #0
 801710e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d106      	bne.n	8017124 <tcp_listen_closed+0x1c>
 8017116:	4b14      	ldr	r3, [pc, #80]	; (8017168 <tcp_listen_closed+0x60>)
 8017118:	f240 1211 	movw	r2, #273	; 0x111
 801711c:	4913      	ldr	r1, [pc, #76]	; (801716c <tcp_listen_closed+0x64>)
 801711e:	4814      	ldr	r0, [pc, #80]	; (8017170 <tcp_listen_closed+0x68>)
 8017120:	f008 fdd2 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	7d1b      	ldrb	r3, [r3, #20]
 8017128:	2b01      	cmp	r3, #1
 801712a:	d006      	beq.n	801713a <tcp_listen_closed+0x32>
 801712c:	4b0e      	ldr	r3, [pc, #56]	; (8017168 <tcp_listen_closed+0x60>)
 801712e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8017132:	4910      	ldr	r1, [pc, #64]	; (8017174 <tcp_listen_closed+0x6c>)
 8017134:	480e      	ldr	r0, [pc, #56]	; (8017170 <tcp_listen_closed+0x68>)
 8017136:	f008 fdc7 	bl	801fcc8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801713a:	2301      	movs	r3, #1
 801713c:	60fb      	str	r3, [r7, #12]
 801713e:	e00b      	b.n	8017158 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8017140:	4a0d      	ldr	r2, [pc, #52]	; (8017178 <tcp_listen_closed+0x70>)
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	6879      	ldr	r1, [r7, #4]
 801714c:	4618      	mov	r0, r3
 801714e:	f7ff ffb1 	bl	80170b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	3301      	adds	r3, #1
 8017156:	60fb      	str	r3, [r7, #12]
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	2b03      	cmp	r3, #3
 801715c:	d9f0      	bls.n	8017140 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801715e:	bf00      	nop
 8017160:	bf00      	nop
 8017162:	3710      	adds	r7, #16
 8017164:	46bd      	mov	sp, r7
 8017166:	bd80      	pop	{r7, pc}
 8017168:	0802151c 	.word	0x0802151c
 801716c:	080215cc 	.word	0x080215cc
 8017170:	08021560 	.word	0x08021560
 8017174:	080215d8 	.word	0x080215d8
 8017178:	08023550 	.word	0x08023550

0801717c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801717c:	b5b0      	push	{r4, r5, r7, lr}
 801717e:	b088      	sub	sp, #32
 8017180:	af04      	add	r7, sp, #16
 8017182:	6078      	str	r0, [r7, #4]
 8017184:	460b      	mov	r3, r1
 8017186:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d106      	bne.n	801719c <tcp_close_shutdown+0x20>
 801718e:	4b63      	ldr	r3, [pc, #396]	; (801731c <tcp_close_shutdown+0x1a0>)
 8017190:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017194:	4962      	ldr	r1, [pc, #392]	; (8017320 <tcp_close_shutdown+0x1a4>)
 8017196:	4863      	ldr	r0, [pc, #396]	; (8017324 <tcp_close_shutdown+0x1a8>)
 8017198:	f008 fd96 	bl	801fcc8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801719c:	78fb      	ldrb	r3, [r7, #3]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d066      	beq.n	8017270 <tcp_close_shutdown+0xf4>
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	7d1b      	ldrb	r3, [r3, #20]
 80171a6:	2b04      	cmp	r3, #4
 80171a8:	d003      	beq.n	80171b2 <tcp_close_shutdown+0x36>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	7d1b      	ldrb	r3, [r3, #20]
 80171ae:	2b07      	cmp	r3, #7
 80171b0:	d15e      	bne.n	8017270 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d104      	bne.n	80171c4 <tcp_close_shutdown+0x48>
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80171c2:	d055      	beq.n	8017270 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	8b5b      	ldrh	r3, [r3, #26]
 80171c8:	f003 0310 	and.w	r3, r3, #16
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d106      	bne.n	80171de <tcp_close_shutdown+0x62>
 80171d0:	4b52      	ldr	r3, [pc, #328]	; (801731c <tcp_close_shutdown+0x1a0>)
 80171d2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80171d6:	4954      	ldr	r1, [pc, #336]	; (8017328 <tcp_close_shutdown+0x1ac>)
 80171d8:	4852      	ldr	r0, [pc, #328]	; (8017324 <tcp_close_shutdown+0x1a8>)
 80171da:	f008 fd75 	bl	801fcc8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80171e6:	687d      	ldr	r5, [r7, #4]
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	3304      	adds	r3, #4
 80171ec:	687a      	ldr	r2, [r7, #4]
 80171ee:	8ad2      	ldrh	r2, [r2, #22]
 80171f0:	6879      	ldr	r1, [r7, #4]
 80171f2:	8b09      	ldrh	r1, [r1, #24]
 80171f4:	9102      	str	r1, [sp, #8]
 80171f6:	9201      	str	r2, [sp, #4]
 80171f8:	9300      	str	r3, [sp, #0]
 80171fa:	462b      	mov	r3, r5
 80171fc:	4622      	mov	r2, r4
 80171fe:	4601      	mov	r1, r0
 8017200:	6878      	ldr	r0, [r7, #4]
 8017202:	f004 fe91 	bl	801bf28 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8017206:	6878      	ldr	r0, [r7, #4]
 8017208:	f001 f8c6 	bl	8018398 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801720c:	4b47      	ldr	r3, [pc, #284]	; (801732c <tcp_close_shutdown+0x1b0>)
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	687a      	ldr	r2, [r7, #4]
 8017212:	429a      	cmp	r2, r3
 8017214:	d105      	bne.n	8017222 <tcp_close_shutdown+0xa6>
 8017216:	4b45      	ldr	r3, [pc, #276]	; (801732c <tcp_close_shutdown+0x1b0>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	68db      	ldr	r3, [r3, #12]
 801721c:	4a43      	ldr	r2, [pc, #268]	; (801732c <tcp_close_shutdown+0x1b0>)
 801721e:	6013      	str	r3, [r2, #0]
 8017220:	e013      	b.n	801724a <tcp_close_shutdown+0xce>
 8017222:	4b42      	ldr	r3, [pc, #264]	; (801732c <tcp_close_shutdown+0x1b0>)
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	60fb      	str	r3, [r7, #12]
 8017228:	e00c      	b.n	8017244 <tcp_close_shutdown+0xc8>
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	68db      	ldr	r3, [r3, #12]
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	429a      	cmp	r2, r3
 8017232:	d104      	bne.n	801723e <tcp_close_shutdown+0xc2>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	68da      	ldr	r2, [r3, #12]
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	60da      	str	r2, [r3, #12]
 801723c:	e005      	b.n	801724a <tcp_close_shutdown+0xce>
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	68db      	ldr	r3, [r3, #12]
 8017242:	60fb      	str	r3, [r7, #12]
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d1ef      	bne.n	801722a <tcp_close_shutdown+0xae>
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2200      	movs	r2, #0
 801724e:	60da      	str	r2, [r3, #12]
 8017250:	4b37      	ldr	r3, [pc, #220]	; (8017330 <tcp_close_shutdown+0x1b4>)
 8017252:	2201      	movs	r2, #1
 8017254:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8017256:	4b37      	ldr	r3, [pc, #220]	; (8017334 <tcp_close_shutdown+0x1b8>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	687a      	ldr	r2, [r7, #4]
 801725c:	429a      	cmp	r2, r3
 801725e:	d102      	bne.n	8017266 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8017260:	f003 fd5e 	bl	801ad20 <tcp_trigger_input_pcb_close>
 8017264:	e002      	b.n	801726c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8017266:	6878      	ldr	r0, [r7, #4]
 8017268:	f7ff fed6 	bl	8017018 <tcp_free>
      }
      return ERR_OK;
 801726c:	2300      	movs	r3, #0
 801726e:	e050      	b.n	8017312 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	7d1b      	ldrb	r3, [r3, #20]
 8017274:	2b02      	cmp	r3, #2
 8017276:	d03b      	beq.n	80172f0 <tcp_close_shutdown+0x174>
 8017278:	2b02      	cmp	r3, #2
 801727a:	dc44      	bgt.n	8017306 <tcp_close_shutdown+0x18a>
 801727c:	2b00      	cmp	r3, #0
 801727e:	d002      	beq.n	8017286 <tcp_close_shutdown+0x10a>
 8017280:	2b01      	cmp	r3, #1
 8017282:	d02a      	beq.n	80172da <tcp_close_shutdown+0x15e>
 8017284:	e03f      	b.n	8017306 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	8adb      	ldrh	r3, [r3, #22]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d021      	beq.n	80172d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801728e:	4b2a      	ldr	r3, [pc, #168]	; (8017338 <tcp_close_shutdown+0x1bc>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	687a      	ldr	r2, [r7, #4]
 8017294:	429a      	cmp	r2, r3
 8017296:	d105      	bne.n	80172a4 <tcp_close_shutdown+0x128>
 8017298:	4b27      	ldr	r3, [pc, #156]	; (8017338 <tcp_close_shutdown+0x1bc>)
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	68db      	ldr	r3, [r3, #12]
 801729e:	4a26      	ldr	r2, [pc, #152]	; (8017338 <tcp_close_shutdown+0x1bc>)
 80172a0:	6013      	str	r3, [r2, #0]
 80172a2:	e013      	b.n	80172cc <tcp_close_shutdown+0x150>
 80172a4:	4b24      	ldr	r3, [pc, #144]	; (8017338 <tcp_close_shutdown+0x1bc>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	60bb      	str	r3, [r7, #8]
 80172aa:	e00c      	b.n	80172c6 <tcp_close_shutdown+0x14a>
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	68db      	ldr	r3, [r3, #12]
 80172b0:	687a      	ldr	r2, [r7, #4]
 80172b2:	429a      	cmp	r2, r3
 80172b4:	d104      	bne.n	80172c0 <tcp_close_shutdown+0x144>
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	68da      	ldr	r2, [r3, #12]
 80172ba:	68bb      	ldr	r3, [r7, #8]
 80172bc:	60da      	str	r2, [r3, #12]
 80172be:	e005      	b.n	80172cc <tcp_close_shutdown+0x150>
 80172c0:	68bb      	ldr	r3, [r7, #8]
 80172c2:	68db      	ldr	r3, [r3, #12]
 80172c4:	60bb      	str	r3, [r7, #8]
 80172c6:	68bb      	ldr	r3, [r7, #8]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d1ef      	bne.n	80172ac <tcp_close_shutdown+0x130>
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	2200      	movs	r2, #0
 80172d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f7ff fea0 	bl	8017018 <tcp_free>
      break;
 80172d8:	e01a      	b.n	8017310 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80172da:	6878      	ldr	r0, [r7, #4]
 80172dc:	f7ff ff14 	bl	8017108 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80172e0:	6879      	ldr	r1, [r7, #4]
 80172e2:	4816      	ldr	r0, [pc, #88]	; (801733c <tcp_close_shutdown+0x1c0>)
 80172e4:	f001 f8a8 	bl	8018438 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80172e8:	6878      	ldr	r0, [r7, #4]
 80172ea:	f7ff feb1 	bl	8017050 <tcp_free_listen>
      break;
 80172ee:	e00f      	b.n	8017310 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80172f0:	6879      	ldr	r1, [r7, #4]
 80172f2:	480e      	ldr	r0, [pc, #56]	; (801732c <tcp_close_shutdown+0x1b0>)
 80172f4:	f001 f8a0 	bl	8018438 <tcp_pcb_remove>
 80172f8:	4b0d      	ldr	r3, [pc, #52]	; (8017330 <tcp_close_shutdown+0x1b4>)
 80172fa:	2201      	movs	r2, #1
 80172fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f7ff fe8a 	bl	8017018 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8017304:	e004      	b.n	8017310 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f000 f81a 	bl	8017340 <tcp_close_shutdown_fin>
 801730c:	4603      	mov	r3, r0
 801730e:	e000      	b.n	8017312 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8017310:	2300      	movs	r3, #0
}
 8017312:	4618      	mov	r0, r3
 8017314:	3710      	adds	r7, #16
 8017316:	46bd      	mov	sp, r7
 8017318:	bdb0      	pop	{r4, r5, r7, pc}
 801731a:	bf00      	nop
 801731c:	0802151c 	.word	0x0802151c
 8017320:	080215f0 	.word	0x080215f0
 8017324:	08021560 	.word	0x08021560
 8017328:	08021610 	.word	0x08021610
 801732c:	2001108c 	.word	0x2001108c
 8017330:	20011094 	.word	0x20011094
 8017334:	200110cc 	.word	0x200110cc
 8017338:	20011084 	.word	0x20011084
 801733c:	20011088 	.word	0x20011088

08017340 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d106      	bne.n	801735c <tcp_close_shutdown_fin+0x1c>
 801734e:	4b2e      	ldr	r3, [pc, #184]	; (8017408 <tcp_close_shutdown_fin+0xc8>)
 8017350:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017354:	492d      	ldr	r1, [pc, #180]	; (801740c <tcp_close_shutdown_fin+0xcc>)
 8017356:	482e      	ldr	r0, [pc, #184]	; (8017410 <tcp_close_shutdown_fin+0xd0>)
 8017358:	f008 fcb6 	bl	801fcc8 <iprintf>

  switch (pcb->state) {
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	7d1b      	ldrb	r3, [r3, #20]
 8017360:	2b07      	cmp	r3, #7
 8017362:	d020      	beq.n	80173a6 <tcp_close_shutdown_fin+0x66>
 8017364:	2b07      	cmp	r3, #7
 8017366:	dc2b      	bgt.n	80173c0 <tcp_close_shutdown_fin+0x80>
 8017368:	2b03      	cmp	r3, #3
 801736a:	d002      	beq.n	8017372 <tcp_close_shutdown_fin+0x32>
 801736c:	2b04      	cmp	r3, #4
 801736e:	d00d      	beq.n	801738c <tcp_close_shutdown_fin+0x4c>
 8017370:	e026      	b.n	80173c0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f003 fee6 	bl	801b144 <tcp_send_fin>
 8017378:	4603      	mov	r3, r0
 801737a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801737c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d11f      	bne.n	80173c4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2205      	movs	r2, #5
 8017388:	751a      	strb	r2, [r3, #20]
      }
      break;
 801738a:	e01b      	b.n	80173c4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f003 fed9 	bl	801b144 <tcp_send_fin>
 8017392:	4603      	mov	r3, r0
 8017394:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d114      	bne.n	80173c8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2205      	movs	r2, #5
 80173a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80173a4:	e010      	b.n	80173c8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f003 fecc 	bl	801b144 <tcp_send_fin>
 80173ac:	4603      	mov	r3, r0
 80173ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80173b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d109      	bne.n	80173cc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2209      	movs	r2, #9
 80173bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80173be:	e005      	b.n	80173cc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80173c0:	2300      	movs	r3, #0
 80173c2:	e01c      	b.n	80173fe <tcp_close_shutdown_fin+0xbe>
      break;
 80173c4:	bf00      	nop
 80173c6:	e002      	b.n	80173ce <tcp_close_shutdown_fin+0x8e>
      break;
 80173c8:	bf00      	nop
 80173ca:	e000      	b.n	80173ce <tcp_close_shutdown_fin+0x8e>
      break;
 80173cc:	bf00      	nop
  }

  if (err == ERR_OK) {
 80173ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d103      	bne.n	80173de <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f003 fff2 	bl	801b3c0 <tcp_output>
 80173dc:	e00d      	b.n	80173fa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80173de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80173e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173e6:	d108      	bne.n	80173fa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	8b5b      	ldrh	r3, [r3, #26]
 80173ec:	f043 0308 	orr.w	r3, r3, #8
 80173f0:	b29a      	uxth	r2, r3
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80173f6:	2300      	movs	r3, #0
 80173f8:	e001      	b.n	80173fe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80173fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80173fe:	4618      	mov	r0, r3
 8017400:	3710      	adds	r7, #16
 8017402:	46bd      	mov	sp, r7
 8017404:	bd80      	pop	{r7, pc}
 8017406:	bf00      	nop
 8017408:	0802151c 	.word	0x0802151c
 801740c:	080215cc 	.word	0x080215cc
 8017410:	08021560 	.word	0x08021560

08017414 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8017414:	b580      	push	{r7, lr}
 8017416:	b082      	sub	sp, #8
 8017418:	af00      	add	r7, sp, #0
 801741a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d109      	bne.n	8017436 <tcp_close+0x22>
 8017422:	4b0f      	ldr	r3, [pc, #60]	; (8017460 <tcp_close+0x4c>)
 8017424:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8017428:	490e      	ldr	r1, [pc, #56]	; (8017464 <tcp_close+0x50>)
 801742a:	480f      	ldr	r0, [pc, #60]	; (8017468 <tcp_close+0x54>)
 801742c:	f008 fc4c 	bl	801fcc8 <iprintf>
 8017430:	f06f 030f 	mvn.w	r3, #15
 8017434:	e00f      	b.n	8017456 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	7d1b      	ldrb	r3, [r3, #20]
 801743a:	2b01      	cmp	r3, #1
 801743c:	d006      	beq.n	801744c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	8b5b      	ldrh	r3, [r3, #26]
 8017442:	f043 0310 	orr.w	r3, r3, #16
 8017446:	b29a      	uxth	r2, r3
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801744c:	2101      	movs	r1, #1
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f7ff fe94 	bl	801717c <tcp_close_shutdown>
 8017454:	4603      	mov	r3, r0
}
 8017456:	4618      	mov	r0, r3
 8017458:	3708      	adds	r7, #8
 801745a:	46bd      	mov	sp, r7
 801745c:	bd80      	pop	{r7, pc}
 801745e:	bf00      	nop
 8017460:	0802151c 	.word	0x0802151c
 8017464:	0802162c 	.word	0x0802162c
 8017468:	08021560 	.word	0x08021560

0801746c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801746c:	b580      	push	{r7, lr}
 801746e:	b08e      	sub	sp, #56	; 0x38
 8017470:	af04      	add	r7, sp, #16
 8017472:	6078      	str	r0, [r7, #4]
 8017474:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d107      	bne.n	801748c <tcp_abandon+0x20>
 801747c:	4b52      	ldr	r3, [pc, #328]	; (80175c8 <tcp_abandon+0x15c>)
 801747e:	f240 223d 	movw	r2, #573	; 0x23d
 8017482:	4952      	ldr	r1, [pc, #328]	; (80175cc <tcp_abandon+0x160>)
 8017484:	4852      	ldr	r0, [pc, #328]	; (80175d0 <tcp_abandon+0x164>)
 8017486:	f008 fc1f 	bl	801fcc8 <iprintf>
 801748a:	e099      	b.n	80175c0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	7d1b      	ldrb	r3, [r3, #20]
 8017490:	2b01      	cmp	r3, #1
 8017492:	d106      	bne.n	80174a2 <tcp_abandon+0x36>
 8017494:	4b4c      	ldr	r3, [pc, #304]	; (80175c8 <tcp_abandon+0x15c>)
 8017496:	f44f 7210 	mov.w	r2, #576	; 0x240
 801749a:	494e      	ldr	r1, [pc, #312]	; (80175d4 <tcp_abandon+0x168>)
 801749c:	484c      	ldr	r0, [pc, #304]	; (80175d0 <tcp_abandon+0x164>)
 801749e:	f008 fc13 	bl	801fcc8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	7d1b      	ldrb	r3, [r3, #20]
 80174a6:	2b0a      	cmp	r3, #10
 80174a8:	d107      	bne.n	80174ba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80174aa:	6879      	ldr	r1, [r7, #4]
 80174ac:	484a      	ldr	r0, [pc, #296]	; (80175d8 <tcp_abandon+0x16c>)
 80174ae:	f000 ffc3 	bl	8018438 <tcp_pcb_remove>
    tcp_free(pcb);
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	f7ff fdb0 	bl	8017018 <tcp_free>
 80174b8:	e082      	b.n	80175c0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80174ba:	2300      	movs	r3, #0
 80174bc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80174be:	2300      	movs	r3, #0
 80174c0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80174c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174cc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80174d4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	691b      	ldr	r3, [r3, #16]
 80174da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	7d1b      	ldrb	r3, [r3, #20]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d126      	bne.n	8017532 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	8adb      	ldrh	r3, [r3, #22]
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d02e      	beq.n	801754a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80174ec:	4b3b      	ldr	r3, [pc, #236]	; (80175dc <tcp_abandon+0x170>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	687a      	ldr	r2, [r7, #4]
 80174f2:	429a      	cmp	r2, r3
 80174f4:	d105      	bne.n	8017502 <tcp_abandon+0x96>
 80174f6:	4b39      	ldr	r3, [pc, #228]	; (80175dc <tcp_abandon+0x170>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	68db      	ldr	r3, [r3, #12]
 80174fc:	4a37      	ldr	r2, [pc, #220]	; (80175dc <tcp_abandon+0x170>)
 80174fe:	6013      	str	r3, [r2, #0]
 8017500:	e013      	b.n	801752a <tcp_abandon+0xbe>
 8017502:	4b36      	ldr	r3, [pc, #216]	; (80175dc <tcp_abandon+0x170>)
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	61fb      	str	r3, [r7, #28]
 8017508:	e00c      	b.n	8017524 <tcp_abandon+0xb8>
 801750a:	69fb      	ldr	r3, [r7, #28]
 801750c:	68db      	ldr	r3, [r3, #12]
 801750e:	687a      	ldr	r2, [r7, #4]
 8017510:	429a      	cmp	r2, r3
 8017512:	d104      	bne.n	801751e <tcp_abandon+0xb2>
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	68da      	ldr	r2, [r3, #12]
 8017518:	69fb      	ldr	r3, [r7, #28]
 801751a:	60da      	str	r2, [r3, #12]
 801751c:	e005      	b.n	801752a <tcp_abandon+0xbe>
 801751e:	69fb      	ldr	r3, [r7, #28]
 8017520:	68db      	ldr	r3, [r3, #12]
 8017522:	61fb      	str	r3, [r7, #28]
 8017524:	69fb      	ldr	r3, [r7, #28]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d1ef      	bne.n	801750a <tcp_abandon+0x9e>
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	2200      	movs	r2, #0
 801752e:	60da      	str	r2, [r3, #12]
 8017530:	e00b      	b.n	801754a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8017532:	683b      	ldr	r3, [r7, #0]
 8017534:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	8adb      	ldrh	r3, [r3, #22]
 801753a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801753c:	6879      	ldr	r1, [r7, #4]
 801753e:	4828      	ldr	r0, [pc, #160]	; (80175e0 <tcp_abandon+0x174>)
 8017540:	f000 ff7a 	bl	8018438 <tcp_pcb_remove>
 8017544:	4b27      	ldr	r3, [pc, #156]	; (80175e4 <tcp_abandon+0x178>)
 8017546:	2201      	movs	r2, #1
 8017548:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801754e:	2b00      	cmp	r3, #0
 8017550:	d004      	beq.n	801755c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017556:	4618      	mov	r0, r3
 8017558:	f000 fd1c 	bl	8017f94 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017560:	2b00      	cmp	r3, #0
 8017562:	d004      	beq.n	801756e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017568:	4618      	mov	r0, r3
 801756a:	f000 fd13 	bl	8017f94 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017572:	2b00      	cmp	r3, #0
 8017574:	d004      	beq.n	8017580 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801757a:	4618      	mov	r0, r3
 801757c:	f000 fd0a 	bl	8017f94 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8017580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017582:	2b00      	cmp	r3, #0
 8017584:	d00e      	beq.n	80175a4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017586:	6879      	ldr	r1, [r7, #4]
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	3304      	adds	r3, #4
 801758c:	687a      	ldr	r2, [r7, #4]
 801758e:	8b12      	ldrh	r2, [r2, #24]
 8017590:	9202      	str	r2, [sp, #8]
 8017592:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017594:	9201      	str	r2, [sp, #4]
 8017596:	9300      	str	r3, [sp, #0]
 8017598:	460b      	mov	r3, r1
 801759a:	697a      	ldr	r2, [r7, #20]
 801759c:	69b9      	ldr	r1, [r7, #24]
 801759e:	6878      	ldr	r0, [r7, #4]
 80175a0:	f004 fcc2 	bl	801bf28 <tcp_rst>
    }
    last_state = pcb->state;
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	7d1b      	ldrb	r3, [r3, #20]
 80175a8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80175aa:	6878      	ldr	r0, [r7, #4]
 80175ac:	f7ff fd34 	bl	8017018 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80175b0:	693b      	ldr	r3, [r7, #16]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d004      	beq.n	80175c0 <tcp_abandon+0x154>
 80175b6:	693b      	ldr	r3, [r7, #16]
 80175b8:	f06f 010c 	mvn.w	r1, #12
 80175bc:	68f8      	ldr	r0, [r7, #12]
 80175be:	4798      	blx	r3
  }
}
 80175c0:	3728      	adds	r7, #40	; 0x28
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}
 80175c6:	bf00      	nop
 80175c8:	0802151c 	.word	0x0802151c
 80175cc:	08021660 	.word	0x08021660
 80175d0:	08021560 	.word	0x08021560
 80175d4:	0802167c 	.word	0x0802167c
 80175d8:	20011090 	.word	0x20011090
 80175dc:	20011084 	.word	0x20011084
 80175e0:	2001108c 	.word	0x2001108c
 80175e4:	20011094 	.word	0x20011094

080175e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80175f0:	2101      	movs	r1, #1
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f7ff ff3a 	bl	801746c <tcp_abandon>
}
 80175f8:	bf00      	nop
 80175fa:	3708      	adds	r7, #8
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}

08017600 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b084      	sub	sp, #16
 8017604:	af00      	add	r7, sp, #0
 8017606:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d106      	bne.n	801761c <tcp_update_rcv_ann_wnd+0x1c>
 801760e:	4b25      	ldr	r3, [pc, #148]	; (80176a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8017610:	f240 32a6 	movw	r2, #934	; 0x3a6
 8017614:	4924      	ldr	r1, [pc, #144]	; (80176a8 <tcp_update_rcv_ann_wnd+0xa8>)
 8017616:	4825      	ldr	r0, [pc, #148]	; (80176ac <tcp_update_rcv_ann_wnd+0xac>)
 8017618:	f008 fb56 	bl	801fcc8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017620:	687a      	ldr	r2, [r7, #4]
 8017622:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8017624:	4413      	add	r3, r2
 8017626:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801762c:	687a      	ldr	r2, [r7, #4]
 801762e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8017630:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8017634:	bf28      	it	cs
 8017636:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801763a:	b292      	uxth	r2, r2
 801763c:	4413      	add	r3, r2
 801763e:	68fa      	ldr	r2, [r7, #12]
 8017640:	1ad3      	subs	r3, r2, r3
 8017642:	2b00      	cmp	r3, #0
 8017644:	db08      	blt.n	8017658 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017652:	68fa      	ldr	r2, [r7, #12]
 8017654:	1ad3      	subs	r3, r2, r3
 8017656:	e020      	b.n	801769a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017660:	1ad3      	subs	r3, r2, r3
 8017662:	2b00      	cmp	r3, #0
 8017664:	dd03      	ble.n	801766e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	2200      	movs	r2, #0
 801766a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801766c:	e014      	b.n	8017698 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017676:	1ad3      	subs	r3, r2, r3
 8017678:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017680:	d306      	bcc.n	8017690 <tcp_update_rcv_ann_wnd+0x90>
 8017682:	4b08      	ldr	r3, [pc, #32]	; (80176a4 <tcp_update_rcv_ann_wnd+0xa4>)
 8017684:	f240 32b6 	movw	r2, #950	; 0x3b6
 8017688:	4909      	ldr	r1, [pc, #36]	; (80176b0 <tcp_update_rcv_ann_wnd+0xb0>)
 801768a:	4808      	ldr	r0, [pc, #32]	; (80176ac <tcp_update_rcv_ann_wnd+0xac>)
 801768c:	f008 fb1c 	bl	801fcc8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8017690:	68bb      	ldr	r3, [r7, #8]
 8017692:	b29a      	uxth	r2, r3
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8017698:	2300      	movs	r3, #0
  }
}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	0802151c 	.word	0x0802151c
 80176a8:	08021778 	.word	0x08021778
 80176ac:	08021560 	.word	0x08021560
 80176b0:	0802179c 	.word	0x0802179c

080176b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b084      	sub	sp, #16
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	460b      	mov	r3, r1
 80176be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d107      	bne.n	80176d6 <tcp_recved+0x22>
 80176c6:	4b1f      	ldr	r3, [pc, #124]	; (8017744 <tcp_recved+0x90>)
 80176c8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80176cc:	491e      	ldr	r1, [pc, #120]	; (8017748 <tcp_recved+0x94>)
 80176ce:	481f      	ldr	r0, [pc, #124]	; (801774c <tcp_recved+0x98>)
 80176d0:	f008 fafa 	bl	801fcc8 <iprintf>
 80176d4:	e032      	b.n	801773c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	7d1b      	ldrb	r3, [r3, #20]
 80176da:	2b01      	cmp	r3, #1
 80176dc:	d106      	bne.n	80176ec <tcp_recved+0x38>
 80176de:	4b19      	ldr	r3, [pc, #100]	; (8017744 <tcp_recved+0x90>)
 80176e0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80176e4:	491a      	ldr	r1, [pc, #104]	; (8017750 <tcp_recved+0x9c>)
 80176e6:	4819      	ldr	r0, [pc, #100]	; (801774c <tcp_recved+0x98>)
 80176e8:	f008 faee 	bl	801fcc8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80176f0:	887b      	ldrh	r3, [r7, #2]
 80176f2:	4413      	add	r3, r2
 80176f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80176f6:	89fb      	ldrh	r3, [r7, #14]
 80176f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80176fc:	d804      	bhi.n	8017708 <tcp_recved+0x54>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017702:	89fa      	ldrh	r2, [r7, #14]
 8017704:	429a      	cmp	r2, r3
 8017706:	d204      	bcs.n	8017712 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801770e:	851a      	strh	r2, [r3, #40]	; 0x28
 8017710:	e002      	b.n	8017718 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	89fa      	ldrh	r2, [r7, #14]
 8017716:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017718:	6878      	ldr	r0, [r7, #4]
 801771a:	f7ff ff71 	bl	8017600 <tcp_update_rcv_ann_wnd>
 801771e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017726:	d309      	bcc.n	801773c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	8b5b      	ldrh	r3, [r3, #26]
 801772c:	f043 0302 	orr.w	r3, r3, #2
 8017730:	b29a      	uxth	r2, r3
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f003 fe42 	bl	801b3c0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801773c:	3710      	adds	r7, #16
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}
 8017742:	bf00      	nop
 8017744:	0802151c 	.word	0x0802151c
 8017748:	080217b8 	.word	0x080217b8
 801774c:	08021560 	.word	0x08021560
 8017750:	080217d0 	.word	0x080217d0

08017754 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017754:	b5b0      	push	{r4, r5, r7, lr}
 8017756:	b090      	sub	sp, #64	; 0x40
 8017758:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801775a:	2300      	movs	r3, #0
 801775c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8017760:	4b94      	ldr	r3, [pc, #592]	; (80179b4 <tcp_slowtmr+0x260>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	3301      	adds	r3, #1
 8017766:	4a93      	ldr	r2, [pc, #588]	; (80179b4 <tcp_slowtmr+0x260>)
 8017768:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801776a:	4b93      	ldr	r3, [pc, #588]	; (80179b8 <tcp_slowtmr+0x264>)
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	3301      	adds	r3, #1
 8017770:	b2da      	uxtb	r2, r3
 8017772:	4b91      	ldr	r3, [pc, #580]	; (80179b8 <tcp_slowtmr+0x264>)
 8017774:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8017776:	2300      	movs	r3, #0
 8017778:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801777a:	4b90      	ldr	r3, [pc, #576]	; (80179bc <tcp_slowtmr+0x268>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8017780:	e29d      	b.n	8017cbe <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8017782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017784:	7d1b      	ldrb	r3, [r3, #20]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d106      	bne.n	8017798 <tcp_slowtmr+0x44>
 801778a:	4b8d      	ldr	r3, [pc, #564]	; (80179c0 <tcp_slowtmr+0x26c>)
 801778c:	f240 42be 	movw	r2, #1214	; 0x4be
 8017790:	498c      	ldr	r1, [pc, #560]	; (80179c4 <tcp_slowtmr+0x270>)
 8017792:	488d      	ldr	r0, [pc, #564]	; (80179c8 <tcp_slowtmr+0x274>)
 8017794:	f008 fa98 	bl	801fcc8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801779a:	7d1b      	ldrb	r3, [r3, #20]
 801779c:	2b01      	cmp	r3, #1
 801779e:	d106      	bne.n	80177ae <tcp_slowtmr+0x5a>
 80177a0:	4b87      	ldr	r3, [pc, #540]	; (80179c0 <tcp_slowtmr+0x26c>)
 80177a2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80177a6:	4989      	ldr	r1, [pc, #548]	; (80179cc <tcp_slowtmr+0x278>)
 80177a8:	4887      	ldr	r0, [pc, #540]	; (80179c8 <tcp_slowtmr+0x274>)
 80177aa:	f008 fa8d 	bl	801fcc8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80177ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b0:	7d1b      	ldrb	r3, [r3, #20]
 80177b2:	2b0a      	cmp	r3, #10
 80177b4:	d106      	bne.n	80177c4 <tcp_slowtmr+0x70>
 80177b6:	4b82      	ldr	r3, [pc, #520]	; (80179c0 <tcp_slowtmr+0x26c>)
 80177b8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80177bc:	4984      	ldr	r1, [pc, #528]	; (80179d0 <tcp_slowtmr+0x27c>)
 80177be:	4882      	ldr	r0, [pc, #520]	; (80179c8 <tcp_slowtmr+0x274>)
 80177c0:	f008 fa82 	bl	801fcc8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80177c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c6:	7f9a      	ldrb	r2, [r3, #30]
 80177c8:	4b7b      	ldr	r3, [pc, #492]	; (80179b8 <tcp_slowtmr+0x264>)
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d105      	bne.n	80177dc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80177d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80177d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d6:	68db      	ldr	r3, [r3, #12]
 80177d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80177da:	e270      	b.n	8017cbe <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80177dc:	4b76      	ldr	r3, [pc, #472]	; (80179b8 <tcp_slowtmr+0x264>)
 80177de:	781a      	ldrb	r2, [r3, #0]
 80177e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80177e4:	2300      	movs	r3, #0
 80177e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80177ea:	2300      	movs	r3, #0
 80177ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80177f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177f2:	7d1b      	ldrb	r3, [r3, #20]
 80177f4:	2b02      	cmp	r3, #2
 80177f6:	d10a      	bne.n	801780e <tcp_slowtmr+0xba>
 80177f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80177fe:	2b05      	cmp	r3, #5
 8017800:	d905      	bls.n	801780e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8017802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017806:	3301      	adds	r3, #1
 8017808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801780c:	e11e      	b.n	8017a4c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017810:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017814:	2b0b      	cmp	r3, #11
 8017816:	d905      	bls.n	8017824 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8017818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801781c:	3301      	adds	r3, #1
 801781e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017822:	e113      	b.n	8017a4c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017826:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801782a:	2b00      	cmp	r3, #0
 801782c:	d075      	beq.n	801791a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801782e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017832:	2b00      	cmp	r3, #0
 8017834:	d006      	beq.n	8017844 <tcp_slowtmr+0xf0>
 8017836:	4b62      	ldr	r3, [pc, #392]	; (80179c0 <tcp_slowtmr+0x26c>)
 8017838:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801783c:	4965      	ldr	r1, [pc, #404]	; (80179d4 <tcp_slowtmr+0x280>)
 801783e:	4862      	ldr	r0, [pc, #392]	; (80179c8 <tcp_slowtmr+0x274>)
 8017840:	f008 fa42 	bl	801fcc8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017848:	2b00      	cmp	r3, #0
 801784a:	d106      	bne.n	801785a <tcp_slowtmr+0x106>
 801784c:	4b5c      	ldr	r3, [pc, #368]	; (80179c0 <tcp_slowtmr+0x26c>)
 801784e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8017852:	4961      	ldr	r1, [pc, #388]	; (80179d8 <tcp_slowtmr+0x284>)
 8017854:	485c      	ldr	r0, [pc, #368]	; (80179c8 <tcp_slowtmr+0x274>)
 8017856:	f008 fa37 	bl	801fcc8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801785c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017860:	2b0b      	cmp	r3, #11
 8017862:	d905      	bls.n	8017870 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017868:	3301      	adds	r3, #1
 801786a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801786e:	e0ed      	b.n	8017a4c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8017870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017872:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017876:	3b01      	subs	r3, #1
 8017878:	4a58      	ldr	r2, [pc, #352]	; (80179dc <tcp_slowtmr+0x288>)
 801787a:	5cd3      	ldrb	r3, [r2, r3]
 801787c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017880:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017884:	7c7a      	ldrb	r2, [r7, #17]
 8017886:	429a      	cmp	r2, r3
 8017888:	d907      	bls.n	801789a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801788c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017890:	3301      	adds	r3, #1
 8017892:	b2da      	uxtb	r2, r3
 8017894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017896:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801789a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801789c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80178a0:	7c7a      	ldrb	r2, [r7, #17]
 80178a2:	429a      	cmp	r2, r3
 80178a4:	f200 80d2 	bhi.w	8017a4c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80178a8:	2301      	movs	r3, #1
 80178aa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80178ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d108      	bne.n	80178c8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80178b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178b8:	f004 fc2a 	bl	801c110 <tcp_zero_window_probe>
 80178bc:	4603      	mov	r3, r0
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d014      	beq.n	80178ec <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80178c2:	2300      	movs	r3, #0
 80178c4:	623b      	str	r3, [r7, #32]
 80178c6:	e011      	b.n	80178ec <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80178c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80178ce:	4619      	mov	r1, r3
 80178d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178d2:	f003 faef 	bl	801aeb4 <tcp_split_unsent_seg>
 80178d6:	4603      	mov	r3, r0
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d107      	bne.n	80178ec <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80178dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178de:	f003 fd6f 	bl	801b3c0 <tcp_output>
 80178e2:	4603      	mov	r3, r0
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d101      	bne.n	80178ec <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80178e8:	2300      	movs	r3, #0
 80178ea:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80178ec:	6a3b      	ldr	r3, [r7, #32]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	f000 80ac 	beq.w	8017a4c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80178f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178f6:	2200      	movs	r2, #0
 80178f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80178fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017902:	2b06      	cmp	r3, #6
 8017904:	f200 80a2 	bhi.w	8017a4c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8017908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801790a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801790e:	3301      	adds	r3, #1
 8017910:	b2da      	uxtb	r2, r3
 8017912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017914:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8017918:	e098      	b.n	8017a4c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801791c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017920:	2b00      	cmp	r3, #0
 8017922:	db0f      	blt.n	8017944 <tcp_slowtmr+0x1f0>
 8017924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017926:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801792a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801792e:	4293      	cmp	r3, r2
 8017930:	d008      	beq.n	8017944 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8017932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017934:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017938:	b29b      	uxth	r3, r3
 801793a:	3301      	adds	r3, #1
 801793c:	b29b      	uxth	r3, r3
 801793e:	b21a      	sxth	r2, r3
 8017940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017942:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017946:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801794a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801794c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017950:	429a      	cmp	r2, r3
 8017952:	db7b      	blt.n	8017a4c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017956:	f004 f825 	bl	801b9a4 <tcp_rexmit_rto_prepare>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	d007      	beq.n	8017970 <tcp_slowtmr+0x21c>
 8017960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017964:	2b00      	cmp	r3, #0
 8017966:	d171      	bne.n	8017a4c <tcp_slowtmr+0x2f8>
 8017968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801796a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801796c:	2b00      	cmp	r3, #0
 801796e:	d06d      	beq.n	8017a4c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8017970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017972:	7d1b      	ldrb	r3, [r3, #20]
 8017974:	2b02      	cmp	r3, #2
 8017976:	d03a      	beq.n	80179ee <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801797a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801797e:	2b0c      	cmp	r3, #12
 8017980:	bf28      	it	cs
 8017982:	230c      	movcs	r3, #12
 8017984:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017988:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801798c:	10db      	asrs	r3, r3, #3
 801798e:	b21b      	sxth	r3, r3
 8017990:	461a      	mov	r2, r3
 8017992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017994:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017998:	4413      	add	r3, r2
 801799a:	7efa      	ldrb	r2, [r7, #27]
 801799c:	4910      	ldr	r1, [pc, #64]	; (80179e0 <tcp_slowtmr+0x28c>)
 801799e:	5c8a      	ldrb	r2, [r1, r2]
 80179a0:	4093      	lsls	r3, r2
 80179a2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80179aa:	4293      	cmp	r3, r2
 80179ac:	dc1a      	bgt.n	80179e4 <tcp_slowtmr+0x290>
 80179ae:	697b      	ldr	r3, [r7, #20]
 80179b0:	b21a      	sxth	r2, r3
 80179b2:	e019      	b.n	80179e8 <tcp_slowtmr+0x294>
 80179b4:	20011080 	.word	0x20011080
 80179b8:	20011096 	.word	0x20011096
 80179bc:	2001108c 	.word	0x2001108c
 80179c0:	0802151c 	.word	0x0802151c
 80179c4:	08021860 	.word	0x08021860
 80179c8:	08021560 	.word	0x08021560
 80179cc:	0802188c 	.word	0x0802188c
 80179d0:	080218b8 	.word	0x080218b8
 80179d4:	080218e8 	.word	0x080218e8
 80179d8:	0802191c 	.word	0x0802191c
 80179dc:	08023548 	.word	0x08023548
 80179e0:	08023538 	.word	0x08023538
 80179e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80179e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80179ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f0:	2200      	movs	r2, #0
 80179f2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80179f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80179fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017a00:	4293      	cmp	r3, r2
 8017a02:	bf28      	it	cs
 8017a04:	4613      	movcs	r3, r2
 8017a06:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8017a08:	8a7b      	ldrh	r3, [r7, #18]
 8017a0a:	085b      	lsrs	r3, r3, #1
 8017a0c:	b29a      	uxth	r2, r3
 8017a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a1e:	005b      	lsls	r3, r3, #1
 8017a20:	b29b      	uxth	r3, r3
 8017a22:	429a      	cmp	r2, r3
 8017a24:	d206      	bcs.n	8017a34 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a2a:	005b      	lsls	r3, r3, #1
 8017a2c:	b29a      	uxth	r2, r3
 8017a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a36:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8017a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a40:	2200      	movs	r2, #0
 8017a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8017a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017a48:	f004 f81c 	bl	801ba84 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a4e:	7d1b      	ldrb	r3, [r3, #20]
 8017a50:	2b06      	cmp	r3, #6
 8017a52:	d111      	bne.n	8017a78 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a56:	8b5b      	ldrh	r3, [r3, #26]
 8017a58:	f003 0310 	and.w	r3, r3, #16
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d00b      	beq.n	8017a78 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017a60:	4b9c      	ldr	r3, [pc, #624]	; (8017cd4 <tcp_slowtmr+0x580>)
 8017a62:	681a      	ldr	r2, [r3, #0]
 8017a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a66:	6a1b      	ldr	r3, [r3, #32]
 8017a68:	1ad3      	subs	r3, r2, r3
 8017a6a:	2b28      	cmp	r3, #40	; 0x28
 8017a6c:	d904      	bls.n	8017a78 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8017a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a72:	3301      	adds	r3, #1
 8017a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a7a:	7a5b      	ldrb	r3, [r3, #9]
 8017a7c:	f003 0308 	and.w	r3, r3, #8
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d04a      	beq.n	8017b1a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8017a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a86:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017a88:	2b04      	cmp	r3, #4
 8017a8a:	d003      	beq.n	8017a94 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a8e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8017a90:	2b07      	cmp	r3, #7
 8017a92:	d142      	bne.n	8017b1a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017a94:	4b8f      	ldr	r3, [pc, #572]	; (8017cd4 <tcp_slowtmr+0x580>)
 8017a96:	681a      	ldr	r2, [r3, #0]
 8017a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a9a:	6a1b      	ldr	r3, [r3, #32]
 8017a9c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8017a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aa0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017aa4:	4b8c      	ldr	r3, [pc, #560]	; (8017cd8 <tcp_slowtmr+0x584>)
 8017aa6:	440b      	add	r3, r1
 8017aa8:	498c      	ldr	r1, [pc, #560]	; (8017cdc <tcp_slowtmr+0x588>)
 8017aaa:	fba1 1303 	umull	r1, r3, r1, r3
 8017aae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017ab0:	429a      	cmp	r2, r3
 8017ab2:	d90a      	bls.n	8017aca <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8017ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ab8:	3301      	adds	r3, #1
 8017aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8017abe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ac2:	3301      	adds	r3, #1
 8017ac4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017ac8:	e027      	b.n	8017b1a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017aca:	4b82      	ldr	r3, [pc, #520]	; (8017cd4 <tcp_slowtmr+0x580>)
 8017acc:	681a      	ldr	r2, [r3, #0]
 8017ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ad0:	6a1b      	ldr	r3, [r3, #32]
 8017ad2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8017ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ad6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017adc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	4b7f      	ldr	r3, [pc, #508]	; (8017ce0 <tcp_slowtmr+0x58c>)
 8017ae4:	fb00 f303 	mul.w	r3, r0, r3
 8017ae8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8017aea:	497c      	ldr	r1, [pc, #496]	; (8017cdc <tcp_slowtmr+0x588>)
 8017aec:	fba1 1303 	umull	r1, r3, r1, r3
 8017af0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017af2:	429a      	cmp	r2, r3
 8017af4:	d911      	bls.n	8017b1a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8017af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017af8:	f004 faca 	bl	801c090 <tcp_keepalive>
 8017afc:	4603      	mov	r3, r0
 8017afe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8017b02:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d107      	bne.n	8017b1a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8017b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b0c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8017b10:	3301      	adds	r3, #1
 8017b12:	b2da      	uxtb	r2, r3
 8017b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b16:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8017b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d011      	beq.n	8017b46 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8017b22:	4b6c      	ldr	r3, [pc, #432]	; (8017cd4 <tcp_slowtmr+0x580>)
 8017b24:	681a      	ldr	r2, [r3, #0]
 8017b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b28:	6a1b      	ldr	r3, [r3, #32]
 8017b2a:	1ad2      	subs	r2, r2, r3
 8017b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8017b32:	4619      	mov	r1, r3
 8017b34:	460b      	mov	r3, r1
 8017b36:	005b      	lsls	r3, r3, #1
 8017b38:	440b      	add	r3, r1
 8017b3a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017b3c:	429a      	cmp	r2, r3
 8017b3e:	d302      	bcc.n	8017b46 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8017b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b42:	f000 fddd 	bl	8018700 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8017b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b48:	7d1b      	ldrb	r3, [r3, #20]
 8017b4a:	2b03      	cmp	r3, #3
 8017b4c:	d10b      	bne.n	8017b66 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017b4e:	4b61      	ldr	r3, [pc, #388]	; (8017cd4 <tcp_slowtmr+0x580>)
 8017b50:	681a      	ldr	r2, [r3, #0]
 8017b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b54:	6a1b      	ldr	r3, [r3, #32]
 8017b56:	1ad3      	subs	r3, r2, r3
 8017b58:	2b28      	cmp	r3, #40	; 0x28
 8017b5a:	d904      	bls.n	8017b66 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b60:	3301      	adds	r3, #1
 8017b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8017b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b68:	7d1b      	ldrb	r3, [r3, #20]
 8017b6a:	2b09      	cmp	r3, #9
 8017b6c:	d10b      	bne.n	8017b86 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017b6e:	4b59      	ldr	r3, [pc, #356]	; (8017cd4 <tcp_slowtmr+0x580>)
 8017b70:	681a      	ldr	r2, [r3, #0]
 8017b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b74:	6a1b      	ldr	r3, [r3, #32]
 8017b76:	1ad3      	subs	r3, r2, r3
 8017b78:	2bf0      	cmp	r3, #240	; 0xf0
 8017b7a:	d904      	bls.n	8017b86 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b80:	3301      	adds	r3, #1
 8017b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d060      	beq.n	8017c50 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8017b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b94:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017b96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017b98:	f000 fbfe 	bl	8018398 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d010      	beq.n	8017bc4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8017ba2:	4b50      	ldr	r3, [pc, #320]	; (8017ce4 <tcp_slowtmr+0x590>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ba8:	429a      	cmp	r2, r3
 8017baa:	d106      	bne.n	8017bba <tcp_slowtmr+0x466>
 8017bac:	4b4e      	ldr	r3, [pc, #312]	; (8017ce8 <tcp_slowtmr+0x594>)
 8017bae:	f240 526d 	movw	r2, #1389	; 0x56d
 8017bb2:	494e      	ldr	r1, [pc, #312]	; (8017cec <tcp_slowtmr+0x598>)
 8017bb4:	484e      	ldr	r0, [pc, #312]	; (8017cf0 <tcp_slowtmr+0x59c>)
 8017bb6:	f008 f887 	bl	801fcc8 <iprintf>
        prev->next = pcb->next;
 8017bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bbc:	68da      	ldr	r2, [r3, #12]
 8017bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc0:	60da      	str	r2, [r3, #12]
 8017bc2:	e00f      	b.n	8017be4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8017bc4:	4b47      	ldr	r3, [pc, #284]	; (8017ce4 <tcp_slowtmr+0x590>)
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d006      	beq.n	8017bdc <tcp_slowtmr+0x488>
 8017bce:	4b46      	ldr	r3, [pc, #280]	; (8017ce8 <tcp_slowtmr+0x594>)
 8017bd0:	f240 5271 	movw	r2, #1393	; 0x571
 8017bd4:	4947      	ldr	r1, [pc, #284]	; (8017cf4 <tcp_slowtmr+0x5a0>)
 8017bd6:	4846      	ldr	r0, [pc, #280]	; (8017cf0 <tcp_slowtmr+0x59c>)
 8017bd8:	f008 f876 	bl	801fcc8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8017bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bde:	68db      	ldr	r3, [r3, #12]
 8017be0:	4a40      	ldr	r2, [pc, #256]	; (8017ce4 <tcp_slowtmr+0x590>)
 8017be2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8017be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d013      	beq.n	8017c14 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017bf4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8017bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bf8:	3304      	adds	r3, #4
 8017bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bfc:	8ad2      	ldrh	r2, [r2, #22]
 8017bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017c00:	8b09      	ldrh	r1, [r1, #24]
 8017c02:	9102      	str	r1, [sp, #8]
 8017c04:	9201      	str	r2, [sp, #4]
 8017c06:	9300      	str	r3, [sp, #0]
 8017c08:	462b      	mov	r3, r5
 8017c0a:	4622      	mov	r2, r4
 8017c0c:	4601      	mov	r1, r0
 8017c0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017c10:	f004 f98a 	bl	801bf28 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c16:	691b      	ldr	r3, [r3, #16]
 8017c18:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8017c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1c:	7d1b      	ldrb	r3, [r3, #20]
 8017c1e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8017c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c22:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c26:	68db      	ldr	r3, [r3, #12]
 8017c28:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017c2a:	6838      	ldr	r0, [r7, #0]
 8017c2c:	f7ff f9f4 	bl	8017018 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8017c30:	4b31      	ldr	r3, [pc, #196]	; (8017cf8 <tcp_slowtmr+0x5a4>)
 8017c32:	2200      	movs	r2, #0
 8017c34:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d004      	beq.n	8017c46 <tcp_slowtmr+0x4f2>
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	f06f 010c 	mvn.w	r1, #12
 8017c42:	68b8      	ldr	r0, [r7, #8]
 8017c44:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017c46:	4b2c      	ldr	r3, [pc, #176]	; (8017cf8 <tcp_slowtmr+0x5a4>)
 8017c48:	781b      	ldrb	r3, [r3, #0]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d037      	beq.n	8017cbe <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8017c4e:	e592      	b.n	8017776 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8017c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c56:	68db      	ldr	r3, [r3, #12]
 8017c58:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8017c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c5c:	7f1b      	ldrb	r3, [r3, #28]
 8017c5e:	3301      	adds	r3, #1
 8017c60:	b2da      	uxtb	r2, r3
 8017c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c64:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c68:	7f1a      	ldrb	r2, [r3, #28]
 8017c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6c:	7f5b      	ldrb	r3, [r3, #29]
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d325      	bcc.n	8017cbe <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8017c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c74:	2200      	movs	r2, #0
 8017c76:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017c78:	4b1f      	ldr	r3, [pc, #124]	; (8017cf8 <tcp_slowtmr+0x5a4>)
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8017c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d00b      	beq.n	8017ca0 <tcp_slowtmr+0x54c>
 8017c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017c90:	6912      	ldr	r2, [r2, #16]
 8017c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017c94:	4610      	mov	r0, r2
 8017c96:	4798      	blx	r3
 8017c98:	4603      	mov	r3, r0
 8017c9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017c9e:	e002      	b.n	8017ca6 <tcp_slowtmr+0x552>
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017ca6:	4b14      	ldr	r3, [pc, #80]	; (8017cf8 <tcp_slowtmr+0x5a4>)
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d000      	beq.n	8017cb0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8017cae:	e562      	b.n	8017776 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8017cb0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d102      	bne.n	8017cbe <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8017cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cba:	f003 fb81 	bl	801b3c0 <tcp_output>
  while (pcb != NULL) {
 8017cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	f47f ad5e 	bne.w	8017782 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8017cca:	4b0c      	ldr	r3, [pc, #48]	; (8017cfc <tcp_slowtmr+0x5a8>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017cd0:	e069      	b.n	8017da6 <tcp_slowtmr+0x652>
 8017cd2:	bf00      	nop
 8017cd4:	20011080 	.word	0x20011080
 8017cd8:	000a4cb8 	.word	0x000a4cb8
 8017cdc:	10624dd3 	.word	0x10624dd3
 8017ce0:	000124f8 	.word	0x000124f8
 8017ce4:	2001108c 	.word	0x2001108c
 8017ce8:	0802151c 	.word	0x0802151c
 8017cec:	08021954 	.word	0x08021954
 8017cf0:	08021560 	.word	0x08021560
 8017cf4:	08021980 	.word	0x08021980
 8017cf8:	20011094 	.word	0x20011094
 8017cfc:	20011090 	.word	0x20011090
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d02:	7d1b      	ldrb	r3, [r3, #20]
 8017d04:	2b0a      	cmp	r3, #10
 8017d06:	d006      	beq.n	8017d16 <tcp_slowtmr+0x5c2>
 8017d08:	4b2b      	ldr	r3, [pc, #172]	; (8017db8 <tcp_slowtmr+0x664>)
 8017d0a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8017d0e:	492b      	ldr	r1, [pc, #172]	; (8017dbc <tcp_slowtmr+0x668>)
 8017d10:	482b      	ldr	r0, [pc, #172]	; (8017dc0 <tcp_slowtmr+0x66c>)
 8017d12:	f007 ffd9 	bl	801fcc8 <iprintf>
    pcb_remove = 0;
 8017d16:	2300      	movs	r3, #0
 8017d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017d1c:	4b29      	ldr	r3, [pc, #164]	; (8017dc4 <tcp_slowtmr+0x670>)
 8017d1e:	681a      	ldr	r2, [r3, #0]
 8017d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d22:	6a1b      	ldr	r3, [r3, #32]
 8017d24:	1ad3      	subs	r3, r2, r3
 8017d26:	2bf0      	cmp	r3, #240	; 0xf0
 8017d28:	d904      	bls.n	8017d34 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8017d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d2e:	3301      	adds	r3, #1
 8017d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d02f      	beq.n	8017d9c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d3e:	f000 fb2b 	bl	8018398 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8017d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d010      	beq.n	8017d6a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017d48:	4b1f      	ldr	r3, [pc, #124]	; (8017dc8 <tcp_slowtmr+0x674>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d4e:	429a      	cmp	r2, r3
 8017d50:	d106      	bne.n	8017d60 <tcp_slowtmr+0x60c>
 8017d52:	4b19      	ldr	r3, [pc, #100]	; (8017db8 <tcp_slowtmr+0x664>)
 8017d54:	f240 52af 	movw	r2, #1455	; 0x5af
 8017d58:	491c      	ldr	r1, [pc, #112]	; (8017dcc <tcp_slowtmr+0x678>)
 8017d5a:	4819      	ldr	r0, [pc, #100]	; (8017dc0 <tcp_slowtmr+0x66c>)
 8017d5c:	f007 ffb4 	bl	801fcc8 <iprintf>
        prev->next = pcb->next;
 8017d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d62:	68da      	ldr	r2, [r3, #12]
 8017d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d66:	60da      	str	r2, [r3, #12]
 8017d68:	e00f      	b.n	8017d8a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017d6a:	4b17      	ldr	r3, [pc, #92]	; (8017dc8 <tcp_slowtmr+0x674>)
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d70:	429a      	cmp	r2, r3
 8017d72:	d006      	beq.n	8017d82 <tcp_slowtmr+0x62e>
 8017d74:	4b10      	ldr	r3, [pc, #64]	; (8017db8 <tcp_slowtmr+0x664>)
 8017d76:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017d7a:	4915      	ldr	r1, [pc, #84]	; (8017dd0 <tcp_slowtmr+0x67c>)
 8017d7c:	4810      	ldr	r0, [pc, #64]	; (8017dc0 <tcp_slowtmr+0x66c>)
 8017d7e:	f007 ffa3 	bl	801fcc8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8017d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d84:	68db      	ldr	r3, [r3, #12]
 8017d86:	4a10      	ldr	r2, [pc, #64]	; (8017dc8 <tcp_slowtmr+0x674>)
 8017d88:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8017d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d90:	68db      	ldr	r3, [r3, #12]
 8017d92:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017d94:	69f8      	ldr	r0, [r7, #28]
 8017d96:	f7ff f93f 	bl	8017018 <tcp_free>
 8017d9a:	e004      	b.n	8017da6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da2:	68db      	ldr	r3, [r3, #12]
 8017da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d1a9      	bne.n	8017d00 <tcp_slowtmr+0x5ac>
    }
  }
}
 8017dac:	bf00      	nop
 8017dae:	bf00      	nop
 8017db0:	3730      	adds	r7, #48	; 0x30
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bdb0      	pop	{r4, r5, r7, pc}
 8017db6:	bf00      	nop
 8017db8:	0802151c 	.word	0x0802151c
 8017dbc:	080219ac 	.word	0x080219ac
 8017dc0:	08021560 	.word	0x08021560
 8017dc4:	20011080 	.word	0x20011080
 8017dc8:	20011090 	.word	0x20011090
 8017dcc:	080219dc 	.word	0x080219dc
 8017dd0:	08021a04 	.word	0x08021a04

08017dd4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b082      	sub	sp, #8
 8017dd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8017dda:	4b2d      	ldr	r3, [pc, #180]	; (8017e90 <tcp_fasttmr+0xbc>)
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	3301      	adds	r3, #1
 8017de0:	b2da      	uxtb	r2, r3
 8017de2:	4b2b      	ldr	r3, [pc, #172]	; (8017e90 <tcp_fasttmr+0xbc>)
 8017de4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8017de6:	4b2b      	ldr	r3, [pc, #172]	; (8017e94 <tcp_fasttmr+0xc0>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017dec:	e048      	b.n	8017e80 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	7f9a      	ldrb	r2, [r3, #30]
 8017df2:	4b27      	ldr	r3, [pc, #156]	; (8017e90 <tcp_fasttmr+0xbc>)
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	429a      	cmp	r2, r3
 8017df8:	d03f      	beq.n	8017e7a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8017dfa:	4b25      	ldr	r3, [pc, #148]	; (8017e90 <tcp_fasttmr+0xbc>)
 8017dfc:	781a      	ldrb	r2, [r3, #0]
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	8b5b      	ldrh	r3, [r3, #26]
 8017e06:	f003 0301 	and.w	r3, r3, #1
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d010      	beq.n	8017e30 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	8b5b      	ldrh	r3, [r3, #26]
 8017e12:	f043 0302 	orr.w	r3, r3, #2
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f003 facf 	bl	801b3c0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	8b5b      	ldrh	r3, [r3, #26]
 8017e26:	f023 0303 	bic.w	r3, r3, #3
 8017e2a:	b29a      	uxth	r2, r3
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	8b5b      	ldrh	r3, [r3, #26]
 8017e34:	f003 0308 	and.w	r3, r3, #8
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d009      	beq.n	8017e50 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	8b5b      	ldrh	r3, [r3, #26]
 8017e40:	f023 0308 	bic.w	r3, r3, #8
 8017e44:	b29a      	uxth	r2, r3
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8017e4a:	6878      	ldr	r0, [r7, #4]
 8017e4c:	f7ff fa78 	bl	8017340 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	68db      	ldr	r3, [r3, #12]
 8017e54:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d00a      	beq.n	8017e74 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017e5e:	4b0e      	ldr	r3, [pc, #56]	; (8017e98 <tcp_fasttmr+0xc4>)
 8017e60:	2200      	movs	r2, #0
 8017e62:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f000 f819 	bl	8017e9c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017e6a:	4b0b      	ldr	r3, [pc, #44]	; (8017e98 <tcp_fasttmr+0xc4>)
 8017e6c:	781b      	ldrb	r3, [r3, #0]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d000      	beq.n	8017e74 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8017e72:	e7b8      	b.n	8017de6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8017e74:	683b      	ldr	r3, [r7, #0]
 8017e76:	607b      	str	r3, [r7, #4]
 8017e78:	e002      	b.n	8017e80 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	68db      	ldr	r3, [r3, #12]
 8017e7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d1b3      	bne.n	8017dee <tcp_fasttmr+0x1a>
    }
  }
}
 8017e86:	bf00      	nop
 8017e88:	bf00      	nop
 8017e8a:	3708      	adds	r7, #8
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}
 8017e90:	20011096 	.word	0x20011096
 8017e94:	2001108c 	.word	0x2001108c
 8017e98:	20011094 	.word	0x20011094

08017e9c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017e9c:	b590      	push	{r4, r7, lr}
 8017e9e:	b085      	sub	sp, #20
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d109      	bne.n	8017ebe <tcp_process_refused_data+0x22>
 8017eaa:	4b37      	ldr	r3, [pc, #220]	; (8017f88 <tcp_process_refused_data+0xec>)
 8017eac:	f240 6209 	movw	r2, #1545	; 0x609
 8017eb0:	4936      	ldr	r1, [pc, #216]	; (8017f8c <tcp_process_refused_data+0xf0>)
 8017eb2:	4837      	ldr	r0, [pc, #220]	; (8017f90 <tcp_process_refused_data+0xf4>)
 8017eb4:	f007 ff08 	bl	801fcc8 <iprintf>
 8017eb8:	f06f 030f 	mvn.w	r3, #15
 8017ebc:	e060      	b.n	8017f80 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ec2:	7b5b      	ldrb	r3, [r3, #13]
 8017ec4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017eca:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	2200      	movs	r2, #0
 8017ed0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d00b      	beq.n	8017ef4 <tcp_process_refused_data+0x58>
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	6918      	ldr	r0, [r3, #16]
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	68ba      	ldr	r2, [r7, #8]
 8017eea:	6879      	ldr	r1, [r7, #4]
 8017eec:	47a0      	blx	r4
 8017eee:	4603      	mov	r3, r0
 8017ef0:	73fb      	strb	r3, [r7, #15]
 8017ef2:	e007      	b.n	8017f04 <tcp_process_refused_data+0x68>
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	68ba      	ldr	r2, [r7, #8]
 8017ef8:	6879      	ldr	r1, [r7, #4]
 8017efa:	2000      	movs	r0, #0
 8017efc:	f000 f8a4 	bl	8018048 <tcp_recv_null>
 8017f00:	4603      	mov	r3, r0
 8017f02:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8017f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d12a      	bne.n	8017f62 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8017f0c:	7bbb      	ldrb	r3, [r7, #14]
 8017f0e:	f003 0320 	and.w	r3, r3, #32
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d033      	beq.n	8017f7e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017f1e:	d005      	beq.n	8017f2c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f24:	3301      	adds	r3, #1
 8017f26:	b29a      	uxth	r2, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d00b      	beq.n	8017f4e <tcp_process_refused_data+0xb2>
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	6918      	ldr	r0, [r3, #16]
 8017f40:	2300      	movs	r3, #0
 8017f42:	2200      	movs	r2, #0
 8017f44:	6879      	ldr	r1, [r7, #4]
 8017f46:	47a0      	blx	r4
 8017f48:	4603      	mov	r3, r0
 8017f4a:	73fb      	strb	r3, [r7, #15]
 8017f4c:	e001      	b.n	8017f52 <tcp_process_refused_data+0xb6>
 8017f4e:	2300      	movs	r3, #0
 8017f50:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f56:	f113 0f0d 	cmn.w	r3, #13
 8017f5a:	d110      	bne.n	8017f7e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8017f5c:	f06f 030c 	mvn.w	r3, #12
 8017f60:	e00e      	b.n	8017f80 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8017f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f66:	f113 0f0d 	cmn.w	r3, #13
 8017f6a:	d102      	bne.n	8017f72 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017f6c:	f06f 030c 	mvn.w	r3, #12
 8017f70:	e006      	b.n	8017f80 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	68ba      	ldr	r2, [r7, #8]
 8017f76:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017f78:	f06f 0304 	mvn.w	r3, #4
 8017f7c:	e000      	b.n	8017f80 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017f7e:	2300      	movs	r3, #0
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	3714      	adds	r7, #20
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd90      	pop	{r4, r7, pc}
 8017f88:	0802151c 	.word	0x0802151c
 8017f8c:	08021a2c 	.word	0x08021a2c
 8017f90:	08021560 	.word	0x08021560

08017f94 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b084      	sub	sp, #16
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017f9c:	e007      	b.n	8017fae <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f000 f80a 	bl	8017fbe <tcp_seg_free>
    seg = next;
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d1f4      	bne.n	8017f9e <tcp_segs_free+0xa>
  }
}
 8017fb4:	bf00      	nop
 8017fb6:	bf00      	nop
 8017fb8:	3710      	adds	r7, #16
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bd80      	pop	{r7, pc}

08017fbe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017fbe:	b580      	push	{r7, lr}
 8017fc0:	b082      	sub	sp, #8
 8017fc2:	af00      	add	r7, sp, #0
 8017fc4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d00c      	beq.n	8017fe6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d004      	beq.n	8017fde <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	685b      	ldr	r3, [r3, #4]
 8017fd8:	4618      	mov	r0, r3
 8017fda:	f7fe fd71 	bl	8016ac0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017fde:	6879      	ldr	r1, [r7, #4]
 8017fe0:	2003      	movs	r0, #3
 8017fe2:	f7fd fec9 	bl	8015d78 <memp_free>
  }
}
 8017fe6:	bf00      	nop
 8017fe8:	3708      	adds	r7, #8
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
	...

08017ff0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b084      	sub	sp, #16
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d106      	bne.n	801800c <tcp_seg_copy+0x1c>
 8017ffe:	4b0f      	ldr	r3, [pc, #60]	; (801803c <tcp_seg_copy+0x4c>)
 8018000:	f240 6282 	movw	r2, #1666	; 0x682
 8018004:	490e      	ldr	r1, [pc, #56]	; (8018040 <tcp_seg_copy+0x50>)
 8018006:	480f      	ldr	r0, [pc, #60]	; (8018044 <tcp_seg_copy+0x54>)
 8018008:	f007 fe5e 	bl	801fcc8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801800c:	2003      	movs	r0, #3
 801800e:	f7fd fe3d 	bl	8015c8c <memp_malloc>
 8018012:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	2b00      	cmp	r3, #0
 8018018:	d101      	bne.n	801801e <tcp_seg_copy+0x2e>
    return NULL;
 801801a:	2300      	movs	r3, #0
 801801c:	e00a      	b.n	8018034 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801801e:	2210      	movs	r2, #16
 8018020:	6879      	ldr	r1, [r7, #4]
 8018022:	68f8      	ldr	r0, [r7, #12]
 8018024:	f007 fd5a 	bl	801fadc <memcpy>
  pbuf_ref(cseg->p);
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	685b      	ldr	r3, [r3, #4]
 801802c:	4618      	mov	r0, r3
 801802e:	f7fe fded 	bl	8016c0c <pbuf_ref>
  return cseg;
 8018032:	68fb      	ldr	r3, [r7, #12]
}
 8018034:	4618      	mov	r0, r3
 8018036:	3710      	adds	r7, #16
 8018038:	46bd      	mov	sp, r7
 801803a:	bd80      	pop	{r7, pc}
 801803c:	0802151c 	.word	0x0802151c
 8018040:	08021a70 	.word	0x08021a70
 8018044:	08021560 	.word	0x08021560

08018048 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b084      	sub	sp, #16
 801804c:	af00      	add	r7, sp, #0
 801804e:	60f8      	str	r0, [r7, #12]
 8018050:	60b9      	str	r1, [r7, #8]
 8018052:	607a      	str	r2, [r7, #4]
 8018054:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018056:	68bb      	ldr	r3, [r7, #8]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d109      	bne.n	8018070 <tcp_recv_null+0x28>
 801805c:	4b12      	ldr	r3, [pc, #72]	; (80180a8 <tcp_recv_null+0x60>)
 801805e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018062:	4912      	ldr	r1, [pc, #72]	; (80180ac <tcp_recv_null+0x64>)
 8018064:	4812      	ldr	r0, [pc, #72]	; (80180b0 <tcp_recv_null+0x68>)
 8018066:	f007 fe2f 	bl	801fcc8 <iprintf>
 801806a:	f06f 030f 	mvn.w	r3, #15
 801806e:	e016      	b.n	801809e <tcp_recv_null+0x56>

  if (p != NULL) {
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d009      	beq.n	801808a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	891b      	ldrh	r3, [r3, #8]
 801807a:	4619      	mov	r1, r3
 801807c:	68b8      	ldr	r0, [r7, #8]
 801807e:	f7ff fb19 	bl	80176b4 <tcp_recved>
    pbuf_free(p);
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f7fe fd1c 	bl	8016ac0 <pbuf_free>
 8018088:	e008      	b.n	801809c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801808a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d104      	bne.n	801809c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8018092:	68b8      	ldr	r0, [r7, #8]
 8018094:	f7ff f9be 	bl	8017414 <tcp_close>
 8018098:	4603      	mov	r3, r0
 801809a:	e000      	b.n	801809e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801809c:	2300      	movs	r3, #0
}
 801809e:	4618      	mov	r0, r3
 80180a0:	3710      	adds	r7, #16
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}
 80180a6:	bf00      	nop
 80180a8:	0802151c 	.word	0x0802151c
 80180ac:	08021a8c 	.word	0x08021a8c
 80180b0:	08021560 	.word	0x08021560

080180b4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b086      	sub	sp, #24
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	4603      	mov	r3, r0
 80180bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80180be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	db01      	blt.n	80180ca <tcp_kill_prio+0x16>
 80180c6:	79fb      	ldrb	r3, [r7, #7]
 80180c8:	e000      	b.n	80180cc <tcp_kill_prio+0x18>
 80180ca:	237f      	movs	r3, #127	; 0x7f
 80180cc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80180ce:	7afb      	ldrb	r3, [r7, #11]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d034      	beq.n	801813e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80180d4:	7afb      	ldrb	r3, [r7, #11]
 80180d6:	3b01      	subs	r3, #1
 80180d8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80180da:	2300      	movs	r3, #0
 80180dc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80180de:	2300      	movs	r3, #0
 80180e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80180e2:	4b19      	ldr	r3, [pc, #100]	; (8018148 <tcp_kill_prio+0x94>)
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	617b      	str	r3, [r7, #20]
 80180e8:	e01f      	b.n	801812a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80180ea:	697b      	ldr	r3, [r7, #20]
 80180ec:	7d5b      	ldrb	r3, [r3, #21]
 80180ee:	7afa      	ldrb	r2, [r7, #11]
 80180f0:	429a      	cmp	r2, r3
 80180f2:	d80c      	bhi.n	801810e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80180f4:	697b      	ldr	r3, [r7, #20]
 80180f6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80180f8:	7afa      	ldrb	r2, [r7, #11]
 80180fa:	429a      	cmp	r2, r3
 80180fc:	d112      	bne.n	8018124 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80180fe:	4b13      	ldr	r3, [pc, #76]	; (801814c <tcp_kill_prio+0x98>)
 8018100:	681a      	ldr	r2, [r3, #0]
 8018102:	697b      	ldr	r3, [r7, #20]
 8018104:	6a1b      	ldr	r3, [r3, #32]
 8018106:	1ad3      	subs	r3, r2, r3
 8018108:	68fa      	ldr	r2, [r7, #12]
 801810a:	429a      	cmp	r2, r3
 801810c:	d80a      	bhi.n	8018124 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801810e:	4b0f      	ldr	r3, [pc, #60]	; (801814c <tcp_kill_prio+0x98>)
 8018110:	681a      	ldr	r2, [r3, #0]
 8018112:	697b      	ldr	r3, [r7, #20]
 8018114:	6a1b      	ldr	r3, [r3, #32]
 8018116:	1ad3      	subs	r3, r2, r3
 8018118:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801811a:	697b      	ldr	r3, [r7, #20]
 801811c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801811e:	697b      	ldr	r3, [r7, #20]
 8018120:	7d5b      	ldrb	r3, [r3, #21]
 8018122:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018124:	697b      	ldr	r3, [r7, #20]
 8018126:	68db      	ldr	r3, [r3, #12]
 8018128:	617b      	str	r3, [r7, #20]
 801812a:	697b      	ldr	r3, [r7, #20]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d1dc      	bne.n	80180ea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d004      	beq.n	8018140 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8018136:	6938      	ldr	r0, [r7, #16]
 8018138:	f7ff fa56 	bl	80175e8 <tcp_abort>
 801813c:	e000      	b.n	8018140 <tcp_kill_prio+0x8c>
    return;
 801813e:	bf00      	nop
  }
}
 8018140:	3718      	adds	r7, #24
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	2001108c 	.word	0x2001108c
 801814c:	20011080 	.word	0x20011080

08018150 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b086      	sub	sp, #24
 8018154:	af00      	add	r7, sp, #0
 8018156:	4603      	mov	r3, r0
 8018158:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801815a:	79fb      	ldrb	r3, [r7, #7]
 801815c:	2b08      	cmp	r3, #8
 801815e:	d009      	beq.n	8018174 <tcp_kill_state+0x24>
 8018160:	79fb      	ldrb	r3, [r7, #7]
 8018162:	2b09      	cmp	r3, #9
 8018164:	d006      	beq.n	8018174 <tcp_kill_state+0x24>
 8018166:	4b1a      	ldr	r3, [pc, #104]	; (80181d0 <tcp_kill_state+0x80>)
 8018168:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801816c:	4919      	ldr	r1, [pc, #100]	; (80181d4 <tcp_kill_state+0x84>)
 801816e:	481a      	ldr	r0, [pc, #104]	; (80181d8 <tcp_kill_state+0x88>)
 8018170:	f007 fdaa 	bl	801fcc8 <iprintf>

  inactivity = 0;
 8018174:	2300      	movs	r3, #0
 8018176:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8018178:	2300      	movs	r3, #0
 801817a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801817c:	4b17      	ldr	r3, [pc, #92]	; (80181dc <tcp_kill_state+0x8c>)
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	617b      	str	r3, [r7, #20]
 8018182:	e017      	b.n	80181b4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8018184:	697b      	ldr	r3, [r7, #20]
 8018186:	7d1b      	ldrb	r3, [r3, #20]
 8018188:	79fa      	ldrb	r2, [r7, #7]
 801818a:	429a      	cmp	r2, r3
 801818c:	d10f      	bne.n	80181ae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801818e:	4b14      	ldr	r3, [pc, #80]	; (80181e0 <tcp_kill_state+0x90>)
 8018190:	681a      	ldr	r2, [r3, #0]
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	6a1b      	ldr	r3, [r3, #32]
 8018196:	1ad3      	subs	r3, r2, r3
 8018198:	68fa      	ldr	r2, [r7, #12]
 801819a:	429a      	cmp	r2, r3
 801819c:	d807      	bhi.n	80181ae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801819e:	4b10      	ldr	r3, [pc, #64]	; (80181e0 <tcp_kill_state+0x90>)
 80181a0:	681a      	ldr	r2, [r3, #0]
 80181a2:	697b      	ldr	r3, [r7, #20]
 80181a4:	6a1b      	ldr	r3, [r3, #32]
 80181a6:	1ad3      	subs	r3, r2, r3
 80181a8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80181aa:	697b      	ldr	r3, [r7, #20]
 80181ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80181ae:	697b      	ldr	r3, [r7, #20]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	617b      	str	r3, [r7, #20]
 80181b4:	697b      	ldr	r3, [r7, #20]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d1e4      	bne.n	8018184 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80181ba:	693b      	ldr	r3, [r7, #16]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d003      	beq.n	80181c8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80181c0:	2100      	movs	r1, #0
 80181c2:	6938      	ldr	r0, [r7, #16]
 80181c4:	f7ff f952 	bl	801746c <tcp_abandon>
  }
}
 80181c8:	bf00      	nop
 80181ca:	3718      	adds	r7, #24
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}
 80181d0:	0802151c 	.word	0x0802151c
 80181d4:	08021aa8 	.word	0x08021aa8
 80181d8:	08021560 	.word	0x08021560
 80181dc:	2001108c 	.word	0x2001108c
 80181e0:	20011080 	.word	0x20011080

080181e4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b084      	sub	sp, #16
 80181e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80181ea:	2300      	movs	r3, #0
 80181ec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80181ee:	2300      	movs	r3, #0
 80181f0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80181f2:	4b12      	ldr	r3, [pc, #72]	; (801823c <tcp_kill_timewait+0x58>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	60fb      	str	r3, [r7, #12]
 80181f8:	e012      	b.n	8018220 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80181fa:	4b11      	ldr	r3, [pc, #68]	; (8018240 <tcp_kill_timewait+0x5c>)
 80181fc:	681a      	ldr	r2, [r3, #0]
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	6a1b      	ldr	r3, [r3, #32]
 8018202:	1ad3      	subs	r3, r2, r3
 8018204:	687a      	ldr	r2, [r7, #4]
 8018206:	429a      	cmp	r2, r3
 8018208:	d807      	bhi.n	801821a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801820a:	4b0d      	ldr	r3, [pc, #52]	; (8018240 <tcp_kill_timewait+0x5c>)
 801820c:	681a      	ldr	r2, [r3, #0]
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	6a1b      	ldr	r3, [r3, #32]
 8018212:	1ad3      	subs	r3, r2, r3
 8018214:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	68db      	ldr	r3, [r3, #12]
 801821e:	60fb      	str	r3, [r7, #12]
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d1e9      	bne.n	80181fa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8018226:	68bb      	ldr	r3, [r7, #8]
 8018228:	2b00      	cmp	r3, #0
 801822a:	d002      	beq.n	8018232 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801822c:	68b8      	ldr	r0, [r7, #8]
 801822e:	f7ff f9db 	bl	80175e8 <tcp_abort>
  }
}
 8018232:	bf00      	nop
 8018234:	3710      	adds	r7, #16
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}
 801823a:	bf00      	nop
 801823c:	20011090 	.word	0x20011090
 8018240:	20011080 	.word	0x20011080

08018244 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b082      	sub	sp, #8
 8018248:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801824a:	4b10      	ldr	r3, [pc, #64]	; (801828c <tcp_handle_closepend+0x48>)
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018250:	e014      	b.n	801827c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	68db      	ldr	r3, [r3, #12]
 8018256:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	8b5b      	ldrh	r3, [r3, #26]
 801825c:	f003 0308 	and.w	r3, r3, #8
 8018260:	2b00      	cmp	r3, #0
 8018262:	d009      	beq.n	8018278 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	8b5b      	ldrh	r3, [r3, #26]
 8018268:	f023 0308 	bic.w	r3, r3, #8
 801826c:	b29a      	uxth	r2, r3
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	f7ff f864 	bl	8017340 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d1e7      	bne.n	8018252 <tcp_handle_closepend+0xe>
  }
}
 8018282:	bf00      	nop
 8018284:	bf00      	nop
 8018286:	3708      	adds	r7, #8
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}
 801828c:	2001108c 	.word	0x2001108c

08018290 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b084      	sub	sp, #16
 8018294:	af00      	add	r7, sp, #0
 8018296:	4603      	mov	r3, r0
 8018298:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801829a:	2001      	movs	r0, #1
 801829c:	f7fd fcf6 	bl	8015c8c <memp_malloc>
 80182a0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	d126      	bne.n	80182f6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80182a8:	f7ff ffcc 	bl	8018244 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80182ac:	f7ff ff9a 	bl	80181e4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80182b0:	2001      	movs	r0, #1
 80182b2:	f7fd fceb 	bl	8015c8c <memp_malloc>
 80182b6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d11b      	bne.n	80182f6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80182be:	2009      	movs	r0, #9
 80182c0:	f7ff ff46 	bl	8018150 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80182c4:	2001      	movs	r0, #1
 80182c6:	f7fd fce1 	bl	8015c8c <memp_malloc>
 80182ca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d111      	bne.n	80182f6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80182d2:	2008      	movs	r0, #8
 80182d4:	f7ff ff3c 	bl	8018150 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80182d8:	2001      	movs	r0, #1
 80182da:	f7fd fcd7 	bl	8015c8c <memp_malloc>
 80182de:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d107      	bne.n	80182f6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80182e6:	79fb      	ldrb	r3, [r7, #7]
 80182e8:	4618      	mov	r0, r3
 80182ea:	f7ff fee3 	bl	80180b4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80182ee:	2001      	movs	r0, #1
 80182f0:	f7fd fccc 	bl	8015c8c <memp_malloc>
 80182f4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d03f      	beq.n	801837c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80182fc:	229c      	movs	r2, #156	; 0x9c
 80182fe:	2100      	movs	r1, #0
 8018300:	68f8      	ldr	r0, [r7, #12]
 8018302:	f007 fbf9 	bl	801faf8 <memset>
    pcb->prio = prio;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	79fa      	ldrb	r2, [r7, #7]
 801830a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8018312:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801831c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	22ff      	movs	r2, #255	; 0xff
 801832a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018332:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	2206      	movs	r2, #6
 8018338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	2206      	movs	r2, #6
 8018340:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018348:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	2201      	movs	r2, #1
 801834e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8018352:	4b0d      	ldr	r3, [pc, #52]	; (8018388 <tcp_alloc+0xf8>)
 8018354:	681a      	ldr	r2, [r3, #0]
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801835a:	4b0c      	ldr	r3, [pc, #48]	; (801838c <tcp_alloc+0xfc>)
 801835c:	781a      	ldrb	r2, [r3, #0]
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8018368:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	4a08      	ldr	r2, [pc, #32]	; (8018390 <tcp_alloc+0x100>)
 8018370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	4a07      	ldr	r2, [pc, #28]	; (8018394 <tcp_alloc+0x104>)
 8018378:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801837c:	68fb      	ldr	r3, [r7, #12]
}
 801837e:	4618      	mov	r0, r3
 8018380:	3710      	adds	r7, #16
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
 8018386:	bf00      	nop
 8018388:	20011080 	.word	0x20011080
 801838c:	20011096 	.word	0x20011096
 8018390:	08018049 	.word	0x08018049
 8018394:	006ddd00 	.word	0x006ddd00

08018398 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b082      	sub	sp, #8
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d107      	bne.n	80183b6 <tcp_pcb_purge+0x1e>
 80183a6:	4b21      	ldr	r3, [pc, #132]	; (801842c <tcp_pcb_purge+0x94>)
 80183a8:	f640 0251 	movw	r2, #2129	; 0x851
 80183ac:	4920      	ldr	r1, [pc, #128]	; (8018430 <tcp_pcb_purge+0x98>)
 80183ae:	4821      	ldr	r0, [pc, #132]	; (8018434 <tcp_pcb_purge+0x9c>)
 80183b0:	f007 fc8a 	bl	801fcc8 <iprintf>
 80183b4:	e037      	b.n	8018426 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	7d1b      	ldrb	r3, [r3, #20]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d033      	beq.n	8018426 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80183c2:	2b0a      	cmp	r3, #10
 80183c4:	d02f      	beq.n	8018426 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80183ca:	2b01      	cmp	r3, #1
 80183cc:	d02b      	beq.n	8018426 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d007      	beq.n	80183e6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80183da:	4618      	mov	r0, r3
 80183dc:	f7fe fb70 	bl	8016ac0 <pbuf_free>
      pcb->refused_data = NULL;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	2200      	movs	r2, #0
 80183e4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d002      	beq.n	80183f4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80183ee:	6878      	ldr	r0, [r7, #4]
 80183f0:	f000 f986 	bl	8018700 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80183fa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018400:	4618      	mov	r0, r3
 8018402:	f7ff fdc7 	bl	8017f94 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8018406:	687b      	ldr	r3, [r7, #4]
 8018408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801840a:	4618      	mov	r0, r3
 801840c:	f7ff fdc2 	bl	8017f94 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2200      	movs	r2, #0
 8018414:	66da      	str	r2, [r3, #108]	; 0x6c
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	2200      	movs	r2, #0
 8018422:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8018426:	3708      	adds	r7, #8
 8018428:	46bd      	mov	sp, r7
 801842a:	bd80      	pop	{r7, pc}
 801842c:	0802151c 	.word	0x0802151c
 8018430:	08021b68 	.word	0x08021b68
 8018434:	08021560 	.word	0x08021560

08018438 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
 8018440:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d106      	bne.n	8018456 <tcp_pcb_remove+0x1e>
 8018448:	4b3e      	ldr	r3, [pc, #248]	; (8018544 <tcp_pcb_remove+0x10c>)
 801844a:	f640 0283 	movw	r2, #2179	; 0x883
 801844e:	493e      	ldr	r1, [pc, #248]	; (8018548 <tcp_pcb_remove+0x110>)
 8018450:	483e      	ldr	r0, [pc, #248]	; (801854c <tcp_pcb_remove+0x114>)
 8018452:	f007 fc39 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d106      	bne.n	801846a <tcp_pcb_remove+0x32>
 801845c:	4b39      	ldr	r3, [pc, #228]	; (8018544 <tcp_pcb_remove+0x10c>)
 801845e:	f640 0284 	movw	r2, #2180	; 0x884
 8018462:	493b      	ldr	r1, [pc, #236]	; (8018550 <tcp_pcb_remove+0x118>)
 8018464:	4839      	ldr	r0, [pc, #228]	; (801854c <tcp_pcb_remove+0x114>)
 8018466:	f007 fc2f 	bl	801fcc8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	683a      	ldr	r2, [r7, #0]
 8018470:	429a      	cmp	r2, r3
 8018472:	d105      	bne.n	8018480 <tcp_pcb_remove+0x48>
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	68da      	ldr	r2, [r3, #12]
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	601a      	str	r2, [r3, #0]
 801847e:	e013      	b.n	80184a8 <tcp_pcb_remove+0x70>
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	60fb      	str	r3, [r7, #12]
 8018486:	e00c      	b.n	80184a2 <tcp_pcb_remove+0x6a>
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	68db      	ldr	r3, [r3, #12]
 801848c:	683a      	ldr	r2, [r7, #0]
 801848e:	429a      	cmp	r2, r3
 8018490:	d104      	bne.n	801849c <tcp_pcb_remove+0x64>
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	68da      	ldr	r2, [r3, #12]
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	60da      	str	r2, [r3, #12]
 801849a:	e005      	b.n	80184a8 <tcp_pcb_remove+0x70>
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	68db      	ldr	r3, [r3, #12]
 80184a0:	60fb      	str	r3, [r7, #12]
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d1ef      	bne.n	8018488 <tcp_pcb_remove+0x50>
 80184a8:	683b      	ldr	r3, [r7, #0]
 80184aa:	2200      	movs	r2, #0
 80184ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80184ae:	6838      	ldr	r0, [r7, #0]
 80184b0:	f7ff ff72 	bl	8018398 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80184b4:	683b      	ldr	r3, [r7, #0]
 80184b6:	7d1b      	ldrb	r3, [r3, #20]
 80184b8:	2b0a      	cmp	r3, #10
 80184ba:	d013      	beq.n	80184e4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80184c0:	2b01      	cmp	r3, #1
 80184c2:	d00f      	beq.n	80184e4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	8b5b      	ldrh	r3, [r3, #26]
 80184c8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d009      	beq.n	80184e4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80184d0:	683b      	ldr	r3, [r7, #0]
 80184d2:	8b5b      	ldrh	r3, [r3, #26]
 80184d4:	f043 0302 	orr.w	r3, r3, #2
 80184d8:	b29a      	uxth	r2, r3
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80184de:	6838      	ldr	r0, [r7, #0]
 80184e0:	f002 ff6e 	bl	801b3c0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	7d1b      	ldrb	r3, [r3, #20]
 80184e8:	2b01      	cmp	r3, #1
 80184ea:	d020      	beq.n	801852e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d006      	beq.n	8018502 <tcp_pcb_remove+0xca>
 80184f4:	4b13      	ldr	r3, [pc, #76]	; (8018544 <tcp_pcb_remove+0x10c>)
 80184f6:	f640 0293 	movw	r2, #2195	; 0x893
 80184fa:	4916      	ldr	r1, [pc, #88]	; (8018554 <tcp_pcb_remove+0x11c>)
 80184fc:	4813      	ldr	r0, [pc, #76]	; (801854c <tcp_pcb_remove+0x114>)
 80184fe:	f007 fbe3 	bl	801fcc8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018506:	2b00      	cmp	r3, #0
 8018508:	d006      	beq.n	8018518 <tcp_pcb_remove+0xe0>
 801850a:	4b0e      	ldr	r3, [pc, #56]	; (8018544 <tcp_pcb_remove+0x10c>)
 801850c:	f640 0294 	movw	r2, #2196	; 0x894
 8018510:	4911      	ldr	r1, [pc, #68]	; (8018558 <tcp_pcb_remove+0x120>)
 8018512:	480e      	ldr	r0, [pc, #56]	; (801854c <tcp_pcb_remove+0x114>)
 8018514:	f007 fbd8 	bl	801fcc8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8018518:	683b      	ldr	r3, [r7, #0]
 801851a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801851c:	2b00      	cmp	r3, #0
 801851e:	d006      	beq.n	801852e <tcp_pcb_remove+0xf6>
 8018520:	4b08      	ldr	r3, [pc, #32]	; (8018544 <tcp_pcb_remove+0x10c>)
 8018522:	f640 0296 	movw	r2, #2198	; 0x896
 8018526:	490d      	ldr	r1, [pc, #52]	; (801855c <tcp_pcb_remove+0x124>)
 8018528:	4808      	ldr	r0, [pc, #32]	; (801854c <tcp_pcb_remove+0x114>)
 801852a:	f007 fbcd 	bl	801fcc8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	2200      	movs	r2, #0
 8018532:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	2200      	movs	r2, #0
 8018538:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801853a:	bf00      	nop
 801853c:	3710      	adds	r7, #16
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
 8018542:	bf00      	nop
 8018544:	0802151c 	.word	0x0802151c
 8018548:	08021b84 	.word	0x08021b84
 801854c:	08021560 	.word	0x08021560
 8018550:	08021ba0 	.word	0x08021ba0
 8018554:	08021bc0 	.word	0x08021bc0
 8018558:	08021bd8 	.word	0x08021bd8
 801855c:	08021bf4 	.word	0x08021bf4

08018560 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b082      	sub	sp, #8
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d106      	bne.n	801857c <tcp_next_iss+0x1c>
 801856e:	4b0a      	ldr	r3, [pc, #40]	; (8018598 <tcp_next_iss+0x38>)
 8018570:	f640 02af 	movw	r2, #2223	; 0x8af
 8018574:	4909      	ldr	r1, [pc, #36]	; (801859c <tcp_next_iss+0x3c>)
 8018576:	480a      	ldr	r0, [pc, #40]	; (80185a0 <tcp_next_iss+0x40>)
 8018578:	f007 fba6 	bl	801fcc8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801857c:	4b09      	ldr	r3, [pc, #36]	; (80185a4 <tcp_next_iss+0x44>)
 801857e:	681a      	ldr	r2, [r3, #0]
 8018580:	4b09      	ldr	r3, [pc, #36]	; (80185a8 <tcp_next_iss+0x48>)
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4413      	add	r3, r2
 8018586:	4a07      	ldr	r2, [pc, #28]	; (80185a4 <tcp_next_iss+0x44>)
 8018588:	6013      	str	r3, [r2, #0]
  return iss;
 801858a:	4b06      	ldr	r3, [pc, #24]	; (80185a4 <tcp_next_iss+0x44>)
 801858c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801858e:	4618      	mov	r0, r3
 8018590:	3708      	adds	r7, #8
 8018592:	46bd      	mov	sp, r7
 8018594:	bd80      	pop	{r7, pc}
 8018596:	bf00      	nop
 8018598:	0802151c 	.word	0x0802151c
 801859c:	08021c0c 	.word	0x08021c0c
 80185a0:	08021560 	.word	0x08021560
 80185a4:	20000048 	.word	0x20000048
 80185a8:	20011080 	.word	0x20011080

080185ac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b086      	sub	sp, #24
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	4603      	mov	r3, r0
 80185b4:	60b9      	str	r1, [r7, #8]
 80185b6:	607a      	str	r2, [r7, #4]
 80185b8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d106      	bne.n	80185ce <tcp_eff_send_mss_netif+0x22>
 80185c0:	4b14      	ldr	r3, [pc, #80]	; (8018614 <tcp_eff_send_mss_netif+0x68>)
 80185c2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80185c6:	4914      	ldr	r1, [pc, #80]	; (8018618 <tcp_eff_send_mss_netif+0x6c>)
 80185c8:	4814      	ldr	r0, [pc, #80]	; (801861c <tcp_eff_send_mss_netif+0x70>)
 80185ca:	f007 fb7d 	bl	801fcc8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80185ce:	68bb      	ldr	r3, [r7, #8]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d101      	bne.n	80185d8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80185d4:	89fb      	ldrh	r3, [r7, #14]
 80185d6:	e019      	b.n	801860c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80185d8:	68bb      	ldr	r3, [r7, #8]
 80185da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80185dc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80185de:	8afb      	ldrh	r3, [r7, #22]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d012      	beq.n	801860a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80185e4:	2328      	movs	r3, #40	; 0x28
 80185e6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80185e8:	8afa      	ldrh	r2, [r7, #22]
 80185ea:	8abb      	ldrh	r3, [r7, #20]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d904      	bls.n	80185fa <tcp_eff_send_mss_netif+0x4e>
 80185f0:	8afa      	ldrh	r2, [r7, #22]
 80185f2:	8abb      	ldrh	r3, [r7, #20]
 80185f4:	1ad3      	subs	r3, r2, r3
 80185f6:	b29b      	uxth	r3, r3
 80185f8:	e000      	b.n	80185fc <tcp_eff_send_mss_netif+0x50>
 80185fa:	2300      	movs	r3, #0
 80185fc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80185fe:	8a7a      	ldrh	r2, [r7, #18]
 8018600:	89fb      	ldrh	r3, [r7, #14]
 8018602:	4293      	cmp	r3, r2
 8018604:	bf28      	it	cs
 8018606:	4613      	movcs	r3, r2
 8018608:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801860a:	89fb      	ldrh	r3, [r7, #14]
}
 801860c:	4618      	mov	r0, r3
 801860e:	3718      	adds	r7, #24
 8018610:	46bd      	mov	sp, r7
 8018612:	bd80      	pop	{r7, pc}
 8018614:	0802151c 	.word	0x0802151c
 8018618:	08021c28 	.word	0x08021c28
 801861c:	08021560 	.word	0x08021560

08018620 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b084      	sub	sp, #16
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
 8018628:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801862a:	683b      	ldr	r3, [r7, #0]
 801862c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d119      	bne.n	8018668 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018634:	4b10      	ldr	r3, [pc, #64]	; (8018678 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8018636:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801863a:	4910      	ldr	r1, [pc, #64]	; (801867c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801863c:	4810      	ldr	r0, [pc, #64]	; (8018680 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801863e:	f007 fb43 	bl	801fcc8 <iprintf>

  while (pcb != NULL) {
 8018642:	e011      	b.n	8018668 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	681a      	ldr	r2, [r3, #0]
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	429a      	cmp	r2, r3
 801864e:	d108      	bne.n	8018662 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	68db      	ldr	r3, [r3, #12]
 8018654:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8018656:	68f8      	ldr	r0, [r7, #12]
 8018658:	f7fe ffc6 	bl	80175e8 <tcp_abort>
      pcb = next;
 801865c:	68bb      	ldr	r3, [r7, #8]
 801865e:	60fb      	str	r3, [r7, #12]
 8018660:	e002      	b.n	8018668 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	68db      	ldr	r3, [r3, #12]
 8018666:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d1ea      	bne.n	8018644 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801866e:	bf00      	nop
 8018670:	bf00      	nop
 8018672:	3710      	adds	r7, #16
 8018674:	46bd      	mov	sp, r7
 8018676:	bd80      	pop	{r7, pc}
 8018678:	0802151c 	.word	0x0802151c
 801867c:	08021c50 	.word	0x08021c50
 8018680:	08021560 	.word	0x08021560

08018684 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018684:	b580      	push	{r7, lr}
 8018686:	b084      	sub	sp, #16
 8018688:	af00      	add	r7, sp, #0
 801868a:	6078      	str	r0, [r7, #4]
 801868c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d02a      	beq.n	80186ea <tcp_netif_ip_addr_changed+0x66>
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d026      	beq.n	80186ea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801869c:	4b15      	ldr	r3, [pc, #84]	; (80186f4 <tcp_netif_ip_addr_changed+0x70>)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	4619      	mov	r1, r3
 80186a2:	6878      	ldr	r0, [r7, #4]
 80186a4:	f7ff ffbc 	bl	8018620 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80186a8:	4b13      	ldr	r3, [pc, #76]	; (80186f8 <tcp_netif_ip_addr_changed+0x74>)
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	4619      	mov	r1, r3
 80186ae:	6878      	ldr	r0, [r7, #4]
 80186b0:	f7ff ffb6 	bl	8018620 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80186b4:	683b      	ldr	r3, [r7, #0]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d017      	beq.n	80186ea <tcp_netif_ip_addr_changed+0x66>
 80186ba:	683b      	ldr	r3, [r7, #0]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d013      	beq.n	80186ea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80186c2:	4b0e      	ldr	r3, [pc, #56]	; (80186fc <tcp_netif_ip_addr_changed+0x78>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	60fb      	str	r3, [r7, #12]
 80186c8:	e00c      	b.n	80186e4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	681a      	ldr	r2, [r3, #0]
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	429a      	cmp	r2, r3
 80186d4:	d103      	bne.n	80186de <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	681a      	ldr	r2, [r3, #0]
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	68db      	ldr	r3, [r3, #12]
 80186e2:	60fb      	str	r3, [r7, #12]
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d1ef      	bne.n	80186ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80186ea:	bf00      	nop
 80186ec:	3710      	adds	r7, #16
 80186ee:	46bd      	mov	sp, r7
 80186f0:	bd80      	pop	{r7, pc}
 80186f2:	bf00      	nop
 80186f4:	2001108c 	.word	0x2001108c
 80186f8:	20011084 	.word	0x20011084
 80186fc:	20011088 	.word	0x20011088

08018700 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b082      	sub	sp, #8
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801870c:	2b00      	cmp	r3, #0
 801870e:	d007      	beq.n	8018720 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018714:	4618      	mov	r0, r3
 8018716:	f7ff fc3d 	bl	8017f94 <tcp_segs_free>
    pcb->ooseq = NULL;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	2200      	movs	r2, #0
 801871e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8018720:	bf00      	nop
 8018722:	3708      	adds	r7, #8
 8018724:	46bd      	mov	sp, r7
 8018726:	bd80      	pop	{r7, pc}

08018728 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8018728:	b590      	push	{r4, r7, lr}
 801872a:	b08d      	sub	sp, #52	; 0x34
 801872c:	af04      	add	r7, sp, #16
 801872e:	6078      	str	r0, [r7, #4]
 8018730:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d105      	bne.n	8018744 <tcp_input+0x1c>
 8018738:	4b9b      	ldr	r3, [pc, #620]	; (80189a8 <tcp_input+0x280>)
 801873a:	2283      	movs	r2, #131	; 0x83
 801873c:	499b      	ldr	r1, [pc, #620]	; (80189ac <tcp_input+0x284>)
 801873e:	489c      	ldr	r0, [pc, #624]	; (80189b0 <tcp_input+0x288>)
 8018740:	f007 fac2 	bl	801fcc8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	685b      	ldr	r3, [r3, #4]
 8018748:	4a9a      	ldr	r2, [pc, #616]	; (80189b4 <tcp_input+0x28c>)
 801874a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	895b      	ldrh	r3, [r3, #10]
 8018750:	2b13      	cmp	r3, #19
 8018752:	f240 83d1 	bls.w	8018ef8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018756:	4b98      	ldr	r3, [pc, #608]	; (80189b8 <tcp_input+0x290>)
 8018758:	695b      	ldr	r3, [r3, #20]
 801875a:	4a97      	ldr	r2, [pc, #604]	; (80189b8 <tcp_input+0x290>)
 801875c:	6812      	ldr	r2, [r2, #0]
 801875e:	4611      	mov	r1, r2
 8018760:	4618      	mov	r0, r3
 8018762:	f005 fc47 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 8018766:	4603      	mov	r3, r0
 8018768:	2b00      	cmp	r3, #0
 801876a:	f040 83c7 	bne.w	8018efc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801876e:	4b92      	ldr	r3, [pc, #584]	; (80189b8 <tcp_input+0x290>)
 8018770:	695b      	ldr	r3, [r3, #20]
 8018772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8018776:	2be0      	cmp	r3, #224	; 0xe0
 8018778:	f000 83c0 	beq.w	8018efc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801877c:	4b8d      	ldr	r3, [pc, #564]	; (80189b4 <tcp_input+0x28c>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	899b      	ldrh	r3, [r3, #12]
 8018782:	b29b      	uxth	r3, r3
 8018784:	4618      	mov	r0, r3
 8018786:	f7fc fda9 	bl	80152dc <lwip_htons>
 801878a:	4603      	mov	r3, r0
 801878c:	0b1b      	lsrs	r3, r3, #12
 801878e:	b29b      	uxth	r3, r3
 8018790:	b2db      	uxtb	r3, r3
 8018792:	009b      	lsls	r3, r3, #2
 8018794:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8018796:	7cbb      	ldrb	r3, [r7, #18]
 8018798:	2b13      	cmp	r3, #19
 801879a:	f240 83b1 	bls.w	8018f00 <tcp_input+0x7d8>
 801879e:	7cbb      	ldrb	r3, [r7, #18]
 80187a0:	b29a      	uxth	r2, r3
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	891b      	ldrh	r3, [r3, #8]
 80187a6:	429a      	cmp	r2, r3
 80187a8:	f200 83aa 	bhi.w	8018f00 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80187ac:	7cbb      	ldrb	r3, [r7, #18]
 80187ae:	b29b      	uxth	r3, r3
 80187b0:	3b14      	subs	r3, #20
 80187b2:	b29a      	uxth	r2, r3
 80187b4:	4b81      	ldr	r3, [pc, #516]	; (80189bc <tcp_input+0x294>)
 80187b6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80187b8:	4b81      	ldr	r3, [pc, #516]	; (80189c0 <tcp_input+0x298>)
 80187ba:	2200      	movs	r2, #0
 80187bc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	895a      	ldrh	r2, [r3, #10]
 80187c2:	7cbb      	ldrb	r3, [r7, #18]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d309      	bcc.n	80187de <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80187ca:	4b7c      	ldr	r3, [pc, #496]	; (80189bc <tcp_input+0x294>)
 80187cc:	881a      	ldrh	r2, [r3, #0]
 80187ce:	4b7d      	ldr	r3, [pc, #500]	; (80189c4 <tcp_input+0x29c>)
 80187d0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80187d2:	7cbb      	ldrb	r3, [r7, #18]
 80187d4:	4619      	mov	r1, r3
 80187d6:	6878      	ldr	r0, [r7, #4]
 80187d8:	f7fe f8ec 	bl	80169b4 <pbuf_remove_header>
 80187dc:	e04e      	b.n	801887c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d105      	bne.n	80187f2 <tcp_input+0xca>
 80187e6:	4b70      	ldr	r3, [pc, #448]	; (80189a8 <tcp_input+0x280>)
 80187e8:	22c2      	movs	r2, #194	; 0xc2
 80187ea:	4977      	ldr	r1, [pc, #476]	; (80189c8 <tcp_input+0x2a0>)
 80187ec:	4870      	ldr	r0, [pc, #448]	; (80189b0 <tcp_input+0x288>)
 80187ee:	f007 fa6b 	bl	801fcc8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80187f2:	2114      	movs	r1, #20
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f7fe f8dd 	bl	80169b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	895a      	ldrh	r2, [r3, #10]
 80187fe:	4b71      	ldr	r3, [pc, #452]	; (80189c4 <tcp_input+0x29c>)
 8018800:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8018802:	4b6e      	ldr	r3, [pc, #440]	; (80189bc <tcp_input+0x294>)
 8018804:	881a      	ldrh	r2, [r3, #0]
 8018806:	4b6f      	ldr	r3, [pc, #444]	; (80189c4 <tcp_input+0x29c>)
 8018808:	881b      	ldrh	r3, [r3, #0]
 801880a:	1ad3      	subs	r3, r2, r3
 801880c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801880e:	4b6d      	ldr	r3, [pc, #436]	; (80189c4 <tcp_input+0x29c>)
 8018810:	881b      	ldrh	r3, [r3, #0]
 8018812:	4619      	mov	r1, r3
 8018814:	6878      	ldr	r0, [r7, #4]
 8018816:	f7fe f8cd 	bl	80169b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	895b      	ldrh	r3, [r3, #10]
 8018820:	8a3a      	ldrh	r2, [r7, #16]
 8018822:	429a      	cmp	r2, r3
 8018824:	f200 836e 	bhi.w	8018f04 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	685b      	ldr	r3, [r3, #4]
 801882e:	4a64      	ldr	r2, [pc, #400]	; (80189c0 <tcp_input+0x298>)
 8018830:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	8a3a      	ldrh	r2, [r7, #16]
 8018838:	4611      	mov	r1, r2
 801883a:	4618      	mov	r0, r3
 801883c:	f7fe f8ba 	bl	80169b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	891a      	ldrh	r2, [r3, #8]
 8018844:	8a3b      	ldrh	r3, [r7, #16]
 8018846:	1ad3      	subs	r3, r2, r3
 8018848:	b29a      	uxth	r2, r3
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	895b      	ldrh	r3, [r3, #10]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d005      	beq.n	8018862 <tcp_input+0x13a>
 8018856:	4b54      	ldr	r3, [pc, #336]	; (80189a8 <tcp_input+0x280>)
 8018858:	22df      	movs	r2, #223	; 0xdf
 801885a:	495c      	ldr	r1, [pc, #368]	; (80189cc <tcp_input+0x2a4>)
 801885c:	4854      	ldr	r0, [pc, #336]	; (80189b0 <tcp_input+0x288>)
 801885e:	f007 fa33 	bl	801fcc8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	891a      	ldrh	r2, [r3, #8]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	891b      	ldrh	r3, [r3, #8]
 801886c:	429a      	cmp	r2, r3
 801886e:	d005      	beq.n	801887c <tcp_input+0x154>
 8018870:	4b4d      	ldr	r3, [pc, #308]	; (80189a8 <tcp_input+0x280>)
 8018872:	22e0      	movs	r2, #224	; 0xe0
 8018874:	4956      	ldr	r1, [pc, #344]	; (80189d0 <tcp_input+0x2a8>)
 8018876:	484e      	ldr	r0, [pc, #312]	; (80189b0 <tcp_input+0x288>)
 8018878:	f007 fa26 	bl	801fcc8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801887c:	4b4d      	ldr	r3, [pc, #308]	; (80189b4 <tcp_input+0x28c>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	881b      	ldrh	r3, [r3, #0]
 8018882:	b29b      	uxth	r3, r3
 8018884:	4a4b      	ldr	r2, [pc, #300]	; (80189b4 <tcp_input+0x28c>)
 8018886:	6814      	ldr	r4, [r2, #0]
 8018888:	4618      	mov	r0, r3
 801888a:	f7fc fd27 	bl	80152dc <lwip_htons>
 801888e:	4603      	mov	r3, r0
 8018890:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018892:	4b48      	ldr	r3, [pc, #288]	; (80189b4 <tcp_input+0x28c>)
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	885b      	ldrh	r3, [r3, #2]
 8018898:	b29b      	uxth	r3, r3
 801889a:	4a46      	ldr	r2, [pc, #280]	; (80189b4 <tcp_input+0x28c>)
 801889c:	6814      	ldr	r4, [r2, #0]
 801889e:	4618      	mov	r0, r3
 80188a0:	f7fc fd1c 	bl	80152dc <lwip_htons>
 80188a4:	4603      	mov	r3, r0
 80188a6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80188a8:	4b42      	ldr	r3, [pc, #264]	; (80189b4 <tcp_input+0x28c>)
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	685b      	ldr	r3, [r3, #4]
 80188ae:	4a41      	ldr	r2, [pc, #260]	; (80189b4 <tcp_input+0x28c>)
 80188b0:	6814      	ldr	r4, [r2, #0]
 80188b2:	4618      	mov	r0, r3
 80188b4:	f7fc fd27 	bl	8015306 <lwip_htonl>
 80188b8:	4603      	mov	r3, r0
 80188ba:	6063      	str	r3, [r4, #4]
 80188bc:	6863      	ldr	r3, [r4, #4]
 80188be:	4a45      	ldr	r2, [pc, #276]	; (80189d4 <tcp_input+0x2ac>)
 80188c0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80188c2:	4b3c      	ldr	r3, [pc, #240]	; (80189b4 <tcp_input+0x28c>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	689b      	ldr	r3, [r3, #8]
 80188c8:	4a3a      	ldr	r2, [pc, #232]	; (80189b4 <tcp_input+0x28c>)
 80188ca:	6814      	ldr	r4, [r2, #0]
 80188cc:	4618      	mov	r0, r3
 80188ce:	f7fc fd1a 	bl	8015306 <lwip_htonl>
 80188d2:	4603      	mov	r3, r0
 80188d4:	60a3      	str	r3, [r4, #8]
 80188d6:	68a3      	ldr	r3, [r4, #8]
 80188d8:	4a3f      	ldr	r2, [pc, #252]	; (80189d8 <tcp_input+0x2b0>)
 80188da:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80188dc:	4b35      	ldr	r3, [pc, #212]	; (80189b4 <tcp_input+0x28c>)
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	89db      	ldrh	r3, [r3, #14]
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	4a33      	ldr	r2, [pc, #204]	; (80189b4 <tcp_input+0x28c>)
 80188e6:	6814      	ldr	r4, [r2, #0]
 80188e8:	4618      	mov	r0, r3
 80188ea:	f7fc fcf7 	bl	80152dc <lwip_htons>
 80188ee:	4603      	mov	r3, r0
 80188f0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80188f2:	4b30      	ldr	r3, [pc, #192]	; (80189b4 <tcp_input+0x28c>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	899b      	ldrh	r3, [r3, #12]
 80188f8:	b29b      	uxth	r3, r3
 80188fa:	4618      	mov	r0, r3
 80188fc:	f7fc fcee 	bl	80152dc <lwip_htons>
 8018900:	4603      	mov	r3, r0
 8018902:	b2db      	uxtb	r3, r3
 8018904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018908:	b2da      	uxtb	r2, r3
 801890a:	4b34      	ldr	r3, [pc, #208]	; (80189dc <tcp_input+0x2b4>)
 801890c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	891a      	ldrh	r2, [r3, #8]
 8018912:	4b33      	ldr	r3, [pc, #204]	; (80189e0 <tcp_input+0x2b8>)
 8018914:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8018916:	4b31      	ldr	r3, [pc, #196]	; (80189dc <tcp_input+0x2b4>)
 8018918:	781b      	ldrb	r3, [r3, #0]
 801891a:	f003 0303 	and.w	r3, r3, #3
 801891e:	2b00      	cmp	r3, #0
 8018920:	d00c      	beq.n	801893c <tcp_input+0x214>
    tcplen++;
 8018922:	4b2f      	ldr	r3, [pc, #188]	; (80189e0 <tcp_input+0x2b8>)
 8018924:	881b      	ldrh	r3, [r3, #0]
 8018926:	3301      	adds	r3, #1
 8018928:	b29a      	uxth	r2, r3
 801892a:	4b2d      	ldr	r3, [pc, #180]	; (80189e0 <tcp_input+0x2b8>)
 801892c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	891a      	ldrh	r2, [r3, #8]
 8018932:	4b2b      	ldr	r3, [pc, #172]	; (80189e0 <tcp_input+0x2b8>)
 8018934:	881b      	ldrh	r3, [r3, #0]
 8018936:	429a      	cmp	r2, r3
 8018938:	f200 82e6 	bhi.w	8018f08 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801893c:	2300      	movs	r3, #0
 801893e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018940:	4b28      	ldr	r3, [pc, #160]	; (80189e4 <tcp_input+0x2bc>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	61fb      	str	r3, [r7, #28]
 8018946:	e09d      	b.n	8018a84 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8018948:	69fb      	ldr	r3, [r7, #28]
 801894a:	7d1b      	ldrb	r3, [r3, #20]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d105      	bne.n	801895c <tcp_input+0x234>
 8018950:	4b15      	ldr	r3, [pc, #84]	; (80189a8 <tcp_input+0x280>)
 8018952:	22fb      	movs	r2, #251	; 0xfb
 8018954:	4924      	ldr	r1, [pc, #144]	; (80189e8 <tcp_input+0x2c0>)
 8018956:	4816      	ldr	r0, [pc, #88]	; (80189b0 <tcp_input+0x288>)
 8018958:	f007 f9b6 	bl	801fcc8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801895c:	69fb      	ldr	r3, [r7, #28]
 801895e:	7d1b      	ldrb	r3, [r3, #20]
 8018960:	2b0a      	cmp	r3, #10
 8018962:	d105      	bne.n	8018970 <tcp_input+0x248>
 8018964:	4b10      	ldr	r3, [pc, #64]	; (80189a8 <tcp_input+0x280>)
 8018966:	22fc      	movs	r2, #252	; 0xfc
 8018968:	4920      	ldr	r1, [pc, #128]	; (80189ec <tcp_input+0x2c4>)
 801896a:	4811      	ldr	r0, [pc, #68]	; (80189b0 <tcp_input+0x288>)
 801896c:	f007 f9ac 	bl	801fcc8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018970:	69fb      	ldr	r3, [r7, #28]
 8018972:	7d1b      	ldrb	r3, [r3, #20]
 8018974:	2b01      	cmp	r3, #1
 8018976:	d105      	bne.n	8018984 <tcp_input+0x25c>
 8018978:	4b0b      	ldr	r3, [pc, #44]	; (80189a8 <tcp_input+0x280>)
 801897a:	22fd      	movs	r2, #253	; 0xfd
 801897c:	491c      	ldr	r1, [pc, #112]	; (80189f0 <tcp_input+0x2c8>)
 801897e:	480c      	ldr	r0, [pc, #48]	; (80189b0 <tcp_input+0x288>)
 8018980:	f007 f9a2 	bl	801fcc8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018984:	69fb      	ldr	r3, [r7, #28]
 8018986:	7a1b      	ldrb	r3, [r3, #8]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d033      	beq.n	80189f4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801898c:	69fb      	ldr	r3, [r7, #28]
 801898e:	7a1a      	ldrb	r2, [r3, #8]
 8018990:	4b09      	ldr	r3, [pc, #36]	; (80189b8 <tcp_input+0x290>)
 8018992:	685b      	ldr	r3, [r3, #4]
 8018994:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018998:	3301      	adds	r3, #1
 801899a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801899c:	429a      	cmp	r2, r3
 801899e:	d029      	beq.n	80189f4 <tcp_input+0x2cc>
      prev = pcb;
 80189a0:	69fb      	ldr	r3, [r7, #28]
 80189a2:	61bb      	str	r3, [r7, #24]
      continue;
 80189a4:	e06b      	b.n	8018a7e <tcp_input+0x356>
 80189a6:	bf00      	nop
 80189a8:	08021c84 	.word	0x08021c84
 80189ac:	08021cb8 	.word	0x08021cb8
 80189b0:	08021cd0 	.word	0x08021cd0
 80189b4:	200110a8 	.word	0x200110a8
 80189b8:	2000d92c 	.word	0x2000d92c
 80189bc:	200110ac 	.word	0x200110ac
 80189c0:	200110b0 	.word	0x200110b0
 80189c4:	200110ae 	.word	0x200110ae
 80189c8:	08021cf8 	.word	0x08021cf8
 80189cc:	08021d08 	.word	0x08021d08
 80189d0:	08021d14 	.word	0x08021d14
 80189d4:	200110b8 	.word	0x200110b8
 80189d8:	200110bc 	.word	0x200110bc
 80189dc:	200110c4 	.word	0x200110c4
 80189e0:	200110c2 	.word	0x200110c2
 80189e4:	2001108c 	.word	0x2001108c
 80189e8:	08021d34 	.word	0x08021d34
 80189ec:	08021d5c 	.word	0x08021d5c
 80189f0:	08021d88 	.word	0x08021d88
    }

    if (pcb->remote_port == tcphdr->src &&
 80189f4:	69fb      	ldr	r3, [r7, #28]
 80189f6:	8b1a      	ldrh	r2, [r3, #24]
 80189f8:	4b72      	ldr	r3, [pc, #456]	; (8018bc4 <tcp_input+0x49c>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	881b      	ldrh	r3, [r3, #0]
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	429a      	cmp	r2, r3
 8018a02:	d13a      	bne.n	8018a7a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8018a04:	69fb      	ldr	r3, [r7, #28]
 8018a06:	8ada      	ldrh	r2, [r3, #22]
 8018a08:	4b6e      	ldr	r3, [pc, #440]	; (8018bc4 <tcp_input+0x49c>)
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	885b      	ldrh	r3, [r3, #2]
 8018a0e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8018a10:	429a      	cmp	r2, r3
 8018a12:	d132      	bne.n	8018a7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018a14:	69fb      	ldr	r3, [r7, #28]
 8018a16:	685a      	ldr	r2, [r3, #4]
 8018a18:	4b6b      	ldr	r3, [pc, #428]	; (8018bc8 <tcp_input+0x4a0>)
 8018a1a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8018a1c:	429a      	cmp	r2, r3
 8018a1e:	d12c      	bne.n	8018a7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018a20:	69fb      	ldr	r3, [r7, #28]
 8018a22:	681a      	ldr	r2, [r3, #0]
 8018a24:	4b68      	ldr	r3, [pc, #416]	; (8018bc8 <tcp_input+0x4a0>)
 8018a26:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018a28:	429a      	cmp	r2, r3
 8018a2a:	d126      	bne.n	8018a7a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018a2c:	69fb      	ldr	r3, [r7, #28]
 8018a2e:	68db      	ldr	r3, [r3, #12]
 8018a30:	69fa      	ldr	r2, [r7, #28]
 8018a32:	429a      	cmp	r2, r3
 8018a34:	d106      	bne.n	8018a44 <tcp_input+0x31c>
 8018a36:	4b65      	ldr	r3, [pc, #404]	; (8018bcc <tcp_input+0x4a4>)
 8018a38:	f240 120d 	movw	r2, #269	; 0x10d
 8018a3c:	4964      	ldr	r1, [pc, #400]	; (8018bd0 <tcp_input+0x4a8>)
 8018a3e:	4865      	ldr	r0, [pc, #404]	; (8018bd4 <tcp_input+0x4ac>)
 8018a40:	f007 f942 	bl	801fcc8 <iprintf>
      if (prev != NULL) {
 8018a44:	69bb      	ldr	r3, [r7, #24]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d00a      	beq.n	8018a60 <tcp_input+0x338>
        prev->next = pcb->next;
 8018a4a:	69fb      	ldr	r3, [r7, #28]
 8018a4c:	68da      	ldr	r2, [r3, #12]
 8018a4e:	69bb      	ldr	r3, [r7, #24]
 8018a50:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018a52:	4b61      	ldr	r3, [pc, #388]	; (8018bd8 <tcp_input+0x4b0>)
 8018a54:	681a      	ldr	r2, [r3, #0]
 8018a56:	69fb      	ldr	r3, [r7, #28]
 8018a58:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8018a5a:	4a5f      	ldr	r2, [pc, #380]	; (8018bd8 <tcp_input+0x4b0>)
 8018a5c:	69fb      	ldr	r3, [r7, #28]
 8018a5e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018a60:	69fb      	ldr	r3, [r7, #28]
 8018a62:	68db      	ldr	r3, [r3, #12]
 8018a64:	69fa      	ldr	r2, [r7, #28]
 8018a66:	429a      	cmp	r2, r3
 8018a68:	d111      	bne.n	8018a8e <tcp_input+0x366>
 8018a6a:	4b58      	ldr	r3, [pc, #352]	; (8018bcc <tcp_input+0x4a4>)
 8018a6c:	f240 1215 	movw	r2, #277	; 0x115
 8018a70:	495a      	ldr	r1, [pc, #360]	; (8018bdc <tcp_input+0x4b4>)
 8018a72:	4858      	ldr	r0, [pc, #352]	; (8018bd4 <tcp_input+0x4ac>)
 8018a74:	f007 f928 	bl	801fcc8 <iprintf>
      break;
 8018a78:	e009      	b.n	8018a8e <tcp_input+0x366>
    }
    prev = pcb;
 8018a7a:	69fb      	ldr	r3, [r7, #28]
 8018a7c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a7e:	69fb      	ldr	r3, [r7, #28]
 8018a80:	68db      	ldr	r3, [r3, #12]
 8018a82:	61fb      	str	r3, [r7, #28]
 8018a84:	69fb      	ldr	r3, [r7, #28]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	f47f af5e 	bne.w	8018948 <tcp_input+0x220>
 8018a8c:	e000      	b.n	8018a90 <tcp_input+0x368>
      break;
 8018a8e:	bf00      	nop
  }

  if (pcb == NULL) {
 8018a90:	69fb      	ldr	r3, [r7, #28]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	f040 80aa 	bne.w	8018bec <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018a98:	4b51      	ldr	r3, [pc, #324]	; (8018be0 <tcp_input+0x4b8>)
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	61fb      	str	r3, [r7, #28]
 8018a9e:	e03f      	b.n	8018b20 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018aa0:	69fb      	ldr	r3, [r7, #28]
 8018aa2:	7d1b      	ldrb	r3, [r3, #20]
 8018aa4:	2b0a      	cmp	r3, #10
 8018aa6:	d006      	beq.n	8018ab6 <tcp_input+0x38e>
 8018aa8:	4b48      	ldr	r3, [pc, #288]	; (8018bcc <tcp_input+0x4a4>)
 8018aaa:	f240 121f 	movw	r2, #287	; 0x11f
 8018aae:	494d      	ldr	r1, [pc, #308]	; (8018be4 <tcp_input+0x4bc>)
 8018ab0:	4848      	ldr	r0, [pc, #288]	; (8018bd4 <tcp_input+0x4ac>)
 8018ab2:	f007 f909 	bl	801fcc8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ab6:	69fb      	ldr	r3, [r7, #28]
 8018ab8:	7a1b      	ldrb	r3, [r3, #8]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d009      	beq.n	8018ad2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018abe:	69fb      	ldr	r3, [r7, #28]
 8018ac0:	7a1a      	ldrb	r2, [r3, #8]
 8018ac2:	4b41      	ldr	r3, [pc, #260]	; (8018bc8 <tcp_input+0x4a0>)
 8018ac4:	685b      	ldr	r3, [r3, #4]
 8018ac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018aca:	3301      	adds	r3, #1
 8018acc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	d122      	bne.n	8018b18 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8018ad2:	69fb      	ldr	r3, [r7, #28]
 8018ad4:	8b1a      	ldrh	r2, [r3, #24]
 8018ad6:	4b3b      	ldr	r3, [pc, #236]	; (8018bc4 <tcp_input+0x49c>)
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	881b      	ldrh	r3, [r3, #0]
 8018adc:	b29b      	uxth	r3, r3
 8018ade:	429a      	cmp	r2, r3
 8018ae0:	d11b      	bne.n	8018b1a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8018ae2:	69fb      	ldr	r3, [r7, #28]
 8018ae4:	8ada      	ldrh	r2, [r3, #22]
 8018ae6:	4b37      	ldr	r3, [pc, #220]	; (8018bc4 <tcp_input+0x49c>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	885b      	ldrh	r3, [r3, #2]
 8018aec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8018aee:	429a      	cmp	r2, r3
 8018af0:	d113      	bne.n	8018b1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018af2:	69fb      	ldr	r3, [r7, #28]
 8018af4:	685a      	ldr	r2, [r3, #4]
 8018af6:	4b34      	ldr	r3, [pc, #208]	; (8018bc8 <tcp_input+0x4a0>)
 8018af8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8018afa:	429a      	cmp	r2, r3
 8018afc:	d10d      	bne.n	8018b1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018afe:	69fb      	ldr	r3, [r7, #28]
 8018b00:	681a      	ldr	r2, [r3, #0]
 8018b02:	4b31      	ldr	r3, [pc, #196]	; (8018bc8 <tcp_input+0x4a0>)
 8018b04:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8018b06:	429a      	cmp	r2, r3
 8018b08:	d107      	bne.n	8018b1a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8018b0a:	69f8      	ldr	r0, [r7, #28]
 8018b0c:	f000 fb56 	bl	80191bc <tcp_timewait_input>
        }
        pbuf_free(p);
 8018b10:	6878      	ldr	r0, [r7, #4]
 8018b12:	f7fd ffd5 	bl	8016ac0 <pbuf_free>
        return;
 8018b16:	e1fd      	b.n	8018f14 <tcp_input+0x7ec>
        continue;
 8018b18:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018b1a:	69fb      	ldr	r3, [r7, #28]
 8018b1c:	68db      	ldr	r3, [r3, #12]
 8018b1e:	61fb      	str	r3, [r7, #28]
 8018b20:	69fb      	ldr	r3, [r7, #28]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d1bc      	bne.n	8018aa0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8018b26:	2300      	movs	r3, #0
 8018b28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018b2a:	4b2f      	ldr	r3, [pc, #188]	; (8018be8 <tcp_input+0x4c0>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	617b      	str	r3, [r7, #20]
 8018b30:	e02a      	b.n	8018b88 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018b32:	697b      	ldr	r3, [r7, #20]
 8018b34:	7a1b      	ldrb	r3, [r3, #8]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d00c      	beq.n	8018b54 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018b3a:	697b      	ldr	r3, [r7, #20]
 8018b3c:	7a1a      	ldrb	r2, [r3, #8]
 8018b3e:	4b22      	ldr	r3, [pc, #136]	; (8018bc8 <tcp_input+0x4a0>)
 8018b40:	685b      	ldr	r3, [r3, #4]
 8018b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018b46:	3301      	adds	r3, #1
 8018b48:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	d002      	beq.n	8018b54 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8018b4e:	697b      	ldr	r3, [r7, #20]
 8018b50:	61bb      	str	r3, [r7, #24]
        continue;
 8018b52:	e016      	b.n	8018b82 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018b54:	697b      	ldr	r3, [r7, #20]
 8018b56:	8ada      	ldrh	r2, [r3, #22]
 8018b58:	4b1a      	ldr	r3, [pc, #104]	; (8018bc4 <tcp_input+0x49c>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	885b      	ldrh	r3, [r3, #2]
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	429a      	cmp	r2, r3
 8018b62:	d10c      	bne.n	8018b7e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018b64:	697b      	ldr	r3, [r7, #20]
 8018b66:	681a      	ldr	r2, [r3, #0]
 8018b68:	4b17      	ldr	r3, [pc, #92]	; (8018bc8 <tcp_input+0x4a0>)
 8018b6a:	695b      	ldr	r3, [r3, #20]
 8018b6c:	429a      	cmp	r2, r3
 8018b6e:	d00f      	beq.n	8018b90 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018b70:	697b      	ldr	r3, [r7, #20]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d00d      	beq.n	8018b92 <tcp_input+0x46a>
 8018b76:	697b      	ldr	r3, [r7, #20]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d009      	beq.n	8018b92 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018b7e:	697b      	ldr	r3, [r7, #20]
 8018b80:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	68db      	ldr	r3, [r3, #12]
 8018b86:	617b      	str	r3, [r7, #20]
 8018b88:	697b      	ldr	r3, [r7, #20]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d1d1      	bne.n	8018b32 <tcp_input+0x40a>
 8018b8e:	e000      	b.n	8018b92 <tcp_input+0x46a>
            break;
 8018b90:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018b92:	697b      	ldr	r3, [r7, #20]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d029      	beq.n	8018bec <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8018b98:	69bb      	ldr	r3, [r7, #24]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d00a      	beq.n	8018bb4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018b9e:	697b      	ldr	r3, [r7, #20]
 8018ba0:	68da      	ldr	r2, [r3, #12]
 8018ba2:	69bb      	ldr	r3, [r7, #24]
 8018ba4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8018ba6:	4b10      	ldr	r3, [pc, #64]	; (8018be8 <tcp_input+0x4c0>)
 8018ba8:	681a      	ldr	r2, [r3, #0]
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018bae:	4a0e      	ldr	r2, [pc, #56]	; (8018be8 <tcp_input+0x4c0>)
 8018bb0:	697b      	ldr	r3, [r7, #20]
 8018bb2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018bb4:	6978      	ldr	r0, [r7, #20]
 8018bb6:	f000 fa03 	bl	8018fc0 <tcp_listen_input>
      }
      pbuf_free(p);
 8018bba:	6878      	ldr	r0, [r7, #4]
 8018bbc:	f7fd ff80 	bl	8016ac0 <pbuf_free>
      return;
 8018bc0:	e1a8      	b.n	8018f14 <tcp_input+0x7ec>
 8018bc2:	bf00      	nop
 8018bc4:	200110a8 	.word	0x200110a8
 8018bc8:	2000d92c 	.word	0x2000d92c
 8018bcc:	08021c84 	.word	0x08021c84
 8018bd0:	08021db0 	.word	0x08021db0
 8018bd4:	08021cd0 	.word	0x08021cd0
 8018bd8:	2001108c 	.word	0x2001108c
 8018bdc:	08021ddc 	.word	0x08021ddc
 8018be0:	20011090 	.word	0x20011090
 8018be4:	08021e08 	.word	0x08021e08
 8018be8:	20011088 	.word	0x20011088
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8018bec:	69fb      	ldr	r3, [r7, #28]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	f000 8158 	beq.w	8018ea4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8018bf4:	4b95      	ldr	r3, [pc, #596]	; (8018e4c <tcp_input+0x724>)
 8018bf6:	2200      	movs	r2, #0
 8018bf8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	891a      	ldrh	r2, [r3, #8]
 8018bfe:	4b93      	ldr	r3, [pc, #588]	; (8018e4c <tcp_input+0x724>)
 8018c00:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8018c02:	4a92      	ldr	r2, [pc, #584]	; (8018e4c <tcp_input+0x724>)
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8018c08:	4b91      	ldr	r3, [pc, #580]	; (8018e50 <tcp_input+0x728>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	4a8f      	ldr	r2, [pc, #572]	; (8018e4c <tcp_input+0x724>)
 8018c0e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8018c10:	4b90      	ldr	r3, [pc, #576]	; (8018e54 <tcp_input+0x72c>)
 8018c12:	2200      	movs	r2, #0
 8018c14:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8018c16:	4b90      	ldr	r3, [pc, #576]	; (8018e58 <tcp_input+0x730>)
 8018c18:	2200      	movs	r2, #0
 8018c1a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8018c1c:	4b8f      	ldr	r3, [pc, #572]	; (8018e5c <tcp_input+0x734>)
 8018c1e:	2200      	movs	r2, #0
 8018c20:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8018c22:	4b8f      	ldr	r3, [pc, #572]	; (8018e60 <tcp_input+0x738>)
 8018c24:	781b      	ldrb	r3, [r3, #0]
 8018c26:	f003 0308 	and.w	r3, r3, #8
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d006      	beq.n	8018c3c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	7b5b      	ldrb	r3, [r3, #13]
 8018c32:	f043 0301 	orr.w	r3, r3, #1
 8018c36:	b2da      	uxtb	r2, r3
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8018c3c:	69fb      	ldr	r3, [r7, #28]
 8018c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d017      	beq.n	8018c74 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018c44:	69f8      	ldr	r0, [r7, #28]
 8018c46:	f7ff f929 	bl	8017e9c <tcp_process_refused_data>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	f113 0f0d 	cmn.w	r3, #13
 8018c50:	d007      	beq.n	8018c62 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018c52:	69fb      	ldr	r3, [r7, #28]
 8018c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d00c      	beq.n	8018c74 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018c5a:	4b82      	ldr	r3, [pc, #520]	; (8018e64 <tcp_input+0x73c>)
 8018c5c:	881b      	ldrh	r3, [r3, #0]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d008      	beq.n	8018c74 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8018c62:	69fb      	ldr	r3, [r7, #28]
 8018c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	f040 80e3 	bne.w	8018e32 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018c6c:	69f8      	ldr	r0, [r7, #28]
 8018c6e:	f003 f9ad 	bl	801bfcc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8018c72:	e0de      	b.n	8018e32 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8018c74:	4a7c      	ldr	r2, [pc, #496]	; (8018e68 <tcp_input+0x740>)
 8018c76:	69fb      	ldr	r3, [r7, #28]
 8018c78:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018c7a:	69f8      	ldr	r0, [r7, #28]
 8018c7c:	f000 fb18 	bl	80192b0 <tcp_process>
 8018c80:	4603      	mov	r3, r0
 8018c82:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018c84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018c88:	f113 0f0d 	cmn.w	r3, #13
 8018c8c:	f000 80d3 	beq.w	8018e36 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8018c90:	4b71      	ldr	r3, [pc, #452]	; (8018e58 <tcp_input+0x730>)
 8018c92:	781b      	ldrb	r3, [r3, #0]
 8018c94:	f003 0308 	and.w	r3, r3, #8
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d015      	beq.n	8018cc8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018c9c:	69fb      	ldr	r3, [r7, #28]
 8018c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d008      	beq.n	8018cb8 <tcp_input+0x590>
 8018ca6:	69fb      	ldr	r3, [r7, #28]
 8018ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018cac:	69fa      	ldr	r2, [r7, #28]
 8018cae:	6912      	ldr	r2, [r2, #16]
 8018cb0:	f06f 010d 	mvn.w	r1, #13
 8018cb4:	4610      	mov	r0, r2
 8018cb6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018cb8:	69f9      	ldr	r1, [r7, #28]
 8018cba:	486c      	ldr	r0, [pc, #432]	; (8018e6c <tcp_input+0x744>)
 8018cbc:	f7ff fbbc 	bl	8018438 <tcp_pcb_remove>
        tcp_free(pcb);
 8018cc0:	69f8      	ldr	r0, [r7, #28]
 8018cc2:	f7fe f9a9 	bl	8017018 <tcp_free>
 8018cc6:	e0da      	b.n	8018e7e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8018cc8:	2300      	movs	r3, #0
 8018cca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8018ccc:	4b63      	ldr	r3, [pc, #396]	; (8018e5c <tcp_input+0x734>)
 8018cce:	881b      	ldrh	r3, [r3, #0]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d01d      	beq.n	8018d10 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8018cd4:	4b61      	ldr	r3, [pc, #388]	; (8018e5c <tcp_input+0x734>)
 8018cd6:	881b      	ldrh	r3, [r3, #0]
 8018cd8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8018cda:	69fb      	ldr	r3, [r7, #28]
 8018cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d00a      	beq.n	8018cfa <tcp_input+0x5d2>
 8018ce4:	69fb      	ldr	r3, [r7, #28]
 8018ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018cea:	69fa      	ldr	r2, [r7, #28]
 8018cec:	6910      	ldr	r0, [r2, #16]
 8018cee:	89fa      	ldrh	r2, [r7, #14]
 8018cf0:	69f9      	ldr	r1, [r7, #28]
 8018cf2:	4798      	blx	r3
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	74fb      	strb	r3, [r7, #19]
 8018cf8:	e001      	b.n	8018cfe <tcp_input+0x5d6>
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018cfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018d02:	f113 0f0d 	cmn.w	r3, #13
 8018d06:	f000 8098 	beq.w	8018e3a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8018d0a:	4b54      	ldr	r3, [pc, #336]	; (8018e5c <tcp_input+0x734>)
 8018d0c:	2200      	movs	r2, #0
 8018d0e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8018d10:	69f8      	ldr	r0, [r7, #28]
 8018d12:	f000 f915 	bl	8018f40 <tcp_input_delayed_close>
 8018d16:	4603      	mov	r3, r0
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	f040 8090 	bne.w	8018e3e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8018d1e:	4b4d      	ldr	r3, [pc, #308]	; (8018e54 <tcp_input+0x72c>)
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d041      	beq.n	8018daa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018d26:	69fb      	ldr	r3, [r7, #28]
 8018d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d006      	beq.n	8018d3c <tcp_input+0x614>
 8018d2e:	4b50      	ldr	r3, [pc, #320]	; (8018e70 <tcp_input+0x748>)
 8018d30:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018d34:	494f      	ldr	r1, [pc, #316]	; (8018e74 <tcp_input+0x74c>)
 8018d36:	4850      	ldr	r0, [pc, #320]	; (8018e78 <tcp_input+0x750>)
 8018d38:	f006 ffc6 	bl	801fcc8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018d3c:	69fb      	ldr	r3, [r7, #28]
 8018d3e:	8b5b      	ldrh	r3, [r3, #26]
 8018d40:	f003 0310 	and.w	r3, r3, #16
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d008      	beq.n	8018d5a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018d48:	4b42      	ldr	r3, [pc, #264]	; (8018e54 <tcp_input+0x72c>)
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	f7fd feb7 	bl	8016ac0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8018d52:	69f8      	ldr	r0, [r7, #28]
 8018d54:	f7fe fc48 	bl	80175e8 <tcp_abort>
            goto aborted;
 8018d58:	e091      	b.n	8018e7e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018d5a:	69fb      	ldr	r3, [r7, #28]
 8018d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d00c      	beq.n	8018d7e <tcp_input+0x656>
 8018d64:	69fb      	ldr	r3, [r7, #28]
 8018d66:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018d6a:	69fb      	ldr	r3, [r7, #28]
 8018d6c:	6918      	ldr	r0, [r3, #16]
 8018d6e:	4b39      	ldr	r3, [pc, #228]	; (8018e54 <tcp_input+0x72c>)
 8018d70:	681a      	ldr	r2, [r3, #0]
 8018d72:	2300      	movs	r3, #0
 8018d74:	69f9      	ldr	r1, [r7, #28]
 8018d76:	47a0      	blx	r4
 8018d78:	4603      	mov	r3, r0
 8018d7a:	74fb      	strb	r3, [r7, #19]
 8018d7c:	e008      	b.n	8018d90 <tcp_input+0x668>
 8018d7e:	4b35      	ldr	r3, [pc, #212]	; (8018e54 <tcp_input+0x72c>)
 8018d80:	681a      	ldr	r2, [r3, #0]
 8018d82:	2300      	movs	r3, #0
 8018d84:	69f9      	ldr	r1, [r7, #28]
 8018d86:	2000      	movs	r0, #0
 8018d88:	f7ff f95e 	bl	8018048 <tcp_recv_null>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8018d90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018d94:	f113 0f0d 	cmn.w	r3, #13
 8018d98:	d053      	beq.n	8018e42 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018d9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d003      	beq.n	8018daa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8018da2:	4b2c      	ldr	r3, [pc, #176]	; (8018e54 <tcp_input+0x72c>)
 8018da4:	681a      	ldr	r2, [r3, #0]
 8018da6:	69fb      	ldr	r3, [r7, #28]
 8018da8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8018daa:	4b2b      	ldr	r3, [pc, #172]	; (8018e58 <tcp_input+0x730>)
 8018dac:	781b      	ldrb	r3, [r3, #0]
 8018dae:	f003 0320 	and.w	r3, r3, #32
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d030      	beq.n	8018e18 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8018db6:	69fb      	ldr	r3, [r7, #28]
 8018db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d009      	beq.n	8018dd2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8018dbe:	69fb      	ldr	r3, [r7, #28]
 8018dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018dc2:	7b5a      	ldrb	r2, [r3, #13]
 8018dc4:	69fb      	ldr	r3, [r7, #28]
 8018dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018dc8:	f042 0220 	orr.w	r2, r2, #32
 8018dcc:	b2d2      	uxtb	r2, r2
 8018dce:	735a      	strb	r2, [r3, #13]
 8018dd0:	e022      	b.n	8018e18 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018dd2:	69fb      	ldr	r3, [r7, #28]
 8018dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018dd6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018dda:	d005      	beq.n	8018de8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8018ddc:	69fb      	ldr	r3, [r7, #28]
 8018dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018de0:	3301      	adds	r3, #1
 8018de2:	b29a      	uxth	r2, r3
 8018de4:	69fb      	ldr	r3, [r7, #28]
 8018de6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8018de8:	69fb      	ldr	r3, [r7, #28]
 8018dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d00b      	beq.n	8018e0a <tcp_input+0x6e2>
 8018df2:	69fb      	ldr	r3, [r7, #28]
 8018df4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018df8:	69fb      	ldr	r3, [r7, #28]
 8018dfa:	6918      	ldr	r0, [r3, #16]
 8018dfc:	2300      	movs	r3, #0
 8018dfe:	2200      	movs	r2, #0
 8018e00:	69f9      	ldr	r1, [r7, #28]
 8018e02:	47a0      	blx	r4
 8018e04:	4603      	mov	r3, r0
 8018e06:	74fb      	strb	r3, [r7, #19]
 8018e08:	e001      	b.n	8018e0e <tcp_input+0x6e6>
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8018e0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018e12:	f113 0f0d 	cmn.w	r3, #13
 8018e16:	d016      	beq.n	8018e46 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018e18:	4b13      	ldr	r3, [pc, #76]	; (8018e68 <tcp_input+0x740>)
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8018e1e:	69f8      	ldr	r0, [r7, #28]
 8018e20:	f000 f88e 	bl	8018f40 <tcp_input_delayed_close>
 8018e24:	4603      	mov	r3, r0
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d128      	bne.n	8018e7c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018e2a:	69f8      	ldr	r0, [r7, #28]
 8018e2c:	f002 fac8 	bl	801b3c0 <tcp_output>
 8018e30:	e025      	b.n	8018e7e <tcp_input+0x756>
        goto aborted;
 8018e32:	bf00      	nop
 8018e34:	e023      	b.n	8018e7e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018e36:	bf00      	nop
 8018e38:	e021      	b.n	8018e7e <tcp_input+0x756>
              goto aborted;
 8018e3a:	bf00      	nop
 8018e3c:	e01f      	b.n	8018e7e <tcp_input+0x756>
          goto aborted;
 8018e3e:	bf00      	nop
 8018e40:	e01d      	b.n	8018e7e <tcp_input+0x756>
            goto aborted;
 8018e42:	bf00      	nop
 8018e44:	e01b      	b.n	8018e7e <tcp_input+0x756>
              goto aborted;
 8018e46:	bf00      	nop
 8018e48:	e019      	b.n	8018e7e <tcp_input+0x756>
 8018e4a:	bf00      	nop
 8018e4c:	20011098 	.word	0x20011098
 8018e50:	200110a8 	.word	0x200110a8
 8018e54:	200110c8 	.word	0x200110c8
 8018e58:	200110c5 	.word	0x200110c5
 8018e5c:	200110c0 	.word	0x200110c0
 8018e60:	200110c4 	.word	0x200110c4
 8018e64:	200110c2 	.word	0x200110c2
 8018e68:	200110cc 	.word	0x200110cc
 8018e6c:	2001108c 	.word	0x2001108c
 8018e70:	08021c84 	.word	0x08021c84
 8018e74:	08021e38 	.word	0x08021e38
 8018e78:	08021cd0 	.word	0x08021cd0
          goto aborted;
 8018e7c:	bf00      	nop
    tcp_input_pcb = NULL;
 8018e7e:	4b27      	ldr	r3, [pc, #156]	; (8018f1c <tcp_input+0x7f4>)
 8018e80:	2200      	movs	r2, #0
 8018e82:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8018e84:	4b26      	ldr	r3, [pc, #152]	; (8018f20 <tcp_input+0x7f8>)
 8018e86:	2200      	movs	r2, #0
 8018e88:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018e8a:	4b26      	ldr	r3, [pc, #152]	; (8018f24 <tcp_input+0x7fc>)
 8018e8c:	685b      	ldr	r3, [r3, #4]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d03f      	beq.n	8018f12 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8018e92:	4b24      	ldr	r3, [pc, #144]	; (8018f24 <tcp_input+0x7fc>)
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	4618      	mov	r0, r3
 8018e98:	f7fd fe12 	bl	8016ac0 <pbuf_free>
      inseg.p = NULL;
 8018e9c:	4b21      	ldr	r3, [pc, #132]	; (8018f24 <tcp_input+0x7fc>)
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8018ea2:	e036      	b.n	8018f12 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8018ea4:	4b20      	ldr	r3, [pc, #128]	; (8018f28 <tcp_input+0x800>)
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	899b      	ldrh	r3, [r3, #12]
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	4618      	mov	r0, r3
 8018eae:	f7fc fa15 	bl	80152dc <lwip_htons>
 8018eb2:	4603      	mov	r3, r0
 8018eb4:	b2db      	uxtb	r3, r3
 8018eb6:	f003 0304 	and.w	r3, r3, #4
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d118      	bne.n	8018ef0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ebe:	4b1b      	ldr	r3, [pc, #108]	; (8018f2c <tcp_input+0x804>)
 8018ec0:	6819      	ldr	r1, [r3, #0]
 8018ec2:	4b1b      	ldr	r3, [pc, #108]	; (8018f30 <tcp_input+0x808>)
 8018ec4:	881b      	ldrh	r3, [r3, #0]
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	4b1a      	ldr	r3, [pc, #104]	; (8018f34 <tcp_input+0x80c>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ece:	4b16      	ldr	r3, [pc, #88]	; (8018f28 <tcp_input+0x800>)
 8018ed0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ed2:	885b      	ldrh	r3, [r3, #2]
 8018ed4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ed6:	4a14      	ldr	r2, [pc, #80]	; (8018f28 <tcp_input+0x800>)
 8018ed8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018eda:	8812      	ldrh	r2, [r2, #0]
 8018edc:	b292      	uxth	r2, r2
 8018ede:	9202      	str	r2, [sp, #8]
 8018ee0:	9301      	str	r3, [sp, #4]
 8018ee2:	4b15      	ldr	r3, [pc, #84]	; (8018f38 <tcp_input+0x810>)
 8018ee4:	9300      	str	r3, [sp, #0]
 8018ee6:	4b15      	ldr	r3, [pc, #84]	; (8018f3c <tcp_input+0x814>)
 8018ee8:	4602      	mov	r2, r0
 8018eea:	2000      	movs	r0, #0
 8018eec:	f003 f81c 	bl	801bf28 <tcp_rst>
    pbuf_free(p);
 8018ef0:	6878      	ldr	r0, [r7, #4]
 8018ef2:	f7fd fde5 	bl	8016ac0 <pbuf_free>
  return;
 8018ef6:	e00c      	b.n	8018f12 <tcp_input+0x7ea>
    goto dropped;
 8018ef8:	bf00      	nop
 8018efa:	e006      	b.n	8018f0a <tcp_input+0x7e2>
    goto dropped;
 8018efc:	bf00      	nop
 8018efe:	e004      	b.n	8018f0a <tcp_input+0x7e2>
    goto dropped;
 8018f00:	bf00      	nop
 8018f02:	e002      	b.n	8018f0a <tcp_input+0x7e2>
      goto dropped;
 8018f04:	bf00      	nop
 8018f06:	e000      	b.n	8018f0a <tcp_input+0x7e2>
      goto dropped;
 8018f08:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8018f0a:	6878      	ldr	r0, [r7, #4]
 8018f0c:	f7fd fdd8 	bl	8016ac0 <pbuf_free>
 8018f10:	e000      	b.n	8018f14 <tcp_input+0x7ec>
  return;
 8018f12:	bf00      	nop
}
 8018f14:	3724      	adds	r7, #36	; 0x24
 8018f16:	46bd      	mov	sp, r7
 8018f18:	bd90      	pop	{r4, r7, pc}
 8018f1a:	bf00      	nop
 8018f1c:	200110cc 	.word	0x200110cc
 8018f20:	200110c8 	.word	0x200110c8
 8018f24:	20011098 	.word	0x20011098
 8018f28:	200110a8 	.word	0x200110a8
 8018f2c:	200110bc 	.word	0x200110bc
 8018f30:	200110c2 	.word	0x200110c2
 8018f34:	200110b8 	.word	0x200110b8
 8018f38:	2000d93c 	.word	0x2000d93c
 8018f3c:	2000d940 	.word	0x2000d940

08018f40 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b082      	sub	sp, #8
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d106      	bne.n	8018f5c <tcp_input_delayed_close+0x1c>
 8018f4e:	4b17      	ldr	r3, [pc, #92]	; (8018fac <tcp_input_delayed_close+0x6c>)
 8018f50:	f240 225a 	movw	r2, #602	; 0x25a
 8018f54:	4916      	ldr	r1, [pc, #88]	; (8018fb0 <tcp_input_delayed_close+0x70>)
 8018f56:	4817      	ldr	r0, [pc, #92]	; (8018fb4 <tcp_input_delayed_close+0x74>)
 8018f58:	f006 feb6 	bl	801fcc8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018f5c:	4b16      	ldr	r3, [pc, #88]	; (8018fb8 <tcp_input_delayed_close+0x78>)
 8018f5e:	781b      	ldrb	r3, [r3, #0]
 8018f60:	f003 0310 	and.w	r3, r3, #16
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d01c      	beq.n	8018fa2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	8b5b      	ldrh	r3, [r3, #26]
 8018f6c:	f003 0310 	and.w	r3, r3, #16
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d10d      	bne.n	8018f90 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d008      	beq.n	8018f90 <tcp_input_delayed_close+0x50>
 8018f7e:	687b      	ldr	r3, [r7, #4]
 8018f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018f84:	687a      	ldr	r2, [r7, #4]
 8018f86:	6912      	ldr	r2, [r2, #16]
 8018f88:	f06f 010e 	mvn.w	r1, #14
 8018f8c:	4610      	mov	r0, r2
 8018f8e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018f90:	6879      	ldr	r1, [r7, #4]
 8018f92:	480a      	ldr	r0, [pc, #40]	; (8018fbc <tcp_input_delayed_close+0x7c>)
 8018f94:	f7ff fa50 	bl	8018438 <tcp_pcb_remove>
    tcp_free(pcb);
 8018f98:	6878      	ldr	r0, [r7, #4]
 8018f9a:	f7fe f83d 	bl	8017018 <tcp_free>
    return 1;
 8018f9e:	2301      	movs	r3, #1
 8018fa0:	e000      	b.n	8018fa4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018fa2:	2300      	movs	r3, #0
}
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	3708      	adds	r7, #8
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd80      	pop	{r7, pc}
 8018fac:	08021c84 	.word	0x08021c84
 8018fb0:	08021e54 	.word	0x08021e54
 8018fb4:	08021cd0 	.word	0x08021cd0
 8018fb8:	200110c5 	.word	0x200110c5
 8018fbc:	2001108c 	.word	0x2001108c

08018fc0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018fc0:	b590      	push	{r4, r7, lr}
 8018fc2:	b08b      	sub	sp, #44	; 0x2c
 8018fc4:	af04      	add	r7, sp, #16
 8018fc6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018fc8:	4b6f      	ldr	r3, [pc, #444]	; (8019188 <tcp_listen_input+0x1c8>)
 8018fca:	781b      	ldrb	r3, [r3, #0]
 8018fcc:	f003 0304 	and.w	r3, r3, #4
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	f040 80d2 	bne.w	801917a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d106      	bne.n	8018fea <tcp_listen_input+0x2a>
 8018fdc:	4b6b      	ldr	r3, [pc, #428]	; (801918c <tcp_listen_input+0x1cc>)
 8018fde:	f240 2281 	movw	r2, #641	; 0x281
 8018fe2:	496b      	ldr	r1, [pc, #428]	; (8019190 <tcp_listen_input+0x1d0>)
 8018fe4:	486b      	ldr	r0, [pc, #428]	; (8019194 <tcp_listen_input+0x1d4>)
 8018fe6:	f006 fe6f 	bl	801fcc8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018fea:	4b67      	ldr	r3, [pc, #412]	; (8019188 <tcp_listen_input+0x1c8>)
 8018fec:	781b      	ldrb	r3, [r3, #0]
 8018fee:	f003 0310 	and.w	r3, r3, #16
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d019      	beq.n	801902a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ff6:	4b68      	ldr	r3, [pc, #416]	; (8019198 <tcp_listen_input+0x1d8>)
 8018ff8:	6819      	ldr	r1, [r3, #0]
 8018ffa:	4b68      	ldr	r3, [pc, #416]	; (801919c <tcp_listen_input+0x1dc>)
 8018ffc:	881b      	ldrh	r3, [r3, #0]
 8018ffe:	461a      	mov	r2, r3
 8019000:	4b67      	ldr	r3, [pc, #412]	; (80191a0 <tcp_listen_input+0x1e0>)
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019006:	4b67      	ldr	r3, [pc, #412]	; (80191a4 <tcp_listen_input+0x1e4>)
 8019008:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801900a:	885b      	ldrh	r3, [r3, #2]
 801900c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801900e:	4a65      	ldr	r2, [pc, #404]	; (80191a4 <tcp_listen_input+0x1e4>)
 8019010:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019012:	8812      	ldrh	r2, [r2, #0]
 8019014:	b292      	uxth	r2, r2
 8019016:	9202      	str	r2, [sp, #8]
 8019018:	9301      	str	r3, [sp, #4]
 801901a:	4b63      	ldr	r3, [pc, #396]	; (80191a8 <tcp_listen_input+0x1e8>)
 801901c:	9300      	str	r3, [sp, #0]
 801901e:	4b63      	ldr	r3, [pc, #396]	; (80191ac <tcp_listen_input+0x1ec>)
 8019020:	4602      	mov	r2, r0
 8019022:	6878      	ldr	r0, [r7, #4]
 8019024:	f002 ff80 	bl	801bf28 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8019028:	e0a9      	b.n	801917e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801902a:	4b57      	ldr	r3, [pc, #348]	; (8019188 <tcp_listen_input+0x1c8>)
 801902c:	781b      	ldrb	r3, [r3, #0]
 801902e:	f003 0302 	and.w	r3, r3, #2
 8019032:	2b00      	cmp	r3, #0
 8019034:	f000 80a3 	beq.w	801917e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	7d5b      	ldrb	r3, [r3, #21]
 801903c:	4618      	mov	r0, r3
 801903e:	f7ff f927 	bl	8018290 <tcp_alloc>
 8019042:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8019044:	697b      	ldr	r3, [r7, #20]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d111      	bne.n	801906e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	699b      	ldr	r3, [r3, #24]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d00a      	beq.n	8019068 <tcp_listen_input+0xa8>
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	699b      	ldr	r3, [r3, #24]
 8019056:	687a      	ldr	r2, [r7, #4]
 8019058:	6910      	ldr	r0, [r2, #16]
 801905a:	f04f 32ff 	mov.w	r2, #4294967295
 801905e:	2100      	movs	r1, #0
 8019060:	4798      	blx	r3
 8019062:	4603      	mov	r3, r0
 8019064:	73bb      	strb	r3, [r7, #14]
      return;
 8019066:	e08b      	b.n	8019180 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8019068:	23f0      	movs	r3, #240	; 0xf0
 801906a:	73bb      	strb	r3, [r7, #14]
      return;
 801906c:	e088      	b.n	8019180 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801906e:	4b50      	ldr	r3, [pc, #320]	; (80191b0 <tcp_listen_input+0x1f0>)
 8019070:	695a      	ldr	r2, [r3, #20]
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8019076:	4b4e      	ldr	r3, [pc, #312]	; (80191b0 <tcp_listen_input+0x1f0>)
 8019078:	691a      	ldr	r2, [r3, #16]
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	8ada      	ldrh	r2, [r3, #22]
 8019082:	697b      	ldr	r3, [r7, #20]
 8019084:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8019086:	4b47      	ldr	r3, [pc, #284]	; (80191a4 <tcp_listen_input+0x1e4>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	881b      	ldrh	r3, [r3, #0]
 801908c:	b29a      	uxth	r2, r3
 801908e:	697b      	ldr	r3, [r7, #20]
 8019090:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8019092:	697b      	ldr	r3, [r7, #20]
 8019094:	2203      	movs	r2, #3
 8019096:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8019098:	4b41      	ldr	r3, [pc, #260]	; (80191a0 <tcp_listen_input+0x1e0>)
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	1c5a      	adds	r2, r3, #1
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80190a2:	697b      	ldr	r3, [r7, #20]
 80190a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80190a6:	697b      	ldr	r3, [r7, #20]
 80190a8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80190aa:	6978      	ldr	r0, [r7, #20]
 80190ac:	f7ff fa58 	bl	8018560 <tcp_next_iss>
 80190b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80190b2:	697b      	ldr	r3, [r7, #20]
 80190b4:	693a      	ldr	r2, [r7, #16]
 80190b6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80190b8:	697b      	ldr	r3, [r7, #20]
 80190ba:	693a      	ldr	r2, [r7, #16]
 80190bc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80190be:	697b      	ldr	r3, [r7, #20]
 80190c0:	693a      	ldr	r2, [r7, #16]
 80190c2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80190c4:	697b      	ldr	r3, [r7, #20]
 80190c6:	693a      	ldr	r2, [r7, #16]
 80190c8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80190ca:	4b35      	ldr	r3, [pc, #212]	; (80191a0 <tcp_listen_input+0x1e0>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	1e5a      	subs	r2, r3, #1
 80190d0:	697b      	ldr	r3, [r7, #20]
 80190d2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	691a      	ldr	r2, [r3, #16]
 80190d8:	697b      	ldr	r3, [r7, #20]
 80190da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	687a      	ldr	r2, [r7, #4]
 80190e0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	7a5b      	ldrb	r3, [r3, #9]
 80190e6:	f003 030c 	and.w	r3, r3, #12
 80190ea:	b2da      	uxtb	r2, r3
 80190ec:	697b      	ldr	r3, [r7, #20]
 80190ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	7a1a      	ldrb	r2, [r3, #8]
 80190f4:	697b      	ldr	r3, [r7, #20]
 80190f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80190f8:	4b2e      	ldr	r3, [pc, #184]	; (80191b4 <tcp_listen_input+0x1f4>)
 80190fa:	681a      	ldr	r2, [r3, #0]
 80190fc:	697b      	ldr	r3, [r7, #20]
 80190fe:	60da      	str	r2, [r3, #12]
 8019100:	4a2c      	ldr	r2, [pc, #176]	; (80191b4 <tcp_listen_input+0x1f4>)
 8019102:	697b      	ldr	r3, [r7, #20]
 8019104:	6013      	str	r3, [r2, #0]
 8019106:	f003 f8d1 	bl	801c2ac <tcp_timer_needed>
 801910a:	4b2b      	ldr	r3, [pc, #172]	; (80191b8 <tcp_listen_input+0x1f8>)
 801910c:	2201      	movs	r2, #1
 801910e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8019110:	6978      	ldr	r0, [r7, #20]
 8019112:	f001 fd8f 	bl	801ac34 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8019116:	4b23      	ldr	r3, [pc, #140]	; (80191a4 <tcp_listen_input+0x1e4>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	89db      	ldrh	r3, [r3, #14]
 801911c:	b29a      	uxth	r2, r3
 801911e:	697b      	ldr	r3, [r7, #20]
 8019120:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8019124:	697b      	ldr	r3, [r7, #20]
 8019126:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801912a:	697b      	ldr	r3, [r7, #20]
 801912c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8019130:	697b      	ldr	r3, [r7, #20]
 8019132:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8019134:	697b      	ldr	r3, [r7, #20]
 8019136:	3304      	adds	r3, #4
 8019138:	4618      	mov	r0, r3
 801913a:	f004 fcc5 	bl	801dac8 <ip4_route>
 801913e:	4601      	mov	r1, r0
 8019140:	697b      	ldr	r3, [r7, #20]
 8019142:	3304      	adds	r3, #4
 8019144:	461a      	mov	r2, r3
 8019146:	4620      	mov	r0, r4
 8019148:	f7ff fa30 	bl	80185ac <tcp_eff_send_mss_netif>
 801914c:	4603      	mov	r3, r0
 801914e:	461a      	mov	r2, r3
 8019150:	697b      	ldr	r3, [r7, #20]
 8019152:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8019154:	2112      	movs	r1, #18
 8019156:	6978      	ldr	r0, [r7, #20]
 8019158:	f002 f844 	bl	801b1e4 <tcp_enqueue_flags>
 801915c:	4603      	mov	r3, r0
 801915e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8019160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d004      	beq.n	8019172 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8019168:	2100      	movs	r1, #0
 801916a:	6978      	ldr	r0, [r7, #20]
 801916c:	f7fe f97e 	bl	801746c <tcp_abandon>
      return;
 8019170:	e006      	b.n	8019180 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8019172:	6978      	ldr	r0, [r7, #20]
 8019174:	f002 f924 	bl	801b3c0 <tcp_output>
  return;
 8019178:	e001      	b.n	801917e <tcp_listen_input+0x1be>
    return;
 801917a:	bf00      	nop
 801917c:	e000      	b.n	8019180 <tcp_listen_input+0x1c0>
  return;
 801917e:	bf00      	nop
}
 8019180:	371c      	adds	r7, #28
 8019182:	46bd      	mov	sp, r7
 8019184:	bd90      	pop	{r4, r7, pc}
 8019186:	bf00      	nop
 8019188:	200110c4 	.word	0x200110c4
 801918c:	08021c84 	.word	0x08021c84
 8019190:	08021e7c 	.word	0x08021e7c
 8019194:	08021cd0 	.word	0x08021cd0
 8019198:	200110bc 	.word	0x200110bc
 801919c:	200110c2 	.word	0x200110c2
 80191a0:	200110b8 	.word	0x200110b8
 80191a4:	200110a8 	.word	0x200110a8
 80191a8:	2000d93c 	.word	0x2000d93c
 80191ac:	2000d940 	.word	0x2000d940
 80191b0:	2000d92c 	.word	0x2000d92c
 80191b4:	2001108c 	.word	0x2001108c
 80191b8:	20011094 	.word	0x20011094

080191bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b086      	sub	sp, #24
 80191c0:	af04      	add	r7, sp, #16
 80191c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80191c4:	4b2f      	ldr	r3, [pc, #188]	; (8019284 <tcp_timewait_input+0xc8>)
 80191c6:	781b      	ldrb	r3, [r3, #0]
 80191c8:	f003 0304 	and.w	r3, r3, #4
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d153      	bne.n	8019278 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d106      	bne.n	80191e4 <tcp_timewait_input+0x28>
 80191d6:	4b2c      	ldr	r3, [pc, #176]	; (8019288 <tcp_timewait_input+0xcc>)
 80191d8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80191dc:	492b      	ldr	r1, [pc, #172]	; (801928c <tcp_timewait_input+0xd0>)
 80191de:	482c      	ldr	r0, [pc, #176]	; (8019290 <tcp_timewait_input+0xd4>)
 80191e0:	f006 fd72 	bl	801fcc8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80191e4:	4b27      	ldr	r3, [pc, #156]	; (8019284 <tcp_timewait_input+0xc8>)
 80191e6:	781b      	ldrb	r3, [r3, #0]
 80191e8:	f003 0302 	and.w	r3, r3, #2
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d02a      	beq.n	8019246 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80191f0:	4b28      	ldr	r3, [pc, #160]	; (8019294 <tcp_timewait_input+0xd8>)
 80191f2:	681a      	ldr	r2, [r3, #0]
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191f8:	1ad3      	subs	r3, r2, r3
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	db2d      	blt.n	801925a <tcp_timewait_input+0x9e>
 80191fe:	4b25      	ldr	r3, [pc, #148]	; (8019294 <tcp_timewait_input+0xd8>)
 8019200:	681a      	ldr	r2, [r3, #0]
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019206:	6879      	ldr	r1, [r7, #4]
 8019208:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801920a:	440b      	add	r3, r1
 801920c:	1ad3      	subs	r3, r2, r3
 801920e:	2b00      	cmp	r3, #0
 8019210:	dc23      	bgt.n	801925a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019212:	4b21      	ldr	r3, [pc, #132]	; (8019298 <tcp_timewait_input+0xdc>)
 8019214:	6819      	ldr	r1, [r3, #0]
 8019216:	4b21      	ldr	r3, [pc, #132]	; (801929c <tcp_timewait_input+0xe0>)
 8019218:	881b      	ldrh	r3, [r3, #0]
 801921a:	461a      	mov	r2, r3
 801921c:	4b1d      	ldr	r3, [pc, #116]	; (8019294 <tcp_timewait_input+0xd8>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019222:	4b1f      	ldr	r3, [pc, #124]	; (80192a0 <tcp_timewait_input+0xe4>)
 8019224:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019226:	885b      	ldrh	r3, [r3, #2]
 8019228:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801922a:	4a1d      	ldr	r2, [pc, #116]	; (80192a0 <tcp_timewait_input+0xe4>)
 801922c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801922e:	8812      	ldrh	r2, [r2, #0]
 8019230:	b292      	uxth	r2, r2
 8019232:	9202      	str	r2, [sp, #8]
 8019234:	9301      	str	r3, [sp, #4]
 8019236:	4b1b      	ldr	r3, [pc, #108]	; (80192a4 <tcp_timewait_input+0xe8>)
 8019238:	9300      	str	r3, [sp, #0]
 801923a:	4b1b      	ldr	r3, [pc, #108]	; (80192a8 <tcp_timewait_input+0xec>)
 801923c:	4602      	mov	r2, r0
 801923e:	6878      	ldr	r0, [r7, #4]
 8019240:	f002 fe72 	bl	801bf28 <tcp_rst>
      return;
 8019244:	e01b      	b.n	801927e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8019246:	4b0f      	ldr	r3, [pc, #60]	; (8019284 <tcp_timewait_input+0xc8>)
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	f003 0301 	and.w	r3, r3, #1
 801924e:	2b00      	cmp	r3, #0
 8019250:	d003      	beq.n	801925a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8019252:	4b16      	ldr	r3, [pc, #88]	; (80192ac <tcp_timewait_input+0xf0>)
 8019254:	681a      	ldr	r2, [r3, #0]
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801925a:	4b10      	ldr	r3, [pc, #64]	; (801929c <tcp_timewait_input+0xe0>)
 801925c:	881b      	ldrh	r3, [r3, #0]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d00c      	beq.n	801927c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	8b5b      	ldrh	r3, [r3, #26]
 8019266:	f043 0302 	orr.w	r3, r3, #2
 801926a:	b29a      	uxth	r2, r3
 801926c:	687b      	ldr	r3, [r7, #4]
 801926e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019270:	6878      	ldr	r0, [r7, #4]
 8019272:	f002 f8a5 	bl	801b3c0 <tcp_output>
  }
  return;
 8019276:	e001      	b.n	801927c <tcp_timewait_input+0xc0>
    return;
 8019278:	bf00      	nop
 801927a:	e000      	b.n	801927e <tcp_timewait_input+0xc2>
  return;
 801927c:	bf00      	nop
}
 801927e:	3708      	adds	r7, #8
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}
 8019284:	200110c4 	.word	0x200110c4
 8019288:	08021c84 	.word	0x08021c84
 801928c:	08021e9c 	.word	0x08021e9c
 8019290:	08021cd0 	.word	0x08021cd0
 8019294:	200110b8 	.word	0x200110b8
 8019298:	200110bc 	.word	0x200110bc
 801929c:	200110c2 	.word	0x200110c2
 80192a0:	200110a8 	.word	0x200110a8
 80192a4:	2000d93c 	.word	0x2000d93c
 80192a8:	2000d940 	.word	0x2000d940
 80192ac:	20011080 	.word	0x20011080

080192b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80192b0:	b590      	push	{r4, r7, lr}
 80192b2:	b08d      	sub	sp, #52	; 0x34
 80192b4:	af04      	add	r7, sp, #16
 80192b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80192b8:	2300      	movs	r3, #0
 80192ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80192bc:	2300      	movs	r3, #0
 80192be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d106      	bne.n	80192d4 <tcp_process+0x24>
 80192c6:	4b9d      	ldr	r3, [pc, #628]	; (801953c <tcp_process+0x28c>)
 80192c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80192cc:	499c      	ldr	r1, [pc, #624]	; (8019540 <tcp_process+0x290>)
 80192ce:	489d      	ldr	r0, [pc, #628]	; (8019544 <tcp_process+0x294>)
 80192d0:	f006 fcfa 	bl	801fcc8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80192d4:	4b9c      	ldr	r3, [pc, #624]	; (8019548 <tcp_process+0x298>)
 80192d6:	781b      	ldrb	r3, [r3, #0]
 80192d8:	f003 0304 	and.w	r3, r3, #4
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d04e      	beq.n	801937e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	7d1b      	ldrb	r3, [r3, #20]
 80192e4:	2b02      	cmp	r3, #2
 80192e6:	d108      	bne.n	80192fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192ec:	4b97      	ldr	r3, [pc, #604]	; (801954c <tcp_process+0x29c>)
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	429a      	cmp	r2, r3
 80192f2:	d123      	bne.n	801933c <tcp_process+0x8c>
        acceptable = 1;
 80192f4:	2301      	movs	r3, #1
 80192f6:	76fb      	strb	r3, [r7, #27]
 80192f8:	e020      	b.n	801933c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80192fe:	4b94      	ldr	r3, [pc, #592]	; (8019550 <tcp_process+0x2a0>)
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	429a      	cmp	r2, r3
 8019304:	d102      	bne.n	801930c <tcp_process+0x5c>
        acceptable = 1;
 8019306:	2301      	movs	r3, #1
 8019308:	76fb      	strb	r3, [r7, #27]
 801930a:	e017      	b.n	801933c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801930c:	4b90      	ldr	r3, [pc, #576]	; (8019550 <tcp_process+0x2a0>)
 801930e:	681a      	ldr	r2, [r3, #0]
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019314:	1ad3      	subs	r3, r2, r3
 8019316:	2b00      	cmp	r3, #0
 8019318:	db10      	blt.n	801933c <tcp_process+0x8c>
 801931a:	4b8d      	ldr	r3, [pc, #564]	; (8019550 <tcp_process+0x2a0>)
 801931c:	681a      	ldr	r2, [r3, #0]
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019322:	6879      	ldr	r1, [r7, #4]
 8019324:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019326:	440b      	add	r3, r1
 8019328:	1ad3      	subs	r3, r2, r3
 801932a:	2b00      	cmp	r3, #0
 801932c:	dc06      	bgt.n	801933c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	8b5b      	ldrh	r3, [r3, #26]
 8019332:	f043 0302 	orr.w	r3, r3, #2
 8019336:	b29a      	uxth	r2, r3
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801933c:	7efb      	ldrb	r3, [r7, #27]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d01b      	beq.n	801937a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	7d1b      	ldrb	r3, [r3, #20]
 8019346:	2b00      	cmp	r3, #0
 8019348:	d106      	bne.n	8019358 <tcp_process+0xa8>
 801934a:	4b7c      	ldr	r3, [pc, #496]	; (801953c <tcp_process+0x28c>)
 801934c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8019350:	4980      	ldr	r1, [pc, #512]	; (8019554 <tcp_process+0x2a4>)
 8019352:	487c      	ldr	r0, [pc, #496]	; (8019544 <tcp_process+0x294>)
 8019354:	f006 fcb8 	bl	801fcc8 <iprintf>
      recv_flags |= TF_RESET;
 8019358:	4b7f      	ldr	r3, [pc, #508]	; (8019558 <tcp_process+0x2a8>)
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	f043 0308 	orr.w	r3, r3, #8
 8019360:	b2da      	uxtb	r2, r3
 8019362:	4b7d      	ldr	r3, [pc, #500]	; (8019558 <tcp_process+0x2a8>)
 8019364:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	8b5b      	ldrh	r3, [r3, #26]
 801936a:	f023 0301 	bic.w	r3, r3, #1
 801936e:	b29a      	uxth	r2, r3
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8019374:	f06f 030d 	mvn.w	r3, #13
 8019378:	e37a      	b.n	8019a70 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801937a:	2300      	movs	r3, #0
 801937c:	e378      	b.n	8019a70 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801937e:	4b72      	ldr	r3, [pc, #456]	; (8019548 <tcp_process+0x298>)
 8019380:	781b      	ldrb	r3, [r3, #0]
 8019382:	f003 0302 	and.w	r3, r3, #2
 8019386:	2b00      	cmp	r3, #0
 8019388:	d010      	beq.n	80193ac <tcp_process+0xfc>
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	7d1b      	ldrb	r3, [r3, #20]
 801938e:	2b02      	cmp	r3, #2
 8019390:	d00c      	beq.n	80193ac <tcp_process+0xfc>
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	7d1b      	ldrb	r3, [r3, #20]
 8019396:	2b03      	cmp	r3, #3
 8019398:	d008      	beq.n	80193ac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	8b5b      	ldrh	r3, [r3, #26]
 801939e:	f043 0302 	orr.w	r3, r3, #2
 80193a2:	b29a      	uxth	r2, r3
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80193a8:	2300      	movs	r3, #0
 80193aa:	e361      	b.n	8019a70 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	8b5b      	ldrh	r3, [r3, #26]
 80193b0:	f003 0310 	and.w	r3, r3, #16
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d103      	bne.n	80193c0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80193b8:	4b68      	ldr	r3, [pc, #416]	; (801955c <tcp_process+0x2ac>)
 80193ba:	681a      	ldr	r2, [r3, #0]
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2200      	movs	r2, #0
 80193c4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	2200      	movs	r2, #0
 80193cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80193d0:	6878      	ldr	r0, [r7, #4]
 80193d2:	f001 fc2f 	bl	801ac34 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	7d1b      	ldrb	r3, [r3, #20]
 80193da:	3b02      	subs	r3, #2
 80193dc:	2b07      	cmp	r3, #7
 80193de:	f200 8337 	bhi.w	8019a50 <tcp_process+0x7a0>
 80193e2:	a201      	add	r2, pc, #4	; (adr r2, 80193e8 <tcp_process+0x138>)
 80193e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193e8:	08019409 	.word	0x08019409
 80193ec:	08019639 	.word	0x08019639
 80193f0:	080197b1 	.word	0x080197b1
 80193f4:	080197db 	.word	0x080197db
 80193f8:	080198ff 	.word	0x080198ff
 80193fc:	080197b1 	.word	0x080197b1
 8019400:	0801998b 	.word	0x0801998b
 8019404:	08019a1b 	.word	0x08019a1b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8019408:	4b4f      	ldr	r3, [pc, #316]	; (8019548 <tcp_process+0x298>)
 801940a:	781b      	ldrb	r3, [r3, #0]
 801940c:	f003 0310 	and.w	r3, r3, #16
 8019410:	2b00      	cmp	r3, #0
 8019412:	f000 80e4 	beq.w	80195de <tcp_process+0x32e>
 8019416:	4b4c      	ldr	r3, [pc, #304]	; (8019548 <tcp_process+0x298>)
 8019418:	781b      	ldrb	r3, [r3, #0]
 801941a:	f003 0302 	and.w	r3, r3, #2
 801941e:	2b00      	cmp	r3, #0
 8019420:	f000 80dd 	beq.w	80195de <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019428:	1c5a      	adds	r2, r3, #1
 801942a:	4b48      	ldr	r3, [pc, #288]	; (801954c <tcp_process+0x29c>)
 801942c:	681b      	ldr	r3, [r3, #0]
 801942e:	429a      	cmp	r2, r3
 8019430:	f040 80d5 	bne.w	80195de <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8019434:	4b46      	ldr	r3, [pc, #280]	; (8019550 <tcp_process+0x2a0>)
 8019436:	681b      	ldr	r3, [r3, #0]
 8019438:	1c5a      	adds	r2, r3, #1
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8019446:	4b41      	ldr	r3, [pc, #260]	; (801954c <tcp_process+0x29c>)
 8019448:	681a      	ldr	r2, [r3, #0]
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801944e:	4b44      	ldr	r3, [pc, #272]	; (8019560 <tcp_process+0x2b0>)
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	89db      	ldrh	r3, [r3, #14]
 8019454:	b29a      	uxth	r2, r3
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8019468:	4b39      	ldr	r3, [pc, #228]	; (8019550 <tcp_process+0x2a0>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	1e5a      	subs	r2, r3, #1
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	2204      	movs	r2, #4
 8019476:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	3304      	adds	r3, #4
 8019480:	4618      	mov	r0, r3
 8019482:	f004 fb21 	bl	801dac8 <ip4_route>
 8019486:	4601      	mov	r1, r0
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	3304      	adds	r3, #4
 801948c:	461a      	mov	r2, r3
 801948e:	4620      	mov	r0, r4
 8019490:	f7ff f88c 	bl	80185ac <tcp_eff_send_mss_netif>
 8019494:	4603      	mov	r3, r0
 8019496:	461a      	mov	r2, r3
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194a0:	009a      	lsls	r2, r3, #2
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194a6:	005b      	lsls	r3, r3, #1
 80194a8:	f241 111c 	movw	r1, #4380	; 0x111c
 80194ac:	428b      	cmp	r3, r1
 80194ae:	bf38      	it	cc
 80194b0:	460b      	movcc	r3, r1
 80194b2:	429a      	cmp	r2, r3
 80194b4:	d204      	bcs.n	80194c0 <tcp_process+0x210>
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194ba:	009b      	lsls	r3, r3, #2
 80194bc:	b29b      	uxth	r3, r3
 80194be:	e00d      	b.n	80194dc <tcp_process+0x22c>
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194c4:	005b      	lsls	r3, r3, #1
 80194c6:	f241 121c 	movw	r2, #4380	; 0x111c
 80194ca:	4293      	cmp	r3, r2
 80194cc:	d904      	bls.n	80194d8 <tcp_process+0x228>
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194d2:	005b      	lsls	r3, r3, #1
 80194d4:	b29b      	uxth	r3, r3
 80194d6:	e001      	b.n	80194dc <tcp_process+0x22c>
 80194d8:	f241 131c 	movw	r3, #4380	; 0x111c
 80194dc:	687a      	ldr	r2, [r7, #4]
 80194de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d106      	bne.n	80194fa <tcp_process+0x24a>
 80194ec:	4b13      	ldr	r3, [pc, #76]	; (801953c <tcp_process+0x28c>)
 80194ee:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80194f2:	491c      	ldr	r1, [pc, #112]	; (8019564 <tcp_process+0x2b4>)
 80194f4:	4813      	ldr	r0, [pc, #76]	; (8019544 <tcp_process+0x294>)
 80194f6:	f006 fbe7 	bl	801fcc8 <iprintf>
        --pcb->snd_queuelen;
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019500:	3b01      	subs	r3, #1
 8019502:	b29a      	uxth	r2, r3
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801950e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8019510:	69fb      	ldr	r3, [r7, #28]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d12a      	bne.n	801956c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801951a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801951c:	69fb      	ldr	r3, [r7, #28]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d106      	bne.n	8019530 <tcp_process+0x280>
 8019522:	4b06      	ldr	r3, [pc, #24]	; (801953c <tcp_process+0x28c>)
 8019524:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019528:	490f      	ldr	r1, [pc, #60]	; (8019568 <tcp_process+0x2b8>)
 801952a:	4806      	ldr	r0, [pc, #24]	; (8019544 <tcp_process+0x294>)
 801952c:	f006 fbcc 	bl	801fcc8 <iprintf>
          pcb->unsent = rseg->next;
 8019530:	69fb      	ldr	r3, [r7, #28]
 8019532:	681a      	ldr	r2, [r3, #0]
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	66da      	str	r2, [r3, #108]	; 0x6c
 8019538:	e01c      	b.n	8019574 <tcp_process+0x2c4>
 801953a:	bf00      	nop
 801953c:	08021c84 	.word	0x08021c84
 8019540:	08021ebc 	.word	0x08021ebc
 8019544:	08021cd0 	.word	0x08021cd0
 8019548:	200110c4 	.word	0x200110c4
 801954c:	200110bc 	.word	0x200110bc
 8019550:	200110b8 	.word	0x200110b8
 8019554:	08021ed8 	.word	0x08021ed8
 8019558:	200110c5 	.word	0x200110c5
 801955c:	20011080 	.word	0x20011080
 8019560:	200110a8 	.word	0x200110a8
 8019564:	08021ef8 	.word	0x08021ef8
 8019568:	08021f10 	.word	0x08021f10
        } else {
          pcb->unacked = rseg->next;
 801956c:	69fb      	ldr	r3, [r7, #28]
 801956e:	681a      	ldr	r2, [r3, #0]
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8019574:	69f8      	ldr	r0, [r7, #28]
 8019576:	f7fe fd22 	bl	8017fbe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801957e:	2b00      	cmp	r3, #0
 8019580:	d104      	bne.n	801958c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019588:	861a      	strh	r2, [r3, #48]	; 0x30
 801958a:	e006      	b.n	801959a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	2200      	movs	r2, #0
 8019590:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	2200      	movs	r2, #0
 8019596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d00a      	beq.n	80195ba <tcp_process+0x30a>
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80195aa:	687a      	ldr	r2, [r7, #4]
 80195ac:	6910      	ldr	r0, [r2, #16]
 80195ae:	2200      	movs	r2, #0
 80195b0:	6879      	ldr	r1, [r7, #4]
 80195b2:	4798      	blx	r3
 80195b4:	4603      	mov	r3, r0
 80195b6:	76bb      	strb	r3, [r7, #26]
 80195b8:	e001      	b.n	80195be <tcp_process+0x30e>
 80195ba:	2300      	movs	r3, #0
 80195bc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80195be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80195c2:	f113 0f0d 	cmn.w	r3, #13
 80195c6:	d102      	bne.n	80195ce <tcp_process+0x31e>
          return ERR_ABRT;
 80195c8:	f06f 030c 	mvn.w	r3, #12
 80195cc:	e250      	b.n	8019a70 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	8b5b      	ldrh	r3, [r3, #26]
 80195d2:	f043 0302 	orr.w	r3, r3, #2
 80195d6:	b29a      	uxth	r2, r3
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80195dc:	e23a      	b.n	8019a54 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80195de:	4b98      	ldr	r3, [pc, #608]	; (8019840 <tcp_process+0x590>)
 80195e0:	781b      	ldrb	r3, [r3, #0]
 80195e2:	f003 0310 	and.w	r3, r3, #16
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	f000 8234 	beq.w	8019a54 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80195ec:	4b95      	ldr	r3, [pc, #596]	; (8019844 <tcp_process+0x594>)
 80195ee:	6819      	ldr	r1, [r3, #0]
 80195f0:	4b95      	ldr	r3, [pc, #596]	; (8019848 <tcp_process+0x598>)
 80195f2:	881b      	ldrh	r3, [r3, #0]
 80195f4:	461a      	mov	r2, r3
 80195f6:	4b95      	ldr	r3, [pc, #596]	; (801984c <tcp_process+0x59c>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80195fc:	4b94      	ldr	r3, [pc, #592]	; (8019850 <tcp_process+0x5a0>)
 80195fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019600:	885b      	ldrh	r3, [r3, #2]
 8019602:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019604:	4a92      	ldr	r2, [pc, #584]	; (8019850 <tcp_process+0x5a0>)
 8019606:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019608:	8812      	ldrh	r2, [r2, #0]
 801960a:	b292      	uxth	r2, r2
 801960c:	9202      	str	r2, [sp, #8]
 801960e:	9301      	str	r3, [sp, #4]
 8019610:	4b90      	ldr	r3, [pc, #576]	; (8019854 <tcp_process+0x5a4>)
 8019612:	9300      	str	r3, [sp, #0]
 8019614:	4b90      	ldr	r3, [pc, #576]	; (8019858 <tcp_process+0x5a8>)
 8019616:	4602      	mov	r2, r0
 8019618:	6878      	ldr	r0, [r7, #4]
 801961a:	f002 fc85 	bl	801bf28 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019624:	2b05      	cmp	r3, #5
 8019626:	f200 8215 	bhi.w	8019a54 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	2200      	movs	r2, #0
 801962e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8019630:	6878      	ldr	r0, [r7, #4]
 8019632:	f002 fa4f 	bl	801bad4 <tcp_rexmit_rto>
      break;
 8019636:	e20d      	b.n	8019a54 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019638:	4b81      	ldr	r3, [pc, #516]	; (8019840 <tcp_process+0x590>)
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	f003 0310 	and.w	r3, r3, #16
 8019640:	2b00      	cmp	r3, #0
 8019642:	f000 80a1 	beq.w	8019788 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019646:	4b7f      	ldr	r3, [pc, #508]	; (8019844 <tcp_process+0x594>)
 8019648:	681a      	ldr	r2, [r3, #0]
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801964e:	1ad3      	subs	r3, r2, r3
 8019650:	3b01      	subs	r3, #1
 8019652:	2b00      	cmp	r3, #0
 8019654:	db7e      	blt.n	8019754 <tcp_process+0x4a4>
 8019656:	4b7b      	ldr	r3, [pc, #492]	; (8019844 <tcp_process+0x594>)
 8019658:	681a      	ldr	r2, [r3, #0]
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801965e:	1ad3      	subs	r3, r2, r3
 8019660:	2b00      	cmp	r3, #0
 8019662:	dc77      	bgt.n	8019754 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	2204      	movs	r2, #4
 8019668:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801966e:	2b00      	cmp	r3, #0
 8019670:	d102      	bne.n	8019678 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8019672:	23fa      	movs	r3, #250	; 0xfa
 8019674:	76bb      	strb	r3, [r7, #26]
 8019676:	e01d      	b.n	80196b4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801967c:	699b      	ldr	r3, [r3, #24]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d106      	bne.n	8019690 <tcp_process+0x3e0>
 8019682:	4b76      	ldr	r3, [pc, #472]	; (801985c <tcp_process+0x5ac>)
 8019684:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019688:	4975      	ldr	r1, [pc, #468]	; (8019860 <tcp_process+0x5b0>)
 801968a:	4876      	ldr	r0, [pc, #472]	; (8019864 <tcp_process+0x5b4>)
 801968c:	f006 fb1c 	bl	801fcc8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019694:	699b      	ldr	r3, [r3, #24]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d00a      	beq.n	80196b0 <tcp_process+0x400>
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801969e:	699b      	ldr	r3, [r3, #24]
 80196a0:	687a      	ldr	r2, [r7, #4]
 80196a2:	6910      	ldr	r0, [r2, #16]
 80196a4:	2200      	movs	r2, #0
 80196a6:	6879      	ldr	r1, [r7, #4]
 80196a8:	4798      	blx	r3
 80196aa:	4603      	mov	r3, r0
 80196ac:	76bb      	strb	r3, [r7, #26]
 80196ae:	e001      	b.n	80196b4 <tcp_process+0x404>
 80196b0:	23f0      	movs	r3, #240	; 0xf0
 80196b2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80196b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d00a      	beq.n	80196d2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80196bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80196c0:	f113 0f0d 	cmn.w	r3, #13
 80196c4:	d002      	beq.n	80196cc <tcp_process+0x41c>
              tcp_abort(pcb);
 80196c6:	6878      	ldr	r0, [r7, #4]
 80196c8:	f7fd ff8e 	bl	80175e8 <tcp_abort>
            }
            return ERR_ABRT;
 80196cc:	f06f 030c 	mvn.w	r3, #12
 80196d0:	e1ce      	b.n	8019a70 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80196d2:	6878      	ldr	r0, [r7, #4]
 80196d4:	f000 fae0 	bl	8019c98 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80196d8:	4b63      	ldr	r3, [pc, #396]	; (8019868 <tcp_process+0x5b8>)
 80196da:	881b      	ldrh	r3, [r3, #0]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d005      	beq.n	80196ec <tcp_process+0x43c>
            recv_acked--;
 80196e0:	4b61      	ldr	r3, [pc, #388]	; (8019868 <tcp_process+0x5b8>)
 80196e2:	881b      	ldrh	r3, [r3, #0]
 80196e4:	3b01      	subs	r3, #1
 80196e6:	b29a      	uxth	r2, r3
 80196e8:	4b5f      	ldr	r3, [pc, #380]	; (8019868 <tcp_process+0x5b8>)
 80196ea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80196f0:	009a      	lsls	r2, r3, #2
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80196f6:	005b      	lsls	r3, r3, #1
 80196f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80196fc:	428b      	cmp	r3, r1
 80196fe:	bf38      	it	cc
 8019700:	460b      	movcc	r3, r1
 8019702:	429a      	cmp	r2, r3
 8019704:	d204      	bcs.n	8019710 <tcp_process+0x460>
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801970a:	009b      	lsls	r3, r3, #2
 801970c:	b29b      	uxth	r3, r3
 801970e:	e00d      	b.n	801972c <tcp_process+0x47c>
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019714:	005b      	lsls	r3, r3, #1
 8019716:	f241 121c 	movw	r2, #4380	; 0x111c
 801971a:	4293      	cmp	r3, r2
 801971c:	d904      	bls.n	8019728 <tcp_process+0x478>
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019722:	005b      	lsls	r3, r3, #1
 8019724:	b29b      	uxth	r3, r3
 8019726:	e001      	b.n	801972c <tcp_process+0x47c>
 8019728:	f241 131c 	movw	r3, #4380	; 0x111c
 801972c:	687a      	ldr	r2, [r7, #4]
 801972e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8019732:	4b4e      	ldr	r3, [pc, #312]	; (801986c <tcp_process+0x5bc>)
 8019734:	781b      	ldrb	r3, [r3, #0]
 8019736:	f003 0320 	and.w	r3, r3, #32
 801973a:	2b00      	cmp	r3, #0
 801973c:	d037      	beq.n	80197ae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	8b5b      	ldrh	r3, [r3, #26]
 8019742:	f043 0302 	orr.w	r3, r3, #2
 8019746:	b29a      	uxth	r2, r3
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	2207      	movs	r2, #7
 8019750:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8019752:	e02c      	b.n	80197ae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019754:	4b3b      	ldr	r3, [pc, #236]	; (8019844 <tcp_process+0x594>)
 8019756:	6819      	ldr	r1, [r3, #0]
 8019758:	4b3b      	ldr	r3, [pc, #236]	; (8019848 <tcp_process+0x598>)
 801975a:	881b      	ldrh	r3, [r3, #0]
 801975c:	461a      	mov	r2, r3
 801975e:	4b3b      	ldr	r3, [pc, #236]	; (801984c <tcp_process+0x59c>)
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019764:	4b3a      	ldr	r3, [pc, #232]	; (8019850 <tcp_process+0x5a0>)
 8019766:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019768:	885b      	ldrh	r3, [r3, #2]
 801976a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801976c:	4a38      	ldr	r2, [pc, #224]	; (8019850 <tcp_process+0x5a0>)
 801976e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019770:	8812      	ldrh	r2, [r2, #0]
 8019772:	b292      	uxth	r2, r2
 8019774:	9202      	str	r2, [sp, #8]
 8019776:	9301      	str	r3, [sp, #4]
 8019778:	4b36      	ldr	r3, [pc, #216]	; (8019854 <tcp_process+0x5a4>)
 801977a:	9300      	str	r3, [sp, #0]
 801977c:	4b36      	ldr	r3, [pc, #216]	; (8019858 <tcp_process+0x5a8>)
 801977e:	4602      	mov	r2, r0
 8019780:	6878      	ldr	r0, [r7, #4]
 8019782:	f002 fbd1 	bl	801bf28 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019786:	e167      	b.n	8019a58 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019788:	4b2d      	ldr	r3, [pc, #180]	; (8019840 <tcp_process+0x590>)
 801978a:	781b      	ldrb	r3, [r3, #0]
 801978c:	f003 0302 	and.w	r3, r3, #2
 8019790:	2b00      	cmp	r3, #0
 8019792:	f000 8161 	beq.w	8019a58 <tcp_process+0x7a8>
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801979a:	1e5a      	subs	r2, r3, #1
 801979c:	4b2b      	ldr	r3, [pc, #172]	; (801984c <tcp_process+0x59c>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	429a      	cmp	r2, r3
 80197a2:	f040 8159 	bne.w	8019a58 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80197a6:	6878      	ldr	r0, [r7, #4]
 80197a8:	f002 f9b6 	bl	801bb18 <tcp_rexmit>
      break;
 80197ac:	e154      	b.n	8019a58 <tcp_process+0x7a8>
 80197ae:	e153      	b.n	8019a58 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80197b0:	6878      	ldr	r0, [r7, #4]
 80197b2:	f000 fa71 	bl	8019c98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80197b6:	4b2d      	ldr	r3, [pc, #180]	; (801986c <tcp_process+0x5bc>)
 80197b8:	781b      	ldrb	r3, [r3, #0]
 80197ba:	f003 0320 	and.w	r3, r3, #32
 80197be:	2b00      	cmp	r3, #0
 80197c0:	f000 814c 	beq.w	8019a5c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	8b5b      	ldrh	r3, [r3, #26]
 80197c8:	f043 0302 	orr.w	r3, r3, #2
 80197cc:	b29a      	uxth	r2, r3
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	2207      	movs	r2, #7
 80197d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80197d8:	e140      	b.n	8019a5c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80197da:	6878      	ldr	r0, [r7, #4]
 80197dc:	f000 fa5c 	bl	8019c98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80197e0:	4b22      	ldr	r3, [pc, #136]	; (801986c <tcp_process+0x5bc>)
 80197e2:	781b      	ldrb	r3, [r3, #0]
 80197e4:	f003 0320 	and.w	r3, r3, #32
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d071      	beq.n	80198d0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80197ec:	4b14      	ldr	r3, [pc, #80]	; (8019840 <tcp_process+0x590>)
 80197ee:	781b      	ldrb	r3, [r3, #0]
 80197f0:	f003 0310 	and.w	r3, r3, #16
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d060      	beq.n	80198ba <tcp_process+0x60a>
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80197fc:	4b11      	ldr	r3, [pc, #68]	; (8019844 <tcp_process+0x594>)
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	429a      	cmp	r2, r3
 8019802:	d15a      	bne.n	80198ba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8019808:	2b00      	cmp	r3, #0
 801980a:	d156      	bne.n	80198ba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	8b5b      	ldrh	r3, [r3, #26]
 8019810:	f043 0302 	orr.w	r3, r3, #2
 8019814:	b29a      	uxth	r2, r3
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801981a:	6878      	ldr	r0, [r7, #4]
 801981c:	f7fe fdbc 	bl	8018398 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8019820:	4b13      	ldr	r3, [pc, #76]	; (8019870 <tcp_process+0x5c0>)
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	687a      	ldr	r2, [r7, #4]
 8019826:	429a      	cmp	r2, r3
 8019828:	d105      	bne.n	8019836 <tcp_process+0x586>
 801982a:	4b11      	ldr	r3, [pc, #68]	; (8019870 <tcp_process+0x5c0>)
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	68db      	ldr	r3, [r3, #12]
 8019830:	4a0f      	ldr	r2, [pc, #60]	; (8019870 <tcp_process+0x5c0>)
 8019832:	6013      	str	r3, [r2, #0]
 8019834:	e02e      	b.n	8019894 <tcp_process+0x5e4>
 8019836:	4b0e      	ldr	r3, [pc, #56]	; (8019870 <tcp_process+0x5c0>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	617b      	str	r3, [r7, #20]
 801983c:	e027      	b.n	801988e <tcp_process+0x5de>
 801983e:	bf00      	nop
 8019840:	200110c4 	.word	0x200110c4
 8019844:	200110bc 	.word	0x200110bc
 8019848:	200110c2 	.word	0x200110c2
 801984c:	200110b8 	.word	0x200110b8
 8019850:	200110a8 	.word	0x200110a8
 8019854:	2000d93c 	.word	0x2000d93c
 8019858:	2000d940 	.word	0x2000d940
 801985c:	08021c84 	.word	0x08021c84
 8019860:	08021f24 	.word	0x08021f24
 8019864:	08021cd0 	.word	0x08021cd0
 8019868:	200110c0 	.word	0x200110c0
 801986c:	200110c5 	.word	0x200110c5
 8019870:	2001108c 	.word	0x2001108c
 8019874:	697b      	ldr	r3, [r7, #20]
 8019876:	68db      	ldr	r3, [r3, #12]
 8019878:	687a      	ldr	r2, [r7, #4]
 801987a:	429a      	cmp	r2, r3
 801987c:	d104      	bne.n	8019888 <tcp_process+0x5d8>
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	68da      	ldr	r2, [r3, #12]
 8019882:	697b      	ldr	r3, [r7, #20]
 8019884:	60da      	str	r2, [r3, #12]
 8019886:	e005      	b.n	8019894 <tcp_process+0x5e4>
 8019888:	697b      	ldr	r3, [r7, #20]
 801988a:	68db      	ldr	r3, [r3, #12]
 801988c:	617b      	str	r3, [r7, #20]
 801988e:	697b      	ldr	r3, [r7, #20]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d1ef      	bne.n	8019874 <tcp_process+0x5c4>
 8019894:	687b      	ldr	r3, [r7, #4]
 8019896:	2200      	movs	r2, #0
 8019898:	60da      	str	r2, [r3, #12]
 801989a:	4b77      	ldr	r3, [pc, #476]	; (8019a78 <tcp_process+0x7c8>)
 801989c:	2201      	movs	r2, #1
 801989e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	220a      	movs	r2, #10
 80198a4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80198a6:	4b75      	ldr	r3, [pc, #468]	; (8019a7c <tcp_process+0x7cc>)
 80198a8:	681a      	ldr	r2, [r3, #0]
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	60da      	str	r2, [r3, #12]
 80198ae:	4a73      	ldr	r2, [pc, #460]	; (8019a7c <tcp_process+0x7cc>)
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	6013      	str	r3, [r2, #0]
 80198b4:	f002 fcfa 	bl	801c2ac <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80198b8:	e0d2      	b.n	8019a60 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	8b5b      	ldrh	r3, [r3, #26]
 80198be:	f043 0302 	orr.w	r3, r3, #2
 80198c2:	b29a      	uxth	r2, r3
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	2208      	movs	r2, #8
 80198cc:	751a      	strb	r2, [r3, #20]
      break;
 80198ce:	e0c7      	b.n	8019a60 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80198d0:	4b6b      	ldr	r3, [pc, #428]	; (8019a80 <tcp_process+0x7d0>)
 80198d2:	781b      	ldrb	r3, [r3, #0]
 80198d4:	f003 0310 	and.w	r3, r3, #16
 80198d8:	2b00      	cmp	r3, #0
 80198da:	f000 80c1 	beq.w	8019a60 <tcp_process+0x7b0>
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80198e2:	4b68      	ldr	r3, [pc, #416]	; (8019a84 <tcp_process+0x7d4>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	429a      	cmp	r2, r3
 80198e8:	f040 80ba 	bne.w	8019a60 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	f040 80b5 	bne.w	8019a60 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	2206      	movs	r2, #6
 80198fa:	751a      	strb	r2, [r3, #20]
      break;
 80198fc:	e0b0      	b.n	8019a60 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80198fe:	6878      	ldr	r0, [r7, #4]
 8019900:	f000 f9ca 	bl	8019c98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8019904:	4b60      	ldr	r3, [pc, #384]	; (8019a88 <tcp_process+0x7d8>)
 8019906:	781b      	ldrb	r3, [r3, #0]
 8019908:	f003 0320 	and.w	r3, r3, #32
 801990c:	2b00      	cmp	r3, #0
 801990e:	f000 80a9 	beq.w	8019a64 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	8b5b      	ldrh	r3, [r3, #26]
 8019916:	f043 0302 	orr.w	r3, r3, #2
 801991a:	b29a      	uxth	r2, r3
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8019920:	6878      	ldr	r0, [r7, #4]
 8019922:	f7fe fd39 	bl	8018398 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019926:	4b59      	ldr	r3, [pc, #356]	; (8019a8c <tcp_process+0x7dc>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	687a      	ldr	r2, [r7, #4]
 801992c:	429a      	cmp	r2, r3
 801992e:	d105      	bne.n	801993c <tcp_process+0x68c>
 8019930:	4b56      	ldr	r3, [pc, #344]	; (8019a8c <tcp_process+0x7dc>)
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	68db      	ldr	r3, [r3, #12]
 8019936:	4a55      	ldr	r2, [pc, #340]	; (8019a8c <tcp_process+0x7dc>)
 8019938:	6013      	str	r3, [r2, #0]
 801993a:	e013      	b.n	8019964 <tcp_process+0x6b4>
 801993c:	4b53      	ldr	r3, [pc, #332]	; (8019a8c <tcp_process+0x7dc>)
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	613b      	str	r3, [r7, #16]
 8019942:	e00c      	b.n	801995e <tcp_process+0x6ae>
 8019944:	693b      	ldr	r3, [r7, #16]
 8019946:	68db      	ldr	r3, [r3, #12]
 8019948:	687a      	ldr	r2, [r7, #4]
 801994a:	429a      	cmp	r2, r3
 801994c:	d104      	bne.n	8019958 <tcp_process+0x6a8>
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	68da      	ldr	r2, [r3, #12]
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	60da      	str	r2, [r3, #12]
 8019956:	e005      	b.n	8019964 <tcp_process+0x6b4>
 8019958:	693b      	ldr	r3, [r7, #16]
 801995a:	68db      	ldr	r3, [r3, #12]
 801995c:	613b      	str	r3, [r7, #16]
 801995e:	693b      	ldr	r3, [r7, #16]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d1ef      	bne.n	8019944 <tcp_process+0x694>
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	2200      	movs	r2, #0
 8019968:	60da      	str	r2, [r3, #12]
 801996a:	4b43      	ldr	r3, [pc, #268]	; (8019a78 <tcp_process+0x7c8>)
 801996c:	2201      	movs	r2, #1
 801996e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	220a      	movs	r2, #10
 8019974:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019976:	4b41      	ldr	r3, [pc, #260]	; (8019a7c <tcp_process+0x7cc>)
 8019978:	681a      	ldr	r2, [r3, #0]
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	60da      	str	r2, [r3, #12]
 801997e:	4a3f      	ldr	r2, [pc, #252]	; (8019a7c <tcp_process+0x7cc>)
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	6013      	str	r3, [r2, #0]
 8019984:	f002 fc92 	bl	801c2ac <tcp_timer_needed>
      }
      break;
 8019988:	e06c      	b.n	8019a64 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801998a:	6878      	ldr	r0, [r7, #4]
 801998c:	f000 f984 	bl	8019c98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019990:	4b3b      	ldr	r3, [pc, #236]	; (8019a80 <tcp_process+0x7d0>)
 8019992:	781b      	ldrb	r3, [r3, #0]
 8019994:	f003 0310 	and.w	r3, r3, #16
 8019998:	2b00      	cmp	r3, #0
 801999a:	d065      	beq.n	8019a68 <tcp_process+0x7b8>
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80199a0:	4b38      	ldr	r3, [pc, #224]	; (8019a84 <tcp_process+0x7d4>)
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	429a      	cmp	r2, r3
 80199a6:	d15f      	bne.n	8019a68 <tcp_process+0x7b8>
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	d15b      	bne.n	8019a68 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80199b0:	6878      	ldr	r0, [r7, #4]
 80199b2:	f7fe fcf1 	bl	8018398 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80199b6:	4b35      	ldr	r3, [pc, #212]	; (8019a8c <tcp_process+0x7dc>)
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	687a      	ldr	r2, [r7, #4]
 80199bc:	429a      	cmp	r2, r3
 80199be:	d105      	bne.n	80199cc <tcp_process+0x71c>
 80199c0:	4b32      	ldr	r3, [pc, #200]	; (8019a8c <tcp_process+0x7dc>)
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	68db      	ldr	r3, [r3, #12]
 80199c6:	4a31      	ldr	r2, [pc, #196]	; (8019a8c <tcp_process+0x7dc>)
 80199c8:	6013      	str	r3, [r2, #0]
 80199ca:	e013      	b.n	80199f4 <tcp_process+0x744>
 80199cc:	4b2f      	ldr	r3, [pc, #188]	; (8019a8c <tcp_process+0x7dc>)
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	60fb      	str	r3, [r7, #12]
 80199d2:	e00c      	b.n	80199ee <tcp_process+0x73e>
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	68db      	ldr	r3, [r3, #12]
 80199d8:	687a      	ldr	r2, [r7, #4]
 80199da:	429a      	cmp	r2, r3
 80199dc:	d104      	bne.n	80199e8 <tcp_process+0x738>
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	68da      	ldr	r2, [r3, #12]
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	60da      	str	r2, [r3, #12]
 80199e6:	e005      	b.n	80199f4 <tcp_process+0x744>
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	68db      	ldr	r3, [r3, #12]
 80199ec:	60fb      	str	r3, [r7, #12]
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d1ef      	bne.n	80199d4 <tcp_process+0x724>
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	2200      	movs	r2, #0
 80199f8:	60da      	str	r2, [r3, #12]
 80199fa:	4b1f      	ldr	r3, [pc, #124]	; (8019a78 <tcp_process+0x7c8>)
 80199fc:	2201      	movs	r2, #1
 80199fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	220a      	movs	r2, #10
 8019a04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019a06:	4b1d      	ldr	r3, [pc, #116]	; (8019a7c <tcp_process+0x7cc>)
 8019a08:	681a      	ldr	r2, [r3, #0]
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	60da      	str	r2, [r3, #12]
 8019a0e:	4a1b      	ldr	r2, [pc, #108]	; (8019a7c <tcp_process+0x7cc>)
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	6013      	str	r3, [r2, #0]
 8019a14:	f002 fc4a 	bl	801c2ac <tcp_timer_needed>
      }
      break;
 8019a18:	e026      	b.n	8019a68 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8019a1a:	6878      	ldr	r0, [r7, #4]
 8019a1c:	f000 f93c 	bl	8019c98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019a20:	4b17      	ldr	r3, [pc, #92]	; (8019a80 <tcp_process+0x7d0>)
 8019a22:	781b      	ldrb	r3, [r3, #0]
 8019a24:	f003 0310 	and.w	r3, r3, #16
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d01f      	beq.n	8019a6c <tcp_process+0x7bc>
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019a30:	4b14      	ldr	r3, [pc, #80]	; (8019a84 <tcp_process+0x7d4>)
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d119      	bne.n	8019a6c <tcp_process+0x7bc>
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d115      	bne.n	8019a6c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8019a40:	4b11      	ldr	r3, [pc, #68]	; (8019a88 <tcp_process+0x7d8>)
 8019a42:	781b      	ldrb	r3, [r3, #0]
 8019a44:	f043 0310 	orr.w	r3, r3, #16
 8019a48:	b2da      	uxtb	r2, r3
 8019a4a:	4b0f      	ldr	r3, [pc, #60]	; (8019a88 <tcp_process+0x7d8>)
 8019a4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8019a4e:	e00d      	b.n	8019a6c <tcp_process+0x7bc>
    default:
      break;
 8019a50:	bf00      	nop
 8019a52:	e00c      	b.n	8019a6e <tcp_process+0x7be>
      break;
 8019a54:	bf00      	nop
 8019a56:	e00a      	b.n	8019a6e <tcp_process+0x7be>
      break;
 8019a58:	bf00      	nop
 8019a5a:	e008      	b.n	8019a6e <tcp_process+0x7be>
      break;
 8019a5c:	bf00      	nop
 8019a5e:	e006      	b.n	8019a6e <tcp_process+0x7be>
      break;
 8019a60:	bf00      	nop
 8019a62:	e004      	b.n	8019a6e <tcp_process+0x7be>
      break;
 8019a64:	bf00      	nop
 8019a66:	e002      	b.n	8019a6e <tcp_process+0x7be>
      break;
 8019a68:	bf00      	nop
 8019a6a:	e000      	b.n	8019a6e <tcp_process+0x7be>
      break;
 8019a6c:	bf00      	nop
  }
  return ERR_OK;
 8019a6e:	2300      	movs	r3, #0
}
 8019a70:	4618      	mov	r0, r3
 8019a72:	3724      	adds	r7, #36	; 0x24
 8019a74:	46bd      	mov	sp, r7
 8019a76:	bd90      	pop	{r4, r7, pc}
 8019a78:	20011094 	.word	0x20011094
 8019a7c:	20011090 	.word	0x20011090
 8019a80:	200110c4 	.word	0x200110c4
 8019a84:	200110bc 	.word	0x200110bc
 8019a88:	200110c5 	.word	0x200110c5
 8019a8c:	2001108c 	.word	0x2001108c

08019a90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019a90:	b590      	push	{r4, r7, lr}
 8019a92:	b085      	sub	sp, #20
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
 8019a98:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d106      	bne.n	8019aae <tcp_oos_insert_segment+0x1e>
 8019aa0:	4b3b      	ldr	r3, [pc, #236]	; (8019b90 <tcp_oos_insert_segment+0x100>)
 8019aa2:	f240 421f 	movw	r2, #1055	; 0x41f
 8019aa6:	493b      	ldr	r1, [pc, #236]	; (8019b94 <tcp_oos_insert_segment+0x104>)
 8019aa8:	483b      	ldr	r0, [pc, #236]	; (8019b98 <tcp_oos_insert_segment+0x108>)
 8019aaa:	f006 f90d 	bl	801fcc8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	68db      	ldr	r3, [r3, #12]
 8019ab2:	899b      	ldrh	r3, [r3, #12]
 8019ab4:	b29b      	uxth	r3, r3
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f7fb fc10 	bl	80152dc <lwip_htons>
 8019abc:	4603      	mov	r3, r0
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	f003 0301 	and.w	r3, r3, #1
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d028      	beq.n	8019b1a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8019ac8:	6838      	ldr	r0, [r7, #0]
 8019aca:	f7fe fa63 	bl	8017f94 <tcp_segs_free>
    next = NULL;
 8019ace:	2300      	movs	r3, #0
 8019ad0:	603b      	str	r3, [r7, #0]
 8019ad2:	e056      	b.n	8019b82 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	68db      	ldr	r3, [r3, #12]
 8019ad8:	899b      	ldrh	r3, [r3, #12]
 8019ada:	b29b      	uxth	r3, r3
 8019adc:	4618      	mov	r0, r3
 8019ade:	f7fb fbfd 	bl	80152dc <lwip_htons>
 8019ae2:	4603      	mov	r3, r0
 8019ae4:	b2db      	uxtb	r3, r3
 8019ae6:	f003 0301 	and.w	r3, r3, #1
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d00d      	beq.n	8019b0a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	68db      	ldr	r3, [r3, #12]
 8019af2:	899b      	ldrh	r3, [r3, #12]
 8019af4:	b29c      	uxth	r4, r3
 8019af6:	2001      	movs	r0, #1
 8019af8:	f7fb fbf0 	bl	80152dc <lwip_htons>
 8019afc:	4603      	mov	r3, r0
 8019afe:	461a      	mov	r2, r3
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	68db      	ldr	r3, [r3, #12]
 8019b04:	4322      	orrs	r2, r4
 8019b06:	b292      	uxth	r2, r2
 8019b08:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8019b0a:	683b      	ldr	r3, [r7, #0]
 8019b0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8019b0e:	683b      	ldr	r3, [r7, #0]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8019b14:	68f8      	ldr	r0, [r7, #12]
 8019b16:	f7fe fa52 	bl	8017fbe <tcp_seg_free>
    while (next &&
 8019b1a:	683b      	ldr	r3, [r7, #0]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d00e      	beq.n	8019b3e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	891b      	ldrh	r3, [r3, #8]
 8019b24:	461a      	mov	r2, r3
 8019b26:	4b1d      	ldr	r3, [pc, #116]	; (8019b9c <tcp_oos_insert_segment+0x10c>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	441a      	add	r2, r3
 8019b2c:	683b      	ldr	r3, [r7, #0]
 8019b2e:	68db      	ldr	r3, [r3, #12]
 8019b30:	685b      	ldr	r3, [r3, #4]
 8019b32:	6839      	ldr	r1, [r7, #0]
 8019b34:	8909      	ldrh	r1, [r1, #8]
 8019b36:	440b      	add	r3, r1
 8019b38:	1ad3      	subs	r3, r2, r3
    while (next &&
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	daca      	bge.n	8019ad4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8019b3e:	683b      	ldr	r3, [r7, #0]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d01e      	beq.n	8019b82 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	891b      	ldrh	r3, [r3, #8]
 8019b48:	461a      	mov	r2, r3
 8019b4a:	4b14      	ldr	r3, [pc, #80]	; (8019b9c <tcp_oos_insert_segment+0x10c>)
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	441a      	add	r2, r3
 8019b50:	683b      	ldr	r3, [r7, #0]
 8019b52:	68db      	ldr	r3, [r3, #12]
 8019b54:	685b      	ldr	r3, [r3, #4]
 8019b56:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	dd12      	ble.n	8019b82 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	68db      	ldr	r3, [r3, #12]
 8019b60:	685b      	ldr	r3, [r3, #4]
 8019b62:	b29a      	uxth	r2, r3
 8019b64:	4b0d      	ldr	r3, [pc, #52]	; (8019b9c <tcp_oos_insert_segment+0x10c>)
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	b29b      	uxth	r3, r3
 8019b6a:	1ad3      	subs	r3, r2, r3
 8019b6c:	b29a      	uxth	r2, r3
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	685a      	ldr	r2, [r3, #4]
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	891b      	ldrh	r3, [r3, #8]
 8019b7a:	4619      	mov	r1, r3
 8019b7c:	4610      	mov	r0, r2
 8019b7e:	f7fc fe19 	bl	80167b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	683a      	ldr	r2, [r7, #0]
 8019b86:	601a      	str	r2, [r3, #0]
}
 8019b88:	bf00      	nop
 8019b8a:	3714      	adds	r7, #20
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	bd90      	pop	{r4, r7, pc}
 8019b90:	08021c84 	.word	0x08021c84
 8019b94:	08021f44 	.word	0x08021f44
 8019b98:	08021cd0 	.word	0x08021cd0
 8019b9c:	200110b8 	.word	0x200110b8

08019ba0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019ba0:	b5b0      	push	{r4, r5, r7, lr}
 8019ba2:	b086      	sub	sp, #24
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	60f8      	str	r0, [r7, #12]
 8019ba8:	60b9      	str	r1, [r7, #8]
 8019baa:	607a      	str	r2, [r7, #4]
 8019bac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8019bae:	e03e      	b.n	8019c2e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019bb0:	68bb      	ldr	r3, [r7, #8]
 8019bb2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8019bba:	697b      	ldr	r3, [r7, #20]
 8019bbc:	685b      	ldr	r3, [r3, #4]
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f7fd f80c 	bl	8016bdc <pbuf_clen>
 8019bc4:	4603      	mov	r3, r0
 8019bc6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019bce:	8a7a      	ldrh	r2, [r7, #18]
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	d906      	bls.n	8019be2 <tcp_free_acked_segments+0x42>
 8019bd4:	4b2a      	ldr	r3, [pc, #168]	; (8019c80 <tcp_free_acked_segments+0xe0>)
 8019bd6:	f240 4257 	movw	r2, #1111	; 0x457
 8019bda:	492a      	ldr	r1, [pc, #168]	; (8019c84 <tcp_free_acked_segments+0xe4>)
 8019bdc:	482a      	ldr	r0, [pc, #168]	; (8019c88 <tcp_free_acked_segments+0xe8>)
 8019bde:	f006 f873 	bl	801fcc8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8019be8:	8a7b      	ldrh	r3, [r7, #18]
 8019bea:	1ad3      	subs	r3, r2, r3
 8019bec:	b29a      	uxth	r2, r3
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8019bf4:	697b      	ldr	r3, [r7, #20]
 8019bf6:	891a      	ldrh	r2, [r3, #8]
 8019bf8:	4b24      	ldr	r3, [pc, #144]	; (8019c8c <tcp_free_acked_segments+0xec>)
 8019bfa:	881b      	ldrh	r3, [r3, #0]
 8019bfc:	4413      	add	r3, r2
 8019bfe:	b29a      	uxth	r2, r3
 8019c00:	4b22      	ldr	r3, [pc, #136]	; (8019c8c <tcp_free_acked_segments+0xec>)
 8019c02:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8019c04:	6978      	ldr	r0, [r7, #20]
 8019c06:	f7fe f9da 	bl	8017fbe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d00c      	beq.n	8019c2e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8019c14:	68bb      	ldr	r3, [r7, #8]
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d109      	bne.n	8019c2e <tcp_free_acked_segments+0x8e>
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d106      	bne.n	8019c2e <tcp_free_acked_segments+0x8e>
 8019c20:	4b17      	ldr	r3, [pc, #92]	; (8019c80 <tcp_free_acked_segments+0xe0>)
 8019c22:	f240 4261 	movw	r2, #1121	; 0x461
 8019c26:	491a      	ldr	r1, [pc, #104]	; (8019c90 <tcp_free_acked_segments+0xf0>)
 8019c28:	4817      	ldr	r0, [pc, #92]	; (8019c88 <tcp_free_acked_segments+0xe8>)
 8019c2a:	f006 f84d 	bl	801fcc8 <iprintf>
  while (seg_list != NULL &&
 8019c2e:	68bb      	ldr	r3, [r7, #8]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d020      	beq.n	8019c76 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	68db      	ldr	r3, [r3, #12]
 8019c38:	685b      	ldr	r3, [r3, #4]
 8019c3a:	4618      	mov	r0, r3
 8019c3c:	f7fb fb63 	bl	8015306 <lwip_htonl>
 8019c40:	4604      	mov	r4, r0
 8019c42:	68bb      	ldr	r3, [r7, #8]
 8019c44:	891b      	ldrh	r3, [r3, #8]
 8019c46:	461d      	mov	r5, r3
 8019c48:	68bb      	ldr	r3, [r7, #8]
 8019c4a:	68db      	ldr	r3, [r3, #12]
 8019c4c:	899b      	ldrh	r3, [r3, #12]
 8019c4e:	b29b      	uxth	r3, r3
 8019c50:	4618      	mov	r0, r3
 8019c52:	f7fb fb43 	bl	80152dc <lwip_htons>
 8019c56:	4603      	mov	r3, r0
 8019c58:	b2db      	uxtb	r3, r3
 8019c5a:	f003 0303 	and.w	r3, r3, #3
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d001      	beq.n	8019c66 <tcp_free_acked_segments+0xc6>
 8019c62:	2301      	movs	r3, #1
 8019c64:	e000      	b.n	8019c68 <tcp_free_acked_segments+0xc8>
 8019c66:	2300      	movs	r3, #0
 8019c68:	442b      	add	r3, r5
 8019c6a:	18e2      	adds	r2, r4, r3
 8019c6c:	4b09      	ldr	r3, [pc, #36]	; (8019c94 <tcp_free_acked_segments+0xf4>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	dd9c      	ble.n	8019bb0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019c76:	68bb      	ldr	r3, [r7, #8]
}
 8019c78:	4618      	mov	r0, r3
 8019c7a:	3718      	adds	r7, #24
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8019c80:	08021c84 	.word	0x08021c84
 8019c84:	08021f6c 	.word	0x08021f6c
 8019c88:	08021cd0 	.word	0x08021cd0
 8019c8c:	200110c0 	.word	0x200110c0
 8019c90:	08021f94 	.word	0x08021f94
 8019c94:	200110bc 	.word	0x200110bc

08019c98 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019c98:	b5b0      	push	{r4, r5, r7, lr}
 8019c9a:	b094      	sub	sp, #80	; 0x50
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d106      	bne.n	8019cb8 <tcp_receive+0x20>
 8019caa:	4b91      	ldr	r3, [pc, #580]	; (8019ef0 <tcp_receive+0x258>)
 8019cac:	f240 427b 	movw	r2, #1147	; 0x47b
 8019cb0:	4990      	ldr	r1, [pc, #576]	; (8019ef4 <tcp_receive+0x25c>)
 8019cb2:	4891      	ldr	r0, [pc, #580]	; (8019ef8 <tcp_receive+0x260>)
 8019cb4:	f006 f808 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	7d1b      	ldrb	r3, [r3, #20]
 8019cbc:	2b03      	cmp	r3, #3
 8019cbe:	d806      	bhi.n	8019cce <tcp_receive+0x36>
 8019cc0:	4b8b      	ldr	r3, [pc, #556]	; (8019ef0 <tcp_receive+0x258>)
 8019cc2:	f240 427c 	movw	r2, #1148	; 0x47c
 8019cc6:	498d      	ldr	r1, [pc, #564]	; (8019efc <tcp_receive+0x264>)
 8019cc8:	488b      	ldr	r0, [pc, #556]	; (8019ef8 <tcp_receive+0x260>)
 8019cca:	f005 fffd 	bl	801fcc8 <iprintf>

  if (flags & TCP_ACK) {
 8019cce:	4b8c      	ldr	r3, [pc, #560]	; (8019f00 <tcp_receive+0x268>)
 8019cd0:	781b      	ldrb	r3, [r3, #0]
 8019cd2:	f003 0310 	and.w	r3, r3, #16
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	f000 8264 	beq.w	801a1a4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019ce2:	461a      	mov	r2, r3
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019ce8:	4413      	add	r3, r2
 8019cea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019cf0:	4b84      	ldr	r3, [pc, #528]	; (8019f04 <tcp_receive+0x26c>)
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	1ad3      	subs	r3, r2, r3
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	db1b      	blt.n	8019d32 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8019cfe:	4b81      	ldr	r3, [pc, #516]	; (8019f04 <tcp_receive+0x26c>)
 8019d00:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8019d02:	429a      	cmp	r2, r3
 8019d04:	d106      	bne.n	8019d14 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019d0a:	4b7f      	ldr	r3, [pc, #508]	; (8019f08 <tcp_receive+0x270>)
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	1ad3      	subs	r3, r2, r3
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	db0e      	blt.n	8019d32 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019d18:	4b7b      	ldr	r3, [pc, #492]	; (8019f08 <tcp_receive+0x270>)
 8019d1a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019d1c:	429a      	cmp	r2, r3
 8019d1e:	d125      	bne.n	8019d6c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019d20:	4b7a      	ldr	r3, [pc, #488]	; (8019f0c <tcp_receive+0x274>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	89db      	ldrh	r3, [r3, #14]
 8019d26:	b29a      	uxth	r2, r3
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d2e:	429a      	cmp	r2, r3
 8019d30:	d91c      	bls.n	8019d6c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019d32:	4b76      	ldr	r3, [pc, #472]	; (8019f0c <tcp_receive+0x274>)
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	89db      	ldrh	r3, [r3, #14]
 8019d38:	b29a      	uxth	r2, r3
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d4c:	429a      	cmp	r2, r3
 8019d4e:	d205      	bcs.n	8019d5c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8019d5c:	4b69      	ldr	r3, [pc, #420]	; (8019f04 <tcp_receive+0x26c>)
 8019d5e:	681a      	ldr	r2, [r3, #0]
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019d64:	4b68      	ldr	r3, [pc, #416]	; (8019f08 <tcp_receive+0x270>)
 8019d66:	681a      	ldr	r2, [r3, #0]
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8019d6c:	4b66      	ldr	r3, [pc, #408]	; (8019f08 <tcp_receive+0x270>)
 8019d6e:	681a      	ldr	r2, [r3, #0]
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d74:	1ad3      	subs	r3, r2, r3
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	dc58      	bgt.n	8019e2c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8019d7a:	4b65      	ldr	r3, [pc, #404]	; (8019f10 <tcp_receive+0x278>)
 8019d7c:	881b      	ldrh	r3, [r3, #0]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d14b      	bne.n	8019e1a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019d86:	687a      	ldr	r2, [r7, #4]
 8019d88:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8019d8c:	4413      	add	r3, r2
 8019d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d90:	429a      	cmp	r2, r3
 8019d92:	d142      	bne.n	8019e1a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	db3d      	blt.n	8019e1a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019da2:	4b59      	ldr	r3, [pc, #356]	; (8019f08 <tcp_receive+0x270>)
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	429a      	cmp	r2, r3
 8019da8:	d137      	bne.n	8019e1a <tcp_receive+0x182>
              found_dupack = 1;
 8019daa:	2301      	movs	r3, #1
 8019dac:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019db4:	2bff      	cmp	r3, #255	; 0xff
 8019db6:	d007      	beq.n	8019dc8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019dbe:	3301      	adds	r3, #1
 8019dc0:	b2da      	uxtb	r2, r3
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019dce:	2b03      	cmp	r3, #3
 8019dd0:	d91b      	bls.n	8019e0a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ddc:	4413      	add	r3, r2
 8019dde:	b29a      	uxth	r2, r3
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019de6:	429a      	cmp	r2, r3
 8019de8:	d30a      	bcc.n	8019e00 <tcp_receive+0x168>
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019df4:	4413      	add	r3, r2
 8019df6:	b29a      	uxth	r2, r3
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019dfe:	e004      	b.n	8019e0a <tcp_receive+0x172>
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019e06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019e10:	2b02      	cmp	r3, #2
 8019e12:	d902      	bls.n	8019e1a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8019e14:	6878      	ldr	r0, [r7, #4]
 8019e16:	f001 feeb 	bl	801bbf0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8019e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	f040 8161 	bne.w	801a0e4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	2200      	movs	r2, #0
 8019e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019e2a:	e15b      	b.n	801a0e4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019e2c:	4b36      	ldr	r3, [pc, #216]	; (8019f08 <tcp_receive+0x270>)
 8019e2e:	681a      	ldr	r2, [r3, #0]
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019e34:	1ad3      	subs	r3, r2, r3
 8019e36:	3b01      	subs	r3, #1
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	f2c0 814e 	blt.w	801a0da <tcp_receive+0x442>
 8019e3e:	4b32      	ldr	r3, [pc, #200]	; (8019f08 <tcp_receive+0x270>)
 8019e40:	681a      	ldr	r2, [r3, #0]
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019e46:	1ad3      	subs	r3, r2, r3
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	f300 8146 	bgt.w	801a0da <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	8b5b      	ldrh	r3, [r3, #26]
 8019e52:	f003 0304 	and.w	r3, r3, #4
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d010      	beq.n	8019e7c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	8b5b      	ldrh	r3, [r3, #26]
 8019e5e:	f023 0304 	bic.w	r3, r3, #4
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	2200      	movs	r2, #0
 8019e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	2200      	movs	r2, #0
 8019e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019e8a:	10db      	asrs	r3, r3, #3
 8019e8c:	b21b      	sxth	r3, r3
 8019e8e:	b29a      	uxth	r2, r3
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019e96:	b29b      	uxth	r3, r3
 8019e98:	4413      	add	r3, r2
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	b21a      	sxth	r2, r3
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019ea4:	4b18      	ldr	r3, [pc, #96]	; (8019f08 <tcp_receive+0x270>)
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	b29a      	uxth	r2, r3
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019eae:	b29b      	uxth	r3, r3
 8019eb0:	1ad3      	subs	r3, r2, r3
 8019eb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8019ebc:	4b12      	ldr	r3, [pc, #72]	; (8019f08 <tcp_receive+0x270>)
 8019ebe:	681a      	ldr	r2, [r3, #0]
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	7d1b      	ldrb	r3, [r3, #20]
 8019ec8:	2b03      	cmp	r3, #3
 8019eca:	f240 8097 	bls.w	8019ffc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019eda:	429a      	cmp	r2, r3
 8019edc:	d245      	bcs.n	8019f6a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	8b5b      	ldrh	r3, [r3, #26]
 8019ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d014      	beq.n	8019f14 <tcp_receive+0x27c>
 8019eea:	2301      	movs	r3, #1
 8019eec:	e013      	b.n	8019f16 <tcp_receive+0x27e>
 8019eee:	bf00      	nop
 8019ef0:	08021c84 	.word	0x08021c84
 8019ef4:	08021fb4 	.word	0x08021fb4
 8019ef8:	08021cd0 	.word	0x08021cd0
 8019efc:	08021fd0 	.word	0x08021fd0
 8019f00:	200110c4 	.word	0x200110c4
 8019f04:	200110b8 	.word	0x200110b8
 8019f08:	200110bc 	.word	0x200110bc
 8019f0c:	200110a8 	.word	0x200110a8
 8019f10:	200110c2 	.word	0x200110c2
 8019f14:	2302      	movs	r3, #2
 8019f16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019f1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8019f1e:	b29a      	uxth	r2, r3
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019f24:	fb12 f303 	smulbb	r3, r2, r3
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019f2c:	4293      	cmp	r3, r2
 8019f2e:	bf28      	it	cs
 8019f30:	4613      	movcs	r3, r2
 8019f32:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019f3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019f3c:	4413      	add	r3, r2
 8019f3e:	b29a      	uxth	r2, r3
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d309      	bcc.n	8019f5e <tcp_receive+0x2c6>
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019f50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019f52:	4413      	add	r3, r2
 8019f54:	b29a      	uxth	r2, r3
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019f5c:	e04e      	b.n	8019ffc <tcp_receive+0x364>
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019f68:	e048      	b.n	8019ffc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019f70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019f72:	4413      	add	r3, r2
 8019f74:	b29a      	uxth	r2, r3
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019f7c:	429a      	cmp	r2, r3
 8019f7e:	d309      	bcc.n	8019f94 <tcp_receive+0x2fc>
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019f88:	4413      	add	r3, r2
 8019f8a:	b29a      	uxth	r2, r3
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019f92:	e004      	b.n	8019f9e <tcp_receive+0x306>
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019faa:	429a      	cmp	r2, r3
 8019fac:	d326      	bcc.n	8019ffc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019fba:	1ad3      	subs	r3, r2, r3
 8019fbc:	b29a      	uxth	r2, r3
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019fce:	4413      	add	r3, r2
 8019fd0:	b29a      	uxth	r2, r3
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019fd8:	429a      	cmp	r2, r3
 8019fda:	d30a      	bcc.n	8019ff2 <tcp_receive+0x35a>
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019fe6:	4413      	add	r3, r2
 8019fe8:	b29a      	uxth	r2, r3
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019ff0:	e004      	b.n	8019ffc <tcp_receive+0x364>
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ff8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a004:	4a98      	ldr	r2, [pc, #608]	; (801a268 <tcp_receive+0x5d0>)
 801a006:	6878      	ldr	r0, [r7, #4]
 801a008:	f7ff fdca 	bl	8019ba0 <tcp_free_acked_segments>
 801a00c:	4602      	mov	r2, r0
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a01a:	4a94      	ldr	r2, [pc, #592]	; (801a26c <tcp_receive+0x5d4>)
 801a01c:	6878      	ldr	r0, [r7, #4]
 801a01e:	f7ff fdbf 	bl	8019ba0 <tcp_free_acked_segments>
 801a022:	4602      	mov	r2, r0
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d104      	bne.n	801a03a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a036:	861a      	strh	r2, [r3, #48]	; 0x30
 801a038:	e002      	b.n	801a040 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2200      	movs	r2, #0
 801a03e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	2200      	movs	r2, #0
 801a044:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d103      	bne.n	801a056 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	2200      	movs	r2, #0
 801a052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801a05c:	4b84      	ldr	r3, [pc, #528]	; (801a270 <tcp_receive+0x5d8>)
 801a05e:	881b      	ldrh	r3, [r3, #0]
 801a060:	4413      	add	r3, r2
 801a062:	b29a      	uxth	r2, r3
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	8b5b      	ldrh	r3, [r3, #26]
 801a06e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a072:	2b00      	cmp	r3, #0
 801a074:	d035      	beq.n	801a0e2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d118      	bne.n	801a0b0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a082:	2b00      	cmp	r3, #0
 801a084:	d00c      	beq.n	801a0a0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a08e:	68db      	ldr	r3, [r3, #12]
 801a090:	685b      	ldr	r3, [r3, #4]
 801a092:	4618      	mov	r0, r3
 801a094:	f7fb f937 	bl	8015306 <lwip_htonl>
 801a098:	4603      	mov	r3, r0
 801a09a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	dc20      	bgt.n	801a0e2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	8b5b      	ldrh	r3, [r3, #26]
 801a0a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a0a8:	b29a      	uxth	r2, r3
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a0ae:	e018      	b.n	801a0e2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0b8:	68db      	ldr	r3, [r3, #12]
 801a0ba:	685b      	ldr	r3, [r3, #4]
 801a0bc:	4618      	mov	r0, r3
 801a0be:	f7fb f922 	bl	8015306 <lwip_htonl>
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	1ae3      	subs	r3, r4, r3
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	dc0b      	bgt.n	801a0e2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	8b5b      	ldrh	r3, [r3, #26]
 801a0ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a0d8:	e003      	b.n	801a0e2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801a0da:	6878      	ldr	r0, [r7, #4]
 801a0dc:	f001 ff76 	bl	801bfcc <tcp_send_empty_ack>
 801a0e0:	e000      	b.n	801a0e4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a0e2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d05b      	beq.n	801a1a4 <tcp_receive+0x50c>
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a0f0:	4b60      	ldr	r3, [pc, #384]	; (801a274 <tcp_receive+0x5dc>)
 801a0f2:	681b      	ldr	r3, [r3, #0]
 801a0f4:	1ad3      	subs	r3, r2, r3
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	da54      	bge.n	801a1a4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801a0fa:	4b5f      	ldr	r3, [pc, #380]	; (801a278 <tcp_receive+0x5e0>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	b29a      	uxth	r2, r3
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a104:	b29b      	uxth	r3, r3
 801a106:	1ad3      	subs	r3, r2, r3
 801a108:	b29b      	uxth	r3, r3
 801a10a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801a10e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a118:	10db      	asrs	r3, r3, #3
 801a11a:	b21b      	sxth	r3, r3
 801a11c:	b29b      	uxth	r3, r3
 801a11e:	1ad3      	subs	r3, r2, r3
 801a120:	b29b      	uxth	r3, r3
 801a122:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a12c:	b29a      	uxth	r2, r3
 801a12e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a132:	4413      	add	r3, r2
 801a134:	b29b      	uxth	r3, r3
 801a136:	b21a      	sxth	r2, r3
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801a13c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801a140:	2b00      	cmp	r3, #0
 801a142:	da05      	bge.n	801a150 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801a144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a148:	425b      	negs	r3, r3
 801a14a:	b29b      	uxth	r3, r3
 801a14c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801a150:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a15a:	109b      	asrs	r3, r3, #2
 801a15c:	b21b      	sxth	r3, r3
 801a15e:	b29b      	uxth	r3, r3
 801a160:	1ad3      	subs	r3, r2, r3
 801a162:	b29b      	uxth	r3, r3
 801a164:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a16e:	b29a      	uxth	r2, r3
 801a170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801a174:	4413      	add	r3, r2
 801a176:	b29b      	uxth	r3, r3
 801a178:	b21a      	sxth	r2, r3
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a184:	10db      	asrs	r3, r3, #3
 801a186:	b21b      	sxth	r3, r3
 801a188:	b29a      	uxth	r2, r3
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a190:	b29b      	uxth	r3, r3
 801a192:	4413      	add	r3, r2
 801a194:	b29b      	uxth	r3, r3
 801a196:	b21a      	sxth	r2, r3
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801a1a4:	4b35      	ldr	r3, [pc, #212]	; (801a27c <tcp_receive+0x5e4>)
 801a1a6:	881b      	ldrh	r3, [r3, #0]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	f000 84e2 	beq.w	801ab72 <tcp_receive+0xeda>
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	7d1b      	ldrb	r3, [r3, #20]
 801a1b2:	2b06      	cmp	r3, #6
 801a1b4:	f200 84dd 	bhi.w	801ab72 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a1bc:	4b30      	ldr	r3, [pc, #192]	; (801a280 <tcp_receive+0x5e8>)
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	1ad3      	subs	r3, r2, r3
 801a1c2:	3b01      	subs	r3, #1
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	f2c0 808f 	blt.w	801a2e8 <tcp_receive+0x650>
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a1ce:	4b2b      	ldr	r3, [pc, #172]	; (801a27c <tcp_receive+0x5e4>)
 801a1d0:	881b      	ldrh	r3, [r3, #0]
 801a1d2:	4619      	mov	r1, r3
 801a1d4:	4b2a      	ldr	r3, [pc, #168]	; (801a280 <tcp_receive+0x5e8>)
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	440b      	add	r3, r1
 801a1da:	1ad3      	subs	r3, r2, r3
 801a1dc:	3301      	adds	r3, #1
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	f300 8082 	bgt.w	801a2e8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801a1e4:	4b27      	ldr	r3, [pc, #156]	; (801a284 <tcp_receive+0x5ec>)
 801a1e6:	685b      	ldr	r3, [r3, #4]
 801a1e8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a1ee:	4b24      	ldr	r3, [pc, #144]	; (801a280 <tcp_receive+0x5e8>)
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	1ad3      	subs	r3, r2, r3
 801a1f4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801a1f6:	4b23      	ldr	r3, [pc, #140]	; (801a284 <tcp_receive+0x5ec>)
 801a1f8:	685b      	ldr	r3, [r3, #4]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d106      	bne.n	801a20c <tcp_receive+0x574>
 801a1fe:	4b22      	ldr	r3, [pc, #136]	; (801a288 <tcp_receive+0x5f0>)
 801a200:	f240 5294 	movw	r2, #1428	; 0x594
 801a204:	4921      	ldr	r1, [pc, #132]	; (801a28c <tcp_receive+0x5f4>)
 801a206:	4822      	ldr	r0, [pc, #136]	; (801a290 <tcp_receive+0x5f8>)
 801a208:	f005 fd5e 	bl	801fcc8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a20e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801a212:	4293      	cmp	r3, r2
 801a214:	d906      	bls.n	801a224 <tcp_receive+0x58c>
 801a216:	4b1c      	ldr	r3, [pc, #112]	; (801a288 <tcp_receive+0x5f0>)
 801a218:	f240 5295 	movw	r2, #1429	; 0x595
 801a21c:	491d      	ldr	r1, [pc, #116]	; (801a294 <tcp_receive+0x5fc>)
 801a21e:	481c      	ldr	r0, [pc, #112]	; (801a290 <tcp_receive+0x5f8>)
 801a220:	f005 fd52 	bl	801fcc8 <iprintf>
      off = (u16_t)off32;
 801a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a226:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801a22a:	4b16      	ldr	r3, [pc, #88]	; (801a284 <tcp_receive+0x5ec>)
 801a22c:	685b      	ldr	r3, [r3, #4]
 801a22e:	891b      	ldrh	r3, [r3, #8]
 801a230:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a234:	429a      	cmp	r2, r3
 801a236:	d906      	bls.n	801a246 <tcp_receive+0x5ae>
 801a238:	4b13      	ldr	r3, [pc, #76]	; (801a288 <tcp_receive+0x5f0>)
 801a23a:	f240 5297 	movw	r2, #1431	; 0x597
 801a23e:	4916      	ldr	r1, [pc, #88]	; (801a298 <tcp_receive+0x600>)
 801a240:	4813      	ldr	r0, [pc, #76]	; (801a290 <tcp_receive+0x5f8>)
 801a242:	f005 fd41 	bl	801fcc8 <iprintf>
      inseg.len -= off;
 801a246:	4b0f      	ldr	r3, [pc, #60]	; (801a284 <tcp_receive+0x5ec>)
 801a248:	891a      	ldrh	r2, [r3, #8]
 801a24a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a24e:	1ad3      	subs	r3, r2, r3
 801a250:	b29a      	uxth	r2, r3
 801a252:	4b0c      	ldr	r3, [pc, #48]	; (801a284 <tcp_receive+0x5ec>)
 801a254:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801a256:	4b0b      	ldr	r3, [pc, #44]	; (801a284 <tcp_receive+0x5ec>)
 801a258:	685b      	ldr	r3, [r3, #4]
 801a25a:	891a      	ldrh	r2, [r3, #8]
 801a25c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a260:	1ad3      	subs	r3, r2, r3
 801a262:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801a264:	e02a      	b.n	801a2bc <tcp_receive+0x624>
 801a266:	bf00      	nop
 801a268:	08021fec 	.word	0x08021fec
 801a26c:	08021ff4 	.word	0x08021ff4
 801a270:	200110c0 	.word	0x200110c0
 801a274:	200110bc 	.word	0x200110bc
 801a278:	20011080 	.word	0x20011080
 801a27c:	200110c2 	.word	0x200110c2
 801a280:	200110b8 	.word	0x200110b8
 801a284:	20011098 	.word	0x20011098
 801a288:	08021c84 	.word	0x08021c84
 801a28c:	08021ffc 	.word	0x08021ffc
 801a290:	08021cd0 	.word	0x08021cd0
 801a294:	0802200c 	.word	0x0802200c
 801a298:	0802201c 	.word	0x0802201c
        off -= p->len;
 801a29c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a29e:	895b      	ldrh	r3, [r3, #10]
 801a2a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a2a4:	1ad3      	subs	r3, r2, r3
 801a2a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801a2aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a2ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801a2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801a2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801a2bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2be:	895b      	ldrh	r3, [r3, #10]
 801a2c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a2c4:	429a      	cmp	r2, r3
 801a2c6:	d8e9      	bhi.n	801a29c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801a2c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a2cc:	4619      	mov	r1, r3
 801a2ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801a2d0:	f7fc fb70 	bl	80169b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2d8:	4a91      	ldr	r2, [pc, #580]	; (801a520 <tcp_receive+0x888>)
 801a2da:	6013      	str	r3, [r2, #0]
 801a2dc:	4b91      	ldr	r3, [pc, #580]	; (801a524 <tcp_receive+0x88c>)
 801a2de:	68db      	ldr	r3, [r3, #12]
 801a2e0:	4a8f      	ldr	r2, [pc, #572]	; (801a520 <tcp_receive+0x888>)
 801a2e2:	6812      	ldr	r2, [r2, #0]
 801a2e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801a2e6:	e00d      	b.n	801a304 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801a2e8:	4b8d      	ldr	r3, [pc, #564]	; (801a520 <tcp_receive+0x888>)
 801a2ea:	681a      	ldr	r2, [r3, #0]
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2f0:	1ad3      	subs	r3, r2, r3
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	da06      	bge.n	801a304 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	8b5b      	ldrh	r3, [r3, #26]
 801a2fa:	f043 0302 	orr.w	r3, r3, #2
 801a2fe:	b29a      	uxth	r2, r3
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a304:	4b86      	ldr	r3, [pc, #536]	; (801a520 <tcp_receive+0x888>)
 801a306:	681a      	ldr	r2, [r3, #0]
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a30c:	1ad3      	subs	r3, r2, r3
 801a30e:	2b00      	cmp	r3, #0
 801a310:	f2c0 842a 	blt.w	801ab68 <tcp_receive+0xed0>
 801a314:	4b82      	ldr	r3, [pc, #520]	; (801a520 <tcp_receive+0x888>)
 801a316:	681a      	ldr	r2, [r3, #0]
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a31c:	6879      	ldr	r1, [r7, #4]
 801a31e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a320:	440b      	add	r3, r1
 801a322:	1ad3      	subs	r3, r2, r3
 801a324:	3301      	adds	r3, #1
 801a326:	2b00      	cmp	r3, #0
 801a328:	f300 841e 	bgt.w	801ab68 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a330:	4b7b      	ldr	r3, [pc, #492]	; (801a520 <tcp_receive+0x888>)
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	429a      	cmp	r2, r3
 801a336:	f040 829a 	bne.w	801a86e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801a33a:	4b7a      	ldr	r3, [pc, #488]	; (801a524 <tcp_receive+0x88c>)
 801a33c:	891c      	ldrh	r4, [r3, #8]
 801a33e:	4b79      	ldr	r3, [pc, #484]	; (801a524 <tcp_receive+0x88c>)
 801a340:	68db      	ldr	r3, [r3, #12]
 801a342:	899b      	ldrh	r3, [r3, #12]
 801a344:	b29b      	uxth	r3, r3
 801a346:	4618      	mov	r0, r3
 801a348:	f7fa ffc8 	bl	80152dc <lwip_htons>
 801a34c:	4603      	mov	r3, r0
 801a34e:	b2db      	uxtb	r3, r3
 801a350:	f003 0303 	and.w	r3, r3, #3
 801a354:	2b00      	cmp	r3, #0
 801a356:	d001      	beq.n	801a35c <tcp_receive+0x6c4>
 801a358:	2301      	movs	r3, #1
 801a35a:	e000      	b.n	801a35e <tcp_receive+0x6c6>
 801a35c:	2300      	movs	r3, #0
 801a35e:	4423      	add	r3, r4
 801a360:	b29a      	uxth	r2, r3
 801a362:	4b71      	ldr	r3, [pc, #452]	; (801a528 <tcp_receive+0x890>)
 801a364:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a36a:	4b6f      	ldr	r3, [pc, #444]	; (801a528 <tcp_receive+0x890>)
 801a36c:	881b      	ldrh	r3, [r3, #0]
 801a36e:	429a      	cmp	r2, r3
 801a370:	d275      	bcs.n	801a45e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a372:	4b6c      	ldr	r3, [pc, #432]	; (801a524 <tcp_receive+0x88c>)
 801a374:	68db      	ldr	r3, [r3, #12]
 801a376:	899b      	ldrh	r3, [r3, #12]
 801a378:	b29b      	uxth	r3, r3
 801a37a:	4618      	mov	r0, r3
 801a37c:	f7fa ffae 	bl	80152dc <lwip_htons>
 801a380:	4603      	mov	r3, r0
 801a382:	b2db      	uxtb	r3, r3
 801a384:	f003 0301 	and.w	r3, r3, #1
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d01f      	beq.n	801a3cc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801a38c:	4b65      	ldr	r3, [pc, #404]	; (801a524 <tcp_receive+0x88c>)
 801a38e:	68db      	ldr	r3, [r3, #12]
 801a390:	899b      	ldrh	r3, [r3, #12]
 801a392:	b29b      	uxth	r3, r3
 801a394:	b21b      	sxth	r3, r3
 801a396:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a39a:	b21c      	sxth	r4, r3
 801a39c:	4b61      	ldr	r3, [pc, #388]	; (801a524 <tcp_receive+0x88c>)
 801a39e:	68db      	ldr	r3, [r3, #12]
 801a3a0:	899b      	ldrh	r3, [r3, #12]
 801a3a2:	b29b      	uxth	r3, r3
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	f7fa ff99 	bl	80152dc <lwip_htons>
 801a3aa:	4603      	mov	r3, r0
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	b29b      	uxth	r3, r3
 801a3b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a3b4:	b29b      	uxth	r3, r3
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	f7fa ff90 	bl	80152dc <lwip_htons>
 801a3bc:	4603      	mov	r3, r0
 801a3be:	b21b      	sxth	r3, r3
 801a3c0:	4323      	orrs	r3, r4
 801a3c2:	b21a      	sxth	r2, r3
 801a3c4:	4b57      	ldr	r3, [pc, #348]	; (801a524 <tcp_receive+0x88c>)
 801a3c6:	68db      	ldr	r3, [r3, #12]
 801a3c8:	b292      	uxth	r2, r2
 801a3ca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a3d0:	4b54      	ldr	r3, [pc, #336]	; (801a524 <tcp_receive+0x88c>)
 801a3d2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a3d4:	4b53      	ldr	r3, [pc, #332]	; (801a524 <tcp_receive+0x88c>)
 801a3d6:	68db      	ldr	r3, [r3, #12]
 801a3d8:	899b      	ldrh	r3, [r3, #12]
 801a3da:	b29b      	uxth	r3, r3
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f7fa ff7d 	bl	80152dc <lwip_htons>
 801a3e2:	4603      	mov	r3, r0
 801a3e4:	b2db      	uxtb	r3, r3
 801a3e6:	f003 0302 	and.w	r3, r3, #2
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d005      	beq.n	801a3fa <tcp_receive+0x762>
            inseg.len -= 1;
 801a3ee:	4b4d      	ldr	r3, [pc, #308]	; (801a524 <tcp_receive+0x88c>)
 801a3f0:	891b      	ldrh	r3, [r3, #8]
 801a3f2:	3b01      	subs	r3, #1
 801a3f4:	b29a      	uxth	r2, r3
 801a3f6:	4b4b      	ldr	r3, [pc, #300]	; (801a524 <tcp_receive+0x88c>)
 801a3f8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801a3fa:	4b4a      	ldr	r3, [pc, #296]	; (801a524 <tcp_receive+0x88c>)
 801a3fc:	685b      	ldr	r3, [r3, #4]
 801a3fe:	4a49      	ldr	r2, [pc, #292]	; (801a524 <tcp_receive+0x88c>)
 801a400:	8912      	ldrh	r2, [r2, #8]
 801a402:	4611      	mov	r1, r2
 801a404:	4618      	mov	r0, r3
 801a406:	f7fc f9d5 	bl	80167b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801a40a:	4b46      	ldr	r3, [pc, #280]	; (801a524 <tcp_receive+0x88c>)
 801a40c:	891c      	ldrh	r4, [r3, #8]
 801a40e:	4b45      	ldr	r3, [pc, #276]	; (801a524 <tcp_receive+0x88c>)
 801a410:	68db      	ldr	r3, [r3, #12]
 801a412:	899b      	ldrh	r3, [r3, #12]
 801a414:	b29b      	uxth	r3, r3
 801a416:	4618      	mov	r0, r3
 801a418:	f7fa ff60 	bl	80152dc <lwip_htons>
 801a41c:	4603      	mov	r3, r0
 801a41e:	b2db      	uxtb	r3, r3
 801a420:	f003 0303 	and.w	r3, r3, #3
 801a424:	2b00      	cmp	r3, #0
 801a426:	d001      	beq.n	801a42c <tcp_receive+0x794>
 801a428:	2301      	movs	r3, #1
 801a42a:	e000      	b.n	801a42e <tcp_receive+0x796>
 801a42c:	2300      	movs	r3, #0
 801a42e:	4423      	add	r3, r4
 801a430:	b29a      	uxth	r2, r3
 801a432:	4b3d      	ldr	r3, [pc, #244]	; (801a528 <tcp_receive+0x890>)
 801a434:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a436:	4b3c      	ldr	r3, [pc, #240]	; (801a528 <tcp_receive+0x890>)
 801a438:	881b      	ldrh	r3, [r3, #0]
 801a43a:	461a      	mov	r2, r3
 801a43c:	4b38      	ldr	r3, [pc, #224]	; (801a520 <tcp_receive+0x888>)
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	441a      	add	r2, r3
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a446:	6879      	ldr	r1, [r7, #4]
 801a448:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a44a:	440b      	add	r3, r1
 801a44c:	429a      	cmp	r2, r3
 801a44e:	d006      	beq.n	801a45e <tcp_receive+0x7c6>
 801a450:	4b36      	ldr	r3, [pc, #216]	; (801a52c <tcp_receive+0x894>)
 801a452:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801a456:	4936      	ldr	r1, [pc, #216]	; (801a530 <tcp_receive+0x898>)
 801a458:	4836      	ldr	r0, [pc, #216]	; (801a534 <tcp_receive+0x89c>)
 801a45a:	f005 fc35 	bl	801fcc8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a462:	2b00      	cmp	r3, #0
 801a464:	f000 80e7 	beq.w	801a636 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a468:	4b2e      	ldr	r3, [pc, #184]	; (801a524 <tcp_receive+0x88c>)
 801a46a:	68db      	ldr	r3, [r3, #12]
 801a46c:	899b      	ldrh	r3, [r3, #12]
 801a46e:	b29b      	uxth	r3, r3
 801a470:	4618      	mov	r0, r3
 801a472:	f7fa ff33 	bl	80152dc <lwip_htons>
 801a476:	4603      	mov	r3, r0
 801a478:	b2db      	uxtb	r3, r3
 801a47a:	f003 0301 	and.w	r3, r3, #1
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d010      	beq.n	801a4a4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801a482:	e00a      	b.n	801a49a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a488:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a48e:	681a      	ldr	r2, [r3, #0]
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801a494:	68f8      	ldr	r0, [r7, #12]
 801a496:	f7fd fd92 	bl	8017fbe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d1f0      	bne.n	801a484 <tcp_receive+0x7ec>
 801a4a2:	e0c8      	b.n	801a636 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801a4aa:	e052      	b.n	801a552 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a4ae:	68db      	ldr	r3, [r3, #12]
 801a4b0:	899b      	ldrh	r3, [r3, #12]
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	4618      	mov	r0, r3
 801a4b6:	f7fa ff11 	bl	80152dc <lwip_htons>
 801a4ba:	4603      	mov	r3, r0
 801a4bc:	b2db      	uxtb	r3, r3
 801a4be:	f003 0301 	and.w	r3, r3, #1
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d03d      	beq.n	801a542 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801a4c6:	4b17      	ldr	r3, [pc, #92]	; (801a524 <tcp_receive+0x88c>)
 801a4c8:	68db      	ldr	r3, [r3, #12]
 801a4ca:	899b      	ldrh	r3, [r3, #12]
 801a4cc:	b29b      	uxth	r3, r3
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f7fa ff04 	bl	80152dc <lwip_htons>
 801a4d4:	4603      	mov	r3, r0
 801a4d6:	b2db      	uxtb	r3, r3
 801a4d8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d130      	bne.n	801a542 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801a4e0:	4b10      	ldr	r3, [pc, #64]	; (801a524 <tcp_receive+0x88c>)
 801a4e2:	68db      	ldr	r3, [r3, #12]
 801a4e4:	899b      	ldrh	r3, [r3, #12]
 801a4e6:	b29c      	uxth	r4, r3
 801a4e8:	2001      	movs	r0, #1
 801a4ea:	f7fa fef7 	bl	80152dc <lwip_htons>
 801a4ee:	4603      	mov	r3, r0
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	4b0c      	ldr	r3, [pc, #48]	; (801a524 <tcp_receive+0x88c>)
 801a4f4:	68db      	ldr	r3, [r3, #12]
 801a4f6:	4322      	orrs	r2, r4
 801a4f8:	b292      	uxth	r2, r2
 801a4fa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801a4fc:	4b09      	ldr	r3, [pc, #36]	; (801a524 <tcp_receive+0x88c>)
 801a4fe:	891c      	ldrh	r4, [r3, #8]
 801a500:	4b08      	ldr	r3, [pc, #32]	; (801a524 <tcp_receive+0x88c>)
 801a502:	68db      	ldr	r3, [r3, #12]
 801a504:	899b      	ldrh	r3, [r3, #12]
 801a506:	b29b      	uxth	r3, r3
 801a508:	4618      	mov	r0, r3
 801a50a:	f7fa fee7 	bl	80152dc <lwip_htons>
 801a50e:	4603      	mov	r3, r0
 801a510:	b2db      	uxtb	r3, r3
 801a512:	f003 0303 	and.w	r3, r3, #3
 801a516:	2b00      	cmp	r3, #0
 801a518:	d00e      	beq.n	801a538 <tcp_receive+0x8a0>
 801a51a:	2301      	movs	r3, #1
 801a51c:	e00d      	b.n	801a53a <tcp_receive+0x8a2>
 801a51e:	bf00      	nop
 801a520:	200110b8 	.word	0x200110b8
 801a524:	20011098 	.word	0x20011098
 801a528:	200110c2 	.word	0x200110c2
 801a52c:	08021c84 	.word	0x08021c84
 801a530:	0802202c 	.word	0x0802202c
 801a534:	08021cd0 	.word	0x08021cd0
 801a538:	2300      	movs	r3, #0
 801a53a:	4423      	add	r3, r4
 801a53c:	b29a      	uxth	r2, r3
 801a53e:	4b98      	ldr	r3, [pc, #608]	; (801a7a0 <tcp_receive+0xb08>)
 801a540:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801a542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a544:	613b      	str	r3, [r7, #16]
              next = next->next;
 801a546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a548:	681b      	ldr	r3, [r3, #0]
 801a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801a54c:	6938      	ldr	r0, [r7, #16]
 801a54e:	f7fd fd36 	bl	8017fbe <tcp_seg_free>
            while (next &&
 801a552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a554:	2b00      	cmp	r3, #0
 801a556:	d00e      	beq.n	801a576 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a558:	4b91      	ldr	r3, [pc, #580]	; (801a7a0 <tcp_receive+0xb08>)
 801a55a:	881b      	ldrh	r3, [r3, #0]
 801a55c:	461a      	mov	r2, r3
 801a55e:	4b91      	ldr	r3, [pc, #580]	; (801a7a4 <tcp_receive+0xb0c>)
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	441a      	add	r2, r3
 801a564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a566:	68db      	ldr	r3, [r3, #12]
 801a568:	685b      	ldr	r3, [r3, #4]
 801a56a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a56c:	8909      	ldrh	r1, [r1, #8]
 801a56e:	440b      	add	r3, r1
 801a570:	1ad3      	subs	r3, r2, r3
            while (next &&
 801a572:	2b00      	cmp	r3, #0
 801a574:	da9a      	bge.n	801a4ac <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801a576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d059      	beq.n	801a630 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801a57c:	4b88      	ldr	r3, [pc, #544]	; (801a7a0 <tcp_receive+0xb08>)
 801a57e:	881b      	ldrh	r3, [r3, #0]
 801a580:	461a      	mov	r2, r3
 801a582:	4b88      	ldr	r3, [pc, #544]	; (801a7a4 <tcp_receive+0xb0c>)
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	441a      	add	r2, r3
 801a588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a58a:	68db      	ldr	r3, [r3, #12]
 801a58c:	685b      	ldr	r3, [r3, #4]
 801a58e:	1ad3      	subs	r3, r2, r3
            if (next &&
 801a590:	2b00      	cmp	r3, #0
 801a592:	dd4d      	ble.n	801a630 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a596:	68db      	ldr	r3, [r3, #12]
 801a598:	685b      	ldr	r3, [r3, #4]
 801a59a:	b29a      	uxth	r2, r3
 801a59c:	4b81      	ldr	r3, [pc, #516]	; (801a7a4 <tcp_receive+0xb0c>)
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	b29b      	uxth	r3, r3
 801a5a2:	1ad3      	subs	r3, r2, r3
 801a5a4:	b29a      	uxth	r2, r3
 801a5a6:	4b80      	ldr	r3, [pc, #512]	; (801a7a8 <tcp_receive+0xb10>)
 801a5a8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a5aa:	4b7f      	ldr	r3, [pc, #508]	; (801a7a8 <tcp_receive+0xb10>)
 801a5ac:	68db      	ldr	r3, [r3, #12]
 801a5ae:	899b      	ldrh	r3, [r3, #12]
 801a5b0:	b29b      	uxth	r3, r3
 801a5b2:	4618      	mov	r0, r3
 801a5b4:	f7fa fe92 	bl	80152dc <lwip_htons>
 801a5b8:	4603      	mov	r3, r0
 801a5ba:	b2db      	uxtb	r3, r3
 801a5bc:	f003 0302 	and.w	r3, r3, #2
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d005      	beq.n	801a5d0 <tcp_receive+0x938>
                inseg.len -= 1;
 801a5c4:	4b78      	ldr	r3, [pc, #480]	; (801a7a8 <tcp_receive+0xb10>)
 801a5c6:	891b      	ldrh	r3, [r3, #8]
 801a5c8:	3b01      	subs	r3, #1
 801a5ca:	b29a      	uxth	r2, r3
 801a5cc:	4b76      	ldr	r3, [pc, #472]	; (801a7a8 <tcp_receive+0xb10>)
 801a5ce:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a5d0:	4b75      	ldr	r3, [pc, #468]	; (801a7a8 <tcp_receive+0xb10>)
 801a5d2:	685b      	ldr	r3, [r3, #4]
 801a5d4:	4a74      	ldr	r2, [pc, #464]	; (801a7a8 <tcp_receive+0xb10>)
 801a5d6:	8912      	ldrh	r2, [r2, #8]
 801a5d8:	4611      	mov	r1, r2
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f7fc f8ea 	bl	80167b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a5e0:	4b71      	ldr	r3, [pc, #452]	; (801a7a8 <tcp_receive+0xb10>)
 801a5e2:	891c      	ldrh	r4, [r3, #8]
 801a5e4:	4b70      	ldr	r3, [pc, #448]	; (801a7a8 <tcp_receive+0xb10>)
 801a5e6:	68db      	ldr	r3, [r3, #12]
 801a5e8:	899b      	ldrh	r3, [r3, #12]
 801a5ea:	b29b      	uxth	r3, r3
 801a5ec:	4618      	mov	r0, r3
 801a5ee:	f7fa fe75 	bl	80152dc <lwip_htons>
 801a5f2:	4603      	mov	r3, r0
 801a5f4:	b2db      	uxtb	r3, r3
 801a5f6:	f003 0303 	and.w	r3, r3, #3
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d001      	beq.n	801a602 <tcp_receive+0x96a>
 801a5fe:	2301      	movs	r3, #1
 801a600:	e000      	b.n	801a604 <tcp_receive+0x96c>
 801a602:	2300      	movs	r3, #0
 801a604:	4423      	add	r3, r4
 801a606:	b29a      	uxth	r2, r3
 801a608:	4b65      	ldr	r3, [pc, #404]	; (801a7a0 <tcp_receive+0xb08>)
 801a60a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a60c:	4b64      	ldr	r3, [pc, #400]	; (801a7a0 <tcp_receive+0xb08>)
 801a60e:	881b      	ldrh	r3, [r3, #0]
 801a610:	461a      	mov	r2, r3
 801a612:	4b64      	ldr	r3, [pc, #400]	; (801a7a4 <tcp_receive+0xb0c>)
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	441a      	add	r2, r3
 801a618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a61a:	68db      	ldr	r3, [r3, #12]
 801a61c:	685b      	ldr	r3, [r3, #4]
 801a61e:	429a      	cmp	r2, r3
 801a620:	d006      	beq.n	801a630 <tcp_receive+0x998>
 801a622:	4b62      	ldr	r3, [pc, #392]	; (801a7ac <tcp_receive+0xb14>)
 801a624:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801a628:	4961      	ldr	r1, [pc, #388]	; (801a7b0 <tcp_receive+0xb18>)
 801a62a:	4862      	ldr	r0, [pc, #392]	; (801a7b4 <tcp_receive+0xb1c>)
 801a62c:	f005 fb4c 	bl	801fcc8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a634:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a636:	4b5a      	ldr	r3, [pc, #360]	; (801a7a0 <tcp_receive+0xb08>)
 801a638:	881b      	ldrh	r3, [r3, #0]
 801a63a:	461a      	mov	r2, r3
 801a63c:	4b59      	ldr	r3, [pc, #356]	; (801a7a4 <tcp_receive+0xb0c>)
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	441a      	add	r2, r3
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a64a:	4b55      	ldr	r3, [pc, #340]	; (801a7a0 <tcp_receive+0xb08>)
 801a64c:	881b      	ldrh	r3, [r3, #0]
 801a64e:	429a      	cmp	r2, r3
 801a650:	d206      	bcs.n	801a660 <tcp_receive+0x9c8>
 801a652:	4b56      	ldr	r3, [pc, #344]	; (801a7ac <tcp_receive+0xb14>)
 801a654:	f240 6207 	movw	r2, #1543	; 0x607
 801a658:	4957      	ldr	r1, [pc, #348]	; (801a7b8 <tcp_receive+0xb20>)
 801a65a:	4856      	ldr	r0, [pc, #344]	; (801a7b4 <tcp_receive+0xb1c>)
 801a65c:	f005 fb34 	bl	801fcc8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a664:	4b4e      	ldr	r3, [pc, #312]	; (801a7a0 <tcp_receive+0xb08>)
 801a666:	881b      	ldrh	r3, [r3, #0]
 801a668:	1ad3      	subs	r3, r2, r3
 801a66a:	b29a      	uxth	r2, r3
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a670:	6878      	ldr	r0, [r7, #4]
 801a672:	f7fc ffc5 	bl	8017600 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a676:	4b4c      	ldr	r3, [pc, #304]	; (801a7a8 <tcp_receive+0xb10>)
 801a678:	685b      	ldr	r3, [r3, #4]
 801a67a:	891b      	ldrh	r3, [r3, #8]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d006      	beq.n	801a68e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801a680:	4b49      	ldr	r3, [pc, #292]	; (801a7a8 <tcp_receive+0xb10>)
 801a682:	685b      	ldr	r3, [r3, #4]
 801a684:	4a4d      	ldr	r2, [pc, #308]	; (801a7bc <tcp_receive+0xb24>)
 801a686:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a688:	4b47      	ldr	r3, [pc, #284]	; (801a7a8 <tcp_receive+0xb10>)
 801a68a:	2200      	movs	r2, #0
 801a68c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a68e:	4b46      	ldr	r3, [pc, #280]	; (801a7a8 <tcp_receive+0xb10>)
 801a690:	68db      	ldr	r3, [r3, #12]
 801a692:	899b      	ldrh	r3, [r3, #12]
 801a694:	b29b      	uxth	r3, r3
 801a696:	4618      	mov	r0, r3
 801a698:	f7fa fe20 	bl	80152dc <lwip_htons>
 801a69c:	4603      	mov	r3, r0
 801a69e:	b2db      	uxtb	r3, r3
 801a6a0:	f003 0301 	and.w	r3, r3, #1
 801a6a4:	2b00      	cmp	r3, #0
 801a6a6:	f000 80b8 	beq.w	801a81a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a6aa:	4b45      	ldr	r3, [pc, #276]	; (801a7c0 <tcp_receive+0xb28>)
 801a6ac:	781b      	ldrb	r3, [r3, #0]
 801a6ae:	f043 0320 	orr.w	r3, r3, #32
 801a6b2:	b2da      	uxtb	r2, r3
 801a6b4:	4b42      	ldr	r3, [pc, #264]	; (801a7c0 <tcp_receive+0xb28>)
 801a6b6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a6b8:	e0af      	b.n	801a81a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a6be:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a6c4:	68db      	ldr	r3, [r3, #12]
 801a6c6:	685b      	ldr	r3, [r3, #4]
 801a6c8:	4a36      	ldr	r2, [pc, #216]	; (801a7a4 <tcp_receive+0xb0c>)
 801a6ca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a6cc:	68bb      	ldr	r3, [r7, #8]
 801a6ce:	891b      	ldrh	r3, [r3, #8]
 801a6d0:	461c      	mov	r4, r3
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	68db      	ldr	r3, [r3, #12]
 801a6d6:	899b      	ldrh	r3, [r3, #12]
 801a6d8:	b29b      	uxth	r3, r3
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f7fa fdfe 	bl	80152dc <lwip_htons>
 801a6e0:	4603      	mov	r3, r0
 801a6e2:	b2db      	uxtb	r3, r3
 801a6e4:	f003 0303 	and.w	r3, r3, #3
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d001      	beq.n	801a6f0 <tcp_receive+0xa58>
 801a6ec:	2301      	movs	r3, #1
 801a6ee:	e000      	b.n	801a6f2 <tcp_receive+0xa5a>
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	191a      	adds	r2, r3, r4
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6f8:	441a      	add	r2, r3
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a702:	461c      	mov	r4, r3
 801a704:	68bb      	ldr	r3, [r7, #8]
 801a706:	891b      	ldrh	r3, [r3, #8]
 801a708:	461d      	mov	r5, r3
 801a70a:	68bb      	ldr	r3, [r7, #8]
 801a70c:	68db      	ldr	r3, [r3, #12]
 801a70e:	899b      	ldrh	r3, [r3, #12]
 801a710:	b29b      	uxth	r3, r3
 801a712:	4618      	mov	r0, r3
 801a714:	f7fa fde2 	bl	80152dc <lwip_htons>
 801a718:	4603      	mov	r3, r0
 801a71a:	b2db      	uxtb	r3, r3
 801a71c:	f003 0303 	and.w	r3, r3, #3
 801a720:	2b00      	cmp	r3, #0
 801a722:	d001      	beq.n	801a728 <tcp_receive+0xa90>
 801a724:	2301      	movs	r3, #1
 801a726:	e000      	b.n	801a72a <tcp_receive+0xa92>
 801a728:	2300      	movs	r3, #0
 801a72a:	442b      	add	r3, r5
 801a72c:	429c      	cmp	r4, r3
 801a72e:	d206      	bcs.n	801a73e <tcp_receive+0xaa6>
 801a730:	4b1e      	ldr	r3, [pc, #120]	; (801a7ac <tcp_receive+0xb14>)
 801a732:	f240 622b 	movw	r2, #1579	; 0x62b
 801a736:	4923      	ldr	r1, [pc, #140]	; (801a7c4 <tcp_receive+0xb2c>)
 801a738:	481e      	ldr	r0, [pc, #120]	; (801a7b4 <tcp_receive+0xb1c>)
 801a73a:	f005 fac5 	bl	801fcc8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a73e:	68bb      	ldr	r3, [r7, #8]
 801a740:	891b      	ldrh	r3, [r3, #8]
 801a742:	461c      	mov	r4, r3
 801a744:	68bb      	ldr	r3, [r7, #8]
 801a746:	68db      	ldr	r3, [r3, #12]
 801a748:	899b      	ldrh	r3, [r3, #12]
 801a74a:	b29b      	uxth	r3, r3
 801a74c:	4618      	mov	r0, r3
 801a74e:	f7fa fdc5 	bl	80152dc <lwip_htons>
 801a752:	4603      	mov	r3, r0
 801a754:	b2db      	uxtb	r3, r3
 801a756:	f003 0303 	and.w	r3, r3, #3
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d001      	beq.n	801a762 <tcp_receive+0xaca>
 801a75e:	2301      	movs	r3, #1
 801a760:	e000      	b.n	801a764 <tcp_receive+0xacc>
 801a762:	2300      	movs	r3, #0
 801a764:	1919      	adds	r1, r3, r4
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a76a:	b28b      	uxth	r3, r1
 801a76c:	1ad3      	subs	r3, r2, r3
 801a76e:	b29a      	uxth	r2, r3
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a774:	6878      	ldr	r0, [r7, #4]
 801a776:	f7fc ff43 	bl	8017600 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a77a:	68bb      	ldr	r3, [r7, #8]
 801a77c:	685b      	ldr	r3, [r3, #4]
 801a77e:	891b      	ldrh	r3, [r3, #8]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d028      	beq.n	801a7d6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a784:	4b0d      	ldr	r3, [pc, #52]	; (801a7bc <tcp_receive+0xb24>)
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d01d      	beq.n	801a7c8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801a78c:	4b0b      	ldr	r3, [pc, #44]	; (801a7bc <tcp_receive+0xb24>)
 801a78e:	681a      	ldr	r2, [r3, #0]
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	685b      	ldr	r3, [r3, #4]
 801a794:	4619      	mov	r1, r3
 801a796:	4610      	mov	r0, r2
 801a798:	f7fc fa60 	bl	8016c5c <pbuf_cat>
 801a79c:	e018      	b.n	801a7d0 <tcp_receive+0xb38>
 801a79e:	bf00      	nop
 801a7a0:	200110c2 	.word	0x200110c2
 801a7a4:	200110b8 	.word	0x200110b8
 801a7a8:	20011098 	.word	0x20011098
 801a7ac:	08021c84 	.word	0x08021c84
 801a7b0:	08022064 	.word	0x08022064
 801a7b4:	08021cd0 	.word	0x08021cd0
 801a7b8:	080220a0 	.word	0x080220a0
 801a7bc:	200110c8 	.word	0x200110c8
 801a7c0:	200110c5 	.word	0x200110c5
 801a7c4:	080220c0 	.word	0x080220c0
            } else {
              recv_data = cseg->p;
 801a7c8:	68bb      	ldr	r3, [r7, #8]
 801a7ca:	685b      	ldr	r3, [r3, #4]
 801a7cc:	4a70      	ldr	r2, [pc, #448]	; (801a990 <tcp_receive+0xcf8>)
 801a7ce:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a7d6:	68bb      	ldr	r3, [r7, #8]
 801a7d8:	68db      	ldr	r3, [r3, #12]
 801a7da:	899b      	ldrh	r3, [r3, #12]
 801a7dc:	b29b      	uxth	r3, r3
 801a7de:	4618      	mov	r0, r3
 801a7e0:	f7fa fd7c 	bl	80152dc <lwip_htons>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	b2db      	uxtb	r3, r3
 801a7e8:	f003 0301 	and.w	r3, r3, #1
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d00d      	beq.n	801a80c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a7f0:	4b68      	ldr	r3, [pc, #416]	; (801a994 <tcp_receive+0xcfc>)
 801a7f2:	781b      	ldrb	r3, [r3, #0]
 801a7f4:	f043 0320 	orr.w	r3, r3, #32
 801a7f8:	b2da      	uxtb	r2, r3
 801a7fa:	4b66      	ldr	r3, [pc, #408]	; (801a994 <tcp_receive+0xcfc>)
 801a7fc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	7d1b      	ldrb	r3, [r3, #20]
 801a802:	2b04      	cmp	r3, #4
 801a804:	d102      	bne.n	801a80c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	2207      	movs	r2, #7
 801a80a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	681a      	ldr	r2, [r3, #0]
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a814:	68b8      	ldr	r0, [r7, #8]
 801a816:	f7fd fbd2 	bl	8017fbe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d008      	beq.n	801a834 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a826:	68db      	ldr	r3, [r3, #12]
 801a828:	685a      	ldr	r2, [r3, #4]
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a82e:	429a      	cmp	r2, r3
 801a830:	f43f af43 	beq.w	801a6ba <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	8b5b      	ldrh	r3, [r3, #26]
 801a838:	f003 0301 	and.w	r3, r3, #1
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d00e      	beq.n	801a85e <tcp_receive+0xbc6>
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	8b5b      	ldrh	r3, [r3, #26]
 801a844:	f023 0301 	bic.w	r3, r3, #1
 801a848:	b29a      	uxth	r2, r3
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	835a      	strh	r2, [r3, #26]
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	8b5b      	ldrh	r3, [r3, #26]
 801a852:	f043 0302 	orr.w	r3, r3, #2
 801a856:	b29a      	uxth	r2, r3
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a85c:	e188      	b.n	801ab70 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	8b5b      	ldrh	r3, [r3, #26]
 801a862:	f043 0301 	orr.w	r3, r3, #1
 801a866:	b29a      	uxth	r2, r3
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a86c:	e180      	b.n	801ab70 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a872:	2b00      	cmp	r3, #0
 801a874:	d106      	bne.n	801a884 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a876:	4848      	ldr	r0, [pc, #288]	; (801a998 <tcp_receive+0xd00>)
 801a878:	f7fd fbba 	bl	8017ff0 <tcp_seg_copy>
 801a87c:	4602      	mov	r2, r0
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	675a      	str	r2, [r3, #116]	; 0x74
 801a882:	e16d      	b.n	801ab60 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a884:	2300      	movs	r3, #0
 801a886:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a88c:	63bb      	str	r3, [r7, #56]	; 0x38
 801a88e:	e157      	b.n	801ab40 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a892:	68db      	ldr	r3, [r3, #12]
 801a894:	685a      	ldr	r2, [r3, #4]
 801a896:	4b41      	ldr	r3, [pc, #260]	; (801a99c <tcp_receive+0xd04>)
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	429a      	cmp	r2, r3
 801a89c:	d11d      	bne.n	801a8da <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a89e:	4b3e      	ldr	r3, [pc, #248]	; (801a998 <tcp_receive+0xd00>)
 801a8a0:	891a      	ldrh	r2, [r3, #8]
 801a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8a4:	891b      	ldrh	r3, [r3, #8]
 801a8a6:	429a      	cmp	r2, r3
 801a8a8:	f240 814f 	bls.w	801ab4a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a8ac:	483a      	ldr	r0, [pc, #232]	; (801a998 <tcp_receive+0xd00>)
 801a8ae:	f7fd fb9f 	bl	8017ff0 <tcp_seg_copy>
 801a8b2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a8b4:	697b      	ldr	r3, [r7, #20]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	f000 8149 	beq.w	801ab4e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801a8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d003      	beq.n	801a8ca <tcp_receive+0xc32>
                    prev->next = cseg;
 801a8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8c4:	697a      	ldr	r2, [r7, #20]
 801a8c6:	601a      	str	r2, [r3, #0]
 801a8c8:	e002      	b.n	801a8d0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	697a      	ldr	r2, [r7, #20]
 801a8ce:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a8d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a8d2:	6978      	ldr	r0, [r7, #20]
 801a8d4:	f7ff f8dc 	bl	8019a90 <tcp_oos_insert_segment>
                }
                break;
 801a8d8:	e139      	b.n	801ab4e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d117      	bne.n	801a910 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a8e0:	4b2e      	ldr	r3, [pc, #184]	; (801a99c <tcp_receive+0xd04>)
 801a8e2:	681a      	ldr	r2, [r3, #0]
 801a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8e6:	68db      	ldr	r3, [r3, #12]
 801a8e8:	685b      	ldr	r3, [r3, #4]
 801a8ea:	1ad3      	subs	r3, r2, r3
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	da57      	bge.n	801a9a0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a8f0:	4829      	ldr	r0, [pc, #164]	; (801a998 <tcp_receive+0xd00>)
 801a8f2:	f7fd fb7d 	bl	8017ff0 <tcp_seg_copy>
 801a8f6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a8f8:	69bb      	ldr	r3, [r7, #24]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	f000 8129 	beq.w	801ab52 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	69ba      	ldr	r2, [r7, #24]
 801a904:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a906:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a908:	69b8      	ldr	r0, [r7, #24]
 801a90a:	f7ff f8c1 	bl	8019a90 <tcp_oos_insert_segment>
                  }
                  break;
 801a90e:	e120      	b.n	801ab52 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a910:	4b22      	ldr	r3, [pc, #136]	; (801a99c <tcp_receive+0xd04>)
 801a912:	681a      	ldr	r2, [r3, #0]
 801a914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a916:	68db      	ldr	r3, [r3, #12]
 801a918:	685b      	ldr	r3, [r3, #4]
 801a91a:	1ad3      	subs	r3, r2, r3
 801a91c:	3b01      	subs	r3, #1
 801a91e:	2b00      	cmp	r3, #0
 801a920:	db3e      	blt.n	801a9a0 <tcp_receive+0xd08>
 801a922:	4b1e      	ldr	r3, [pc, #120]	; (801a99c <tcp_receive+0xd04>)
 801a924:	681a      	ldr	r2, [r3, #0]
 801a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a928:	68db      	ldr	r3, [r3, #12]
 801a92a:	685b      	ldr	r3, [r3, #4]
 801a92c:	1ad3      	subs	r3, r2, r3
 801a92e:	3301      	adds	r3, #1
 801a930:	2b00      	cmp	r3, #0
 801a932:	dc35      	bgt.n	801a9a0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a934:	4818      	ldr	r0, [pc, #96]	; (801a998 <tcp_receive+0xd00>)
 801a936:	f7fd fb5b 	bl	8017ff0 <tcp_seg_copy>
 801a93a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a93c:	69fb      	ldr	r3, [r7, #28]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	f000 8109 	beq.w	801ab56 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a946:	68db      	ldr	r3, [r3, #12]
 801a948:	685b      	ldr	r3, [r3, #4]
 801a94a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a94c:	8912      	ldrh	r2, [r2, #8]
 801a94e:	441a      	add	r2, r3
 801a950:	4b12      	ldr	r3, [pc, #72]	; (801a99c <tcp_receive+0xd04>)
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	1ad3      	subs	r3, r2, r3
 801a956:	2b00      	cmp	r3, #0
 801a958:	dd12      	ble.n	801a980 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a95a:	4b10      	ldr	r3, [pc, #64]	; (801a99c <tcp_receive+0xd04>)
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	b29a      	uxth	r2, r3
 801a960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a962:	68db      	ldr	r3, [r3, #12]
 801a964:	685b      	ldr	r3, [r3, #4]
 801a966:	b29b      	uxth	r3, r3
 801a968:	1ad3      	subs	r3, r2, r3
 801a96a:	b29a      	uxth	r2, r3
 801a96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a96e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a972:	685a      	ldr	r2, [r3, #4]
 801a974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a976:	891b      	ldrh	r3, [r3, #8]
 801a978:	4619      	mov	r1, r3
 801a97a:	4610      	mov	r0, r2
 801a97c:	f7fb ff1a 	bl	80167b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a982:	69fa      	ldr	r2, [r7, #28]
 801a984:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a988:	69f8      	ldr	r0, [r7, #28]
 801a98a:	f7ff f881 	bl	8019a90 <tcp_oos_insert_segment>
                  }
                  break;
 801a98e:	e0e2      	b.n	801ab56 <tcp_receive+0xebe>
 801a990:	200110c8 	.word	0x200110c8
 801a994:	200110c5 	.word	0x200110c5
 801a998:	20011098 	.word	0x20011098
 801a99c:	200110b8 	.word	0x200110b8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9a2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	f040 80c6 	bne.w	801ab3a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a9ae:	4b80      	ldr	r3, [pc, #512]	; (801abb0 <tcp_receive+0xf18>)
 801a9b0:	681a      	ldr	r2, [r3, #0]
 801a9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9b4:	68db      	ldr	r3, [r3, #12]
 801a9b6:	685b      	ldr	r3, [r3, #4]
 801a9b8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	f340 80bd 	ble.w	801ab3a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9c2:	68db      	ldr	r3, [r3, #12]
 801a9c4:	899b      	ldrh	r3, [r3, #12]
 801a9c6:	b29b      	uxth	r3, r3
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f7fa fc87 	bl	80152dc <lwip_htons>
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	b2db      	uxtb	r3, r3
 801a9d2:	f003 0301 	and.w	r3, r3, #1
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	f040 80bf 	bne.w	801ab5a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a9dc:	4875      	ldr	r0, [pc, #468]	; (801abb4 <tcp_receive+0xf1c>)
 801a9de:	f7fd fb07 	bl	8017ff0 <tcp_seg_copy>
 801a9e2:	4602      	mov	r2, r0
 801a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9e6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	f000 80b6 	beq.w	801ab5e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a9f4:	68db      	ldr	r3, [r3, #12]
 801a9f6:	685b      	ldr	r3, [r3, #4]
 801a9f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a9fa:	8912      	ldrh	r2, [r2, #8]
 801a9fc:	441a      	add	r2, r3
 801a9fe:	4b6c      	ldr	r3, [pc, #432]	; (801abb0 <tcp_receive+0xf18>)
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	1ad3      	subs	r3, r2, r3
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	dd12      	ble.n	801aa2e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801aa08:	4b69      	ldr	r3, [pc, #420]	; (801abb0 <tcp_receive+0xf18>)
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	b29a      	uxth	r2, r3
 801aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa10:	68db      	ldr	r3, [r3, #12]
 801aa12:	685b      	ldr	r3, [r3, #4]
 801aa14:	b29b      	uxth	r3, r3
 801aa16:	1ad3      	subs	r3, r2, r3
 801aa18:	b29a      	uxth	r2, r3
 801aa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa1c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801aa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa20:	685a      	ldr	r2, [r3, #4]
 801aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa24:	891b      	ldrh	r3, [r3, #8]
 801aa26:	4619      	mov	r1, r3
 801aa28:	4610      	mov	r0, r2
 801aa2a:	f7fb fec3 	bl	80167b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801aa2e:	4b62      	ldr	r3, [pc, #392]	; (801abb8 <tcp_receive+0xf20>)
 801aa30:	881b      	ldrh	r3, [r3, #0]
 801aa32:	461a      	mov	r2, r3
 801aa34:	4b5e      	ldr	r3, [pc, #376]	; (801abb0 <tcp_receive+0xf18>)
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	441a      	add	r2, r3
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa3e:	6879      	ldr	r1, [r7, #4]
 801aa40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801aa42:	440b      	add	r3, r1
 801aa44:	1ad3      	subs	r3, r2, r3
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	f340 8089 	ble.w	801ab5e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	68db      	ldr	r3, [r3, #12]
 801aa52:	899b      	ldrh	r3, [r3, #12]
 801aa54:	b29b      	uxth	r3, r3
 801aa56:	4618      	mov	r0, r3
 801aa58:	f7fa fc40 	bl	80152dc <lwip_htons>
 801aa5c:	4603      	mov	r3, r0
 801aa5e:	b2db      	uxtb	r3, r3
 801aa60:	f003 0301 	and.w	r3, r3, #1
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d022      	beq.n	801aaae <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	68db      	ldr	r3, [r3, #12]
 801aa6e:	899b      	ldrh	r3, [r3, #12]
 801aa70:	b29b      	uxth	r3, r3
 801aa72:	b21b      	sxth	r3, r3
 801aa74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801aa78:	b21c      	sxth	r4, r3
 801aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	68db      	ldr	r3, [r3, #12]
 801aa80:	899b      	ldrh	r3, [r3, #12]
 801aa82:	b29b      	uxth	r3, r3
 801aa84:	4618      	mov	r0, r3
 801aa86:	f7fa fc29 	bl	80152dc <lwip_htons>
 801aa8a:	4603      	mov	r3, r0
 801aa8c:	b2db      	uxtb	r3, r3
 801aa8e:	b29b      	uxth	r3, r3
 801aa90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801aa94:	b29b      	uxth	r3, r3
 801aa96:	4618      	mov	r0, r3
 801aa98:	f7fa fc20 	bl	80152dc <lwip_htons>
 801aa9c:	4603      	mov	r3, r0
 801aa9e:	b21b      	sxth	r3, r3
 801aaa0:	4323      	orrs	r3, r4
 801aaa2:	b21a      	sxth	r2, r3
 801aaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	68db      	ldr	r3, [r3, #12]
 801aaaa:	b292      	uxth	r2, r2
 801aaac:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aab2:	b29a      	uxth	r2, r3
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aab8:	4413      	add	r3, r2
 801aaba:	b299      	uxth	r1, r3
 801aabc:	4b3c      	ldr	r3, [pc, #240]	; (801abb0 <tcp_receive+0xf18>)
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	b29a      	uxth	r2, r3
 801aac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	1a8a      	subs	r2, r1, r2
 801aac8:	b292      	uxth	r2, r2
 801aaca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801aacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	685a      	ldr	r2, [r3, #4]
 801aad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	891b      	ldrh	r3, [r3, #8]
 801aad8:	4619      	mov	r1, r3
 801aada:	4610      	mov	r0, r2
 801aadc:	f7fb fe6a 	bl	80167b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801aae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	891c      	ldrh	r4, [r3, #8]
 801aae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	68db      	ldr	r3, [r3, #12]
 801aaec:	899b      	ldrh	r3, [r3, #12]
 801aaee:	b29b      	uxth	r3, r3
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	f7fa fbf3 	bl	80152dc <lwip_htons>
 801aaf6:	4603      	mov	r3, r0
 801aaf8:	b2db      	uxtb	r3, r3
 801aafa:	f003 0303 	and.w	r3, r3, #3
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d001      	beq.n	801ab06 <tcp_receive+0xe6e>
 801ab02:	2301      	movs	r3, #1
 801ab04:	e000      	b.n	801ab08 <tcp_receive+0xe70>
 801ab06:	2300      	movs	r3, #0
 801ab08:	4423      	add	r3, r4
 801ab0a:	b29a      	uxth	r2, r3
 801ab0c:	4b2a      	ldr	r3, [pc, #168]	; (801abb8 <tcp_receive+0xf20>)
 801ab0e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ab10:	4b29      	ldr	r3, [pc, #164]	; (801abb8 <tcp_receive+0xf20>)
 801ab12:	881b      	ldrh	r3, [r3, #0]
 801ab14:	461a      	mov	r2, r3
 801ab16:	4b26      	ldr	r3, [pc, #152]	; (801abb0 <tcp_receive+0xf18>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	441a      	add	r2, r3
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab20:	6879      	ldr	r1, [r7, #4]
 801ab22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ab24:	440b      	add	r3, r1
 801ab26:	429a      	cmp	r2, r3
 801ab28:	d019      	beq.n	801ab5e <tcp_receive+0xec6>
 801ab2a:	4b24      	ldr	r3, [pc, #144]	; (801abbc <tcp_receive+0xf24>)
 801ab2c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801ab30:	4923      	ldr	r1, [pc, #140]	; (801abc0 <tcp_receive+0xf28>)
 801ab32:	4824      	ldr	r0, [pc, #144]	; (801abc4 <tcp_receive+0xf2c>)
 801ab34:	f005 f8c8 	bl	801fcc8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801ab38:	e011      	b.n	801ab5e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	63bb      	str	r3, [r7, #56]	; 0x38
 801ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	f47f aea4 	bne.w	801a890 <tcp_receive+0xbf8>
 801ab48:	e00a      	b.n	801ab60 <tcp_receive+0xec8>
                break;
 801ab4a:	bf00      	nop
 801ab4c:	e008      	b.n	801ab60 <tcp_receive+0xec8>
                break;
 801ab4e:	bf00      	nop
 801ab50:	e006      	b.n	801ab60 <tcp_receive+0xec8>
                  break;
 801ab52:	bf00      	nop
 801ab54:	e004      	b.n	801ab60 <tcp_receive+0xec8>
                  break;
 801ab56:	bf00      	nop
 801ab58:	e002      	b.n	801ab60 <tcp_receive+0xec8>
                  break;
 801ab5a:	bf00      	nop
 801ab5c:	e000      	b.n	801ab60 <tcp_receive+0xec8>
                break;
 801ab5e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801ab60:	6878      	ldr	r0, [r7, #4]
 801ab62:	f001 fa33 	bl	801bfcc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801ab66:	e003      	b.n	801ab70 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801ab68:	6878      	ldr	r0, [r7, #4]
 801ab6a:	f001 fa2f 	bl	801bfcc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ab6e:	e01a      	b.n	801aba6 <tcp_receive+0xf0e>
 801ab70:	e019      	b.n	801aba6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801ab72:	4b0f      	ldr	r3, [pc, #60]	; (801abb0 <tcp_receive+0xf18>)
 801ab74:	681a      	ldr	r2, [r3, #0]
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab7a:	1ad3      	subs	r3, r2, r3
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	db0a      	blt.n	801ab96 <tcp_receive+0xefe>
 801ab80:	4b0b      	ldr	r3, [pc, #44]	; (801abb0 <tcp_receive+0xf18>)
 801ab82:	681a      	ldr	r2, [r3, #0]
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab88:	6879      	ldr	r1, [r7, #4]
 801ab8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ab8c:	440b      	add	r3, r1
 801ab8e:	1ad3      	subs	r3, r2, r3
 801ab90:	3301      	adds	r3, #1
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	dd07      	ble.n	801aba6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	8b5b      	ldrh	r3, [r3, #26]
 801ab9a:	f043 0302 	orr.w	r3, r3, #2
 801ab9e:	b29a      	uxth	r2, r3
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801aba4:	e7ff      	b.n	801aba6 <tcp_receive+0xf0e>
 801aba6:	bf00      	nop
 801aba8:	3750      	adds	r7, #80	; 0x50
 801abaa:	46bd      	mov	sp, r7
 801abac:	bdb0      	pop	{r4, r5, r7, pc}
 801abae:	bf00      	nop
 801abb0:	200110b8 	.word	0x200110b8
 801abb4:	20011098 	.word	0x20011098
 801abb8:	200110c2 	.word	0x200110c2
 801abbc:	08021c84 	.word	0x08021c84
 801abc0:	0802202c 	.word	0x0802202c
 801abc4:	08021cd0 	.word	0x08021cd0

0801abc8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801abc8:	b480      	push	{r7}
 801abca:	b083      	sub	sp, #12
 801abcc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801abce:	4b15      	ldr	r3, [pc, #84]	; (801ac24 <tcp_get_next_optbyte+0x5c>)
 801abd0:	881b      	ldrh	r3, [r3, #0]
 801abd2:	1c5a      	adds	r2, r3, #1
 801abd4:	b291      	uxth	r1, r2
 801abd6:	4a13      	ldr	r2, [pc, #76]	; (801ac24 <tcp_get_next_optbyte+0x5c>)
 801abd8:	8011      	strh	r1, [r2, #0]
 801abda:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801abdc:	4b12      	ldr	r3, [pc, #72]	; (801ac28 <tcp_get_next_optbyte+0x60>)
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d004      	beq.n	801abee <tcp_get_next_optbyte+0x26>
 801abe4:	4b11      	ldr	r3, [pc, #68]	; (801ac2c <tcp_get_next_optbyte+0x64>)
 801abe6:	881b      	ldrh	r3, [r3, #0]
 801abe8:	88fa      	ldrh	r2, [r7, #6]
 801abea:	429a      	cmp	r2, r3
 801abec:	d208      	bcs.n	801ac00 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801abee:	4b10      	ldr	r3, [pc, #64]	; (801ac30 <tcp_get_next_optbyte+0x68>)
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	3314      	adds	r3, #20
 801abf4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801abf6:	88fb      	ldrh	r3, [r7, #6]
 801abf8:	683a      	ldr	r2, [r7, #0]
 801abfa:	4413      	add	r3, r2
 801abfc:	781b      	ldrb	r3, [r3, #0]
 801abfe:	e00b      	b.n	801ac18 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ac00:	88fb      	ldrh	r3, [r7, #6]
 801ac02:	b2da      	uxtb	r2, r3
 801ac04:	4b09      	ldr	r3, [pc, #36]	; (801ac2c <tcp_get_next_optbyte+0x64>)
 801ac06:	881b      	ldrh	r3, [r3, #0]
 801ac08:	b2db      	uxtb	r3, r3
 801ac0a:	1ad3      	subs	r3, r2, r3
 801ac0c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801ac0e:	4b06      	ldr	r3, [pc, #24]	; (801ac28 <tcp_get_next_optbyte+0x60>)
 801ac10:	681a      	ldr	r2, [r3, #0]
 801ac12:	797b      	ldrb	r3, [r7, #5]
 801ac14:	4413      	add	r3, r2
 801ac16:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	370c      	adds	r7, #12
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac22:	4770      	bx	lr
 801ac24:	200110b4 	.word	0x200110b4
 801ac28:	200110b0 	.word	0x200110b0
 801ac2c:	200110ae 	.word	0x200110ae
 801ac30:	200110a8 	.word	0x200110a8

0801ac34 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801ac34:	b580      	push	{r7, lr}
 801ac36:	b084      	sub	sp, #16
 801ac38:	af00      	add	r7, sp, #0
 801ac3a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d106      	bne.n	801ac50 <tcp_parseopt+0x1c>
 801ac42:	4b32      	ldr	r3, [pc, #200]	; (801ad0c <tcp_parseopt+0xd8>)
 801ac44:	f240 727d 	movw	r2, #1917	; 0x77d
 801ac48:	4931      	ldr	r1, [pc, #196]	; (801ad10 <tcp_parseopt+0xdc>)
 801ac4a:	4832      	ldr	r0, [pc, #200]	; (801ad14 <tcp_parseopt+0xe0>)
 801ac4c:	f005 f83c 	bl	801fcc8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801ac50:	4b31      	ldr	r3, [pc, #196]	; (801ad18 <tcp_parseopt+0xe4>)
 801ac52:	881b      	ldrh	r3, [r3, #0]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d055      	beq.n	801ad04 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ac58:	4b30      	ldr	r3, [pc, #192]	; (801ad1c <tcp_parseopt+0xe8>)
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	801a      	strh	r2, [r3, #0]
 801ac5e:	e045      	b.n	801acec <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801ac60:	f7ff ffb2 	bl	801abc8 <tcp_get_next_optbyte>
 801ac64:	4603      	mov	r3, r0
 801ac66:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801ac68:	7bfb      	ldrb	r3, [r7, #15]
 801ac6a:	2b02      	cmp	r3, #2
 801ac6c:	d006      	beq.n	801ac7c <tcp_parseopt+0x48>
 801ac6e:	2b02      	cmp	r3, #2
 801ac70:	dc2b      	bgt.n	801acca <tcp_parseopt+0x96>
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d041      	beq.n	801acfa <tcp_parseopt+0xc6>
 801ac76:	2b01      	cmp	r3, #1
 801ac78:	d127      	bne.n	801acca <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801ac7a:	e037      	b.n	801acec <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801ac7c:	f7ff ffa4 	bl	801abc8 <tcp_get_next_optbyte>
 801ac80:	4603      	mov	r3, r0
 801ac82:	2b04      	cmp	r3, #4
 801ac84:	d13b      	bne.n	801acfe <tcp_parseopt+0xca>
 801ac86:	4b25      	ldr	r3, [pc, #148]	; (801ad1c <tcp_parseopt+0xe8>)
 801ac88:	881b      	ldrh	r3, [r3, #0]
 801ac8a:	3301      	adds	r3, #1
 801ac8c:	4a22      	ldr	r2, [pc, #136]	; (801ad18 <tcp_parseopt+0xe4>)
 801ac8e:	8812      	ldrh	r2, [r2, #0]
 801ac90:	4293      	cmp	r3, r2
 801ac92:	da34      	bge.n	801acfe <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ac94:	f7ff ff98 	bl	801abc8 <tcp_get_next_optbyte>
 801ac98:	4603      	mov	r3, r0
 801ac9a:	b29b      	uxth	r3, r3
 801ac9c:	021b      	lsls	r3, r3, #8
 801ac9e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801aca0:	f7ff ff92 	bl	801abc8 <tcp_get_next_optbyte>
 801aca4:	4603      	mov	r3, r0
 801aca6:	b29a      	uxth	r2, r3
 801aca8:	89bb      	ldrh	r3, [r7, #12]
 801acaa:	4313      	orrs	r3, r2
 801acac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801acae:	89bb      	ldrh	r3, [r7, #12]
 801acb0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801acb4:	d804      	bhi.n	801acc0 <tcp_parseopt+0x8c>
 801acb6:	89bb      	ldrh	r3, [r7, #12]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d001      	beq.n	801acc0 <tcp_parseopt+0x8c>
 801acbc:	89ba      	ldrh	r2, [r7, #12]
 801acbe:	e001      	b.n	801acc4 <tcp_parseopt+0x90>
 801acc0:	f44f 7206 	mov.w	r2, #536	; 0x218
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801acc8:	e010      	b.n	801acec <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801acca:	f7ff ff7d 	bl	801abc8 <tcp_get_next_optbyte>
 801acce:	4603      	mov	r3, r0
 801acd0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801acd2:	7afb      	ldrb	r3, [r7, #11]
 801acd4:	2b01      	cmp	r3, #1
 801acd6:	d914      	bls.n	801ad02 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801acd8:	7afb      	ldrb	r3, [r7, #11]
 801acda:	b29a      	uxth	r2, r3
 801acdc:	4b0f      	ldr	r3, [pc, #60]	; (801ad1c <tcp_parseopt+0xe8>)
 801acde:	881b      	ldrh	r3, [r3, #0]
 801ace0:	4413      	add	r3, r2
 801ace2:	b29b      	uxth	r3, r3
 801ace4:	3b02      	subs	r3, #2
 801ace6:	b29a      	uxth	r2, r3
 801ace8:	4b0c      	ldr	r3, [pc, #48]	; (801ad1c <tcp_parseopt+0xe8>)
 801acea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801acec:	4b0b      	ldr	r3, [pc, #44]	; (801ad1c <tcp_parseopt+0xe8>)
 801acee:	881a      	ldrh	r2, [r3, #0]
 801acf0:	4b09      	ldr	r3, [pc, #36]	; (801ad18 <tcp_parseopt+0xe4>)
 801acf2:	881b      	ldrh	r3, [r3, #0]
 801acf4:	429a      	cmp	r2, r3
 801acf6:	d3b3      	bcc.n	801ac60 <tcp_parseopt+0x2c>
 801acf8:	e004      	b.n	801ad04 <tcp_parseopt+0xd0>
          return;
 801acfa:	bf00      	nop
 801acfc:	e002      	b.n	801ad04 <tcp_parseopt+0xd0>
            return;
 801acfe:	bf00      	nop
 801ad00:	e000      	b.n	801ad04 <tcp_parseopt+0xd0>
            return;
 801ad02:	bf00      	nop
      }
    }
  }
}
 801ad04:	3710      	adds	r7, #16
 801ad06:	46bd      	mov	sp, r7
 801ad08:	bd80      	pop	{r7, pc}
 801ad0a:	bf00      	nop
 801ad0c:	08021c84 	.word	0x08021c84
 801ad10:	080220e8 	.word	0x080220e8
 801ad14:	08021cd0 	.word	0x08021cd0
 801ad18:	200110ac 	.word	0x200110ac
 801ad1c:	200110b4 	.word	0x200110b4

0801ad20 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801ad20:	b480      	push	{r7}
 801ad22:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801ad24:	4b05      	ldr	r3, [pc, #20]	; (801ad3c <tcp_trigger_input_pcb_close+0x1c>)
 801ad26:	781b      	ldrb	r3, [r3, #0]
 801ad28:	f043 0310 	orr.w	r3, r3, #16
 801ad2c:	b2da      	uxtb	r2, r3
 801ad2e:	4b03      	ldr	r3, [pc, #12]	; (801ad3c <tcp_trigger_input_pcb_close+0x1c>)
 801ad30:	701a      	strb	r2, [r3, #0]
}
 801ad32:	bf00      	nop
 801ad34:	46bd      	mov	sp, r7
 801ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad3a:	4770      	bx	lr
 801ad3c:	200110c5 	.word	0x200110c5

0801ad40 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801ad40:	b580      	push	{r7, lr}
 801ad42:	b084      	sub	sp, #16
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	60f8      	str	r0, [r7, #12]
 801ad48:	60b9      	str	r1, [r7, #8]
 801ad4a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d00a      	beq.n	801ad68 <tcp_route+0x28>
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	7a1b      	ldrb	r3, [r3, #8]
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d006      	beq.n	801ad68 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	7a1b      	ldrb	r3, [r3, #8]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f7fb fb20 	bl	80163a4 <netif_get_by_index>
 801ad64:	4603      	mov	r3, r0
 801ad66:	e003      	b.n	801ad70 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801ad68:	6878      	ldr	r0, [r7, #4]
 801ad6a:	f002 fead 	bl	801dac8 <ip4_route>
 801ad6e:	4603      	mov	r3, r0
  }
}
 801ad70:	4618      	mov	r0, r3
 801ad72:	3710      	adds	r7, #16
 801ad74:	46bd      	mov	sp, r7
 801ad76:	bd80      	pop	{r7, pc}

0801ad78 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801ad78:	b590      	push	{r4, r7, lr}
 801ad7a:	b087      	sub	sp, #28
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	60f8      	str	r0, [r7, #12]
 801ad80:	60b9      	str	r1, [r7, #8]
 801ad82:	603b      	str	r3, [r7, #0]
 801ad84:	4613      	mov	r3, r2
 801ad86:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d105      	bne.n	801ad9a <tcp_create_segment+0x22>
 801ad8e:	4b44      	ldr	r3, [pc, #272]	; (801aea0 <tcp_create_segment+0x128>)
 801ad90:	22a3      	movs	r2, #163	; 0xa3
 801ad92:	4944      	ldr	r1, [pc, #272]	; (801aea4 <tcp_create_segment+0x12c>)
 801ad94:	4844      	ldr	r0, [pc, #272]	; (801aea8 <tcp_create_segment+0x130>)
 801ad96:	f004 ff97 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d105      	bne.n	801adac <tcp_create_segment+0x34>
 801ada0:	4b3f      	ldr	r3, [pc, #252]	; (801aea0 <tcp_create_segment+0x128>)
 801ada2:	22a4      	movs	r2, #164	; 0xa4
 801ada4:	4941      	ldr	r1, [pc, #260]	; (801aeac <tcp_create_segment+0x134>)
 801ada6:	4840      	ldr	r0, [pc, #256]	; (801aea8 <tcp_create_segment+0x130>)
 801ada8:	f004 ff8e 	bl	801fcc8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801adac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801adb0:	009b      	lsls	r3, r3, #2
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	f003 0304 	and.w	r3, r3, #4
 801adb8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801adba:	2003      	movs	r0, #3
 801adbc:	f7fa ff66 	bl	8015c8c <memp_malloc>
 801adc0:	6138      	str	r0, [r7, #16]
 801adc2:	693b      	ldr	r3, [r7, #16]
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d104      	bne.n	801add2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801adc8:	68b8      	ldr	r0, [r7, #8]
 801adca:	f7fb fe79 	bl	8016ac0 <pbuf_free>
    return NULL;
 801adce:	2300      	movs	r3, #0
 801add0:	e061      	b.n	801ae96 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801add2:	693b      	ldr	r3, [r7, #16]
 801add4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801add8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801adda:	693b      	ldr	r3, [r7, #16]
 801addc:	2200      	movs	r2, #0
 801adde:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801ade0:	693b      	ldr	r3, [r7, #16]
 801ade2:	68ba      	ldr	r2, [r7, #8]
 801ade4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ade6:	68bb      	ldr	r3, [r7, #8]
 801ade8:	891a      	ldrh	r2, [r3, #8]
 801adea:	7dfb      	ldrb	r3, [r7, #23]
 801adec:	b29b      	uxth	r3, r3
 801adee:	429a      	cmp	r2, r3
 801adf0:	d205      	bcs.n	801adfe <tcp_create_segment+0x86>
 801adf2:	4b2b      	ldr	r3, [pc, #172]	; (801aea0 <tcp_create_segment+0x128>)
 801adf4:	22b0      	movs	r2, #176	; 0xb0
 801adf6:	492e      	ldr	r1, [pc, #184]	; (801aeb0 <tcp_create_segment+0x138>)
 801adf8:	482b      	ldr	r0, [pc, #172]	; (801aea8 <tcp_create_segment+0x130>)
 801adfa:	f004 ff65 	bl	801fcc8 <iprintf>
  seg->len = p->tot_len - optlen;
 801adfe:	68bb      	ldr	r3, [r7, #8]
 801ae00:	891a      	ldrh	r2, [r3, #8]
 801ae02:	7dfb      	ldrb	r3, [r7, #23]
 801ae04:	b29b      	uxth	r3, r3
 801ae06:	1ad3      	subs	r3, r2, r3
 801ae08:	b29a      	uxth	r2, r3
 801ae0a:	693b      	ldr	r3, [r7, #16]
 801ae0c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ae0e:	2114      	movs	r1, #20
 801ae10:	68b8      	ldr	r0, [r7, #8]
 801ae12:	f7fb fdbf 	bl	8016994 <pbuf_add_header>
 801ae16:	4603      	mov	r3, r0
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d004      	beq.n	801ae26 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801ae1c:	6938      	ldr	r0, [r7, #16]
 801ae1e:	f7fd f8ce 	bl	8017fbe <tcp_seg_free>
    return NULL;
 801ae22:	2300      	movs	r3, #0
 801ae24:	e037      	b.n	801ae96 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ae26:	693b      	ldr	r3, [r7, #16]
 801ae28:	685b      	ldr	r3, [r3, #4]
 801ae2a:	685a      	ldr	r2, [r3, #4]
 801ae2c:	693b      	ldr	r3, [r7, #16]
 801ae2e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	8ada      	ldrh	r2, [r3, #22]
 801ae34:	693b      	ldr	r3, [r7, #16]
 801ae36:	68dc      	ldr	r4, [r3, #12]
 801ae38:	4610      	mov	r0, r2
 801ae3a:	f7fa fa4f 	bl	80152dc <lwip_htons>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	8b1a      	ldrh	r2, [r3, #24]
 801ae46:	693b      	ldr	r3, [r7, #16]
 801ae48:	68dc      	ldr	r4, [r3, #12]
 801ae4a:	4610      	mov	r0, r2
 801ae4c:	f7fa fa46 	bl	80152dc <lwip_htons>
 801ae50:	4603      	mov	r3, r0
 801ae52:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ae54:	693b      	ldr	r3, [r7, #16]
 801ae56:	68dc      	ldr	r4, [r3, #12]
 801ae58:	6838      	ldr	r0, [r7, #0]
 801ae5a:	f7fa fa54 	bl	8015306 <lwip_htonl>
 801ae5e:	4603      	mov	r3, r0
 801ae60:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ae62:	7dfb      	ldrb	r3, [r7, #23]
 801ae64:	089b      	lsrs	r3, r3, #2
 801ae66:	b2db      	uxtb	r3, r3
 801ae68:	b29b      	uxth	r3, r3
 801ae6a:	3305      	adds	r3, #5
 801ae6c:	b29b      	uxth	r3, r3
 801ae6e:	031b      	lsls	r3, r3, #12
 801ae70:	b29a      	uxth	r2, r3
 801ae72:	79fb      	ldrb	r3, [r7, #7]
 801ae74:	b29b      	uxth	r3, r3
 801ae76:	4313      	orrs	r3, r2
 801ae78:	b29a      	uxth	r2, r3
 801ae7a:	693b      	ldr	r3, [r7, #16]
 801ae7c:	68dc      	ldr	r4, [r3, #12]
 801ae7e:	4610      	mov	r0, r2
 801ae80:	f7fa fa2c 	bl	80152dc <lwip_htons>
 801ae84:	4603      	mov	r3, r0
 801ae86:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801ae88:	693b      	ldr	r3, [r7, #16]
 801ae8a:	68db      	ldr	r3, [r3, #12]
 801ae8c:	2200      	movs	r2, #0
 801ae8e:	749a      	strb	r2, [r3, #18]
 801ae90:	2200      	movs	r2, #0
 801ae92:	74da      	strb	r2, [r3, #19]
  return seg;
 801ae94:	693b      	ldr	r3, [r7, #16]
}
 801ae96:	4618      	mov	r0, r3
 801ae98:	371c      	adds	r7, #28
 801ae9a:	46bd      	mov	sp, r7
 801ae9c:	bd90      	pop	{r4, r7, pc}
 801ae9e:	bf00      	nop
 801aea0:	08022104 	.word	0x08022104
 801aea4:	08022138 	.word	0x08022138
 801aea8:	08022158 	.word	0x08022158
 801aeac:	08022180 	.word	0x08022180
 801aeb0:	080221a4 	.word	0x080221a4

0801aeb4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801aeb4:	b590      	push	{r4, r7, lr}
 801aeb6:	b08b      	sub	sp, #44	; 0x2c
 801aeb8:	af02      	add	r7, sp, #8
 801aeba:	6078      	str	r0, [r7, #4]
 801aebc:	460b      	mov	r3, r1
 801aebe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801aec0:	2300      	movs	r3, #0
 801aec2:	61fb      	str	r3, [r7, #28]
 801aec4:	2300      	movs	r3, #0
 801aec6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801aec8:	2300      	movs	r3, #0
 801aeca:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d106      	bne.n	801aee0 <tcp_split_unsent_seg+0x2c>
 801aed2:	4b95      	ldr	r3, [pc, #596]	; (801b128 <tcp_split_unsent_seg+0x274>)
 801aed4:	f240 324b 	movw	r2, #843	; 0x34b
 801aed8:	4994      	ldr	r1, [pc, #592]	; (801b12c <tcp_split_unsent_seg+0x278>)
 801aeda:	4895      	ldr	r0, [pc, #596]	; (801b130 <tcp_split_unsent_seg+0x27c>)
 801aedc:	f004 fef4 	bl	801fcc8 <iprintf>

  useg = pcb->unsent;
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aee4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801aee6:	697b      	ldr	r3, [r7, #20]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d102      	bne.n	801aef2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801aeec:	f04f 33ff 	mov.w	r3, #4294967295
 801aef0:	e116      	b.n	801b120 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801aef2:	887b      	ldrh	r3, [r7, #2]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d109      	bne.n	801af0c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801aef8:	4b8b      	ldr	r3, [pc, #556]	; (801b128 <tcp_split_unsent_seg+0x274>)
 801aefa:	f240 3253 	movw	r2, #851	; 0x353
 801aefe:	498d      	ldr	r1, [pc, #564]	; (801b134 <tcp_split_unsent_seg+0x280>)
 801af00:	488b      	ldr	r0, [pc, #556]	; (801b130 <tcp_split_unsent_seg+0x27c>)
 801af02:	f004 fee1 	bl	801fcc8 <iprintf>
    return ERR_VAL;
 801af06:	f06f 0305 	mvn.w	r3, #5
 801af0a:	e109      	b.n	801b120 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801af0c:	697b      	ldr	r3, [r7, #20]
 801af0e:	891b      	ldrh	r3, [r3, #8]
 801af10:	887a      	ldrh	r2, [r7, #2]
 801af12:	429a      	cmp	r2, r3
 801af14:	d301      	bcc.n	801af1a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801af16:	2300      	movs	r3, #0
 801af18:	e102      	b.n	801b120 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801af1e:	887a      	ldrh	r2, [r7, #2]
 801af20:	429a      	cmp	r2, r3
 801af22:	d906      	bls.n	801af32 <tcp_split_unsent_seg+0x7e>
 801af24:	4b80      	ldr	r3, [pc, #512]	; (801b128 <tcp_split_unsent_seg+0x274>)
 801af26:	f240 325b 	movw	r2, #859	; 0x35b
 801af2a:	4983      	ldr	r1, [pc, #524]	; (801b138 <tcp_split_unsent_seg+0x284>)
 801af2c:	4880      	ldr	r0, [pc, #512]	; (801b130 <tcp_split_unsent_seg+0x27c>)
 801af2e:	f004 fecb 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801af32:	697b      	ldr	r3, [r7, #20]
 801af34:	891b      	ldrh	r3, [r3, #8]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d106      	bne.n	801af48 <tcp_split_unsent_seg+0x94>
 801af3a:	4b7b      	ldr	r3, [pc, #492]	; (801b128 <tcp_split_unsent_seg+0x274>)
 801af3c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801af40:	497e      	ldr	r1, [pc, #504]	; (801b13c <tcp_split_unsent_seg+0x288>)
 801af42:	487b      	ldr	r0, [pc, #492]	; (801b130 <tcp_split_unsent_seg+0x27c>)
 801af44:	f004 fec0 	bl	801fcc8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801af48:	697b      	ldr	r3, [r7, #20]
 801af4a:	7a9b      	ldrb	r3, [r3, #10]
 801af4c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801af4e:	7bfb      	ldrb	r3, [r7, #15]
 801af50:	009b      	lsls	r3, r3, #2
 801af52:	b2db      	uxtb	r3, r3
 801af54:	f003 0304 	and.w	r3, r3, #4
 801af58:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801af5a:	697b      	ldr	r3, [r7, #20]
 801af5c:	891a      	ldrh	r2, [r3, #8]
 801af5e:	887b      	ldrh	r3, [r7, #2]
 801af60:	1ad3      	subs	r3, r2, r3
 801af62:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801af64:	7bbb      	ldrb	r3, [r7, #14]
 801af66:	b29a      	uxth	r2, r3
 801af68:	89bb      	ldrh	r3, [r7, #12]
 801af6a:	4413      	add	r3, r2
 801af6c:	b29b      	uxth	r3, r3
 801af6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801af72:	4619      	mov	r1, r3
 801af74:	2036      	movs	r0, #54	; 0x36
 801af76:	f7fb fabf 	bl	80164f8 <pbuf_alloc>
 801af7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801af7c:	693b      	ldr	r3, [r7, #16]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	f000 80b7 	beq.w	801b0f2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801af84:	697b      	ldr	r3, [r7, #20]
 801af86:	685b      	ldr	r3, [r3, #4]
 801af88:	891a      	ldrh	r2, [r3, #8]
 801af8a:	697b      	ldr	r3, [r7, #20]
 801af8c:	891b      	ldrh	r3, [r3, #8]
 801af8e:	1ad3      	subs	r3, r2, r3
 801af90:	b29a      	uxth	r2, r3
 801af92:	887b      	ldrh	r3, [r7, #2]
 801af94:	4413      	add	r3, r2
 801af96:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	6858      	ldr	r0, [r3, #4]
 801af9c:	693b      	ldr	r3, [r7, #16]
 801af9e:	685a      	ldr	r2, [r3, #4]
 801afa0:	7bbb      	ldrb	r3, [r7, #14]
 801afa2:	18d1      	adds	r1, r2, r3
 801afa4:	897b      	ldrh	r3, [r7, #10]
 801afa6:	89ba      	ldrh	r2, [r7, #12]
 801afa8:	f7fb ff80 	bl	8016eac <pbuf_copy_partial>
 801afac:	4603      	mov	r3, r0
 801afae:	461a      	mov	r2, r3
 801afb0:	89bb      	ldrh	r3, [r7, #12]
 801afb2:	4293      	cmp	r3, r2
 801afb4:	f040 809f 	bne.w	801b0f6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801afb8:	697b      	ldr	r3, [r7, #20]
 801afba:	68db      	ldr	r3, [r3, #12]
 801afbc:	899b      	ldrh	r3, [r3, #12]
 801afbe:	b29b      	uxth	r3, r3
 801afc0:	4618      	mov	r0, r3
 801afc2:	f7fa f98b 	bl	80152dc <lwip_htons>
 801afc6:	4603      	mov	r3, r0
 801afc8:	b2db      	uxtb	r3, r3
 801afca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801afce:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801afd0:	2300      	movs	r3, #0
 801afd2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801afd4:	7efb      	ldrb	r3, [r7, #27]
 801afd6:	f003 0308 	and.w	r3, r3, #8
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d007      	beq.n	801afee <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801afde:	7efb      	ldrb	r3, [r7, #27]
 801afe0:	f023 0308 	bic.w	r3, r3, #8
 801afe4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801afe6:	7ebb      	ldrb	r3, [r7, #26]
 801afe8:	f043 0308 	orr.w	r3, r3, #8
 801afec:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801afee:	7efb      	ldrb	r3, [r7, #27]
 801aff0:	f003 0301 	and.w	r3, r3, #1
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d007      	beq.n	801b008 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801aff8:	7efb      	ldrb	r3, [r7, #27]
 801affa:	f023 0301 	bic.w	r3, r3, #1
 801affe:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801b000:	7ebb      	ldrb	r3, [r7, #26]
 801b002:	f043 0301 	orr.w	r3, r3, #1
 801b006:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b008:	697b      	ldr	r3, [r7, #20]
 801b00a:	68db      	ldr	r3, [r3, #12]
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	4618      	mov	r0, r3
 801b010:	f7fa f979 	bl	8015306 <lwip_htonl>
 801b014:	4602      	mov	r2, r0
 801b016:	887b      	ldrh	r3, [r7, #2]
 801b018:	18d1      	adds	r1, r2, r3
 801b01a:	7eba      	ldrb	r2, [r7, #26]
 801b01c:	7bfb      	ldrb	r3, [r7, #15]
 801b01e:	9300      	str	r3, [sp, #0]
 801b020:	460b      	mov	r3, r1
 801b022:	6939      	ldr	r1, [r7, #16]
 801b024:	6878      	ldr	r0, [r7, #4]
 801b026:	f7ff fea7 	bl	801ad78 <tcp_create_segment>
 801b02a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801b02c:	69fb      	ldr	r3, [r7, #28]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d063      	beq.n	801b0fa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b032:	697b      	ldr	r3, [r7, #20]
 801b034:	685b      	ldr	r3, [r3, #4]
 801b036:	4618      	mov	r0, r3
 801b038:	f7fb fdd0 	bl	8016bdc <pbuf_clen>
 801b03c:	4603      	mov	r3, r0
 801b03e:	461a      	mov	r2, r3
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b046:	1a9b      	subs	r3, r3, r2
 801b048:	b29a      	uxth	r2, r3
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b050:	697b      	ldr	r3, [r7, #20]
 801b052:	6858      	ldr	r0, [r3, #4]
 801b054:	697b      	ldr	r3, [r7, #20]
 801b056:	685b      	ldr	r3, [r3, #4]
 801b058:	891a      	ldrh	r2, [r3, #8]
 801b05a:	89bb      	ldrh	r3, [r7, #12]
 801b05c:	1ad3      	subs	r3, r2, r3
 801b05e:	b29b      	uxth	r3, r3
 801b060:	4619      	mov	r1, r3
 801b062:	f7fb fba7 	bl	80167b4 <pbuf_realloc>
  useg->len -= remainder;
 801b066:	697b      	ldr	r3, [r7, #20]
 801b068:	891a      	ldrh	r2, [r3, #8]
 801b06a:	89bb      	ldrh	r3, [r7, #12]
 801b06c:	1ad3      	subs	r3, r2, r3
 801b06e:	b29a      	uxth	r2, r3
 801b070:	697b      	ldr	r3, [r7, #20]
 801b072:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b074:	697b      	ldr	r3, [r7, #20]
 801b076:	68db      	ldr	r3, [r3, #12]
 801b078:	899b      	ldrh	r3, [r3, #12]
 801b07a:	b29c      	uxth	r4, r3
 801b07c:	7efb      	ldrb	r3, [r7, #27]
 801b07e:	b29b      	uxth	r3, r3
 801b080:	4618      	mov	r0, r3
 801b082:	f7fa f92b 	bl	80152dc <lwip_htons>
 801b086:	4603      	mov	r3, r0
 801b088:	461a      	mov	r2, r3
 801b08a:	697b      	ldr	r3, [r7, #20]
 801b08c:	68db      	ldr	r3, [r3, #12]
 801b08e:	4322      	orrs	r2, r4
 801b090:	b292      	uxth	r2, r2
 801b092:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b094:	697b      	ldr	r3, [r7, #20]
 801b096:	685b      	ldr	r3, [r3, #4]
 801b098:	4618      	mov	r0, r3
 801b09a:	f7fb fd9f 	bl	8016bdc <pbuf_clen>
 801b09e:	4603      	mov	r3, r0
 801b0a0:	461a      	mov	r2, r3
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b0a8:	4413      	add	r3, r2
 801b0aa:	b29a      	uxth	r2, r3
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b0b2:	69fb      	ldr	r3, [r7, #28]
 801b0b4:	685b      	ldr	r3, [r3, #4]
 801b0b6:	4618      	mov	r0, r3
 801b0b8:	f7fb fd90 	bl	8016bdc <pbuf_clen>
 801b0bc:	4603      	mov	r3, r0
 801b0be:	461a      	mov	r2, r3
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b0c6:	4413      	add	r3, r2
 801b0c8:	b29a      	uxth	r2, r3
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801b0d0:	697b      	ldr	r3, [r7, #20]
 801b0d2:	681a      	ldr	r2, [r3, #0]
 801b0d4:	69fb      	ldr	r3, [r7, #28]
 801b0d6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801b0d8:	697b      	ldr	r3, [r7, #20]
 801b0da:	69fa      	ldr	r2, [r7, #28]
 801b0dc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801b0de:	69fb      	ldr	r3, [r7, #28]
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d103      	bne.n	801b0ee <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	2200      	movs	r2, #0
 801b0ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	e016      	b.n	801b120 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801b0f2:	bf00      	nop
 801b0f4:	e002      	b.n	801b0fc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b0f6:	bf00      	nop
 801b0f8:	e000      	b.n	801b0fc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801b0fa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801b0fc:	69fb      	ldr	r3, [r7, #28]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d006      	beq.n	801b110 <tcp_split_unsent_seg+0x25c>
 801b102:	4b09      	ldr	r3, [pc, #36]	; (801b128 <tcp_split_unsent_seg+0x274>)
 801b104:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801b108:	490d      	ldr	r1, [pc, #52]	; (801b140 <tcp_split_unsent_seg+0x28c>)
 801b10a:	4809      	ldr	r0, [pc, #36]	; (801b130 <tcp_split_unsent_seg+0x27c>)
 801b10c:	f004 fddc 	bl	801fcc8 <iprintf>
  if (p != NULL) {
 801b110:	693b      	ldr	r3, [r7, #16]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d002      	beq.n	801b11c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801b116:	6938      	ldr	r0, [r7, #16]
 801b118:	f7fb fcd2 	bl	8016ac0 <pbuf_free>
  }

  return ERR_MEM;
 801b11c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b120:	4618      	mov	r0, r3
 801b122:	3724      	adds	r7, #36	; 0x24
 801b124:	46bd      	mov	sp, r7
 801b126:	bd90      	pop	{r4, r7, pc}
 801b128:	08022104 	.word	0x08022104
 801b12c:	08022498 	.word	0x08022498
 801b130:	08022158 	.word	0x08022158
 801b134:	080224bc 	.word	0x080224bc
 801b138:	080224e0 	.word	0x080224e0
 801b13c:	080224f0 	.word	0x080224f0
 801b140:	08022500 	.word	0x08022500

0801b144 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801b144:	b590      	push	{r4, r7, lr}
 801b146:	b085      	sub	sp, #20
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b14c:	687b      	ldr	r3, [r7, #4]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d106      	bne.n	801b160 <tcp_send_fin+0x1c>
 801b152:	4b21      	ldr	r3, [pc, #132]	; (801b1d8 <tcp_send_fin+0x94>)
 801b154:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801b158:	4920      	ldr	r1, [pc, #128]	; (801b1dc <tcp_send_fin+0x98>)
 801b15a:	4821      	ldr	r0, [pc, #132]	; (801b1e0 <tcp_send_fin+0x9c>)
 801b15c:	f004 fdb4 	bl	801fcc8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b164:	2b00      	cmp	r3, #0
 801b166:	d02e      	beq.n	801b1c6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b16c:	60fb      	str	r3, [r7, #12]
 801b16e:	e002      	b.n	801b176 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d1f8      	bne.n	801b170 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	68db      	ldr	r3, [r3, #12]
 801b182:	899b      	ldrh	r3, [r3, #12]
 801b184:	b29b      	uxth	r3, r3
 801b186:	4618      	mov	r0, r3
 801b188:	f7fa f8a8 	bl	80152dc <lwip_htons>
 801b18c:	4603      	mov	r3, r0
 801b18e:	b2db      	uxtb	r3, r3
 801b190:	f003 0307 	and.w	r3, r3, #7
 801b194:	2b00      	cmp	r3, #0
 801b196:	d116      	bne.n	801b1c6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	68db      	ldr	r3, [r3, #12]
 801b19c:	899b      	ldrh	r3, [r3, #12]
 801b19e:	b29c      	uxth	r4, r3
 801b1a0:	2001      	movs	r0, #1
 801b1a2:	f7fa f89b 	bl	80152dc <lwip_htons>
 801b1a6:	4603      	mov	r3, r0
 801b1a8:	461a      	mov	r2, r3
 801b1aa:	68fb      	ldr	r3, [r7, #12]
 801b1ac:	68db      	ldr	r3, [r3, #12]
 801b1ae:	4322      	orrs	r2, r4
 801b1b0:	b292      	uxth	r2, r2
 801b1b2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	8b5b      	ldrh	r3, [r3, #26]
 801b1b8:	f043 0320 	orr.w	r3, r3, #32
 801b1bc:	b29a      	uxth	r2, r3
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	e004      	b.n	801b1d0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b1c6:	2101      	movs	r1, #1
 801b1c8:	6878      	ldr	r0, [r7, #4]
 801b1ca:	f000 f80b 	bl	801b1e4 <tcp_enqueue_flags>
 801b1ce:	4603      	mov	r3, r0
}
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	3714      	adds	r7, #20
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	bd90      	pop	{r4, r7, pc}
 801b1d8:	08022104 	.word	0x08022104
 801b1dc:	0802250c 	.word	0x0802250c
 801b1e0:	08022158 	.word	0x08022158

0801b1e4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801b1e4:	b580      	push	{r7, lr}
 801b1e6:	b08a      	sub	sp, #40	; 0x28
 801b1e8:	af02      	add	r7, sp, #8
 801b1ea:	6078      	str	r0, [r7, #4]
 801b1ec:	460b      	mov	r3, r1
 801b1ee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801b1f0:	2300      	movs	r3, #0
 801b1f2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b1f8:	78fb      	ldrb	r3, [r7, #3]
 801b1fa:	f003 0303 	and.w	r3, r3, #3
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d106      	bne.n	801b210 <tcp_enqueue_flags+0x2c>
 801b202:	4b67      	ldr	r3, [pc, #412]	; (801b3a0 <tcp_enqueue_flags+0x1bc>)
 801b204:	f240 4211 	movw	r2, #1041	; 0x411
 801b208:	4966      	ldr	r1, [pc, #408]	; (801b3a4 <tcp_enqueue_flags+0x1c0>)
 801b20a:	4867      	ldr	r0, [pc, #412]	; (801b3a8 <tcp_enqueue_flags+0x1c4>)
 801b20c:	f004 fd5c 	bl	801fcc8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d106      	bne.n	801b224 <tcp_enqueue_flags+0x40>
 801b216:	4b62      	ldr	r3, [pc, #392]	; (801b3a0 <tcp_enqueue_flags+0x1bc>)
 801b218:	f240 4213 	movw	r2, #1043	; 0x413
 801b21c:	4963      	ldr	r1, [pc, #396]	; (801b3ac <tcp_enqueue_flags+0x1c8>)
 801b21e:	4862      	ldr	r0, [pc, #392]	; (801b3a8 <tcp_enqueue_flags+0x1c4>)
 801b220:	f004 fd52 	bl	801fcc8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801b224:	78fb      	ldrb	r3, [r7, #3]
 801b226:	f003 0302 	and.w	r3, r3, #2
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d001      	beq.n	801b232 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801b22e:	2301      	movs	r3, #1
 801b230:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b232:	7ffb      	ldrb	r3, [r7, #31]
 801b234:	009b      	lsls	r3, r3, #2
 801b236:	b2db      	uxtb	r3, r3
 801b238:	f003 0304 	and.w	r3, r3, #4
 801b23c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b23e:	7dfb      	ldrb	r3, [r7, #23]
 801b240:	b29b      	uxth	r3, r3
 801b242:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b246:	4619      	mov	r1, r3
 801b248:	2036      	movs	r0, #54	; 0x36
 801b24a:	f7fb f955 	bl	80164f8 <pbuf_alloc>
 801b24e:	6138      	str	r0, [r7, #16]
 801b250:	693b      	ldr	r3, [r7, #16]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d109      	bne.n	801b26a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	8b5b      	ldrh	r3, [r3, #26]
 801b25a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b25e:	b29a      	uxth	r2, r3
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b264:	f04f 33ff 	mov.w	r3, #4294967295
 801b268:	e095      	b.n	801b396 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b26a:	693b      	ldr	r3, [r7, #16]
 801b26c:	895a      	ldrh	r2, [r3, #10]
 801b26e:	7dfb      	ldrb	r3, [r7, #23]
 801b270:	b29b      	uxth	r3, r3
 801b272:	429a      	cmp	r2, r3
 801b274:	d206      	bcs.n	801b284 <tcp_enqueue_flags+0xa0>
 801b276:	4b4a      	ldr	r3, [pc, #296]	; (801b3a0 <tcp_enqueue_flags+0x1bc>)
 801b278:	f240 4239 	movw	r2, #1081	; 0x439
 801b27c:	494c      	ldr	r1, [pc, #304]	; (801b3b0 <tcp_enqueue_flags+0x1cc>)
 801b27e:	484a      	ldr	r0, [pc, #296]	; (801b3a8 <tcp_enqueue_flags+0x1c4>)
 801b280:	f004 fd22 	bl	801fcc8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801b288:	78fa      	ldrb	r2, [r7, #3]
 801b28a:	7ffb      	ldrb	r3, [r7, #31]
 801b28c:	9300      	str	r3, [sp, #0]
 801b28e:	460b      	mov	r3, r1
 801b290:	6939      	ldr	r1, [r7, #16]
 801b292:	6878      	ldr	r0, [r7, #4]
 801b294:	f7ff fd70 	bl	801ad78 <tcp_create_segment>
 801b298:	60f8      	str	r0, [r7, #12]
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d109      	bne.n	801b2b4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	8b5b      	ldrh	r3, [r3, #26]
 801b2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2a8:	b29a      	uxth	r2, r3
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801b2ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b2b2:	e070      	b.n	801b396 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	68db      	ldr	r3, [r3, #12]
 801b2b8:	f003 0303 	and.w	r3, r3, #3
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d006      	beq.n	801b2ce <tcp_enqueue_flags+0xea>
 801b2c0:	4b37      	ldr	r3, [pc, #220]	; (801b3a0 <tcp_enqueue_flags+0x1bc>)
 801b2c2:	f240 4242 	movw	r2, #1090	; 0x442
 801b2c6:	493b      	ldr	r1, [pc, #236]	; (801b3b4 <tcp_enqueue_flags+0x1d0>)
 801b2c8:	4837      	ldr	r0, [pc, #220]	; (801b3a8 <tcp_enqueue_flags+0x1c4>)
 801b2ca:	f004 fcfd 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	891b      	ldrh	r3, [r3, #8]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d006      	beq.n	801b2e4 <tcp_enqueue_flags+0x100>
 801b2d6:	4b32      	ldr	r3, [pc, #200]	; (801b3a0 <tcp_enqueue_flags+0x1bc>)
 801b2d8:	f240 4243 	movw	r2, #1091	; 0x443
 801b2dc:	4936      	ldr	r1, [pc, #216]	; (801b3b8 <tcp_enqueue_flags+0x1d4>)
 801b2de:	4832      	ldr	r0, [pc, #200]	; (801b3a8 <tcp_enqueue_flags+0x1c4>)
 801b2e0:	f004 fcf2 	bl	801fcc8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d103      	bne.n	801b2f4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801b2ec:	687b      	ldr	r3, [r7, #4]
 801b2ee:	68fa      	ldr	r2, [r7, #12]
 801b2f0:	66da      	str	r2, [r3, #108]	; 0x6c
 801b2f2:	e00d      	b.n	801b310 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b2f8:	61bb      	str	r3, [r7, #24]
 801b2fa:	e002      	b.n	801b302 <tcp_enqueue_flags+0x11e>
 801b2fc:	69bb      	ldr	r3, [r7, #24]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	61bb      	str	r3, [r7, #24]
 801b302:	69bb      	ldr	r3, [r7, #24]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	2b00      	cmp	r3, #0
 801b308:	d1f8      	bne.n	801b2fc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801b30a:	69bb      	ldr	r3, [r7, #24]
 801b30c:	68fa      	ldr	r2, [r7, #12]
 801b30e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	2200      	movs	r2, #0
 801b314:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b318:	78fb      	ldrb	r3, [r7, #3]
 801b31a:	f003 0302 	and.w	r3, r3, #2
 801b31e:	2b00      	cmp	r3, #0
 801b320:	d104      	bne.n	801b32c <tcp_enqueue_flags+0x148>
 801b322:	78fb      	ldrb	r3, [r7, #3]
 801b324:	f003 0301 	and.w	r3, r3, #1
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d004      	beq.n	801b336 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b330:	1c5a      	adds	r2, r3, #1
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801b336:	78fb      	ldrb	r3, [r7, #3]
 801b338:	f003 0301 	and.w	r3, r3, #1
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d006      	beq.n	801b34e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	8b5b      	ldrh	r3, [r3, #26]
 801b344:	f043 0320 	orr.w	r3, r3, #32
 801b348:	b29a      	uxth	r2, r3
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	685b      	ldr	r3, [r3, #4]
 801b352:	4618      	mov	r0, r3
 801b354:	f7fb fc42 	bl	8016bdc <pbuf_clen>
 801b358:	4603      	mov	r3, r0
 801b35a:	461a      	mov	r2, r3
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b362:	4413      	add	r3, r2
 801b364:	b29a      	uxth	r2, r3
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b372:	2b00      	cmp	r3, #0
 801b374:	d00e      	beq.n	801b394 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d10a      	bne.n	801b394 <tcp_enqueue_flags+0x1b0>
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b382:	2b00      	cmp	r3, #0
 801b384:	d106      	bne.n	801b394 <tcp_enqueue_flags+0x1b0>
 801b386:	4b06      	ldr	r3, [pc, #24]	; (801b3a0 <tcp_enqueue_flags+0x1bc>)
 801b388:	f240 4265 	movw	r2, #1125	; 0x465
 801b38c:	490b      	ldr	r1, [pc, #44]	; (801b3bc <tcp_enqueue_flags+0x1d8>)
 801b38e:	4806      	ldr	r0, [pc, #24]	; (801b3a8 <tcp_enqueue_flags+0x1c4>)
 801b390:	f004 fc9a 	bl	801fcc8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801b394:	2300      	movs	r3, #0
}
 801b396:	4618      	mov	r0, r3
 801b398:	3720      	adds	r7, #32
 801b39a:	46bd      	mov	sp, r7
 801b39c:	bd80      	pop	{r7, pc}
 801b39e:	bf00      	nop
 801b3a0:	08022104 	.word	0x08022104
 801b3a4:	08022528 	.word	0x08022528
 801b3a8:	08022158 	.word	0x08022158
 801b3ac:	08022580 	.word	0x08022580
 801b3b0:	080225a0 	.word	0x080225a0
 801b3b4:	080225dc 	.word	0x080225dc
 801b3b8:	080225f4 	.word	0x080225f4
 801b3bc:	08022620 	.word	0x08022620

0801b3c0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801b3c0:	b5b0      	push	{r4, r5, r7, lr}
 801b3c2:	b08a      	sub	sp, #40	; 0x28
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d106      	bne.n	801b3dc <tcp_output+0x1c>
 801b3ce:	4b8a      	ldr	r3, [pc, #552]	; (801b5f8 <tcp_output+0x238>)
 801b3d0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801b3d4:	4989      	ldr	r1, [pc, #548]	; (801b5fc <tcp_output+0x23c>)
 801b3d6:	488a      	ldr	r0, [pc, #552]	; (801b600 <tcp_output+0x240>)
 801b3d8:	f004 fc76 	bl	801fcc8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	7d1b      	ldrb	r3, [r3, #20]
 801b3e0:	2b01      	cmp	r3, #1
 801b3e2:	d106      	bne.n	801b3f2 <tcp_output+0x32>
 801b3e4:	4b84      	ldr	r3, [pc, #528]	; (801b5f8 <tcp_output+0x238>)
 801b3e6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801b3ea:	4986      	ldr	r1, [pc, #536]	; (801b604 <tcp_output+0x244>)
 801b3ec:	4884      	ldr	r0, [pc, #528]	; (801b600 <tcp_output+0x240>)
 801b3ee:	f004 fc6b 	bl	801fcc8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801b3f2:	4b85      	ldr	r3, [pc, #532]	; (801b608 <tcp_output+0x248>)
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	687a      	ldr	r2, [r7, #4]
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	d101      	bne.n	801b400 <tcp_output+0x40>
    return ERR_OK;
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	e1ce      	b.n	801b79e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b40c:	4293      	cmp	r3, r2
 801b40e:	bf28      	it	cs
 801b410:	4613      	movcs	r3, r2
 801b412:	b29b      	uxth	r3, r3
 801b414:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b41a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d10b      	bne.n	801b43a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	8b5b      	ldrh	r3, [r3, #26]
 801b426:	f003 0302 	and.w	r3, r3, #2
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	f000 81aa 	beq.w	801b784 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801b430:	6878      	ldr	r0, [r7, #4]
 801b432:	f000 fdcb 	bl	801bfcc <tcp_send_empty_ack>
 801b436:	4603      	mov	r3, r0
 801b438:	e1b1      	b.n	801b79e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801b43a:	6879      	ldr	r1, [r7, #4]
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	3304      	adds	r3, #4
 801b440:	461a      	mov	r2, r3
 801b442:	6878      	ldr	r0, [r7, #4]
 801b444:	f7ff fc7c 	bl	801ad40 <tcp_route>
 801b448:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801b44a:	697b      	ldr	r3, [r7, #20]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d102      	bne.n	801b456 <tcp_output+0x96>
    return ERR_RTE;
 801b450:	f06f 0303 	mvn.w	r3, #3
 801b454:	e1a3      	b.n	801b79e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d003      	beq.n	801b464 <tcp_output+0xa4>
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	2b00      	cmp	r3, #0
 801b462:	d111      	bne.n	801b488 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801b464:	697b      	ldr	r3, [r7, #20]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d002      	beq.n	801b470 <tcp_output+0xb0>
 801b46a:	697b      	ldr	r3, [r7, #20]
 801b46c:	3304      	adds	r3, #4
 801b46e:	e000      	b.n	801b472 <tcp_output+0xb2>
 801b470:	2300      	movs	r3, #0
 801b472:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801b474:	693b      	ldr	r3, [r7, #16]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d102      	bne.n	801b480 <tcp_output+0xc0>
      return ERR_RTE;
 801b47a:	f06f 0303 	mvn.w	r3, #3
 801b47e:	e18e      	b.n	801b79e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b480:	693b      	ldr	r3, [r7, #16]
 801b482:	681a      	ldr	r2, [r3, #0]
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48a:	68db      	ldr	r3, [r3, #12]
 801b48c:	685b      	ldr	r3, [r3, #4]
 801b48e:	4618      	mov	r0, r3
 801b490:	f7f9 ff39 	bl	8015306 <lwip_htonl>
 801b494:	4602      	mov	r2, r0
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b49a:	1ad3      	subs	r3, r2, r3
 801b49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b49e:	8912      	ldrh	r2, [r2, #8]
 801b4a0:	4413      	add	r3, r2
 801b4a2:	69ba      	ldr	r2, [r7, #24]
 801b4a4:	429a      	cmp	r2, r3
 801b4a6:	d227      	bcs.n	801b4f8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b4ae:	461a      	mov	r2, r3
 801b4b0:	69bb      	ldr	r3, [r7, #24]
 801b4b2:	4293      	cmp	r3, r2
 801b4b4:	d114      	bne.n	801b4e0 <tcp_output+0x120>
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d110      	bne.n	801b4e0 <tcp_output+0x120>
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d10b      	bne.n	801b4e0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	2201      	movs	r2, #1
 801b4d4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	2200      	movs	r2, #0
 801b4dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	8b5b      	ldrh	r3, [r3, #26]
 801b4e4:	f003 0302 	and.w	r3, r3, #2
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	f000 814d 	beq.w	801b788 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801b4ee:	6878      	ldr	r0, [r7, #4]
 801b4f0:	f000 fd6c 	bl	801bfcc <tcp_send_empty_ack>
 801b4f4:	4603      	mov	r3, r0
 801b4f6:	e152      	b.n	801b79e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b504:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801b506:	6a3b      	ldr	r3, [r7, #32]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	f000 811c 	beq.w	801b746 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801b50e:	e002      	b.n	801b516 <tcp_output+0x156>
 801b510:	6a3b      	ldr	r3, [r7, #32]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	623b      	str	r3, [r7, #32]
 801b516:	6a3b      	ldr	r3, [r7, #32]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d1f8      	bne.n	801b510 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b51e:	e112      	b.n	801b746 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b522:	68db      	ldr	r3, [r3, #12]
 801b524:	899b      	ldrh	r3, [r3, #12]
 801b526:	b29b      	uxth	r3, r3
 801b528:	4618      	mov	r0, r3
 801b52a:	f7f9 fed7 	bl	80152dc <lwip_htons>
 801b52e:	4603      	mov	r3, r0
 801b530:	b2db      	uxtb	r3, r3
 801b532:	f003 0304 	and.w	r3, r3, #4
 801b536:	2b00      	cmp	r3, #0
 801b538:	d006      	beq.n	801b548 <tcp_output+0x188>
 801b53a:	4b2f      	ldr	r3, [pc, #188]	; (801b5f8 <tcp_output+0x238>)
 801b53c:	f240 5236 	movw	r2, #1334	; 0x536
 801b540:	4932      	ldr	r1, [pc, #200]	; (801b60c <tcp_output+0x24c>)
 801b542:	482f      	ldr	r0, [pc, #188]	; (801b600 <tcp_output+0x240>)
 801b544:	f004 fbc0 	bl	801fcc8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d01f      	beq.n	801b590 <tcp_output+0x1d0>
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	8b5b      	ldrh	r3, [r3, #26]
 801b554:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d119      	bne.n	801b590 <tcp_output+0x1d0>
 801b55c:	687b      	ldr	r3, [r7, #4]
 801b55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b560:	2b00      	cmp	r3, #0
 801b562:	d00b      	beq.n	801b57c <tcp_output+0x1bc>
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b568:	681b      	ldr	r3, [r3, #0]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d110      	bne.n	801b590 <tcp_output+0x1d0>
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b572:	891a      	ldrh	r2, [r3, #8]
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b578:	429a      	cmp	r2, r3
 801b57a:	d209      	bcs.n	801b590 <tcp_output+0x1d0>
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b582:	2b00      	cmp	r3, #0
 801b584:	d004      	beq.n	801b590 <tcp_output+0x1d0>
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b58c:	2b08      	cmp	r3, #8
 801b58e:	d901      	bls.n	801b594 <tcp_output+0x1d4>
 801b590:	2301      	movs	r3, #1
 801b592:	e000      	b.n	801b596 <tcp_output+0x1d6>
 801b594:	2300      	movs	r3, #0
 801b596:	2b00      	cmp	r3, #0
 801b598:	d106      	bne.n	801b5a8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	8b5b      	ldrh	r3, [r3, #26]
 801b59e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	f000 80e4 	beq.w	801b770 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	7d1b      	ldrb	r3, [r3, #20]
 801b5ac:	2b02      	cmp	r3, #2
 801b5ae:	d00d      	beq.n	801b5cc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5b2:	68db      	ldr	r3, [r3, #12]
 801b5b4:	899b      	ldrh	r3, [r3, #12]
 801b5b6:	b29c      	uxth	r4, r3
 801b5b8:	2010      	movs	r0, #16
 801b5ba:	f7f9 fe8f 	bl	80152dc <lwip_htons>
 801b5be:	4603      	mov	r3, r0
 801b5c0:	461a      	mov	r2, r3
 801b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5c4:	68db      	ldr	r3, [r3, #12]
 801b5c6:	4322      	orrs	r2, r4
 801b5c8:	b292      	uxth	r2, r2
 801b5ca:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b5cc:	697a      	ldr	r2, [r7, #20]
 801b5ce:	6879      	ldr	r1, [r7, #4]
 801b5d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b5d2:	f000 f909 	bl	801b7e8 <tcp_output_segment>
 801b5d6:	4603      	mov	r3, r0
 801b5d8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d016      	beq.n	801b610 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	8b5b      	ldrh	r3, [r3, #26]
 801b5e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5ea:	b29a      	uxth	r2, r3
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	835a      	strh	r2, [r3, #26]
      return err;
 801b5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b5f4:	e0d3      	b.n	801b79e <tcp_output+0x3de>
 801b5f6:	bf00      	nop
 801b5f8:	08022104 	.word	0x08022104
 801b5fc:	08022648 	.word	0x08022648
 801b600:	08022158 	.word	0x08022158
 801b604:	08022660 	.word	0x08022660
 801b608:	200110cc 	.word	0x200110cc
 801b60c:	08022688 	.word	0x08022688
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b612:	681a      	ldr	r2, [r3, #0]
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	7d1b      	ldrb	r3, [r3, #20]
 801b61c:	2b02      	cmp	r3, #2
 801b61e:	d006      	beq.n	801b62e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	8b5b      	ldrh	r3, [r3, #26]
 801b624:	f023 0303 	bic.w	r3, r3, #3
 801b628:	b29a      	uxth	r2, r3
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b630:	68db      	ldr	r3, [r3, #12]
 801b632:	685b      	ldr	r3, [r3, #4]
 801b634:	4618      	mov	r0, r3
 801b636:	f7f9 fe66 	bl	8015306 <lwip_htonl>
 801b63a:	4604      	mov	r4, r0
 801b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b63e:	891b      	ldrh	r3, [r3, #8]
 801b640:	461d      	mov	r5, r3
 801b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b644:	68db      	ldr	r3, [r3, #12]
 801b646:	899b      	ldrh	r3, [r3, #12]
 801b648:	b29b      	uxth	r3, r3
 801b64a:	4618      	mov	r0, r3
 801b64c:	f7f9 fe46 	bl	80152dc <lwip_htons>
 801b650:	4603      	mov	r3, r0
 801b652:	b2db      	uxtb	r3, r3
 801b654:	f003 0303 	and.w	r3, r3, #3
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d001      	beq.n	801b660 <tcp_output+0x2a0>
 801b65c:	2301      	movs	r3, #1
 801b65e:	e000      	b.n	801b662 <tcp_output+0x2a2>
 801b660:	2300      	movs	r3, #0
 801b662:	442b      	add	r3, r5
 801b664:	4423      	add	r3, r4
 801b666:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b66c:	68bb      	ldr	r3, [r7, #8]
 801b66e:	1ad3      	subs	r3, r2, r3
 801b670:	2b00      	cmp	r3, #0
 801b672:	da02      	bge.n	801b67a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	68ba      	ldr	r2, [r7, #8]
 801b678:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b67c:	891b      	ldrh	r3, [r3, #8]
 801b67e:	461c      	mov	r4, r3
 801b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b682:	68db      	ldr	r3, [r3, #12]
 801b684:	899b      	ldrh	r3, [r3, #12]
 801b686:	b29b      	uxth	r3, r3
 801b688:	4618      	mov	r0, r3
 801b68a:	f7f9 fe27 	bl	80152dc <lwip_htons>
 801b68e:	4603      	mov	r3, r0
 801b690:	b2db      	uxtb	r3, r3
 801b692:	f003 0303 	and.w	r3, r3, #3
 801b696:	2b00      	cmp	r3, #0
 801b698:	d001      	beq.n	801b69e <tcp_output+0x2de>
 801b69a:	2301      	movs	r3, #1
 801b69c:	e000      	b.n	801b6a0 <tcp_output+0x2e0>
 801b69e:	2300      	movs	r3, #0
 801b6a0:	4423      	add	r3, r4
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d049      	beq.n	801b73a <tcp_output+0x37a>
      seg->next = NULL;
 801b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6a8:	2200      	movs	r2, #0
 801b6aa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d105      	bne.n	801b6c0 <tcp_output+0x300>
        pcb->unacked = seg;
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b6b8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6bc:	623b      	str	r3, [r7, #32]
 801b6be:	e03f      	b.n	801b740 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6c2:	68db      	ldr	r3, [r3, #12]
 801b6c4:	685b      	ldr	r3, [r3, #4]
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	f7f9 fe1d 	bl	8015306 <lwip_htonl>
 801b6cc:	4604      	mov	r4, r0
 801b6ce:	6a3b      	ldr	r3, [r7, #32]
 801b6d0:	68db      	ldr	r3, [r3, #12]
 801b6d2:	685b      	ldr	r3, [r3, #4]
 801b6d4:	4618      	mov	r0, r3
 801b6d6:	f7f9 fe16 	bl	8015306 <lwip_htonl>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	1ae3      	subs	r3, r4, r3
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	da24      	bge.n	801b72c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	3370      	adds	r3, #112	; 0x70
 801b6e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b6e8:	e002      	b.n	801b6f0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b6ea:	69fb      	ldr	r3, [r7, #28]
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b6f0:	69fb      	ldr	r3, [r7, #28]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d011      	beq.n	801b71c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b6f8:	69fb      	ldr	r3, [r7, #28]
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	68db      	ldr	r3, [r3, #12]
 801b6fe:	685b      	ldr	r3, [r3, #4]
 801b700:	4618      	mov	r0, r3
 801b702:	f7f9 fe00 	bl	8015306 <lwip_htonl>
 801b706:	4604      	mov	r4, r0
 801b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b70a:	68db      	ldr	r3, [r3, #12]
 801b70c:	685b      	ldr	r3, [r3, #4]
 801b70e:	4618      	mov	r0, r3
 801b710:	f7f9 fdf9 	bl	8015306 <lwip_htonl>
 801b714:	4603      	mov	r3, r0
 801b716:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b718:	2b00      	cmp	r3, #0
 801b71a:	dbe6      	blt.n	801b6ea <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801b71c:	69fb      	ldr	r3, [r7, #28]
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b722:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b724:	69fb      	ldr	r3, [r7, #28]
 801b726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b728:	601a      	str	r2, [r3, #0]
 801b72a:	e009      	b.n	801b740 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b72c:	6a3b      	ldr	r3, [r7, #32]
 801b72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b730:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b732:	6a3b      	ldr	r3, [r7, #32]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	623b      	str	r3, [r7, #32]
 801b738:	e002      	b.n	801b740 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b73a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b73c:	f7fc fc3f 	bl	8017fbe <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b744:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d012      	beq.n	801b772 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b74e:	68db      	ldr	r3, [r3, #12]
 801b750:	685b      	ldr	r3, [r3, #4]
 801b752:	4618      	mov	r0, r3
 801b754:	f7f9 fdd7 	bl	8015306 <lwip_htonl>
 801b758:	4602      	mov	r2, r0
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b75e:	1ad3      	subs	r3, r2, r3
 801b760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b762:	8912      	ldrh	r2, [r2, #8]
 801b764:	4413      	add	r3, r2
  while (seg != NULL &&
 801b766:	69ba      	ldr	r2, [r7, #24]
 801b768:	429a      	cmp	r2, r3
 801b76a:	f4bf aed9 	bcs.w	801b520 <tcp_output+0x160>
 801b76e:	e000      	b.n	801b772 <tcp_output+0x3b2>
      break;
 801b770:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b776:	2b00      	cmp	r3, #0
 801b778:	d108      	bne.n	801b78c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	2200      	movs	r2, #0
 801b77e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b782:	e004      	b.n	801b78e <tcp_output+0x3ce>
    goto output_done;
 801b784:	bf00      	nop
 801b786:	e002      	b.n	801b78e <tcp_output+0x3ce>
    goto output_done;
 801b788:	bf00      	nop
 801b78a:	e000      	b.n	801b78e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b78c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	8b5b      	ldrh	r3, [r3, #26]
 801b792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b796:	b29a      	uxth	r2, r3
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b79c:	2300      	movs	r3, #0
}
 801b79e:	4618      	mov	r0, r3
 801b7a0:	3728      	adds	r7, #40	; 0x28
 801b7a2:	46bd      	mov	sp, r7
 801b7a4:	bdb0      	pop	{r4, r5, r7, pc}
 801b7a6:	bf00      	nop

0801b7a8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b082      	sub	sp, #8
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d106      	bne.n	801b7c4 <tcp_output_segment_busy+0x1c>
 801b7b6:	4b09      	ldr	r3, [pc, #36]	; (801b7dc <tcp_output_segment_busy+0x34>)
 801b7b8:	f240 529a 	movw	r2, #1434	; 0x59a
 801b7bc:	4908      	ldr	r1, [pc, #32]	; (801b7e0 <tcp_output_segment_busy+0x38>)
 801b7be:	4809      	ldr	r0, [pc, #36]	; (801b7e4 <tcp_output_segment_busy+0x3c>)
 801b7c0:	f004 fa82 	bl	801fcc8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	685b      	ldr	r3, [r3, #4]
 801b7c8:	7b9b      	ldrb	r3, [r3, #14]
 801b7ca:	2b01      	cmp	r3, #1
 801b7cc:	d001      	beq.n	801b7d2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b7ce:	2301      	movs	r3, #1
 801b7d0:	e000      	b.n	801b7d4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b7d2:	2300      	movs	r3, #0
}
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	3708      	adds	r7, #8
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	bd80      	pop	{r7, pc}
 801b7dc:	08022104 	.word	0x08022104
 801b7e0:	080226a0 	.word	0x080226a0
 801b7e4:	08022158 	.word	0x08022158

0801b7e8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b7e8:	b5b0      	push	{r4, r5, r7, lr}
 801b7ea:	b08c      	sub	sp, #48	; 0x30
 801b7ec:	af04      	add	r7, sp, #16
 801b7ee:	60f8      	str	r0, [r7, #12]
 801b7f0:	60b9      	str	r1, [r7, #8]
 801b7f2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b7f4:	68fb      	ldr	r3, [r7, #12]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d106      	bne.n	801b808 <tcp_output_segment+0x20>
 801b7fa:	4b63      	ldr	r3, [pc, #396]	; (801b988 <tcp_output_segment+0x1a0>)
 801b7fc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b800:	4962      	ldr	r1, [pc, #392]	; (801b98c <tcp_output_segment+0x1a4>)
 801b802:	4863      	ldr	r0, [pc, #396]	; (801b990 <tcp_output_segment+0x1a8>)
 801b804:	f004 fa60 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b808:	68bb      	ldr	r3, [r7, #8]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d106      	bne.n	801b81c <tcp_output_segment+0x34>
 801b80e:	4b5e      	ldr	r3, [pc, #376]	; (801b988 <tcp_output_segment+0x1a0>)
 801b810:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b814:	495f      	ldr	r1, [pc, #380]	; (801b994 <tcp_output_segment+0x1ac>)
 801b816:	485e      	ldr	r0, [pc, #376]	; (801b990 <tcp_output_segment+0x1a8>)
 801b818:	f004 fa56 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d106      	bne.n	801b830 <tcp_output_segment+0x48>
 801b822:	4b59      	ldr	r3, [pc, #356]	; (801b988 <tcp_output_segment+0x1a0>)
 801b824:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b828:	495b      	ldr	r1, [pc, #364]	; (801b998 <tcp_output_segment+0x1b0>)
 801b82a:	4859      	ldr	r0, [pc, #356]	; (801b990 <tcp_output_segment+0x1a8>)
 801b82c:	f004 fa4c 	bl	801fcc8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b830:	68f8      	ldr	r0, [r7, #12]
 801b832:	f7ff ffb9 	bl	801b7a8 <tcp_output_segment_busy>
 801b836:	4603      	mov	r3, r0
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d001      	beq.n	801b840 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b83c:	2300      	movs	r3, #0
 801b83e:	e09f      	b.n	801b980 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b844:	68fb      	ldr	r3, [r7, #12]
 801b846:	68dc      	ldr	r4, [r3, #12]
 801b848:	4610      	mov	r0, r2
 801b84a:	f7f9 fd5c 	bl	8015306 <lwip_htonl>
 801b84e:	4603      	mov	r3, r0
 801b850:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b852:	68bb      	ldr	r3, [r7, #8]
 801b854:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b856:	68fb      	ldr	r3, [r7, #12]
 801b858:	68dc      	ldr	r4, [r3, #12]
 801b85a:	4610      	mov	r0, r2
 801b85c:	f7f9 fd3e 	bl	80152dc <lwip_htons>
 801b860:	4603      	mov	r3, r0
 801b862:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b864:	68bb      	ldr	r3, [r7, #8]
 801b866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b868:	68ba      	ldr	r2, [r7, #8]
 801b86a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b86c:	441a      	add	r2, r3
 801b86e:	68bb      	ldr	r3, [r7, #8]
 801b870:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	68db      	ldr	r3, [r3, #12]
 801b876:	3314      	adds	r3, #20
 801b878:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	7a9b      	ldrb	r3, [r3, #10]
 801b87e:	f003 0301 	and.w	r3, r3, #1
 801b882:	2b00      	cmp	r3, #0
 801b884:	d015      	beq.n	801b8b2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b886:	68bb      	ldr	r3, [r7, #8]
 801b888:	3304      	adds	r3, #4
 801b88a:	461a      	mov	r2, r3
 801b88c:	6879      	ldr	r1, [r7, #4]
 801b88e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b892:	f7fc fe8b 	bl	80185ac <tcp_eff_send_mss_netif>
 801b896:	4603      	mov	r3, r0
 801b898:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b89a:	8b7b      	ldrh	r3, [r7, #26]
 801b89c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7f9 fd30 	bl	8015306 <lwip_htonl>
 801b8a6:	4602      	mov	r2, r0
 801b8a8:	69fb      	ldr	r3, [r7, #28]
 801b8aa:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b8ac:	69fb      	ldr	r3, [r7, #28]
 801b8ae:	3304      	adds	r3, #4
 801b8b0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	da02      	bge.n	801b8c2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b8bc:	68bb      	ldr	r3, [r7, #8]
 801b8be:	2200      	movs	r2, #0
 801b8c0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d10c      	bne.n	801b8e4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b8ca:	4b34      	ldr	r3, [pc, #208]	; (801b99c <tcp_output_segment+0x1b4>)
 801b8cc:	681a      	ldr	r2, [r3, #0]
 801b8ce:	68bb      	ldr	r3, [r7, #8]
 801b8d0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b8d2:	68fb      	ldr	r3, [r7, #12]
 801b8d4:	68db      	ldr	r3, [r3, #12]
 801b8d6:	685b      	ldr	r3, [r3, #4]
 801b8d8:	4618      	mov	r0, r3
 801b8da:	f7f9 fd14 	bl	8015306 <lwip_htonl>
 801b8de:	4602      	mov	r2, r0
 801b8e0:	68bb      	ldr	r3, [r7, #8]
 801b8e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b8e4:	68fb      	ldr	r3, [r7, #12]
 801b8e6:	68da      	ldr	r2, [r3, #12]
 801b8e8:	68fb      	ldr	r3, [r7, #12]
 801b8ea:	685b      	ldr	r3, [r3, #4]
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	1ad3      	subs	r3, r2, r3
 801b8f0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	685b      	ldr	r3, [r3, #4]
 801b8f6:	8959      	ldrh	r1, [r3, #10]
 801b8f8:	68fb      	ldr	r3, [r7, #12]
 801b8fa:	685b      	ldr	r3, [r3, #4]
 801b8fc:	8b3a      	ldrh	r2, [r7, #24]
 801b8fe:	1a8a      	subs	r2, r1, r2
 801b900:	b292      	uxth	r2, r2
 801b902:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	685b      	ldr	r3, [r3, #4]
 801b908:	8919      	ldrh	r1, [r3, #8]
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	685b      	ldr	r3, [r3, #4]
 801b90e:	8b3a      	ldrh	r2, [r7, #24]
 801b910:	1a8a      	subs	r2, r1, r2
 801b912:	b292      	uxth	r2, r2
 801b914:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b916:	68fb      	ldr	r3, [r7, #12]
 801b918:	685b      	ldr	r3, [r3, #4]
 801b91a:	68fa      	ldr	r2, [r7, #12]
 801b91c:	68d2      	ldr	r2, [r2, #12]
 801b91e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b920:	68fb      	ldr	r3, [r7, #12]
 801b922:	68db      	ldr	r3, [r3, #12]
 801b924:	2200      	movs	r2, #0
 801b926:	741a      	strb	r2, [r3, #16]
 801b928:	2200      	movs	r2, #0
 801b92a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	68db      	ldr	r3, [r3, #12]
 801b930:	f103 0214 	add.w	r2, r3, #20
 801b934:	68fb      	ldr	r3, [r7, #12]
 801b936:	7a9b      	ldrb	r3, [r3, #10]
 801b938:	009b      	lsls	r3, r3, #2
 801b93a:	f003 0304 	and.w	r3, r3, #4
 801b93e:	4413      	add	r3, r2
 801b940:	69fa      	ldr	r2, [r7, #28]
 801b942:	429a      	cmp	r2, r3
 801b944:	d006      	beq.n	801b954 <tcp_output_segment+0x16c>
 801b946:	4b10      	ldr	r3, [pc, #64]	; (801b988 <tcp_output_segment+0x1a0>)
 801b948:	f240 621c 	movw	r2, #1564	; 0x61c
 801b94c:	4914      	ldr	r1, [pc, #80]	; (801b9a0 <tcp_output_segment+0x1b8>)
 801b94e:	4810      	ldr	r0, [pc, #64]	; (801b990 <tcp_output_segment+0x1a8>)
 801b950:	f004 f9ba 	bl	801fcc8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b954:	68fb      	ldr	r3, [r7, #12]
 801b956:	6858      	ldr	r0, [r3, #4]
 801b958:	68b9      	ldr	r1, [r7, #8]
 801b95a:	68bb      	ldr	r3, [r7, #8]
 801b95c:	1d1c      	adds	r4, r3, #4
 801b95e:	68bb      	ldr	r3, [r7, #8]
 801b960:	7add      	ldrb	r5, [r3, #11]
 801b962:	68bb      	ldr	r3, [r7, #8]
 801b964:	7a9b      	ldrb	r3, [r3, #10]
 801b966:	687a      	ldr	r2, [r7, #4]
 801b968:	9202      	str	r2, [sp, #8]
 801b96a:	2206      	movs	r2, #6
 801b96c:	9201      	str	r2, [sp, #4]
 801b96e:	9300      	str	r3, [sp, #0]
 801b970:	462b      	mov	r3, r5
 801b972:	4622      	mov	r2, r4
 801b974:	f002 fa66 	bl	801de44 <ip4_output_if>
 801b978:	4603      	mov	r3, r0
 801b97a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b980:	4618      	mov	r0, r3
 801b982:	3720      	adds	r7, #32
 801b984:	46bd      	mov	sp, r7
 801b986:	bdb0      	pop	{r4, r5, r7, pc}
 801b988:	08022104 	.word	0x08022104
 801b98c:	080226c8 	.word	0x080226c8
 801b990:	08022158 	.word	0x08022158
 801b994:	080226e8 	.word	0x080226e8
 801b998:	08022708 	.word	0x08022708
 801b99c:	20011080 	.word	0x20011080
 801b9a0:	0802272c 	.word	0x0802272c

0801b9a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b9a4:	b5b0      	push	{r4, r5, r7, lr}
 801b9a6:	b084      	sub	sp, #16
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d106      	bne.n	801b9c0 <tcp_rexmit_rto_prepare+0x1c>
 801b9b2:	4b31      	ldr	r3, [pc, #196]	; (801ba78 <tcp_rexmit_rto_prepare+0xd4>)
 801b9b4:	f240 6263 	movw	r2, #1635	; 0x663
 801b9b8:	4930      	ldr	r1, [pc, #192]	; (801ba7c <tcp_rexmit_rto_prepare+0xd8>)
 801b9ba:	4831      	ldr	r0, [pc, #196]	; (801ba80 <tcp_rexmit_rto_prepare+0xdc>)
 801b9bc:	f004 f984 	bl	801fcc8 <iprintf>

  if (pcb->unacked == NULL) {
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d102      	bne.n	801b9ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b9c8:	f06f 0305 	mvn.w	r3, #5
 801b9cc:	e050      	b.n	801ba70 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9d2:	60fb      	str	r3, [r7, #12]
 801b9d4:	e00b      	b.n	801b9ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b9d6:	68f8      	ldr	r0, [r7, #12]
 801b9d8:	f7ff fee6 	bl	801b7a8 <tcp_output_segment_busy>
 801b9dc:	4603      	mov	r3, r0
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d002      	beq.n	801b9e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b9e2:	f06f 0305 	mvn.w	r3, #5
 801b9e6:	e043      	b.n	801ba70 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	60fb      	str	r3, [r7, #12]
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d1ef      	bne.n	801b9d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b9f6:	68f8      	ldr	r0, [r7, #12]
 801b9f8:	f7ff fed6 	bl	801b7a8 <tcp_output_segment_busy>
 801b9fc:	4603      	mov	r3, r0
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d002      	beq.n	801ba08 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801ba02:	f06f 0305 	mvn.w	r3, #5
 801ba06:	e033      	b.n	801ba70 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	2200      	movs	r2, #0
 801ba1c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	8b5b      	ldrh	r3, [r3, #26]
 801ba22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ba26:	b29a      	uxth	r2, r3
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	68db      	ldr	r3, [r3, #12]
 801ba30:	685b      	ldr	r3, [r3, #4]
 801ba32:	4618      	mov	r0, r3
 801ba34:	f7f9 fc67 	bl	8015306 <lwip_htonl>
 801ba38:	4604      	mov	r4, r0
 801ba3a:	68fb      	ldr	r3, [r7, #12]
 801ba3c:	891b      	ldrh	r3, [r3, #8]
 801ba3e:	461d      	mov	r5, r3
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	68db      	ldr	r3, [r3, #12]
 801ba44:	899b      	ldrh	r3, [r3, #12]
 801ba46:	b29b      	uxth	r3, r3
 801ba48:	4618      	mov	r0, r3
 801ba4a:	f7f9 fc47 	bl	80152dc <lwip_htons>
 801ba4e:	4603      	mov	r3, r0
 801ba50:	b2db      	uxtb	r3, r3
 801ba52:	f003 0303 	and.w	r3, r3, #3
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d001      	beq.n	801ba5e <tcp_rexmit_rto_prepare+0xba>
 801ba5a:	2301      	movs	r3, #1
 801ba5c:	e000      	b.n	801ba60 <tcp_rexmit_rto_prepare+0xbc>
 801ba5e:	2300      	movs	r3, #0
 801ba60:	442b      	add	r3, r5
 801ba62:	18e2      	adds	r2, r4, r3
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801ba6e:	2300      	movs	r3, #0
}
 801ba70:	4618      	mov	r0, r3
 801ba72:	3710      	adds	r7, #16
 801ba74:	46bd      	mov	sp, r7
 801ba76:	bdb0      	pop	{r4, r5, r7, pc}
 801ba78:	08022104 	.word	0x08022104
 801ba7c:	08022740 	.word	0x08022740
 801ba80:	08022158 	.word	0x08022158

0801ba84 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b082      	sub	sp, #8
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d106      	bne.n	801baa0 <tcp_rexmit_rto_commit+0x1c>
 801ba92:	4b0d      	ldr	r3, [pc, #52]	; (801bac8 <tcp_rexmit_rto_commit+0x44>)
 801ba94:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ba98:	490c      	ldr	r1, [pc, #48]	; (801bacc <tcp_rexmit_rto_commit+0x48>)
 801ba9a:	480d      	ldr	r0, [pc, #52]	; (801bad0 <tcp_rexmit_rto_commit+0x4c>)
 801ba9c:	f004 f914 	bl	801fcc8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801baa6:	2bff      	cmp	r3, #255	; 0xff
 801baa8:	d007      	beq.n	801baba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bab0:	3301      	adds	r3, #1
 801bab2:	b2da      	uxtb	r2, r3
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801baba:	6878      	ldr	r0, [r7, #4]
 801babc:	f7ff fc80 	bl	801b3c0 <tcp_output>
}
 801bac0:	bf00      	nop
 801bac2:	3708      	adds	r7, #8
 801bac4:	46bd      	mov	sp, r7
 801bac6:	bd80      	pop	{r7, pc}
 801bac8:	08022104 	.word	0x08022104
 801bacc:	08022764 	.word	0x08022764
 801bad0:	08022158 	.word	0x08022158

0801bad4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b082      	sub	sp, #8
 801bad8:	af00      	add	r7, sp, #0
 801bada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d106      	bne.n	801baf0 <tcp_rexmit_rto+0x1c>
 801bae2:	4b0a      	ldr	r3, [pc, #40]	; (801bb0c <tcp_rexmit_rto+0x38>)
 801bae4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801bae8:	4909      	ldr	r1, [pc, #36]	; (801bb10 <tcp_rexmit_rto+0x3c>)
 801baea:	480a      	ldr	r0, [pc, #40]	; (801bb14 <tcp_rexmit_rto+0x40>)
 801baec:	f004 f8ec 	bl	801fcc8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801baf0:	6878      	ldr	r0, [r7, #4]
 801baf2:	f7ff ff57 	bl	801b9a4 <tcp_rexmit_rto_prepare>
 801baf6:	4603      	mov	r3, r0
 801baf8:	2b00      	cmp	r3, #0
 801bafa:	d102      	bne.n	801bb02 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801bafc:	6878      	ldr	r0, [r7, #4]
 801bafe:	f7ff ffc1 	bl	801ba84 <tcp_rexmit_rto_commit>
  }
}
 801bb02:	bf00      	nop
 801bb04:	3708      	adds	r7, #8
 801bb06:	46bd      	mov	sp, r7
 801bb08:	bd80      	pop	{r7, pc}
 801bb0a:	bf00      	nop
 801bb0c:	08022104 	.word	0x08022104
 801bb10:	08022788 	.word	0x08022788
 801bb14:	08022158 	.word	0x08022158

0801bb18 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801bb18:	b590      	push	{r4, r7, lr}
 801bb1a:	b085      	sub	sp, #20
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d106      	bne.n	801bb34 <tcp_rexmit+0x1c>
 801bb26:	4b2f      	ldr	r3, [pc, #188]	; (801bbe4 <tcp_rexmit+0xcc>)
 801bb28:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801bb2c:	492e      	ldr	r1, [pc, #184]	; (801bbe8 <tcp_rexmit+0xd0>)
 801bb2e:	482f      	ldr	r0, [pc, #188]	; (801bbec <tcp_rexmit+0xd4>)
 801bb30:	f004 f8ca 	bl	801fcc8 <iprintf>

  if (pcb->unacked == NULL) {
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d102      	bne.n	801bb42 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801bb3c:	f06f 0305 	mvn.w	r3, #5
 801bb40:	e04c      	b.n	801bbdc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bb46:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801bb48:	68b8      	ldr	r0, [r7, #8]
 801bb4a:	f7ff fe2d 	bl	801b7a8 <tcp_output_segment_busy>
 801bb4e:	4603      	mov	r3, r0
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d002      	beq.n	801bb5a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801bb54:	f06f 0305 	mvn.w	r3, #5
 801bb58:	e040      	b.n	801bbdc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801bb5a:	68bb      	ldr	r3, [r7, #8]
 801bb5c:	681a      	ldr	r2, [r3, #0]
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	336c      	adds	r3, #108	; 0x6c
 801bb66:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bb68:	e002      	b.n	801bb70 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d011      	beq.n	801bb9c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	68db      	ldr	r3, [r3, #12]
 801bb7e:	685b      	ldr	r3, [r3, #4]
 801bb80:	4618      	mov	r0, r3
 801bb82:	f7f9 fbc0 	bl	8015306 <lwip_htonl>
 801bb86:	4604      	mov	r4, r0
 801bb88:	68bb      	ldr	r3, [r7, #8]
 801bb8a:	68db      	ldr	r3, [r3, #12]
 801bb8c:	685b      	ldr	r3, [r3, #4]
 801bb8e:	4618      	mov	r0, r3
 801bb90:	f7f9 fbb9 	bl	8015306 <lwip_htonl>
 801bb94:	4603      	mov	r3, r0
 801bb96:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	dbe6      	blt.n	801bb6a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	681a      	ldr	r2, [r3, #0]
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	68ba      	ldr	r2, [r7, #8]
 801bba8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801bbaa:	68bb      	ldr	r3, [r7, #8]
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d103      	bne.n	801bbba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	2200      	movs	r2, #0
 801bbb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bbc0:	2bff      	cmp	r3, #255	; 0xff
 801bbc2:	d007      	beq.n	801bbd4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bbca:	3301      	adds	r3, #1
 801bbcc:	b2da      	uxtb	r2, r3
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801bbda:	2300      	movs	r3, #0
}
 801bbdc:	4618      	mov	r0, r3
 801bbde:	3714      	adds	r7, #20
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	bd90      	pop	{r4, r7, pc}
 801bbe4:	08022104 	.word	0x08022104
 801bbe8:	080227a4 	.word	0x080227a4
 801bbec:	08022158 	.word	0x08022158

0801bbf0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801bbf0:	b580      	push	{r7, lr}
 801bbf2:	b082      	sub	sp, #8
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d106      	bne.n	801bc0c <tcp_rexmit_fast+0x1c>
 801bbfe:	4b2a      	ldr	r3, [pc, #168]	; (801bca8 <tcp_rexmit_fast+0xb8>)
 801bc00:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801bc04:	4929      	ldr	r1, [pc, #164]	; (801bcac <tcp_rexmit_fast+0xbc>)
 801bc06:	482a      	ldr	r0, [pc, #168]	; (801bcb0 <tcp_rexmit_fast+0xc0>)
 801bc08:	f004 f85e 	bl	801fcc8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d045      	beq.n	801bca0 <tcp_rexmit_fast+0xb0>
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	8b5b      	ldrh	r3, [r3, #26]
 801bc18:	f003 0304 	and.w	r3, r3, #4
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d13f      	bne.n	801bca0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801bc20:	6878      	ldr	r0, [r7, #4]
 801bc22:	f7ff ff79 	bl	801bb18 <tcp_rexmit>
 801bc26:	4603      	mov	r3, r0
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d139      	bne.n	801bca0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801bc38:	4293      	cmp	r3, r2
 801bc3a:	bf28      	it	cs
 801bc3c:	4613      	movcs	r3, r2
 801bc3e:	b29b      	uxth	r3, r3
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	da00      	bge.n	801bc46 <tcp_rexmit_fast+0x56>
 801bc44:	3301      	adds	r3, #1
 801bc46:	105b      	asrs	r3, r3, #1
 801bc48:	b29a      	uxth	r2, r3
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801bc56:	461a      	mov	r2, r3
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc5c:	005b      	lsls	r3, r3, #1
 801bc5e:	429a      	cmp	r2, r3
 801bc60:	d206      	bcs.n	801bc70 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc66:	005b      	lsls	r3, r3, #1
 801bc68:	b29a      	uxth	r2, r3
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801bc76:	687b      	ldr	r3, [r7, #4]
 801bc78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bc7a:	4619      	mov	r1, r3
 801bc7c:	0049      	lsls	r1, r1, #1
 801bc7e:	440b      	add	r3, r1
 801bc80:	b29b      	uxth	r3, r3
 801bc82:	4413      	add	r3, r2
 801bc84:	b29a      	uxth	r2, r3
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	8b5b      	ldrh	r3, [r3, #26]
 801bc90:	f043 0304 	orr.w	r3, r3, #4
 801bc94:	b29a      	uxth	r2, r3
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	2200      	movs	r2, #0
 801bc9e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801bca0:	bf00      	nop
 801bca2:	3708      	adds	r7, #8
 801bca4:	46bd      	mov	sp, r7
 801bca6:	bd80      	pop	{r7, pc}
 801bca8:	08022104 	.word	0x08022104
 801bcac:	080227bc 	.word	0x080227bc
 801bcb0:	08022158 	.word	0x08022158

0801bcb4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b086      	sub	sp, #24
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	60f8      	str	r0, [r7, #12]
 801bcbc:	607b      	str	r3, [r7, #4]
 801bcbe:	460b      	mov	r3, r1
 801bcc0:	817b      	strh	r3, [r7, #10]
 801bcc2:	4613      	mov	r3, r2
 801bcc4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801bcc6:	897a      	ldrh	r2, [r7, #10]
 801bcc8:	893b      	ldrh	r3, [r7, #8]
 801bcca:	4413      	add	r3, r2
 801bccc:	b29b      	uxth	r3, r3
 801bcce:	3314      	adds	r3, #20
 801bcd0:	b29b      	uxth	r3, r3
 801bcd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bcd6:	4619      	mov	r1, r3
 801bcd8:	2022      	movs	r0, #34	; 0x22
 801bcda:	f7fa fc0d 	bl	80164f8 <pbuf_alloc>
 801bcde:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801bce0:	697b      	ldr	r3, [r7, #20]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d04d      	beq.n	801bd82 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801bce6:	897b      	ldrh	r3, [r7, #10]
 801bce8:	3313      	adds	r3, #19
 801bcea:	697a      	ldr	r2, [r7, #20]
 801bcec:	8952      	ldrh	r2, [r2, #10]
 801bcee:	4293      	cmp	r3, r2
 801bcf0:	db06      	blt.n	801bd00 <tcp_output_alloc_header_common+0x4c>
 801bcf2:	4b26      	ldr	r3, [pc, #152]	; (801bd8c <tcp_output_alloc_header_common+0xd8>)
 801bcf4:	f240 7223 	movw	r2, #1827	; 0x723
 801bcf8:	4925      	ldr	r1, [pc, #148]	; (801bd90 <tcp_output_alloc_header_common+0xdc>)
 801bcfa:	4826      	ldr	r0, [pc, #152]	; (801bd94 <tcp_output_alloc_header_common+0xe0>)
 801bcfc:	f003 ffe4 	bl	801fcc8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801bd00:	697b      	ldr	r3, [r7, #20]
 801bd02:	685b      	ldr	r3, [r3, #4]
 801bd04:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801bd06:	8c3b      	ldrh	r3, [r7, #32]
 801bd08:	4618      	mov	r0, r3
 801bd0a:	f7f9 fae7 	bl	80152dc <lwip_htons>
 801bd0e:	4603      	mov	r3, r0
 801bd10:	461a      	mov	r2, r3
 801bd12:	693b      	ldr	r3, [r7, #16]
 801bd14:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801bd16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bd18:	4618      	mov	r0, r3
 801bd1a:	f7f9 fadf 	bl	80152dc <lwip_htons>
 801bd1e:	4603      	mov	r3, r0
 801bd20:	461a      	mov	r2, r3
 801bd22:	693b      	ldr	r3, [r7, #16]
 801bd24:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801bd26:	693b      	ldr	r3, [r7, #16]
 801bd28:	687a      	ldr	r2, [r7, #4]
 801bd2a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801bd2c:	68f8      	ldr	r0, [r7, #12]
 801bd2e:	f7f9 faea 	bl	8015306 <lwip_htonl>
 801bd32:	4602      	mov	r2, r0
 801bd34:	693b      	ldr	r3, [r7, #16]
 801bd36:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801bd38:	897b      	ldrh	r3, [r7, #10]
 801bd3a:	089b      	lsrs	r3, r3, #2
 801bd3c:	b29b      	uxth	r3, r3
 801bd3e:	3305      	adds	r3, #5
 801bd40:	b29b      	uxth	r3, r3
 801bd42:	031b      	lsls	r3, r3, #12
 801bd44:	b29a      	uxth	r2, r3
 801bd46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bd4a:	b29b      	uxth	r3, r3
 801bd4c:	4313      	orrs	r3, r2
 801bd4e:	b29b      	uxth	r3, r3
 801bd50:	4618      	mov	r0, r3
 801bd52:	f7f9 fac3 	bl	80152dc <lwip_htons>
 801bd56:	4603      	mov	r3, r0
 801bd58:	461a      	mov	r2, r3
 801bd5a:	693b      	ldr	r3, [r7, #16]
 801bd5c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801bd5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7f9 fabb 	bl	80152dc <lwip_htons>
 801bd66:	4603      	mov	r3, r0
 801bd68:	461a      	mov	r2, r3
 801bd6a:	693b      	ldr	r3, [r7, #16]
 801bd6c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801bd6e:	693b      	ldr	r3, [r7, #16]
 801bd70:	2200      	movs	r2, #0
 801bd72:	741a      	strb	r2, [r3, #16]
 801bd74:	2200      	movs	r2, #0
 801bd76:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801bd78:	693b      	ldr	r3, [r7, #16]
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	749a      	strb	r2, [r3, #18]
 801bd7e:	2200      	movs	r2, #0
 801bd80:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801bd82:	697b      	ldr	r3, [r7, #20]
}
 801bd84:	4618      	mov	r0, r3
 801bd86:	3718      	adds	r7, #24
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	bd80      	pop	{r7, pc}
 801bd8c:	08022104 	.word	0x08022104
 801bd90:	080227dc 	.word	0x080227dc
 801bd94:	08022158 	.word	0x08022158

0801bd98 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801bd98:	b5b0      	push	{r4, r5, r7, lr}
 801bd9a:	b08a      	sub	sp, #40	; 0x28
 801bd9c:	af04      	add	r7, sp, #16
 801bd9e:	60f8      	str	r0, [r7, #12]
 801bda0:	607b      	str	r3, [r7, #4]
 801bda2:	460b      	mov	r3, r1
 801bda4:	817b      	strh	r3, [r7, #10]
 801bda6:	4613      	mov	r3, r2
 801bda8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d106      	bne.n	801bdbe <tcp_output_alloc_header+0x26>
 801bdb0:	4b15      	ldr	r3, [pc, #84]	; (801be08 <tcp_output_alloc_header+0x70>)
 801bdb2:	f240 7242 	movw	r2, #1858	; 0x742
 801bdb6:	4915      	ldr	r1, [pc, #84]	; (801be0c <tcp_output_alloc_header+0x74>)
 801bdb8:	4815      	ldr	r0, [pc, #84]	; (801be10 <tcp_output_alloc_header+0x78>)
 801bdba:	f003 ff85 	bl	801fcc8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801bdc2:	68fb      	ldr	r3, [r7, #12]
 801bdc4:	8adb      	ldrh	r3, [r3, #22]
 801bdc6:	68fa      	ldr	r2, [r7, #12]
 801bdc8:	8b12      	ldrh	r2, [r2, #24]
 801bdca:	68f9      	ldr	r1, [r7, #12]
 801bdcc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801bdce:	893d      	ldrh	r5, [r7, #8]
 801bdd0:	897c      	ldrh	r4, [r7, #10]
 801bdd2:	9103      	str	r1, [sp, #12]
 801bdd4:	2110      	movs	r1, #16
 801bdd6:	9102      	str	r1, [sp, #8]
 801bdd8:	9201      	str	r2, [sp, #4]
 801bdda:	9300      	str	r3, [sp, #0]
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	462a      	mov	r2, r5
 801bde0:	4621      	mov	r1, r4
 801bde2:	f7ff ff67 	bl	801bcb4 <tcp_output_alloc_header_common>
 801bde6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801bde8:	697b      	ldr	r3, [r7, #20]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d006      	beq.n	801bdfc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdf2:	68fa      	ldr	r2, [r7, #12]
 801bdf4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801bdf6:	441a      	add	r2, r3
 801bdf8:	68fb      	ldr	r3, [r7, #12]
 801bdfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801bdfc:	697b      	ldr	r3, [r7, #20]
}
 801bdfe:	4618      	mov	r0, r3
 801be00:	3718      	adds	r7, #24
 801be02:	46bd      	mov	sp, r7
 801be04:	bdb0      	pop	{r4, r5, r7, pc}
 801be06:	bf00      	nop
 801be08:	08022104 	.word	0x08022104
 801be0c:	0802280c 	.word	0x0802280c
 801be10:	08022158 	.word	0x08022158

0801be14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801be14:	b580      	push	{r7, lr}
 801be16:	b088      	sub	sp, #32
 801be18:	af00      	add	r7, sp, #0
 801be1a:	60f8      	str	r0, [r7, #12]
 801be1c:	60b9      	str	r1, [r7, #8]
 801be1e:	4611      	mov	r1, r2
 801be20:	461a      	mov	r2, r3
 801be22:	460b      	mov	r3, r1
 801be24:	71fb      	strb	r3, [r7, #7]
 801be26:	4613      	mov	r3, r2
 801be28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801be2a:	2300      	movs	r3, #0
 801be2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d106      	bne.n	801be42 <tcp_output_fill_options+0x2e>
 801be34:	4b13      	ldr	r3, [pc, #76]	; (801be84 <tcp_output_fill_options+0x70>)
 801be36:	f240 7256 	movw	r2, #1878	; 0x756
 801be3a:	4913      	ldr	r1, [pc, #76]	; (801be88 <tcp_output_fill_options+0x74>)
 801be3c:	4813      	ldr	r0, [pc, #76]	; (801be8c <tcp_output_fill_options+0x78>)
 801be3e:	f003 ff43 	bl	801fcc8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801be42:	68bb      	ldr	r3, [r7, #8]
 801be44:	685b      	ldr	r3, [r3, #4]
 801be46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801be48:	69bb      	ldr	r3, [r7, #24]
 801be4a:	3314      	adds	r3, #20
 801be4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801be4e:	69bb      	ldr	r3, [r7, #24]
 801be50:	f103 0214 	add.w	r2, r3, #20
 801be54:	8bfb      	ldrh	r3, [r7, #30]
 801be56:	009b      	lsls	r3, r3, #2
 801be58:	4619      	mov	r1, r3
 801be5a:	79fb      	ldrb	r3, [r7, #7]
 801be5c:	009b      	lsls	r3, r3, #2
 801be5e:	f003 0304 	and.w	r3, r3, #4
 801be62:	440b      	add	r3, r1
 801be64:	4413      	add	r3, r2
 801be66:	697a      	ldr	r2, [r7, #20]
 801be68:	429a      	cmp	r2, r3
 801be6a:	d006      	beq.n	801be7a <tcp_output_fill_options+0x66>
 801be6c:	4b05      	ldr	r3, [pc, #20]	; (801be84 <tcp_output_fill_options+0x70>)
 801be6e:	f240 7275 	movw	r2, #1909	; 0x775
 801be72:	4907      	ldr	r1, [pc, #28]	; (801be90 <tcp_output_fill_options+0x7c>)
 801be74:	4805      	ldr	r0, [pc, #20]	; (801be8c <tcp_output_fill_options+0x78>)
 801be76:	f003 ff27 	bl	801fcc8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801be7a:	bf00      	nop
 801be7c:	3720      	adds	r7, #32
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}
 801be82:	bf00      	nop
 801be84:	08022104 	.word	0x08022104
 801be88:	08022834 	.word	0x08022834
 801be8c:	08022158 	.word	0x08022158
 801be90:	0802272c 	.word	0x0802272c

0801be94 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801be94:	b580      	push	{r7, lr}
 801be96:	b08a      	sub	sp, #40	; 0x28
 801be98:	af04      	add	r7, sp, #16
 801be9a:	60f8      	str	r0, [r7, #12]
 801be9c:	60b9      	str	r1, [r7, #8]
 801be9e:	607a      	str	r2, [r7, #4]
 801bea0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801bea2:	68bb      	ldr	r3, [r7, #8]
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d106      	bne.n	801beb6 <tcp_output_control_segment+0x22>
 801bea8:	4b1c      	ldr	r3, [pc, #112]	; (801bf1c <tcp_output_control_segment+0x88>)
 801beaa:	f240 7287 	movw	r2, #1927	; 0x787
 801beae:	491c      	ldr	r1, [pc, #112]	; (801bf20 <tcp_output_control_segment+0x8c>)
 801beb0:	481c      	ldr	r0, [pc, #112]	; (801bf24 <tcp_output_control_segment+0x90>)
 801beb2:	f003 ff09 	bl	801fcc8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801beb6:	683a      	ldr	r2, [r7, #0]
 801beb8:	6879      	ldr	r1, [r7, #4]
 801beba:	68f8      	ldr	r0, [r7, #12]
 801bebc:	f7fe ff40 	bl	801ad40 <tcp_route>
 801bec0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801bec2:	693b      	ldr	r3, [r7, #16]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d102      	bne.n	801bece <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801bec8:	23fc      	movs	r3, #252	; 0xfc
 801beca:	75fb      	strb	r3, [r7, #23]
 801becc:	e01c      	b.n	801bf08 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	2b00      	cmp	r3, #0
 801bed2:	d006      	beq.n	801bee2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	7adb      	ldrb	r3, [r3, #11]
 801bed8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	7a9b      	ldrb	r3, [r3, #10]
 801bede:	757b      	strb	r3, [r7, #21]
 801bee0:	e003      	b.n	801beea <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801bee2:	23ff      	movs	r3, #255	; 0xff
 801bee4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801bee6:	2300      	movs	r3, #0
 801bee8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801beea:	7dba      	ldrb	r2, [r7, #22]
 801beec:	693b      	ldr	r3, [r7, #16]
 801beee:	9302      	str	r3, [sp, #8]
 801bef0:	2306      	movs	r3, #6
 801bef2:	9301      	str	r3, [sp, #4]
 801bef4:	7d7b      	ldrb	r3, [r7, #21]
 801bef6:	9300      	str	r3, [sp, #0]
 801bef8:	4613      	mov	r3, r2
 801befa:	683a      	ldr	r2, [r7, #0]
 801befc:	6879      	ldr	r1, [r7, #4]
 801befe:	68b8      	ldr	r0, [r7, #8]
 801bf00:	f001 ffa0 	bl	801de44 <ip4_output_if>
 801bf04:	4603      	mov	r3, r0
 801bf06:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801bf08:	68b8      	ldr	r0, [r7, #8]
 801bf0a:	f7fa fdd9 	bl	8016ac0 <pbuf_free>
  return err;
 801bf0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bf12:	4618      	mov	r0, r3
 801bf14:	3718      	adds	r7, #24
 801bf16:	46bd      	mov	sp, r7
 801bf18:	bd80      	pop	{r7, pc}
 801bf1a:	bf00      	nop
 801bf1c:	08022104 	.word	0x08022104
 801bf20:	0802285c 	.word	0x0802285c
 801bf24:	08022158 	.word	0x08022158

0801bf28 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801bf28:	b590      	push	{r4, r7, lr}
 801bf2a:	b08b      	sub	sp, #44	; 0x2c
 801bf2c:	af04      	add	r7, sp, #16
 801bf2e:	60f8      	str	r0, [r7, #12]
 801bf30:	60b9      	str	r1, [r7, #8]
 801bf32:	607a      	str	r2, [r7, #4]
 801bf34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801bf36:	683b      	ldr	r3, [r7, #0]
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d106      	bne.n	801bf4a <tcp_rst+0x22>
 801bf3c:	4b1f      	ldr	r3, [pc, #124]	; (801bfbc <tcp_rst+0x94>)
 801bf3e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801bf42:	491f      	ldr	r1, [pc, #124]	; (801bfc0 <tcp_rst+0x98>)
 801bf44:	481f      	ldr	r0, [pc, #124]	; (801bfc4 <tcp_rst+0x9c>)
 801bf46:	f003 febf 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d106      	bne.n	801bf5e <tcp_rst+0x36>
 801bf50:	4b1a      	ldr	r3, [pc, #104]	; (801bfbc <tcp_rst+0x94>)
 801bf52:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801bf56:	491c      	ldr	r1, [pc, #112]	; (801bfc8 <tcp_rst+0xa0>)
 801bf58:	481a      	ldr	r0, [pc, #104]	; (801bfc4 <tcp_rst+0x9c>)
 801bf5a:	f003 feb5 	bl	801fcc8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bf5e:	2300      	movs	r3, #0
 801bf60:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801bf62:	f246 0308 	movw	r3, #24584	; 0x6008
 801bf66:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801bf68:	7dfb      	ldrb	r3, [r7, #23]
 801bf6a:	b29c      	uxth	r4, r3
 801bf6c:	68b8      	ldr	r0, [r7, #8]
 801bf6e:	f7f9 f9ca 	bl	8015306 <lwip_htonl>
 801bf72:	4602      	mov	r2, r0
 801bf74:	8abb      	ldrh	r3, [r7, #20]
 801bf76:	9303      	str	r3, [sp, #12]
 801bf78:	2314      	movs	r3, #20
 801bf7a:	9302      	str	r3, [sp, #8]
 801bf7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801bf7e:	9301      	str	r3, [sp, #4]
 801bf80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801bf82:	9300      	str	r3, [sp, #0]
 801bf84:	4613      	mov	r3, r2
 801bf86:	2200      	movs	r2, #0
 801bf88:	4621      	mov	r1, r4
 801bf8a:	6878      	ldr	r0, [r7, #4]
 801bf8c:	f7ff fe92 	bl	801bcb4 <tcp_output_alloc_header_common>
 801bf90:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801bf92:	693b      	ldr	r3, [r7, #16]
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d00c      	beq.n	801bfb2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bf98:	7dfb      	ldrb	r3, [r7, #23]
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	6939      	ldr	r1, [r7, #16]
 801bf9e:	68f8      	ldr	r0, [r7, #12]
 801bfa0:	f7ff ff38 	bl	801be14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfa6:	683a      	ldr	r2, [r7, #0]
 801bfa8:	6939      	ldr	r1, [r7, #16]
 801bfaa:	68f8      	ldr	r0, [r7, #12]
 801bfac:	f7ff ff72 	bl	801be94 <tcp_output_control_segment>
 801bfb0:	e000      	b.n	801bfb4 <tcp_rst+0x8c>
    return;
 801bfb2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bfb4:	371c      	adds	r7, #28
 801bfb6:	46bd      	mov	sp, r7
 801bfb8:	bd90      	pop	{r4, r7, pc}
 801bfba:	bf00      	nop
 801bfbc:	08022104 	.word	0x08022104
 801bfc0:	08022888 	.word	0x08022888
 801bfc4:	08022158 	.word	0x08022158
 801bfc8:	080228a4 	.word	0x080228a4

0801bfcc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801bfcc:	b590      	push	{r4, r7, lr}
 801bfce:	b087      	sub	sp, #28
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801bfd4:	2300      	movs	r3, #0
 801bfd6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801bfd8:	2300      	movs	r3, #0
 801bfda:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d106      	bne.n	801bff0 <tcp_send_empty_ack+0x24>
 801bfe2:	4b28      	ldr	r3, [pc, #160]	; (801c084 <tcp_send_empty_ack+0xb8>)
 801bfe4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801bfe8:	4927      	ldr	r1, [pc, #156]	; (801c088 <tcp_send_empty_ack+0xbc>)
 801bfea:	4828      	ldr	r0, [pc, #160]	; (801c08c <tcp_send_empty_ack+0xc0>)
 801bfec:	f003 fe6c 	bl	801fcc8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801bff0:	7dfb      	ldrb	r3, [r7, #23]
 801bff2:	009b      	lsls	r3, r3, #2
 801bff4:	b2db      	uxtb	r3, r3
 801bff6:	f003 0304 	and.w	r3, r3, #4
 801bffa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bffc:	7d7b      	ldrb	r3, [r7, #21]
 801bffe:	b29c      	uxth	r4, r3
 801c000:	687b      	ldr	r3, [r7, #4]
 801c002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c004:	4618      	mov	r0, r3
 801c006:	f7f9 f97e 	bl	8015306 <lwip_htonl>
 801c00a:	4603      	mov	r3, r0
 801c00c:	2200      	movs	r2, #0
 801c00e:	4621      	mov	r1, r4
 801c010:	6878      	ldr	r0, [r7, #4]
 801c012:	f7ff fec1 	bl	801bd98 <tcp_output_alloc_header>
 801c016:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c018:	693b      	ldr	r3, [r7, #16]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d109      	bne.n	801c032 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	8b5b      	ldrh	r3, [r3, #26]
 801c022:	f043 0303 	orr.w	r3, r3, #3
 801c026:	b29a      	uxth	r2, r3
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801c02c:	f06f 0301 	mvn.w	r3, #1
 801c030:	e023      	b.n	801c07a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801c032:	7dbb      	ldrb	r3, [r7, #22]
 801c034:	7dfa      	ldrb	r2, [r7, #23]
 801c036:	6939      	ldr	r1, [r7, #16]
 801c038:	6878      	ldr	r0, [r7, #4]
 801c03a:	f7ff feeb 	bl	801be14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c03e:	687a      	ldr	r2, [r7, #4]
 801c040:	687b      	ldr	r3, [r7, #4]
 801c042:	3304      	adds	r3, #4
 801c044:	6939      	ldr	r1, [r7, #16]
 801c046:	6878      	ldr	r0, [r7, #4]
 801c048:	f7ff ff24 	bl	801be94 <tcp_output_control_segment>
 801c04c:	4603      	mov	r3, r0
 801c04e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801c050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c054:	2b00      	cmp	r3, #0
 801c056:	d007      	beq.n	801c068 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	8b5b      	ldrh	r3, [r3, #26]
 801c05c:	f043 0303 	orr.w	r3, r3, #3
 801c060:	b29a      	uxth	r2, r3
 801c062:	687b      	ldr	r3, [r7, #4]
 801c064:	835a      	strh	r2, [r3, #26]
 801c066:	e006      	b.n	801c076 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c068:	687b      	ldr	r3, [r7, #4]
 801c06a:	8b5b      	ldrh	r3, [r3, #26]
 801c06c:	f023 0303 	bic.w	r3, r3, #3
 801c070:	b29a      	uxth	r2, r3
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801c076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c07a:	4618      	mov	r0, r3
 801c07c:	371c      	adds	r7, #28
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd90      	pop	{r4, r7, pc}
 801c082:	bf00      	nop
 801c084:	08022104 	.word	0x08022104
 801c088:	080228c0 	.word	0x080228c0
 801c08c:	08022158 	.word	0x08022158

0801c090 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c090:	b590      	push	{r4, r7, lr}
 801c092:	b087      	sub	sp, #28
 801c094:	af00      	add	r7, sp, #0
 801c096:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c098:	2300      	movs	r3, #0
 801c09a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d106      	bne.n	801c0b0 <tcp_keepalive+0x20>
 801c0a2:	4b18      	ldr	r3, [pc, #96]	; (801c104 <tcp_keepalive+0x74>)
 801c0a4:	f640 0224 	movw	r2, #2084	; 0x824
 801c0a8:	4917      	ldr	r1, [pc, #92]	; (801c108 <tcp_keepalive+0x78>)
 801c0aa:	4818      	ldr	r0, [pc, #96]	; (801c10c <tcp_keepalive+0x7c>)
 801c0ac:	f003 fe0c 	bl	801fcc8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c0b0:	7dfb      	ldrb	r3, [r7, #23]
 801c0b2:	b29c      	uxth	r4, r3
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c0b8:	3b01      	subs	r3, #1
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	f7f9 f923 	bl	8015306 <lwip_htonl>
 801c0c0:	4603      	mov	r3, r0
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	4621      	mov	r1, r4
 801c0c6:	6878      	ldr	r0, [r7, #4]
 801c0c8:	f7ff fe66 	bl	801bd98 <tcp_output_alloc_header>
 801c0cc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c0ce:	693b      	ldr	r3, [r7, #16]
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d102      	bne.n	801c0da <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801c0d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c0d8:	e010      	b.n	801c0fc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c0da:	7dfb      	ldrb	r3, [r7, #23]
 801c0dc:	2200      	movs	r2, #0
 801c0de:	6939      	ldr	r1, [r7, #16]
 801c0e0:	6878      	ldr	r0, [r7, #4]
 801c0e2:	f7ff fe97 	bl	801be14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c0e6:	687a      	ldr	r2, [r7, #4]
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	3304      	adds	r3, #4
 801c0ec:	6939      	ldr	r1, [r7, #16]
 801c0ee:	6878      	ldr	r0, [r7, #4]
 801c0f0:	f7ff fed0 	bl	801be94 <tcp_output_control_segment>
 801c0f4:	4603      	mov	r3, r0
 801c0f6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c0f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c0fc:	4618      	mov	r0, r3
 801c0fe:	371c      	adds	r7, #28
 801c100:	46bd      	mov	sp, r7
 801c102:	bd90      	pop	{r4, r7, pc}
 801c104:	08022104 	.word	0x08022104
 801c108:	080228e0 	.word	0x080228e0
 801c10c:	08022158 	.word	0x08022158

0801c110 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c110:	b590      	push	{r4, r7, lr}
 801c112:	b08b      	sub	sp, #44	; 0x2c
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c118:	2300      	movs	r3, #0
 801c11a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d106      	bne.n	801c132 <tcp_zero_window_probe+0x22>
 801c124:	4b4c      	ldr	r3, [pc, #304]	; (801c258 <tcp_zero_window_probe+0x148>)
 801c126:	f640 024f 	movw	r2, #2127	; 0x84f
 801c12a:	494c      	ldr	r1, [pc, #304]	; (801c25c <tcp_zero_window_probe+0x14c>)
 801c12c:	484c      	ldr	r0, [pc, #304]	; (801c260 <tcp_zero_window_probe+0x150>)
 801c12e:	f003 fdcb 	bl	801fcc8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c136:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801c138:	6a3b      	ldr	r3, [r7, #32]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d101      	bne.n	801c142 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801c13e:	2300      	movs	r3, #0
 801c140:	e086      	b.n	801c250 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c148:	2bff      	cmp	r3, #255	; 0xff
 801c14a:	d007      	beq.n	801c15c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801c152:	3301      	adds	r3, #1
 801c154:	b2da      	uxtb	r2, r3
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c15c:	6a3b      	ldr	r3, [r7, #32]
 801c15e:	68db      	ldr	r3, [r3, #12]
 801c160:	899b      	ldrh	r3, [r3, #12]
 801c162:	b29b      	uxth	r3, r3
 801c164:	4618      	mov	r0, r3
 801c166:	f7f9 f8b9 	bl	80152dc <lwip_htons>
 801c16a:	4603      	mov	r3, r0
 801c16c:	b2db      	uxtb	r3, r3
 801c16e:	f003 0301 	and.w	r3, r3, #1
 801c172:	2b00      	cmp	r3, #0
 801c174:	d005      	beq.n	801c182 <tcp_zero_window_probe+0x72>
 801c176:	6a3b      	ldr	r3, [r7, #32]
 801c178:	891b      	ldrh	r3, [r3, #8]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d101      	bne.n	801c182 <tcp_zero_window_probe+0x72>
 801c17e:	2301      	movs	r3, #1
 801c180:	e000      	b.n	801c184 <tcp_zero_window_probe+0x74>
 801c182:	2300      	movs	r3, #0
 801c184:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801c186:	7ffb      	ldrb	r3, [r7, #31]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	bf0c      	ite	eq
 801c18c:	2301      	moveq	r3, #1
 801c18e:	2300      	movne	r3, #0
 801c190:	b2db      	uxtb	r3, r3
 801c192:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c198:	b299      	uxth	r1, r3
 801c19a:	6a3b      	ldr	r3, [r7, #32]
 801c19c:	68db      	ldr	r3, [r3, #12]
 801c19e:	685b      	ldr	r3, [r3, #4]
 801c1a0:	8bba      	ldrh	r2, [r7, #28]
 801c1a2:	6878      	ldr	r0, [r7, #4]
 801c1a4:	f7ff fdf8 	bl	801bd98 <tcp_output_alloc_header>
 801c1a8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801c1aa:	69bb      	ldr	r3, [r7, #24]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d102      	bne.n	801c1b6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801c1b0:	f04f 33ff 	mov.w	r3, #4294967295
 801c1b4:	e04c      	b.n	801c250 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c1b6:	69bb      	ldr	r3, [r7, #24]
 801c1b8:	685b      	ldr	r3, [r3, #4]
 801c1ba:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801c1bc:	7ffb      	ldrb	r3, [r7, #31]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d011      	beq.n	801c1e6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c1c2:	697b      	ldr	r3, [r7, #20]
 801c1c4:	899b      	ldrh	r3, [r3, #12]
 801c1c6:	b29b      	uxth	r3, r3
 801c1c8:	b21b      	sxth	r3, r3
 801c1ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c1ce:	b21c      	sxth	r4, r3
 801c1d0:	2011      	movs	r0, #17
 801c1d2:	f7f9 f883 	bl	80152dc <lwip_htons>
 801c1d6:	4603      	mov	r3, r0
 801c1d8:	b21b      	sxth	r3, r3
 801c1da:	4323      	orrs	r3, r4
 801c1dc:	b21b      	sxth	r3, r3
 801c1de:	b29a      	uxth	r2, r3
 801c1e0:	697b      	ldr	r3, [r7, #20]
 801c1e2:	819a      	strh	r2, [r3, #12]
 801c1e4:	e010      	b.n	801c208 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801c1e6:	69bb      	ldr	r3, [r7, #24]
 801c1e8:	685b      	ldr	r3, [r3, #4]
 801c1ea:	3314      	adds	r3, #20
 801c1ec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c1ee:	6a3b      	ldr	r3, [r7, #32]
 801c1f0:	6858      	ldr	r0, [r3, #4]
 801c1f2:	6a3b      	ldr	r3, [r7, #32]
 801c1f4:	685b      	ldr	r3, [r3, #4]
 801c1f6:	891a      	ldrh	r2, [r3, #8]
 801c1f8:	6a3b      	ldr	r3, [r7, #32]
 801c1fa:	891b      	ldrh	r3, [r3, #8]
 801c1fc:	1ad3      	subs	r3, r2, r3
 801c1fe:	b29b      	uxth	r3, r3
 801c200:	2201      	movs	r2, #1
 801c202:	6939      	ldr	r1, [r7, #16]
 801c204:	f7fa fe52 	bl	8016eac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c208:	6a3b      	ldr	r3, [r7, #32]
 801c20a:	68db      	ldr	r3, [r3, #12]
 801c20c:	685b      	ldr	r3, [r3, #4]
 801c20e:	4618      	mov	r0, r3
 801c210:	f7f9 f879 	bl	8015306 <lwip_htonl>
 801c214:	4603      	mov	r3, r0
 801c216:	3301      	adds	r3, #1
 801c218:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c21e:	68fb      	ldr	r3, [r7, #12]
 801c220:	1ad3      	subs	r3, r2, r3
 801c222:	2b00      	cmp	r3, #0
 801c224:	da02      	bge.n	801c22c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	68fa      	ldr	r2, [r7, #12]
 801c22a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c230:	2200      	movs	r2, #0
 801c232:	69b9      	ldr	r1, [r7, #24]
 801c234:	6878      	ldr	r0, [r7, #4]
 801c236:	f7ff fded 	bl	801be14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c23a:	687a      	ldr	r2, [r7, #4]
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	3304      	adds	r3, #4
 801c240:	69b9      	ldr	r1, [r7, #24]
 801c242:	6878      	ldr	r0, [r7, #4]
 801c244:	f7ff fe26 	bl	801be94 <tcp_output_control_segment>
 801c248:	4603      	mov	r3, r0
 801c24a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801c24c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c250:	4618      	mov	r0, r3
 801c252:	372c      	adds	r7, #44	; 0x2c
 801c254:	46bd      	mov	sp, r7
 801c256:	bd90      	pop	{r4, r7, pc}
 801c258:	08022104 	.word	0x08022104
 801c25c:	080228fc 	.word	0x080228fc
 801c260:	08022158 	.word	0x08022158

0801c264 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801c264:	b580      	push	{r7, lr}
 801c266:	b082      	sub	sp, #8
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801c26c:	f7fa ff0c 	bl	8017088 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c270:	4b0a      	ldr	r3, [pc, #40]	; (801c29c <tcpip_tcp_timer+0x38>)
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d103      	bne.n	801c280 <tcpip_tcp_timer+0x1c>
 801c278:	4b09      	ldr	r3, [pc, #36]	; (801c2a0 <tcpip_tcp_timer+0x3c>)
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	d005      	beq.n	801c28c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c280:	2200      	movs	r2, #0
 801c282:	4908      	ldr	r1, [pc, #32]	; (801c2a4 <tcpip_tcp_timer+0x40>)
 801c284:	20fa      	movs	r0, #250	; 0xfa
 801c286:	f000 f8f3 	bl	801c470 <sys_timeout>
 801c28a:	e003      	b.n	801c294 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801c28c:	4b06      	ldr	r3, [pc, #24]	; (801c2a8 <tcpip_tcp_timer+0x44>)
 801c28e:	2200      	movs	r2, #0
 801c290:	601a      	str	r2, [r3, #0]
  }
}
 801c292:	bf00      	nop
 801c294:	bf00      	nop
 801c296:	3708      	adds	r7, #8
 801c298:	46bd      	mov	sp, r7
 801c29a:	bd80      	pop	{r7, pc}
 801c29c:	2001108c 	.word	0x2001108c
 801c2a0:	20011090 	.word	0x20011090
 801c2a4:	0801c265 	.word	0x0801c265
 801c2a8:	200110d8 	.word	0x200110d8

0801c2ac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801c2ac:	b580      	push	{r7, lr}
 801c2ae:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c2b0:	4b0a      	ldr	r3, [pc, #40]	; (801c2dc <tcp_timer_needed+0x30>)
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d10f      	bne.n	801c2d8 <tcp_timer_needed+0x2c>
 801c2b8:	4b09      	ldr	r3, [pc, #36]	; (801c2e0 <tcp_timer_needed+0x34>)
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d103      	bne.n	801c2c8 <tcp_timer_needed+0x1c>
 801c2c0:	4b08      	ldr	r3, [pc, #32]	; (801c2e4 <tcp_timer_needed+0x38>)
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	d007      	beq.n	801c2d8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801c2c8:	4b04      	ldr	r3, [pc, #16]	; (801c2dc <tcp_timer_needed+0x30>)
 801c2ca:	2201      	movs	r2, #1
 801c2cc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801c2ce:	2200      	movs	r2, #0
 801c2d0:	4905      	ldr	r1, [pc, #20]	; (801c2e8 <tcp_timer_needed+0x3c>)
 801c2d2:	20fa      	movs	r0, #250	; 0xfa
 801c2d4:	f000 f8cc 	bl	801c470 <sys_timeout>
  }
}
 801c2d8:	bf00      	nop
 801c2da:	bd80      	pop	{r7, pc}
 801c2dc:	200110d8 	.word	0x200110d8
 801c2e0:	2001108c 	.word	0x2001108c
 801c2e4:	20011090 	.word	0x20011090
 801c2e8:	0801c265 	.word	0x0801c265

0801c2ec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c2ec:	b580      	push	{r7, lr}
 801c2ee:	b086      	sub	sp, #24
 801c2f0:	af00      	add	r7, sp, #0
 801c2f2:	60f8      	str	r0, [r7, #12]
 801c2f4:	60b9      	str	r1, [r7, #8]
 801c2f6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c2f8:	200a      	movs	r0, #10
 801c2fa:	f7f9 fcc7 	bl	8015c8c <memp_malloc>
 801c2fe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801c300:	693b      	ldr	r3, [r7, #16]
 801c302:	2b00      	cmp	r3, #0
 801c304:	d109      	bne.n	801c31a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c306:	693b      	ldr	r3, [r7, #16]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d151      	bne.n	801c3b0 <sys_timeout_abs+0xc4>
 801c30c:	4b2a      	ldr	r3, [pc, #168]	; (801c3b8 <sys_timeout_abs+0xcc>)
 801c30e:	22be      	movs	r2, #190	; 0xbe
 801c310:	492a      	ldr	r1, [pc, #168]	; (801c3bc <sys_timeout_abs+0xd0>)
 801c312:	482b      	ldr	r0, [pc, #172]	; (801c3c0 <sys_timeout_abs+0xd4>)
 801c314:	f003 fcd8 	bl	801fcc8 <iprintf>
    return;
 801c318:	e04a      	b.n	801c3b0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801c31a:	693b      	ldr	r3, [r7, #16]
 801c31c:	2200      	movs	r2, #0
 801c31e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801c320:	693b      	ldr	r3, [r7, #16]
 801c322:	68ba      	ldr	r2, [r7, #8]
 801c324:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801c326:	693b      	ldr	r3, [r7, #16]
 801c328:	687a      	ldr	r2, [r7, #4]
 801c32a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801c32c:	693b      	ldr	r3, [r7, #16]
 801c32e:	68fa      	ldr	r2, [r7, #12]
 801c330:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c332:	4b24      	ldr	r3, [pc, #144]	; (801c3c4 <sys_timeout_abs+0xd8>)
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	2b00      	cmp	r3, #0
 801c338:	d103      	bne.n	801c342 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801c33a:	4a22      	ldr	r2, [pc, #136]	; (801c3c4 <sys_timeout_abs+0xd8>)
 801c33c:	693b      	ldr	r3, [r7, #16]
 801c33e:	6013      	str	r3, [r2, #0]
    return;
 801c340:	e037      	b.n	801c3b2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801c342:	693b      	ldr	r3, [r7, #16]
 801c344:	685a      	ldr	r2, [r3, #4]
 801c346:	4b1f      	ldr	r3, [pc, #124]	; (801c3c4 <sys_timeout_abs+0xd8>)
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	685b      	ldr	r3, [r3, #4]
 801c34c:	1ad3      	subs	r3, r2, r3
 801c34e:	0fdb      	lsrs	r3, r3, #31
 801c350:	f003 0301 	and.w	r3, r3, #1
 801c354:	b2db      	uxtb	r3, r3
 801c356:	2b00      	cmp	r3, #0
 801c358:	d007      	beq.n	801c36a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801c35a:	4b1a      	ldr	r3, [pc, #104]	; (801c3c4 <sys_timeout_abs+0xd8>)
 801c35c:	681a      	ldr	r2, [r3, #0]
 801c35e:	693b      	ldr	r3, [r7, #16]
 801c360:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801c362:	4a18      	ldr	r2, [pc, #96]	; (801c3c4 <sys_timeout_abs+0xd8>)
 801c364:	693b      	ldr	r3, [r7, #16]
 801c366:	6013      	str	r3, [r2, #0]
 801c368:	e023      	b.n	801c3b2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801c36a:	4b16      	ldr	r3, [pc, #88]	; (801c3c4 <sys_timeout_abs+0xd8>)
 801c36c:	681b      	ldr	r3, [r3, #0]
 801c36e:	617b      	str	r3, [r7, #20]
 801c370:	e01a      	b.n	801c3a8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c372:	697b      	ldr	r3, [r7, #20]
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d00b      	beq.n	801c392 <sys_timeout_abs+0xa6>
 801c37a:	693b      	ldr	r3, [r7, #16]
 801c37c:	685a      	ldr	r2, [r3, #4]
 801c37e:	697b      	ldr	r3, [r7, #20]
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	685b      	ldr	r3, [r3, #4]
 801c384:	1ad3      	subs	r3, r2, r3
 801c386:	0fdb      	lsrs	r3, r3, #31
 801c388:	f003 0301 	and.w	r3, r3, #1
 801c38c:	b2db      	uxtb	r3, r3
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d007      	beq.n	801c3a2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801c392:	697b      	ldr	r3, [r7, #20]
 801c394:	681a      	ldr	r2, [r3, #0]
 801c396:	693b      	ldr	r3, [r7, #16]
 801c398:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801c39a:	697b      	ldr	r3, [r7, #20]
 801c39c:	693a      	ldr	r2, [r7, #16]
 801c39e:	601a      	str	r2, [r3, #0]
        break;
 801c3a0:	e007      	b.n	801c3b2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801c3a2:	697b      	ldr	r3, [r7, #20]
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	617b      	str	r3, [r7, #20]
 801c3a8:	697b      	ldr	r3, [r7, #20]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d1e1      	bne.n	801c372 <sys_timeout_abs+0x86>
 801c3ae:	e000      	b.n	801c3b2 <sys_timeout_abs+0xc6>
    return;
 801c3b0:	bf00      	nop
      }
    }
  }
}
 801c3b2:	3718      	adds	r7, #24
 801c3b4:	46bd      	mov	sp, r7
 801c3b6:	bd80      	pop	{r7, pc}
 801c3b8:	08022920 	.word	0x08022920
 801c3bc:	08022954 	.word	0x08022954
 801c3c0:	08022994 	.word	0x08022994
 801c3c4:	200110d0 	.word	0x200110d0

0801c3c8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	b086      	sub	sp, #24
 801c3cc:	af00      	add	r7, sp, #0
 801c3ce:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c3d4:	697b      	ldr	r3, [r7, #20]
 801c3d6:	685b      	ldr	r3, [r3, #4]
 801c3d8:	4798      	blx	r3

  now = sys_now();
 801c3da:	f7f3 f9c7 	bl	800f76c <sys_now>
 801c3de:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c3e0:	697b      	ldr	r3, [r7, #20]
 801c3e2:	681a      	ldr	r2, [r3, #0]
 801c3e4:	4b0f      	ldr	r3, [pc, #60]	; (801c424 <lwip_cyclic_timer+0x5c>)
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	4413      	add	r3, r2
 801c3ea:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c3ec:	68fa      	ldr	r2, [r7, #12]
 801c3ee:	693b      	ldr	r3, [r7, #16]
 801c3f0:	1ad3      	subs	r3, r2, r3
 801c3f2:	0fdb      	lsrs	r3, r3, #31
 801c3f4:	f003 0301 	and.w	r3, r3, #1
 801c3f8:	b2db      	uxtb	r3, r3
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d009      	beq.n	801c412 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c3fe:	697b      	ldr	r3, [r7, #20]
 801c400:	681a      	ldr	r2, [r3, #0]
 801c402:	693b      	ldr	r3, [r7, #16]
 801c404:	4413      	add	r3, r2
 801c406:	687a      	ldr	r2, [r7, #4]
 801c408:	4907      	ldr	r1, [pc, #28]	; (801c428 <lwip_cyclic_timer+0x60>)
 801c40a:	4618      	mov	r0, r3
 801c40c:	f7ff ff6e 	bl	801c2ec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c410:	e004      	b.n	801c41c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c412:	687a      	ldr	r2, [r7, #4]
 801c414:	4904      	ldr	r1, [pc, #16]	; (801c428 <lwip_cyclic_timer+0x60>)
 801c416:	68f8      	ldr	r0, [r7, #12]
 801c418:	f7ff ff68 	bl	801c2ec <sys_timeout_abs>
}
 801c41c:	bf00      	nop
 801c41e:	3718      	adds	r7, #24
 801c420:	46bd      	mov	sp, r7
 801c422:	bd80      	pop	{r7, pc}
 801c424:	200110d4 	.word	0x200110d4
 801c428:	0801c3c9 	.word	0x0801c3c9

0801c42c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801c42c:	b580      	push	{r7, lr}
 801c42e:	b082      	sub	sp, #8
 801c430:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c432:	2301      	movs	r3, #1
 801c434:	607b      	str	r3, [r7, #4]
 801c436:	e00e      	b.n	801c456 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c438:	4a0b      	ldr	r2, [pc, #44]	; (801c468 <sys_timeouts_init+0x3c>)
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	00db      	lsls	r3, r3, #3
 801c444:	4a08      	ldr	r2, [pc, #32]	; (801c468 <sys_timeouts_init+0x3c>)
 801c446:	4413      	add	r3, r2
 801c448:	461a      	mov	r2, r3
 801c44a:	4908      	ldr	r1, [pc, #32]	; (801c46c <sys_timeouts_init+0x40>)
 801c44c:	f000 f810 	bl	801c470 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	3301      	adds	r3, #1
 801c454:	607b      	str	r3, [r7, #4]
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	2b02      	cmp	r3, #2
 801c45a:	d9ed      	bls.n	801c438 <sys_timeouts_init+0xc>
  }
}
 801c45c:	bf00      	nop
 801c45e:	bf00      	nop
 801c460:	3708      	adds	r7, #8
 801c462:	46bd      	mov	sp, r7
 801c464:	bd80      	pop	{r7, pc}
 801c466:	bf00      	nop
 801c468:	08023560 	.word	0x08023560
 801c46c:	0801c3c9 	.word	0x0801c3c9

0801c470 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b086      	sub	sp, #24
 801c474:	af00      	add	r7, sp, #0
 801c476:	60f8      	str	r0, [r7, #12]
 801c478:	60b9      	str	r1, [r7, #8]
 801c47a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c482:	d306      	bcc.n	801c492 <sys_timeout+0x22>
 801c484:	4b0a      	ldr	r3, [pc, #40]	; (801c4b0 <sys_timeout+0x40>)
 801c486:	f240 1229 	movw	r2, #297	; 0x129
 801c48a:	490a      	ldr	r1, [pc, #40]	; (801c4b4 <sys_timeout+0x44>)
 801c48c:	480a      	ldr	r0, [pc, #40]	; (801c4b8 <sys_timeout+0x48>)
 801c48e:	f003 fc1b 	bl	801fcc8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c492:	f7f3 f96b 	bl	800f76c <sys_now>
 801c496:	4602      	mov	r2, r0
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	4413      	add	r3, r2
 801c49c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c49e:	687a      	ldr	r2, [r7, #4]
 801c4a0:	68b9      	ldr	r1, [r7, #8]
 801c4a2:	6978      	ldr	r0, [r7, #20]
 801c4a4:	f7ff ff22 	bl	801c2ec <sys_timeout_abs>
#endif
}
 801c4a8:	bf00      	nop
 801c4aa:	3718      	adds	r7, #24
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	bd80      	pop	{r7, pc}
 801c4b0:	08022920 	.word	0x08022920
 801c4b4:	080229bc 	.word	0x080229bc
 801c4b8:	08022994 	.word	0x08022994

0801c4bc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b084      	sub	sp, #16
 801c4c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c4c2:	f7f3 f953 	bl	800f76c <sys_now>
 801c4c6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801c4c8:	4b17      	ldr	r3, [pc, #92]	; (801c528 <sys_check_timeouts+0x6c>)
 801c4ca:	681b      	ldr	r3, [r3, #0]
 801c4cc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801c4ce:	68bb      	ldr	r3, [r7, #8]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d022      	beq.n	801c51a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c4d4:	68bb      	ldr	r3, [r7, #8]
 801c4d6:	685b      	ldr	r3, [r3, #4]
 801c4d8:	68fa      	ldr	r2, [r7, #12]
 801c4da:	1ad3      	subs	r3, r2, r3
 801c4dc:	0fdb      	lsrs	r3, r3, #31
 801c4de:	f003 0301 	and.w	r3, r3, #1
 801c4e2:	b2db      	uxtb	r3, r3
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d11a      	bne.n	801c51e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801c4e8:	68bb      	ldr	r3, [r7, #8]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	4a0e      	ldr	r2, [pc, #56]	; (801c528 <sys_check_timeouts+0x6c>)
 801c4ee:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801c4f0:	68bb      	ldr	r3, [r7, #8]
 801c4f2:	689b      	ldr	r3, [r3, #8]
 801c4f4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801c4f6:	68bb      	ldr	r3, [r7, #8]
 801c4f8:	68db      	ldr	r3, [r3, #12]
 801c4fa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801c4fc:	68bb      	ldr	r3, [r7, #8]
 801c4fe:	685b      	ldr	r3, [r3, #4]
 801c500:	4a0a      	ldr	r2, [pc, #40]	; (801c52c <sys_check_timeouts+0x70>)
 801c502:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c504:	68b9      	ldr	r1, [r7, #8]
 801c506:	200a      	movs	r0, #10
 801c508:	f7f9 fc36 	bl	8015d78 <memp_free>
    if (handler != NULL) {
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d0da      	beq.n	801c4c8 <sys_check_timeouts+0xc>
      handler(arg);
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	6838      	ldr	r0, [r7, #0]
 801c516:	4798      	blx	r3
  do {
 801c518:	e7d6      	b.n	801c4c8 <sys_check_timeouts+0xc>
      return;
 801c51a:	bf00      	nop
 801c51c:	e000      	b.n	801c520 <sys_check_timeouts+0x64>
      return;
 801c51e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c520:	3710      	adds	r7, #16
 801c522:	46bd      	mov	sp, r7
 801c524:	bd80      	pop	{r7, pc}
 801c526:	bf00      	nop
 801c528:	200110d0 	.word	0x200110d0
 801c52c:	200110d4 	.word	0x200110d4

0801c530 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c530:	b580      	push	{r7, lr}
 801c532:	b082      	sub	sp, #8
 801c534:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c536:	4b16      	ldr	r3, [pc, #88]	; (801c590 <sys_timeouts_sleeptime+0x60>)
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d102      	bne.n	801c544 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c53e:	f04f 33ff 	mov.w	r3, #4294967295
 801c542:	e020      	b.n	801c586 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801c544:	f7f3 f912 	bl	800f76c <sys_now>
 801c548:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c54a:	4b11      	ldr	r3, [pc, #68]	; (801c590 <sys_timeouts_sleeptime+0x60>)
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	685a      	ldr	r2, [r3, #4]
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	1ad3      	subs	r3, r2, r3
 801c554:	0fdb      	lsrs	r3, r3, #31
 801c556:	f003 0301 	and.w	r3, r3, #1
 801c55a:	b2db      	uxtb	r3, r3
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d001      	beq.n	801c564 <sys_timeouts_sleeptime+0x34>
    return 0;
 801c560:	2300      	movs	r3, #0
 801c562:	e010      	b.n	801c586 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801c564:	4b0a      	ldr	r3, [pc, #40]	; (801c590 <sys_timeouts_sleeptime+0x60>)
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	685a      	ldr	r2, [r3, #4]
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	1ad3      	subs	r3, r2, r3
 801c56e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801c570:	683b      	ldr	r3, [r7, #0]
 801c572:	2b00      	cmp	r3, #0
 801c574:	da06      	bge.n	801c584 <sys_timeouts_sleeptime+0x54>
 801c576:	4b07      	ldr	r3, [pc, #28]	; (801c594 <sys_timeouts_sleeptime+0x64>)
 801c578:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801c57c:	4906      	ldr	r1, [pc, #24]	; (801c598 <sys_timeouts_sleeptime+0x68>)
 801c57e:	4807      	ldr	r0, [pc, #28]	; (801c59c <sys_timeouts_sleeptime+0x6c>)
 801c580:	f003 fba2 	bl	801fcc8 <iprintf>
    return ret;
 801c584:	683b      	ldr	r3, [r7, #0]
  }
}
 801c586:	4618      	mov	r0, r3
 801c588:	3708      	adds	r7, #8
 801c58a:	46bd      	mov	sp, r7
 801c58c:	bd80      	pop	{r7, pc}
 801c58e:	bf00      	nop
 801c590:	200110d0 	.word	0x200110d0
 801c594:	08022920 	.word	0x08022920
 801c598:	080229f4 	.word	0x080229f4
 801c59c:	08022994 	.word	0x08022994

0801c5a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c5a4:	f003 fba8 	bl	801fcf8 <rand>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	b29b      	uxth	r3, r3
 801c5ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801c5b0:	b29b      	uxth	r3, r3
 801c5b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801c5b6:	b29a      	uxth	r2, r3
 801c5b8:	4b01      	ldr	r3, [pc, #4]	; (801c5c0 <udp_init+0x20>)
 801c5ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801c5bc:	bf00      	nop
 801c5be:	bd80      	pop	{r7, pc}
 801c5c0:	2000004c 	.word	0x2000004c

0801c5c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b084      	sub	sp, #16
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	60f8      	str	r0, [r7, #12]
 801c5cc:	60b9      	str	r1, [r7, #8]
 801c5ce:	4613      	mov	r3, r2
 801c5d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d105      	bne.n	801c5e4 <udp_input_local_match+0x20>
 801c5d8:	4b27      	ldr	r3, [pc, #156]	; (801c678 <udp_input_local_match+0xb4>)
 801c5da:	2287      	movs	r2, #135	; 0x87
 801c5dc:	4927      	ldr	r1, [pc, #156]	; (801c67c <udp_input_local_match+0xb8>)
 801c5de:	4828      	ldr	r0, [pc, #160]	; (801c680 <udp_input_local_match+0xbc>)
 801c5e0:	f003 fb72 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c5e4:	68bb      	ldr	r3, [r7, #8]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d105      	bne.n	801c5f6 <udp_input_local_match+0x32>
 801c5ea:	4b23      	ldr	r3, [pc, #140]	; (801c678 <udp_input_local_match+0xb4>)
 801c5ec:	2288      	movs	r2, #136	; 0x88
 801c5ee:	4925      	ldr	r1, [pc, #148]	; (801c684 <udp_input_local_match+0xc0>)
 801c5f0:	4823      	ldr	r0, [pc, #140]	; (801c680 <udp_input_local_match+0xbc>)
 801c5f2:	f003 fb69 	bl	801fcc8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	7a1b      	ldrb	r3, [r3, #8]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	d00b      	beq.n	801c616 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	7a1a      	ldrb	r2, [r3, #8]
 801c602:	4b21      	ldr	r3, [pc, #132]	; (801c688 <udp_input_local_match+0xc4>)
 801c604:	685b      	ldr	r3, [r3, #4]
 801c606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c60a:	3301      	adds	r3, #1
 801c60c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c60e:	429a      	cmp	r2, r3
 801c610:	d001      	beq.n	801c616 <udp_input_local_match+0x52>
    return 0;
 801c612:	2300      	movs	r3, #0
 801c614:	e02b      	b.n	801c66e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c616:	79fb      	ldrb	r3, [r7, #7]
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d018      	beq.n	801c64e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d013      	beq.n	801c64a <udp_input_local_match+0x86>
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	2b00      	cmp	r3, #0
 801c628:	d00f      	beq.n	801c64a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c62a:	4b17      	ldr	r3, [pc, #92]	; (801c688 <udp_input_local_match+0xc4>)
 801c62c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c632:	d00a      	beq.n	801c64a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	681a      	ldr	r2, [r3, #0]
 801c638:	4b13      	ldr	r3, [pc, #76]	; (801c688 <udp_input_local_match+0xc4>)
 801c63a:	695b      	ldr	r3, [r3, #20]
 801c63c:	405a      	eors	r2, r3
 801c63e:	68bb      	ldr	r3, [r7, #8]
 801c640:	3308      	adds	r3, #8
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c646:	2b00      	cmp	r3, #0
 801c648:	d110      	bne.n	801c66c <udp_input_local_match+0xa8>
          return 1;
 801c64a:	2301      	movs	r3, #1
 801c64c:	e00f      	b.n	801c66e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d009      	beq.n	801c668 <udp_input_local_match+0xa4>
 801c654:	68fb      	ldr	r3, [r7, #12]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	2b00      	cmp	r3, #0
 801c65a:	d005      	beq.n	801c668 <udp_input_local_match+0xa4>
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	681a      	ldr	r2, [r3, #0]
 801c660:	4b09      	ldr	r3, [pc, #36]	; (801c688 <udp_input_local_match+0xc4>)
 801c662:	695b      	ldr	r3, [r3, #20]
 801c664:	429a      	cmp	r2, r3
 801c666:	d101      	bne.n	801c66c <udp_input_local_match+0xa8>
        return 1;
 801c668:	2301      	movs	r3, #1
 801c66a:	e000      	b.n	801c66e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c66c:	2300      	movs	r3, #0
}
 801c66e:	4618      	mov	r0, r3
 801c670:	3710      	adds	r7, #16
 801c672:	46bd      	mov	sp, r7
 801c674:	bd80      	pop	{r7, pc}
 801c676:	bf00      	nop
 801c678:	08022a08 	.word	0x08022a08
 801c67c:	08022a38 	.word	0x08022a38
 801c680:	08022a5c 	.word	0x08022a5c
 801c684:	08022a84 	.word	0x08022a84
 801c688:	2000d92c 	.word	0x2000d92c

0801c68c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c68c:	b590      	push	{r4, r7, lr}
 801c68e:	b08d      	sub	sp, #52	; 0x34
 801c690:	af02      	add	r7, sp, #8
 801c692:	6078      	str	r0, [r7, #4]
 801c694:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c696:	2300      	movs	r3, #0
 801c698:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d105      	bne.n	801c6ac <udp_input+0x20>
 801c6a0:	4b7c      	ldr	r3, [pc, #496]	; (801c894 <udp_input+0x208>)
 801c6a2:	22cf      	movs	r2, #207	; 0xcf
 801c6a4:	497c      	ldr	r1, [pc, #496]	; (801c898 <udp_input+0x20c>)
 801c6a6:	487d      	ldr	r0, [pc, #500]	; (801c89c <udp_input+0x210>)
 801c6a8:	f003 fb0e 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c6ac:	683b      	ldr	r3, [r7, #0]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d105      	bne.n	801c6be <udp_input+0x32>
 801c6b2:	4b78      	ldr	r3, [pc, #480]	; (801c894 <udp_input+0x208>)
 801c6b4:	22d0      	movs	r2, #208	; 0xd0
 801c6b6:	497a      	ldr	r1, [pc, #488]	; (801c8a0 <udp_input+0x214>)
 801c6b8:	4878      	ldr	r0, [pc, #480]	; (801c89c <udp_input+0x210>)
 801c6ba:	f003 fb05 	bl	801fcc8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	895b      	ldrh	r3, [r3, #10]
 801c6c2:	2b07      	cmp	r3, #7
 801c6c4:	d803      	bhi.n	801c6ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c6c6:	6878      	ldr	r0, [r7, #4]
 801c6c8:	f7fa f9fa 	bl	8016ac0 <pbuf_free>
    goto end;
 801c6cc:	e0de      	b.n	801c88c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	685b      	ldr	r3, [r3, #4]
 801c6d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c6d4:	4b73      	ldr	r3, [pc, #460]	; (801c8a4 <udp_input+0x218>)
 801c6d6:	695b      	ldr	r3, [r3, #20]
 801c6d8:	4a72      	ldr	r2, [pc, #456]	; (801c8a4 <udp_input+0x218>)
 801c6da:	6812      	ldr	r2, [r2, #0]
 801c6dc:	4611      	mov	r1, r2
 801c6de:	4618      	mov	r0, r3
 801c6e0:	f001 fc88 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 801c6e4:	4603      	mov	r3, r0
 801c6e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c6e8:	697b      	ldr	r3, [r7, #20]
 801c6ea:	881b      	ldrh	r3, [r3, #0]
 801c6ec:	b29b      	uxth	r3, r3
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f7f8 fdf4 	bl	80152dc <lwip_htons>
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c6f8:	697b      	ldr	r3, [r7, #20]
 801c6fa:	885b      	ldrh	r3, [r3, #2]
 801c6fc:	b29b      	uxth	r3, r3
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7f8 fdec 	bl	80152dc <lwip_htons>
 801c704:	4603      	mov	r3, r0
 801c706:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c708:	2300      	movs	r3, #0
 801c70a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c70c:	2300      	movs	r3, #0
 801c70e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c710:	2300      	movs	r3, #0
 801c712:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c714:	4b64      	ldr	r3, [pc, #400]	; (801c8a8 <udp_input+0x21c>)
 801c716:	681b      	ldr	r3, [r3, #0]
 801c718:	627b      	str	r3, [r7, #36]	; 0x24
 801c71a:	e054      	b.n	801c7c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c71e:	8a5b      	ldrh	r3, [r3, #18]
 801c720:	89fa      	ldrh	r2, [r7, #14]
 801c722:	429a      	cmp	r2, r3
 801c724:	d14a      	bne.n	801c7bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c726:	7cfb      	ldrb	r3, [r7, #19]
 801c728:	461a      	mov	r2, r3
 801c72a:	6839      	ldr	r1, [r7, #0]
 801c72c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c72e:	f7ff ff49 	bl	801c5c4 <udp_input_local_match>
 801c732:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c734:	2b00      	cmp	r3, #0
 801c736:	d041      	beq.n	801c7bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c73a:	7c1b      	ldrb	r3, [r3, #16]
 801c73c:	f003 0304 	and.w	r3, r3, #4
 801c740:	2b00      	cmp	r3, #0
 801c742:	d11d      	bne.n	801c780 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c744:	69fb      	ldr	r3, [r7, #28]
 801c746:	2b00      	cmp	r3, #0
 801c748:	d102      	bne.n	801c750 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c74c:	61fb      	str	r3, [r7, #28]
 801c74e:	e017      	b.n	801c780 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c750:	7cfb      	ldrb	r3, [r7, #19]
 801c752:	2b00      	cmp	r3, #0
 801c754:	d014      	beq.n	801c780 <udp_input+0xf4>
 801c756:	4b53      	ldr	r3, [pc, #332]	; (801c8a4 <udp_input+0x218>)
 801c758:	695b      	ldr	r3, [r3, #20]
 801c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c75e:	d10f      	bne.n	801c780 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c760:	69fb      	ldr	r3, [r7, #28]
 801c762:	681a      	ldr	r2, [r3, #0]
 801c764:	683b      	ldr	r3, [r7, #0]
 801c766:	3304      	adds	r3, #4
 801c768:	681b      	ldr	r3, [r3, #0]
 801c76a:	429a      	cmp	r2, r3
 801c76c:	d008      	beq.n	801c780 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c770:	681a      	ldr	r2, [r3, #0]
 801c772:	683b      	ldr	r3, [r7, #0]
 801c774:	3304      	adds	r3, #4
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	429a      	cmp	r2, r3
 801c77a:	d101      	bne.n	801c780 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c77e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c782:	8a9b      	ldrh	r3, [r3, #20]
 801c784:	8a3a      	ldrh	r2, [r7, #16]
 801c786:	429a      	cmp	r2, r3
 801c788:	d118      	bne.n	801c7bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c78c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d005      	beq.n	801c79e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c794:	685a      	ldr	r2, [r3, #4]
 801c796:	4b43      	ldr	r3, [pc, #268]	; (801c8a4 <udp_input+0x218>)
 801c798:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c79a:	429a      	cmp	r2, r3
 801c79c:	d10e      	bne.n	801c7bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c79e:	6a3b      	ldr	r3, [r7, #32]
 801c7a0:	2b00      	cmp	r3, #0
 801c7a2:	d014      	beq.n	801c7ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7a6:	68da      	ldr	r2, [r3, #12]
 801c7a8:	6a3b      	ldr	r3, [r7, #32]
 801c7aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c7ac:	4b3e      	ldr	r3, [pc, #248]	; (801c8a8 <udp_input+0x21c>)
 801c7ae:	681a      	ldr	r2, [r3, #0]
 801c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c7b4:	4a3c      	ldr	r2, [pc, #240]	; (801c8a8 <udp_input+0x21c>)
 801c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c7ba:	e008      	b.n	801c7ce <udp_input+0x142>
      }
    }

    prev = pcb;
 801c7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7c2:	68db      	ldr	r3, [r3, #12]
 801c7c4:	627b      	str	r3, [r7, #36]	; 0x24
 801c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d1a7      	bne.n	801c71c <udp_input+0x90>
 801c7cc:	e000      	b.n	801c7d0 <udp_input+0x144>
        break;
 801c7ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d101      	bne.n	801c7da <udp_input+0x14e>
    pcb = uncon_pcb;
 801c7d6:	69fb      	ldr	r3, [r7, #28]
 801c7d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d002      	beq.n	801c7e6 <udp_input+0x15a>
    for_us = 1;
 801c7e0:	2301      	movs	r3, #1
 801c7e2:	76fb      	strb	r3, [r7, #27]
 801c7e4:	e00a      	b.n	801c7fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c7e6:	683b      	ldr	r3, [r7, #0]
 801c7e8:	3304      	adds	r3, #4
 801c7ea:	681a      	ldr	r2, [r3, #0]
 801c7ec:	4b2d      	ldr	r3, [pc, #180]	; (801c8a4 <udp_input+0x218>)
 801c7ee:	695b      	ldr	r3, [r3, #20]
 801c7f0:	429a      	cmp	r2, r3
 801c7f2:	bf0c      	ite	eq
 801c7f4:	2301      	moveq	r3, #1
 801c7f6:	2300      	movne	r3, #0
 801c7f8:	b2db      	uxtb	r3, r3
 801c7fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c7fc:	7efb      	ldrb	r3, [r7, #27]
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d041      	beq.n	801c886 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c802:	2108      	movs	r1, #8
 801c804:	6878      	ldr	r0, [r7, #4]
 801c806:	f7fa f8d5 	bl	80169b4 <pbuf_remove_header>
 801c80a:	4603      	mov	r3, r0
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d00a      	beq.n	801c826 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c810:	4b20      	ldr	r3, [pc, #128]	; (801c894 <udp_input+0x208>)
 801c812:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c816:	4925      	ldr	r1, [pc, #148]	; (801c8ac <udp_input+0x220>)
 801c818:	4820      	ldr	r0, [pc, #128]	; (801c89c <udp_input+0x210>)
 801c81a:	f003 fa55 	bl	801fcc8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c81e:	6878      	ldr	r0, [r7, #4]
 801c820:	f7fa f94e 	bl	8016ac0 <pbuf_free>
      goto end;
 801c824:	e032      	b.n	801c88c <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d012      	beq.n	801c852 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c82e:	699b      	ldr	r3, [r3, #24]
 801c830:	2b00      	cmp	r3, #0
 801c832:	d00a      	beq.n	801c84a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c836:	699c      	ldr	r4, [r3, #24]
 801c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c83a:	69d8      	ldr	r0, [r3, #28]
 801c83c:	8a3b      	ldrh	r3, [r7, #16]
 801c83e:	9300      	str	r3, [sp, #0]
 801c840:	4b1b      	ldr	r3, [pc, #108]	; (801c8b0 <udp_input+0x224>)
 801c842:	687a      	ldr	r2, [r7, #4]
 801c844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c846:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c848:	e021      	b.n	801c88e <udp_input+0x202>
        pbuf_free(p);
 801c84a:	6878      	ldr	r0, [r7, #4]
 801c84c:	f7fa f938 	bl	8016ac0 <pbuf_free>
        goto end;
 801c850:	e01c      	b.n	801c88c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c852:	7cfb      	ldrb	r3, [r7, #19]
 801c854:	2b00      	cmp	r3, #0
 801c856:	d112      	bne.n	801c87e <udp_input+0x1f2>
 801c858:	4b12      	ldr	r3, [pc, #72]	; (801c8a4 <udp_input+0x218>)
 801c85a:	695b      	ldr	r3, [r3, #20]
 801c85c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c860:	2be0      	cmp	r3, #224	; 0xe0
 801c862:	d00c      	beq.n	801c87e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c864:	4b0f      	ldr	r3, [pc, #60]	; (801c8a4 <udp_input+0x218>)
 801c866:	899b      	ldrh	r3, [r3, #12]
 801c868:	3308      	adds	r3, #8
 801c86a:	b29b      	uxth	r3, r3
 801c86c:	b21b      	sxth	r3, r3
 801c86e:	4619      	mov	r1, r3
 801c870:	6878      	ldr	r0, [r7, #4]
 801c872:	f7fa f912 	bl	8016a9a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c876:	2103      	movs	r1, #3
 801c878:	6878      	ldr	r0, [r7, #4]
 801c87a:	f001 f89b 	bl	801d9b4 <icmp_dest_unreach>
      pbuf_free(p);
 801c87e:	6878      	ldr	r0, [r7, #4]
 801c880:	f7fa f91e 	bl	8016ac0 <pbuf_free>
  return;
 801c884:	e003      	b.n	801c88e <udp_input+0x202>
    pbuf_free(p);
 801c886:	6878      	ldr	r0, [r7, #4]
 801c888:	f7fa f91a 	bl	8016ac0 <pbuf_free>
  return;
 801c88c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c88e:	372c      	adds	r7, #44	; 0x2c
 801c890:	46bd      	mov	sp, r7
 801c892:	bd90      	pop	{r4, r7, pc}
 801c894:	08022a08 	.word	0x08022a08
 801c898:	08022aac 	.word	0x08022aac
 801c89c:	08022a5c 	.word	0x08022a5c
 801c8a0:	08022ac4 	.word	0x08022ac4
 801c8a4:	2000d92c 	.word	0x2000d92c
 801c8a8:	200110dc 	.word	0x200110dc
 801c8ac:	08022ae0 	.word	0x08022ae0
 801c8b0:	2000d93c 	.word	0x2000d93c

0801c8b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c8b4:	b480      	push	{r7}
 801c8b6:	b085      	sub	sp, #20
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	6078      	str	r0, [r7, #4]
 801c8bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d01e      	beq.n	801c902 <udp_netif_ip_addr_changed+0x4e>
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d01a      	beq.n	801c902 <udp_netif_ip_addr_changed+0x4e>
 801c8cc:	683b      	ldr	r3, [r7, #0]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d017      	beq.n	801c902 <udp_netif_ip_addr_changed+0x4e>
 801c8d2:	683b      	ldr	r3, [r7, #0]
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d013      	beq.n	801c902 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c8da:	4b0d      	ldr	r3, [pc, #52]	; (801c910 <udp_netif_ip_addr_changed+0x5c>)
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	60fb      	str	r3, [r7, #12]
 801c8e0:	e00c      	b.n	801c8fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	681a      	ldr	r2, [r3, #0]
 801c8e6:	687b      	ldr	r3, [r7, #4]
 801c8e8:	681b      	ldr	r3, [r3, #0]
 801c8ea:	429a      	cmp	r2, r3
 801c8ec:	d103      	bne.n	801c8f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c8ee:	683b      	ldr	r3, [r7, #0]
 801c8f0:	681a      	ldr	r2, [r3, #0]
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c8f6:	68fb      	ldr	r3, [r7, #12]
 801c8f8:	68db      	ldr	r3, [r3, #12]
 801c8fa:	60fb      	str	r3, [r7, #12]
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	2b00      	cmp	r3, #0
 801c900:	d1ef      	bne.n	801c8e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c902:	bf00      	nop
 801c904:	3714      	adds	r7, #20
 801c906:	46bd      	mov	sp, r7
 801c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c90c:	4770      	bx	lr
 801c90e:	bf00      	nop
 801c910:	200110dc 	.word	0x200110dc

0801c914 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c914:	b580      	push	{r7, lr}
 801c916:	b082      	sub	sp, #8
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c91c:	4915      	ldr	r1, [pc, #84]	; (801c974 <etharp_free_entry+0x60>)
 801c91e:	687a      	ldr	r2, [r7, #4]
 801c920:	4613      	mov	r3, r2
 801c922:	005b      	lsls	r3, r3, #1
 801c924:	4413      	add	r3, r2
 801c926:	00db      	lsls	r3, r3, #3
 801c928:	440b      	add	r3, r1
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	2b00      	cmp	r3, #0
 801c92e:	d013      	beq.n	801c958 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c930:	4910      	ldr	r1, [pc, #64]	; (801c974 <etharp_free_entry+0x60>)
 801c932:	687a      	ldr	r2, [r7, #4]
 801c934:	4613      	mov	r3, r2
 801c936:	005b      	lsls	r3, r3, #1
 801c938:	4413      	add	r3, r2
 801c93a:	00db      	lsls	r3, r3, #3
 801c93c:	440b      	add	r3, r1
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	4618      	mov	r0, r3
 801c942:	f7fa f8bd 	bl	8016ac0 <pbuf_free>
    arp_table[i].q = NULL;
 801c946:	490b      	ldr	r1, [pc, #44]	; (801c974 <etharp_free_entry+0x60>)
 801c948:	687a      	ldr	r2, [r7, #4]
 801c94a:	4613      	mov	r3, r2
 801c94c:	005b      	lsls	r3, r3, #1
 801c94e:	4413      	add	r3, r2
 801c950:	00db      	lsls	r3, r3, #3
 801c952:	440b      	add	r3, r1
 801c954:	2200      	movs	r2, #0
 801c956:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c958:	4906      	ldr	r1, [pc, #24]	; (801c974 <etharp_free_entry+0x60>)
 801c95a:	687a      	ldr	r2, [r7, #4]
 801c95c:	4613      	mov	r3, r2
 801c95e:	005b      	lsls	r3, r3, #1
 801c960:	4413      	add	r3, r2
 801c962:	00db      	lsls	r3, r3, #3
 801c964:	440b      	add	r3, r1
 801c966:	3314      	adds	r3, #20
 801c968:	2200      	movs	r2, #0
 801c96a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c96c:	bf00      	nop
 801c96e:	3708      	adds	r7, #8
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}
 801c974:	200110e0 	.word	0x200110e0

0801c978 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	b082      	sub	sp, #8
 801c97c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c97e:	2300      	movs	r3, #0
 801c980:	607b      	str	r3, [r7, #4]
 801c982:	e096      	b.n	801cab2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c984:	494f      	ldr	r1, [pc, #316]	; (801cac4 <etharp_tmr+0x14c>)
 801c986:	687a      	ldr	r2, [r7, #4]
 801c988:	4613      	mov	r3, r2
 801c98a:	005b      	lsls	r3, r3, #1
 801c98c:	4413      	add	r3, r2
 801c98e:	00db      	lsls	r3, r3, #3
 801c990:	440b      	add	r3, r1
 801c992:	3314      	adds	r3, #20
 801c994:	781b      	ldrb	r3, [r3, #0]
 801c996:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c998:	78fb      	ldrb	r3, [r7, #3]
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	f000 8086 	beq.w	801caac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c9a0:	4948      	ldr	r1, [pc, #288]	; (801cac4 <etharp_tmr+0x14c>)
 801c9a2:	687a      	ldr	r2, [r7, #4]
 801c9a4:	4613      	mov	r3, r2
 801c9a6:	005b      	lsls	r3, r3, #1
 801c9a8:	4413      	add	r3, r2
 801c9aa:	00db      	lsls	r3, r3, #3
 801c9ac:	440b      	add	r3, r1
 801c9ae:	3312      	adds	r3, #18
 801c9b0:	881b      	ldrh	r3, [r3, #0]
 801c9b2:	3301      	adds	r3, #1
 801c9b4:	b298      	uxth	r0, r3
 801c9b6:	4943      	ldr	r1, [pc, #268]	; (801cac4 <etharp_tmr+0x14c>)
 801c9b8:	687a      	ldr	r2, [r7, #4]
 801c9ba:	4613      	mov	r3, r2
 801c9bc:	005b      	lsls	r3, r3, #1
 801c9be:	4413      	add	r3, r2
 801c9c0:	00db      	lsls	r3, r3, #3
 801c9c2:	440b      	add	r3, r1
 801c9c4:	3312      	adds	r3, #18
 801c9c6:	4602      	mov	r2, r0
 801c9c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c9ca:	493e      	ldr	r1, [pc, #248]	; (801cac4 <etharp_tmr+0x14c>)
 801c9cc:	687a      	ldr	r2, [r7, #4]
 801c9ce:	4613      	mov	r3, r2
 801c9d0:	005b      	lsls	r3, r3, #1
 801c9d2:	4413      	add	r3, r2
 801c9d4:	00db      	lsls	r3, r3, #3
 801c9d6:	440b      	add	r3, r1
 801c9d8:	3312      	adds	r3, #18
 801c9da:	881b      	ldrh	r3, [r3, #0]
 801c9dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801c9e0:	d215      	bcs.n	801ca0e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c9e2:	4938      	ldr	r1, [pc, #224]	; (801cac4 <etharp_tmr+0x14c>)
 801c9e4:	687a      	ldr	r2, [r7, #4]
 801c9e6:	4613      	mov	r3, r2
 801c9e8:	005b      	lsls	r3, r3, #1
 801c9ea:	4413      	add	r3, r2
 801c9ec:	00db      	lsls	r3, r3, #3
 801c9ee:	440b      	add	r3, r1
 801c9f0:	3314      	adds	r3, #20
 801c9f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c9f4:	2b01      	cmp	r3, #1
 801c9f6:	d10e      	bne.n	801ca16 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c9f8:	4932      	ldr	r1, [pc, #200]	; (801cac4 <etharp_tmr+0x14c>)
 801c9fa:	687a      	ldr	r2, [r7, #4]
 801c9fc:	4613      	mov	r3, r2
 801c9fe:	005b      	lsls	r3, r3, #1
 801ca00:	4413      	add	r3, r2
 801ca02:	00db      	lsls	r3, r3, #3
 801ca04:	440b      	add	r3, r1
 801ca06:	3312      	adds	r3, #18
 801ca08:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ca0a:	2b04      	cmp	r3, #4
 801ca0c:	d903      	bls.n	801ca16 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ca0e:	6878      	ldr	r0, [r7, #4]
 801ca10:	f7ff ff80 	bl	801c914 <etharp_free_entry>
 801ca14:	e04a      	b.n	801caac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ca16:	492b      	ldr	r1, [pc, #172]	; (801cac4 <etharp_tmr+0x14c>)
 801ca18:	687a      	ldr	r2, [r7, #4]
 801ca1a:	4613      	mov	r3, r2
 801ca1c:	005b      	lsls	r3, r3, #1
 801ca1e:	4413      	add	r3, r2
 801ca20:	00db      	lsls	r3, r3, #3
 801ca22:	440b      	add	r3, r1
 801ca24:	3314      	adds	r3, #20
 801ca26:	781b      	ldrb	r3, [r3, #0]
 801ca28:	2b03      	cmp	r3, #3
 801ca2a:	d10a      	bne.n	801ca42 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ca2c:	4925      	ldr	r1, [pc, #148]	; (801cac4 <etharp_tmr+0x14c>)
 801ca2e:	687a      	ldr	r2, [r7, #4]
 801ca30:	4613      	mov	r3, r2
 801ca32:	005b      	lsls	r3, r3, #1
 801ca34:	4413      	add	r3, r2
 801ca36:	00db      	lsls	r3, r3, #3
 801ca38:	440b      	add	r3, r1
 801ca3a:	3314      	adds	r3, #20
 801ca3c:	2204      	movs	r2, #4
 801ca3e:	701a      	strb	r2, [r3, #0]
 801ca40:	e034      	b.n	801caac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ca42:	4920      	ldr	r1, [pc, #128]	; (801cac4 <etharp_tmr+0x14c>)
 801ca44:	687a      	ldr	r2, [r7, #4]
 801ca46:	4613      	mov	r3, r2
 801ca48:	005b      	lsls	r3, r3, #1
 801ca4a:	4413      	add	r3, r2
 801ca4c:	00db      	lsls	r3, r3, #3
 801ca4e:	440b      	add	r3, r1
 801ca50:	3314      	adds	r3, #20
 801ca52:	781b      	ldrb	r3, [r3, #0]
 801ca54:	2b04      	cmp	r3, #4
 801ca56:	d10a      	bne.n	801ca6e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ca58:	491a      	ldr	r1, [pc, #104]	; (801cac4 <etharp_tmr+0x14c>)
 801ca5a:	687a      	ldr	r2, [r7, #4]
 801ca5c:	4613      	mov	r3, r2
 801ca5e:	005b      	lsls	r3, r3, #1
 801ca60:	4413      	add	r3, r2
 801ca62:	00db      	lsls	r3, r3, #3
 801ca64:	440b      	add	r3, r1
 801ca66:	3314      	adds	r3, #20
 801ca68:	2202      	movs	r2, #2
 801ca6a:	701a      	strb	r2, [r3, #0]
 801ca6c:	e01e      	b.n	801caac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ca6e:	4915      	ldr	r1, [pc, #84]	; (801cac4 <etharp_tmr+0x14c>)
 801ca70:	687a      	ldr	r2, [r7, #4]
 801ca72:	4613      	mov	r3, r2
 801ca74:	005b      	lsls	r3, r3, #1
 801ca76:	4413      	add	r3, r2
 801ca78:	00db      	lsls	r3, r3, #3
 801ca7a:	440b      	add	r3, r1
 801ca7c:	3314      	adds	r3, #20
 801ca7e:	781b      	ldrb	r3, [r3, #0]
 801ca80:	2b01      	cmp	r3, #1
 801ca82:	d113      	bne.n	801caac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ca84:	490f      	ldr	r1, [pc, #60]	; (801cac4 <etharp_tmr+0x14c>)
 801ca86:	687a      	ldr	r2, [r7, #4]
 801ca88:	4613      	mov	r3, r2
 801ca8a:	005b      	lsls	r3, r3, #1
 801ca8c:	4413      	add	r3, r2
 801ca8e:	00db      	lsls	r3, r3, #3
 801ca90:	440b      	add	r3, r1
 801ca92:	3308      	adds	r3, #8
 801ca94:	6818      	ldr	r0, [r3, #0]
 801ca96:	687a      	ldr	r2, [r7, #4]
 801ca98:	4613      	mov	r3, r2
 801ca9a:	005b      	lsls	r3, r3, #1
 801ca9c:	4413      	add	r3, r2
 801ca9e:	00db      	lsls	r3, r3, #3
 801caa0:	4a08      	ldr	r2, [pc, #32]	; (801cac4 <etharp_tmr+0x14c>)
 801caa2:	4413      	add	r3, r2
 801caa4:	3304      	adds	r3, #4
 801caa6:	4619      	mov	r1, r3
 801caa8:	f000 fe6e 	bl	801d788 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	3301      	adds	r3, #1
 801cab0:	607b      	str	r3, [r7, #4]
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	2b09      	cmp	r3, #9
 801cab6:	f77f af65 	ble.w	801c984 <etharp_tmr+0xc>
      }
    }
  }
}
 801caba:	bf00      	nop
 801cabc:	bf00      	nop
 801cabe:	3708      	adds	r7, #8
 801cac0:	46bd      	mov	sp, r7
 801cac2:	bd80      	pop	{r7, pc}
 801cac4:	200110e0 	.word	0x200110e0

0801cac8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801cac8:	b580      	push	{r7, lr}
 801caca:	b08a      	sub	sp, #40	; 0x28
 801cacc:	af00      	add	r7, sp, #0
 801cace:	60f8      	str	r0, [r7, #12]
 801cad0:	460b      	mov	r3, r1
 801cad2:	607a      	str	r2, [r7, #4]
 801cad4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801cad6:	230a      	movs	r3, #10
 801cad8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cada:	230a      	movs	r3, #10
 801cadc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801cade:	230a      	movs	r3, #10
 801cae0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801cae2:	2300      	movs	r3, #0
 801cae4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801cae6:	230a      	movs	r3, #10
 801cae8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801caea:	2300      	movs	r3, #0
 801caec:	83bb      	strh	r3, [r7, #28]
 801caee:	2300      	movs	r3, #0
 801caf0:	837b      	strh	r3, [r7, #26]
 801caf2:	2300      	movs	r3, #0
 801caf4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801caf6:	2300      	movs	r3, #0
 801caf8:	843b      	strh	r3, [r7, #32]
 801cafa:	e0ae      	b.n	801cc5a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801cafc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb00:	49a6      	ldr	r1, [pc, #664]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cb02:	4613      	mov	r3, r2
 801cb04:	005b      	lsls	r3, r3, #1
 801cb06:	4413      	add	r3, r2
 801cb08:	00db      	lsls	r3, r3, #3
 801cb0a:	440b      	add	r3, r1
 801cb0c:	3314      	adds	r3, #20
 801cb0e:	781b      	ldrb	r3, [r3, #0]
 801cb10:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801cb12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cb16:	2b0a      	cmp	r3, #10
 801cb18:	d105      	bne.n	801cb26 <etharp_find_entry+0x5e>
 801cb1a:	7dfb      	ldrb	r3, [r7, #23]
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d102      	bne.n	801cb26 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801cb20:	8c3b      	ldrh	r3, [r7, #32]
 801cb22:	847b      	strh	r3, [r7, #34]	; 0x22
 801cb24:	e095      	b.n	801cc52 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801cb26:	7dfb      	ldrb	r3, [r7, #23]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	f000 8092 	beq.w	801cc52 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801cb2e:	7dfb      	ldrb	r3, [r7, #23]
 801cb30:	2b01      	cmp	r3, #1
 801cb32:	d009      	beq.n	801cb48 <etharp_find_entry+0x80>
 801cb34:	7dfb      	ldrb	r3, [r7, #23]
 801cb36:	2b01      	cmp	r3, #1
 801cb38:	d806      	bhi.n	801cb48 <etharp_find_entry+0x80>
 801cb3a:	4b99      	ldr	r3, [pc, #612]	; (801cda0 <etharp_find_entry+0x2d8>)
 801cb3c:	f240 1223 	movw	r2, #291	; 0x123
 801cb40:	4998      	ldr	r1, [pc, #608]	; (801cda4 <etharp_find_entry+0x2dc>)
 801cb42:	4899      	ldr	r0, [pc, #612]	; (801cda8 <etharp_find_entry+0x2e0>)
 801cb44:	f003 f8c0 	bl	801fcc8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801cb48:	68fb      	ldr	r3, [r7, #12]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d020      	beq.n	801cb90 <etharp_find_entry+0xc8>
 801cb4e:	68fb      	ldr	r3, [r7, #12]
 801cb50:	6819      	ldr	r1, [r3, #0]
 801cb52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb56:	4891      	ldr	r0, [pc, #580]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cb58:	4613      	mov	r3, r2
 801cb5a:	005b      	lsls	r3, r3, #1
 801cb5c:	4413      	add	r3, r2
 801cb5e:	00db      	lsls	r3, r3, #3
 801cb60:	4403      	add	r3, r0
 801cb62:	3304      	adds	r3, #4
 801cb64:	681b      	ldr	r3, [r3, #0]
 801cb66:	4299      	cmp	r1, r3
 801cb68:	d112      	bne.n	801cb90 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d00c      	beq.n	801cb8a <etharp_find_entry+0xc2>
 801cb70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb74:	4989      	ldr	r1, [pc, #548]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cb76:	4613      	mov	r3, r2
 801cb78:	005b      	lsls	r3, r3, #1
 801cb7a:	4413      	add	r3, r2
 801cb7c:	00db      	lsls	r3, r3, #3
 801cb7e:	440b      	add	r3, r1
 801cb80:	3308      	adds	r3, #8
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	687a      	ldr	r2, [r7, #4]
 801cb86:	429a      	cmp	r2, r3
 801cb88:	d102      	bne.n	801cb90 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801cb8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cb8e:	e100      	b.n	801cd92 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801cb90:	7dfb      	ldrb	r3, [r7, #23]
 801cb92:	2b01      	cmp	r3, #1
 801cb94:	d140      	bne.n	801cc18 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801cb96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cb9a:	4980      	ldr	r1, [pc, #512]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cb9c:	4613      	mov	r3, r2
 801cb9e:	005b      	lsls	r3, r3, #1
 801cba0:	4413      	add	r3, r2
 801cba2:	00db      	lsls	r3, r3, #3
 801cba4:	440b      	add	r3, r1
 801cba6:	681b      	ldr	r3, [r3, #0]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d01a      	beq.n	801cbe2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801cbac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cbb0:	497a      	ldr	r1, [pc, #488]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cbb2:	4613      	mov	r3, r2
 801cbb4:	005b      	lsls	r3, r3, #1
 801cbb6:	4413      	add	r3, r2
 801cbb8:	00db      	lsls	r3, r3, #3
 801cbba:	440b      	add	r3, r1
 801cbbc:	3312      	adds	r3, #18
 801cbbe:	881b      	ldrh	r3, [r3, #0]
 801cbc0:	8bba      	ldrh	r2, [r7, #28]
 801cbc2:	429a      	cmp	r2, r3
 801cbc4:	d845      	bhi.n	801cc52 <etharp_find_entry+0x18a>
            old_queue = i;
 801cbc6:	8c3b      	ldrh	r3, [r7, #32]
 801cbc8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801cbca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cbce:	4973      	ldr	r1, [pc, #460]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cbd0:	4613      	mov	r3, r2
 801cbd2:	005b      	lsls	r3, r3, #1
 801cbd4:	4413      	add	r3, r2
 801cbd6:	00db      	lsls	r3, r3, #3
 801cbd8:	440b      	add	r3, r1
 801cbda:	3312      	adds	r3, #18
 801cbdc:	881b      	ldrh	r3, [r3, #0]
 801cbde:	83bb      	strh	r3, [r7, #28]
 801cbe0:	e037      	b.n	801cc52 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801cbe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cbe6:	496d      	ldr	r1, [pc, #436]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cbe8:	4613      	mov	r3, r2
 801cbea:	005b      	lsls	r3, r3, #1
 801cbec:	4413      	add	r3, r2
 801cbee:	00db      	lsls	r3, r3, #3
 801cbf0:	440b      	add	r3, r1
 801cbf2:	3312      	adds	r3, #18
 801cbf4:	881b      	ldrh	r3, [r3, #0]
 801cbf6:	8b7a      	ldrh	r2, [r7, #26]
 801cbf8:	429a      	cmp	r2, r3
 801cbfa:	d82a      	bhi.n	801cc52 <etharp_find_entry+0x18a>
            old_pending = i;
 801cbfc:	8c3b      	ldrh	r3, [r7, #32]
 801cbfe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801cc00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cc04:	4965      	ldr	r1, [pc, #404]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cc06:	4613      	mov	r3, r2
 801cc08:	005b      	lsls	r3, r3, #1
 801cc0a:	4413      	add	r3, r2
 801cc0c:	00db      	lsls	r3, r3, #3
 801cc0e:	440b      	add	r3, r1
 801cc10:	3312      	adds	r3, #18
 801cc12:	881b      	ldrh	r3, [r3, #0]
 801cc14:	837b      	strh	r3, [r7, #26]
 801cc16:	e01c      	b.n	801cc52 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801cc18:	7dfb      	ldrb	r3, [r7, #23]
 801cc1a:	2b01      	cmp	r3, #1
 801cc1c:	d919      	bls.n	801cc52 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801cc1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cc22:	495e      	ldr	r1, [pc, #376]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cc24:	4613      	mov	r3, r2
 801cc26:	005b      	lsls	r3, r3, #1
 801cc28:	4413      	add	r3, r2
 801cc2a:	00db      	lsls	r3, r3, #3
 801cc2c:	440b      	add	r3, r1
 801cc2e:	3312      	adds	r3, #18
 801cc30:	881b      	ldrh	r3, [r3, #0]
 801cc32:	8b3a      	ldrh	r2, [r7, #24]
 801cc34:	429a      	cmp	r2, r3
 801cc36:	d80c      	bhi.n	801cc52 <etharp_find_entry+0x18a>
            old_stable = i;
 801cc38:	8c3b      	ldrh	r3, [r7, #32]
 801cc3a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801cc3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cc40:	4956      	ldr	r1, [pc, #344]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cc42:	4613      	mov	r3, r2
 801cc44:	005b      	lsls	r3, r3, #1
 801cc46:	4413      	add	r3, r2
 801cc48:	00db      	lsls	r3, r3, #3
 801cc4a:	440b      	add	r3, r1
 801cc4c:	3312      	adds	r3, #18
 801cc4e:	881b      	ldrh	r3, [r3, #0]
 801cc50:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cc52:	8c3b      	ldrh	r3, [r7, #32]
 801cc54:	3301      	adds	r3, #1
 801cc56:	b29b      	uxth	r3, r3
 801cc58:	843b      	strh	r3, [r7, #32]
 801cc5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cc5e:	2b09      	cmp	r3, #9
 801cc60:	f77f af4c 	ble.w	801cafc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801cc64:	7afb      	ldrb	r3, [r7, #11]
 801cc66:	f003 0302 	and.w	r3, r3, #2
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d108      	bne.n	801cc80 <etharp_find_entry+0x1b8>
 801cc6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cc72:	2b0a      	cmp	r3, #10
 801cc74:	d107      	bne.n	801cc86 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801cc76:	7afb      	ldrb	r3, [r7, #11]
 801cc78:	f003 0301 	and.w	r3, r3, #1
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d102      	bne.n	801cc86 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801cc80:	f04f 33ff 	mov.w	r3, #4294967295
 801cc84:	e085      	b.n	801cd92 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801cc86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801cc8a:	2b09      	cmp	r3, #9
 801cc8c:	dc02      	bgt.n	801cc94 <etharp_find_entry+0x1cc>
    i = empty;
 801cc8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801cc90:	843b      	strh	r3, [r7, #32]
 801cc92:	e039      	b.n	801cd08 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801cc94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801cc98:	2b09      	cmp	r3, #9
 801cc9a:	dc14      	bgt.n	801ccc6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801cc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801cc9e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801cca0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cca4:	493d      	ldr	r1, [pc, #244]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cca6:	4613      	mov	r3, r2
 801cca8:	005b      	lsls	r3, r3, #1
 801ccaa:	4413      	add	r3, r2
 801ccac:	00db      	lsls	r3, r3, #3
 801ccae:	440b      	add	r3, r1
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d018      	beq.n	801cce8 <etharp_find_entry+0x220>
 801ccb6:	4b3a      	ldr	r3, [pc, #232]	; (801cda0 <etharp_find_entry+0x2d8>)
 801ccb8:	f240 126d 	movw	r2, #365	; 0x16d
 801ccbc:	493b      	ldr	r1, [pc, #236]	; (801cdac <etharp_find_entry+0x2e4>)
 801ccbe:	483a      	ldr	r0, [pc, #232]	; (801cda8 <etharp_find_entry+0x2e0>)
 801ccc0:	f003 f802 	bl	801fcc8 <iprintf>
 801ccc4:	e010      	b.n	801cce8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ccc6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801ccca:	2b09      	cmp	r3, #9
 801cccc:	dc02      	bgt.n	801ccd4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ccce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ccd0:	843b      	strh	r3, [r7, #32]
 801ccd2:	e009      	b.n	801cce8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ccd4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ccd8:	2b09      	cmp	r3, #9
 801ccda:	dc02      	bgt.n	801cce2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ccdc:	8bfb      	ldrh	r3, [r7, #30]
 801ccde:	843b      	strh	r3, [r7, #32]
 801cce0:	e002      	b.n	801cce8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801cce2:	f04f 33ff 	mov.w	r3, #4294967295
 801cce6:	e054      	b.n	801cd92 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cce8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ccec:	2b09      	cmp	r3, #9
 801ccee:	dd06      	ble.n	801ccfe <etharp_find_entry+0x236>
 801ccf0:	4b2b      	ldr	r3, [pc, #172]	; (801cda0 <etharp_find_entry+0x2d8>)
 801ccf2:	f240 127f 	movw	r2, #383	; 0x17f
 801ccf6:	492e      	ldr	r1, [pc, #184]	; (801cdb0 <etharp_find_entry+0x2e8>)
 801ccf8:	482b      	ldr	r0, [pc, #172]	; (801cda8 <etharp_find_entry+0x2e0>)
 801ccfa:	f002 ffe5 	bl	801fcc8 <iprintf>
    etharp_free_entry(i);
 801ccfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cd02:	4618      	mov	r0, r3
 801cd04:	f7ff fe06 	bl	801c914 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801cd08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801cd0c:	2b09      	cmp	r3, #9
 801cd0e:	dd06      	ble.n	801cd1e <etharp_find_entry+0x256>
 801cd10:	4b23      	ldr	r3, [pc, #140]	; (801cda0 <etharp_find_entry+0x2d8>)
 801cd12:	f240 1283 	movw	r2, #387	; 0x183
 801cd16:	4926      	ldr	r1, [pc, #152]	; (801cdb0 <etharp_find_entry+0x2e8>)
 801cd18:	4823      	ldr	r0, [pc, #140]	; (801cda8 <etharp_find_entry+0x2e0>)
 801cd1a:	f002 ffd5 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801cd1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd22:	491e      	ldr	r1, [pc, #120]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cd24:	4613      	mov	r3, r2
 801cd26:	005b      	lsls	r3, r3, #1
 801cd28:	4413      	add	r3, r2
 801cd2a:	00db      	lsls	r3, r3, #3
 801cd2c:	440b      	add	r3, r1
 801cd2e:	3314      	adds	r3, #20
 801cd30:	781b      	ldrb	r3, [r3, #0]
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d006      	beq.n	801cd44 <etharp_find_entry+0x27c>
 801cd36:	4b1a      	ldr	r3, [pc, #104]	; (801cda0 <etharp_find_entry+0x2d8>)
 801cd38:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801cd3c:	491d      	ldr	r1, [pc, #116]	; (801cdb4 <etharp_find_entry+0x2ec>)
 801cd3e:	481a      	ldr	r0, [pc, #104]	; (801cda8 <etharp_find_entry+0x2e0>)
 801cd40:	f002 ffc2 	bl	801fcc8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d00b      	beq.n	801cd62 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801cd4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd4e:	68fb      	ldr	r3, [r7, #12]
 801cd50:	6819      	ldr	r1, [r3, #0]
 801cd52:	4812      	ldr	r0, [pc, #72]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cd54:	4613      	mov	r3, r2
 801cd56:	005b      	lsls	r3, r3, #1
 801cd58:	4413      	add	r3, r2
 801cd5a:	00db      	lsls	r3, r3, #3
 801cd5c:	4403      	add	r3, r0
 801cd5e:	3304      	adds	r3, #4
 801cd60:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801cd62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd66:	490d      	ldr	r1, [pc, #52]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cd68:	4613      	mov	r3, r2
 801cd6a:	005b      	lsls	r3, r3, #1
 801cd6c:	4413      	add	r3, r2
 801cd6e:	00db      	lsls	r3, r3, #3
 801cd70:	440b      	add	r3, r1
 801cd72:	3312      	adds	r3, #18
 801cd74:	2200      	movs	r2, #0
 801cd76:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801cd78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801cd7c:	4907      	ldr	r1, [pc, #28]	; (801cd9c <etharp_find_entry+0x2d4>)
 801cd7e:	4613      	mov	r3, r2
 801cd80:	005b      	lsls	r3, r3, #1
 801cd82:	4413      	add	r3, r2
 801cd84:	00db      	lsls	r3, r3, #3
 801cd86:	440b      	add	r3, r1
 801cd88:	3308      	adds	r3, #8
 801cd8a:	687a      	ldr	r2, [r7, #4]
 801cd8c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801cd8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801cd92:	4618      	mov	r0, r3
 801cd94:	3728      	adds	r7, #40	; 0x28
 801cd96:	46bd      	mov	sp, r7
 801cd98:	bd80      	pop	{r7, pc}
 801cd9a:	bf00      	nop
 801cd9c:	200110e0 	.word	0x200110e0
 801cda0:	08022d6c 	.word	0x08022d6c
 801cda4:	08022da4 	.word	0x08022da4
 801cda8:	08022de4 	.word	0x08022de4
 801cdac:	08022e0c 	.word	0x08022e0c
 801cdb0:	08022e24 	.word	0x08022e24
 801cdb4:	08022e38 	.word	0x08022e38

0801cdb8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801cdb8:	b580      	push	{r7, lr}
 801cdba:	b088      	sub	sp, #32
 801cdbc:	af02      	add	r7, sp, #8
 801cdbe:	60f8      	str	r0, [r7, #12]
 801cdc0:	60b9      	str	r1, [r7, #8]
 801cdc2:	607a      	str	r2, [r7, #4]
 801cdc4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cdcc:	2b06      	cmp	r3, #6
 801cdce:	d006      	beq.n	801cdde <etharp_update_arp_entry+0x26>
 801cdd0:	4b48      	ldr	r3, [pc, #288]	; (801cef4 <etharp_update_arp_entry+0x13c>)
 801cdd2:	f240 12a9 	movw	r2, #425	; 0x1a9
 801cdd6:	4948      	ldr	r1, [pc, #288]	; (801cef8 <etharp_update_arp_entry+0x140>)
 801cdd8:	4848      	ldr	r0, [pc, #288]	; (801cefc <etharp_update_arp_entry+0x144>)
 801cdda:	f002 ff75 	bl	801fcc8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801cdde:	68bb      	ldr	r3, [r7, #8]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d012      	beq.n	801ce0a <etharp_update_arp_entry+0x52>
 801cde4:	68bb      	ldr	r3, [r7, #8]
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	2b00      	cmp	r3, #0
 801cdea:	d00e      	beq.n	801ce0a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801cdec:	68bb      	ldr	r3, [r7, #8]
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	68f9      	ldr	r1, [r7, #12]
 801cdf2:	4618      	mov	r0, r3
 801cdf4:	f001 f8fe 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 801cdf8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d105      	bne.n	801ce0a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801cdfe:	68bb      	ldr	r3, [r7, #8]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ce06:	2be0      	cmp	r3, #224	; 0xe0
 801ce08:	d102      	bne.n	801ce10 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ce0a:	f06f 030f 	mvn.w	r3, #15
 801ce0e:	e06c      	b.n	801ceea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ce10:	78fb      	ldrb	r3, [r7, #3]
 801ce12:	68fa      	ldr	r2, [r7, #12]
 801ce14:	4619      	mov	r1, r3
 801ce16:	68b8      	ldr	r0, [r7, #8]
 801ce18:	f7ff fe56 	bl	801cac8 <etharp_find_entry>
 801ce1c:	4603      	mov	r3, r0
 801ce1e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ce20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	da02      	bge.n	801ce2e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ce28:	8afb      	ldrh	r3, [r7, #22]
 801ce2a:	b25b      	sxtb	r3, r3
 801ce2c:	e05d      	b.n	801ceea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ce2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce32:	4933      	ldr	r1, [pc, #204]	; (801cf00 <etharp_update_arp_entry+0x148>)
 801ce34:	4613      	mov	r3, r2
 801ce36:	005b      	lsls	r3, r3, #1
 801ce38:	4413      	add	r3, r2
 801ce3a:	00db      	lsls	r3, r3, #3
 801ce3c:	440b      	add	r3, r1
 801ce3e:	3314      	adds	r3, #20
 801ce40:	2202      	movs	r2, #2
 801ce42:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ce44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce48:	492d      	ldr	r1, [pc, #180]	; (801cf00 <etharp_update_arp_entry+0x148>)
 801ce4a:	4613      	mov	r3, r2
 801ce4c:	005b      	lsls	r3, r3, #1
 801ce4e:	4413      	add	r3, r2
 801ce50:	00db      	lsls	r3, r3, #3
 801ce52:	440b      	add	r3, r1
 801ce54:	3308      	adds	r3, #8
 801ce56:	68fa      	ldr	r2, [r7, #12]
 801ce58:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ce5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce5e:	4613      	mov	r3, r2
 801ce60:	005b      	lsls	r3, r3, #1
 801ce62:	4413      	add	r3, r2
 801ce64:	00db      	lsls	r3, r3, #3
 801ce66:	3308      	adds	r3, #8
 801ce68:	4a25      	ldr	r2, [pc, #148]	; (801cf00 <etharp_update_arp_entry+0x148>)
 801ce6a:	4413      	add	r3, r2
 801ce6c:	3304      	adds	r3, #4
 801ce6e:	2206      	movs	r2, #6
 801ce70:	6879      	ldr	r1, [r7, #4]
 801ce72:	4618      	mov	r0, r3
 801ce74:	f002 fe32 	bl	801fadc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ce78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce7c:	4920      	ldr	r1, [pc, #128]	; (801cf00 <etharp_update_arp_entry+0x148>)
 801ce7e:	4613      	mov	r3, r2
 801ce80:	005b      	lsls	r3, r3, #1
 801ce82:	4413      	add	r3, r2
 801ce84:	00db      	lsls	r3, r3, #3
 801ce86:	440b      	add	r3, r1
 801ce88:	3312      	adds	r3, #18
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ce8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ce92:	491b      	ldr	r1, [pc, #108]	; (801cf00 <etharp_update_arp_entry+0x148>)
 801ce94:	4613      	mov	r3, r2
 801ce96:	005b      	lsls	r3, r3, #1
 801ce98:	4413      	add	r3, r2
 801ce9a:	00db      	lsls	r3, r3, #3
 801ce9c:	440b      	add	r3, r1
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d021      	beq.n	801cee8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801cea4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cea8:	4915      	ldr	r1, [pc, #84]	; (801cf00 <etharp_update_arp_entry+0x148>)
 801ceaa:	4613      	mov	r3, r2
 801ceac:	005b      	lsls	r3, r3, #1
 801ceae:	4413      	add	r3, r2
 801ceb0:	00db      	lsls	r3, r3, #3
 801ceb2:	440b      	add	r3, r1
 801ceb4:	681b      	ldr	r3, [r3, #0]
 801ceb6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ceb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801cebc:	4910      	ldr	r1, [pc, #64]	; (801cf00 <etharp_update_arp_entry+0x148>)
 801cebe:	4613      	mov	r3, r2
 801cec0:	005b      	lsls	r3, r3, #1
 801cec2:	4413      	add	r3, r2
 801cec4:	00db      	lsls	r3, r3, #3
 801cec6:	440b      	add	r3, r1
 801cec8:	2200      	movs	r2, #0
 801ceca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801cecc:	68fb      	ldr	r3, [r7, #12]
 801cece:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ced2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ced6:	9300      	str	r3, [sp, #0]
 801ced8:	687b      	ldr	r3, [r7, #4]
 801ceda:	6939      	ldr	r1, [r7, #16]
 801cedc:	68f8      	ldr	r0, [r7, #12]
 801cede:	f001 ff97 	bl	801ee10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801cee2:	6938      	ldr	r0, [r7, #16]
 801cee4:	f7f9 fdec 	bl	8016ac0 <pbuf_free>
  }
  return ERR_OK;
 801cee8:	2300      	movs	r3, #0
}
 801ceea:	4618      	mov	r0, r3
 801ceec:	3718      	adds	r7, #24
 801ceee:	46bd      	mov	sp, r7
 801cef0:	bd80      	pop	{r7, pc}
 801cef2:	bf00      	nop
 801cef4:	08022d6c 	.word	0x08022d6c
 801cef8:	08022e64 	.word	0x08022e64
 801cefc:	08022de4 	.word	0x08022de4
 801cf00:	200110e0 	.word	0x200110e0

0801cf04 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801cf04:	b580      	push	{r7, lr}
 801cf06:	b084      	sub	sp, #16
 801cf08:	af00      	add	r7, sp, #0
 801cf0a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cf0c:	2300      	movs	r3, #0
 801cf0e:	60fb      	str	r3, [r7, #12]
 801cf10:	e01e      	b.n	801cf50 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801cf12:	4913      	ldr	r1, [pc, #76]	; (801cf60 <etharp_cleanup_netif+0x5c>)
 801cf14:	68fa      	ldr	r2, [r7, #12]
 801cf16:	4613      	mov	r3, r2
 801cf18:	005b      	lsls	r3, r3, #1
 801cf1a:	4413      	add	r3, r2
 801cf1c:	00db      	lsls	r3, r3, #3
 801cf1e:	440b      	add	r3, r1
 801cf20:	3314      	adds	r3, #20
 801cf22:	781b      	ldrb	r3, [r3, #0]
 801cf24:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801cf26:	7afb      	ldrb	r3, [r7, #11]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d00e      	beq.n	801cf4a <etharp_cleanup_netif+0x46>
 801cf2c:	490c      	ldr	r1, [pc, #48]	; (801cf60 <etharp_cleanup_netif+0x5c>)
 801cf2e:	68fa      	ldr	r2, [r7, #12]
 801cf30:	4613      	mov	r3, r2
 801cf32:	005b      	lsls	r3, r3, #1
 801cf34:	4413      	add	r3, r2
 801cf36:	00db      	lsls	r3, r3, #3
 801cf38:	440b      	add	r3, r1
 801cf3a:	3308      	adds	r3, #8
 801cf3c:	681b      	ldr	r3, [r3, #0]
 801cf3e:	687a      	ldr	r2, [r7, #4]
 801cf40:	429a      	cmp	r2, r3
 801cf42:	d102      	bne.n	801cf4a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801cf44:	68f8      	ldr	r0, [r7, #12]
 801cf46:	f7ff fce5 	bl	801c914 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	3301      	adds	r3, #1
 801cf4e:	60fb      	str	r3, [r7, #12]
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	2b09      	cmp	r3, #9
 801cf54:	dddd      	ble.n	801cf12 <etharp_cleanup_netif+0xe>
    }
  }
}
 801cf56:	bf00      	nop
 801cf58:	bf00      	nop
 801cf5a:	3710      	adds	r7, #16
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	bd80      	pop	{r7, pc}
 801cf60:	200110e0 	.word	0x200110e0

0801cf64 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801cf64:	b5b0      	push	{r4, r5, r7, lr}
 801cf66:	b08a      	sub	sp, #40	; 0x28
 801cf68:	af04      	add	r7, sp, #16
 801cf6a:	6078      	str	r0, [r7, #4]
 801cf6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801cf6e:	683b      	ldr	r3, [r7, #0]
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	d107      	bne.n	801cf84 <etharp_input+0x20>
 801cf74:	4b3d      	ldr	r3, [pc, #244]	; (801d06c <etharp_input+0x108>)
 801cf76:	f240 228a 	movw	r2, #650	; 0x28a
 801cf7a:	493d      	ldr	r1, [pc, #244]	; (801d070 <etharp_input+0x10c>)
 801cf7c:	483d      	ldr	r0, [pc, #244]	; (801d074 <etharp_input+0x110>)
 801cf7e:	f002 fea3 	bl	801fcc8 <iprintf>
 801cf82:	e06f      	b.n	801d064 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	685b      	ldr	r3, [r3, #4]
 801cf88:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cf8a:	693b      	ldr	r3, [r7, #16]
 801cf8c:	881b      	ldrh	r3, [r3, #0]
 801cf8e:	b29b      	uxth	r3, r3
 801cf90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cf94:	d10c      	bne.n	801cfb0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cf96:	693b      	ldr	r3, [r7, #16]
 801cf98:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801cf9a:	2b06      	cmp	r3, #6
 801cf9c:	d108      	bne.n	801cfb0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cf9e:	693b      	ldr	r3, [r7, #16]
 801cfa0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801cfa2:	2b04      	cmp	r3, #4
 801cfa4:	d104      	bne.n	801cfb0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801cfa6:	693b      	ldr	r3, [r7, #16]
 801cfa8:	885b      	ldrh	r3, [r3, #2]
 801cfaa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801cfac:	2b08      	cmp	r3, #8
 801cfae:	d003      	beq.n	801cfb8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801cfb0:	6878      	ldr	r0, [r7, #4]
 801cfb2:	f7f9 fd85 	bl	8016ac0 <pbuf_free>
    return;
 801cfb6:	e055      	b.n	801d064 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801cfb8:	693b      	ldr	r3, [r7, #16]
 801cfba:	330e      	adds	r3, #14
 801cfbc:	681b      	ldr	r3, [r3, #0]
 801cfbe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801cfc0:	693b      	ldr	r3, [r7, #16]
 801cfc2:	3318      	adds	r3, #24
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801cfc8:	683b      	ldr	r3, [r7, #0]
 801cfca:	3304      	adds	r3, #4
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	d102      	bne.n	801cfd8 <etharp_input+0x74>
    for_us = 0;
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	75fb      	strb	r3, [r7, #23]
 801cfd6:	e009      	b.n	801cfec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801cfd8:	68ba      	ldr	r2, [r7, #8]
 801cfda:	683b      	ldr	r3, [r7, #0]
 801cfdc:	3304      	adds	r3, #4
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	429a      	cmp	r2, r3
 801cfe2:	bf0c      	ite	eq
 801cfe4:	2301      	moveq	r3, #1
 801cfe6:	2300      	movne	r3, #0
 801cfe8:	b2db      	uxtb	r3, r3
 801cfea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801cfec:	693b      	ldr	r3, [r7, #16]
 801cfee:	f103 0208 	add.w	r2, r3, #8
 801cff2:	7dfb      	ldrb	r3, [r7, #23]
 801cff4:	2b00      	cmp	r3, #0
 801cff6:	d001      	beq.n	801cffc <etharp_input+0x98>
 801cff8:	2301      	movs	r3, #1
 801cffa:	e000      	b.n	801cffe <etharp_input+0x9a>
 801cffc:	2302      	movs	r3, #2
 801cffe:	f107 010c 	add.w	r1, r7, #12
 801d002:	6838      	ldr	r0, [r7, #0]
 801d004:	f7ff fed8 	bl	801cdb8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d008:	693b      	ldr	r3, [r7, #16]
 801d00a:	88db      	ldrh	r3, [r3, #6]
 801d00c:	b29b      	uxth	r3, r3
 801d00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d012:	d003      	beq.n	801d01c <etharp_input+0xb8>
 801d014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d018:	d01e      	beq.n	801d058 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801d01a:	e020      	b.n	801d05e <etharp_input+0xfa>
      if (for_us) {
 801d01c:	7dfb      	ldrb	r3, [r7, #23]
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d01c      	beq.n	801d05c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d022:	683b      	ldr	r3, [r7, #0]
 801d024:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d028:	693b      	ldr	r3, [r7, #16]
 801d02a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801d034:	683b      	ldr	r3, [r7, #0]
 801d036:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d038:	693a      	ldr	r2, [r7, #16]
 801d03a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d03c:	2102      	movs	r1, #2
 801d03e:	9103      	str	r1, [sp, #12]
 801d040:	f107 010c 	add.w	r1, r7, #12
 801d044:	9102      	str	r1, [sp, #8]
 801d046:	9201      	str	r2, [sp, #4]
 801d048:	9300      	str	r3, [sp, #0]
 801d04a:	462b      	mov	r3, r5
 801d04c:	4622      	mov	r2, r4
 801d04e:	4601      	mov	r1, r0
 801d050:	6838      	ldr	r0, [r7, #0]
 801d052:	f000 faeb 	bl	801d62c <etharp_raw>
      break;
 801d056:	e001      	b.n	801d05c <etharp_input+0xf8>
      break;
 801d058:	bf00      	nop
 801d05a:	e000      	b.n	801d05e <etharp_input+0xfa>
      break;
 801d05c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d05e:	6878      	ldr	r0, [r7, #4]
 801d060:	f7f9 fd2e 	bl	8016ac0 <pbuf_free>
}
 801d064:	3718      	adds	r7, #24
 801d066:	46bd      	mov	sp, r7
 801d068:	bdb0      	pop	{r4, r5, r7, pc}
 801d06a:	bf00      	nop
 801d06c:	08022d6c 	.word	0x08022d6c
 801d070:	08022ebc 	.word	0x08022ebc
 801d074:	08022de4 	.word	0x08022de4

0801d078 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d078:	b580      	push	{r7, lr}
 801d07a:	b086      	sub	sp, #24
 801d07c:	af02      	add	r7, sp, #8
 801d07e:	60f8      	str	r0, [r7, #12]
 801d080:	60b9      	str	r1, [r7, #8]
 801d082:	4613      	mov	r3, r2
 801d084:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d086:	79fa      	ldrb	r2, [r7, #7]
 801d088:	4944      	ldr	r1, [pc, #272]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d08a:	4613      	mov	r3, r2
 801d08c:	005b      	lsls	r3, r3, #1
 801d08e:	4413      	add	r3, r2
 801d090:	00db      	lsls	r3, r3, #3
 801d092:	440b      	add	r3, r1
 801d094:	3314      	adds	r3, #20
 801d096:	781b      	ldrb	r3, [r3, #0]
 801d098:	2b01      	cmp	r3, #1
 801d09a:	d806      	bhi.n	801d0aa <etharp_output_to_arp_index+0x32>
 801d09c:	4b40      	ldr	r3, [pc, #256]	; (801d1a0 <etharp_output_to_arp_index+0x128>)
 801d09e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801d0a2:	4940      	ldr	r1, [pc, #256]	; (801d1a4 <etharp_output_to_arp_index+0x12c>)
 801d0a4:	4840      	ldr	r0, [pc, #256]	; (801d1a8 <etharp_output_to_arp_index+0x130>)
 801d0a6:	f002 fe0f 	bl	801fcc8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d0aa:	79fa      	ldrb	r2, [r7, #7]
 801d0ac:	493b      	ldr	r1, [pc, #236]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d0ae:	4613      	mov	r3, r2
 801d0b0:	005b      	lsls	r3, r3, #1
 801d0b2:	4413      	add	r3, r2
 801d0b4:	00db      	lsls	r3, r3, #3
 801d0b6:	440b      	add	r3, r1
 801d0b8:	3314      	adds	r3, #20
 801d0ba:	781b      	ldrb	r3, [r3, #0]
 801d0bc:	2b02      	cmp	r3, #2
 801d0be:	d153      	bne.n	801d168 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d0c0:	79fa      	ldrb	r2, [r7, #7]
 801d0c2:	4936      	ldr	r1, [pc, #216]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d0c4:	4613      	mov	r3, r2
 801d0c6:	005b      	lsls	r3, r3, #1
 801d0c8:	4413      	add	r3, r2
 801d0ca:	00db      	lsls	r3, r3, #3
 801d0cc:	440b      	add	r3, r1
 801d0ce:	3312      	adds	r3, #18
 801d0d0:	881b      	ldrh	r3, [r3, #0]
 801d0d2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d0d6:	d919      	bls.n	801d10c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d0d8:	79fa      	ldrb	r2, [r7, #7]
 801d0da:	4613      	mov	r3, r2
 801d0dc:	005b      	lsls	r3, r3, #1
 801d0de:	4413      	add	r3, r2
 801d0e0:	00db      	lsls	r3, r3, #3
 801d0e2:	4a2e      	ldr	r2, [pc, #184]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d0e4:	4413      	add	r3, r2
 801d0e6:	3304      	adds	r3, #4
 801d0e8:	4619      	mov	r1, r3
 801d0ea:	68f8      	ldr	r0, [r7, #12]
 801d0ec:	f000 fb4c 	bl	801d788 <etharp_request>
 801d0f0:	4603      	mov	r3, r0
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d138      	bne.n	801d168 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d0f6:	79fa      	ldrb	r2, [r7, #7]
 801d0f8:	4928      	ldr	r1, [pc, #160]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d0fa:	4613      	mov	r3, r2
 801d0fc:	005b      	lsls	r3, r3, #1
 801d0fe:	4413      	add	r3, r2
 801d100:	00db      	lsls	r3, r3, #3
 801d102:	440b      	add	r3, r1
 801d104:	3314      	adds	r3, #20
 801d106:	2203      	movs	r2, #3
 801d108:	701a      	strb	r2, [r3, #0]
 801d10a:	e02d      	b.n	801d168 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d10c:	79fa      	ldrb	r2, [r7, #7]
 801d10e:	4923      	ldr	r1, [pc, #140]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d110:	4613      	mov	r3, r2
 801d112:	005b      	lsls	r3, r3, #1
 801d114:	4413      	add	r3, r2
 801d116:	00db      	lsls	r3, r3, #3
 801d118:	440b      	add	r3, r1
 801d11a:	3312      	adds	r3, #18
 801d11c:	881b      	ldrh	r3, [r3, #0]
 801d11e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801d122:	d321      	bcc.n	801d168 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d124:	79fa      	ldrb	r2, [r7, #7]
 801d126:	4613      	mov	r3, r2
 801d128:	005b      	lsls	r3, r3, #1
 801d12a:	4413      	add	r3, r2
 801d12c:	00db      	lsls	r3, r3, #3
 801d12e:	4a1b      	ldr	r2, [pc, #108]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d130:	4413      	add	r3, r2
 801d132:	1d19      	adds	r1, r3, #4
 801d134:	79fa      	ldrb	r2, [r7, #7]
 801d136:	4613      	mov	r3, r2
 801d138:	005b      	lsls	r3, r3, #1
 801d13a:	4413      	add	r3, r2
 801d13c:	00db      	lsls	r3, r3, #3
 801d13e:	3308      	adds	r3, #8
 801d140:	4a16      	ldr	r2, [pc, #88]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d142:	4413      	add	r3, r2
 801d144:	3304      	adds	r3, #4
 801d146:	461a      	mov	r2, r3
 801d148:	68f8      	ldr	r0, [r7, #12]
 801d14a:	f000 fafb 	bl	801d744 <etharp_request_dst>
 801d14e:	4603      	mov	r3, r0
 801d150:	2b00      	cmp	r3, #0
 801d152:	d109      	bne.n	801d168 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d154:	79fa      	ldrb	r2, [r7, #7]
 801d156:	4911      	ldr	r1, [pc, #68]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d158:	4613      	mov	r3, r2
 801d15a:	005b      	lsls	r3, r3, #1
 801d15c:	4413      	add	r3, r2
 801d15e:	00db      	lsls	r3, r3, #3
 801d160:	440b      	add	r3, r1
 801d162:	3314      	adds	r3, #20
 801d164:	2203      	movs	r2, #3
 801d166:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801d16e:	79fa      	ldrb	r2, [r7, #7]
 801d170:	4613      	mov	r3, r2
 801d172:	005b      	lsls	r3, r3, #1
 801d174:	4413      	add	r3, r2
 801d176:	00db      	lsls	r3, r3, #3
 801d178:	3308      	adds	r3, #8
 801d17a:	4a08      	ldr	r2, [pc, #32]	; (801d19c <etharp_output_to_arp_index+0x124>)
 801d17c:	4413      	add	r3, r2
 801d17e:	3304      	adds	r3, #4
 801d180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d184:	9200      	str	r2, [sp, #0]
 801d186:	460a      	mov	r2, r1
 801d188:	68b9      	ldr	r1, [r7, #8]
 801d18a:	68f8      	ldr	r0, [r7, #12]
 801d18c:	f001 fe40 	bl	801ee10 <ethernet_output>
 801d190:	4603      	mov	r3, r0
}
 801d192:	4618      	mov	r0, r3
 801d194:	3710      	adds	r7, #16
 801d196:	46bd      	mov	sp, r7
 801d198:	bd80      	pop	{r7, pc}
 801d19a:	bf00      	nop
 801d19c:	200110e0 	.word	0x200110e0
 801d1a0:	08022d6c 	.word	0x08022d6c
 801d1a4:	08022edc 	.word	0x08022edc
 801d1a8:	08022de4 	.word	0x08022de4

0801d1ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801d1ac:	b580      	push	{r7, lr}
 801d1ae:	b08a      	sub	sp, #40	; 0x28
 801d1b0:	af02      	add	r7, sp, #8
 801d1b2:	60f8      	str	r0, [r7, #12]
 801d1b4:	60b9      	str	r1, [r7, #8]
 801d1b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d106      	bne.n	801d1d0 <etharp_output+0x24>
 801d1c2:	4b73      	ldr	r3, [pc, #460]	; (801d390 <etharp_output+0x1e4>)
 801d1c4:	f240 321e 	movw	r2, #798	; 0x31e
 801d1c8:	4972      	ldr	r1, [pc, #456]	; (801d394 <etharp_output+0x1e8>)
 801d1ca:	4873      	ldr	r0, [pc, #460]	; (801d398 <etharp_output+0x1ec>)
 801d1cc:	f002 fd7c 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d1d0:	68bb      	ldr	r3, [r7, #8]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d106      	bne.n	801d1e4 <etharp_output+0x38>
 801d1d6:	4b6e      	ldr	r3, [pc, #440]	; (801d390 <etharp_output+0x1e4>)
 801d1d8:	f240 321f 	movw	r2, #799	; 0x31f
 801d1dc:	496f      	ldr	r1, [pc, #444]	; (801d39c <etharp_output+0x1f0>)
 801d1de:	486e      	ldr	r0, [pc, #440]	; (801d398 <etharp_output+0x1ec>)
 801d1e0:	f002 fd72 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d106      	bne.n	801d1f8 <etharp_output+0x4c>
 801d1ea:	4b69      	ldr	r3, [pc, #420]	; (801d390 <etharp_output+0x1e4>)
 801d1ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 801d1f0:	496b      	ldr	r1, [pc, #428]	; (801d3a0 <etharp_output+0x1f4>)
 801d1f2:	4869      	ldr	r0, [pc, #420]	; (801d398 <etharp_output+0x1ec>)
 801d1f4:	f002 fd68 	bl	801fcc8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	68f9      	ldr	r1, [r7, #12]
 801d1fe:	4618      	mov	r0, r3
 801d200:	f000 fef8 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 801d204:	4603      	mov	r3, r0
 801d206:	2b00      	cmp	r3, #0
 801d208:	d002      	beq.n	801d210 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d20a:	4b66      	ldr	r3, [pc, #408]	; (801d3a4 <etharp_output+0x1f8>)
 801d20c:	61fb      	str	r3, [r7, #28]
 801d20e:	e0af      	b.n	801d370 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d218:	2be0      	cmp	r3, #224	; 0xe0
 801d21a:	d118      	bne.n	801d24e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d21c:	2301      	movs	r3, #1
 801d21e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d220:	2300      	movs	r3, #0
 801d222:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d224:	235e      	movs	r3, #94	; 0x5e
 801d226:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	3301      	adds	r3, #1
 801d22c:	781b      	ldrb	r3, [r3, #0]
 801d22e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d232:	b2db      	uxtb	r3, r3
 801d234:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	3302      	adds	r3, #2
 801d23a:	781b      	ldrb	r3, [r3, #0]
 801d23c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	3303      	adds	r3, #3
 801d242:	781b      	ldrb	r3, [r3, #0]
 801d244:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d246:	f107 0310 	add.w	r3, r7, #16
 801d24a:	61fb      	str	r3, [r7, #28]
 801d24c:	e090      	b.n	801d370 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	681a      	ldr	r2, [r3, #0]
 801d252:	68fb      	ldr	r3, [r7, #12]
 801d254:	3304      	adds	r3, #4
 801d256:	681b      	ldr	r3, [r3, #0]
 801d258:	405a      	eors	r2, r3
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	3308      	adds	r3, #8
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	4013      	ands	r3, r2
 801d262:	2b00      	cmp	r3, #0
 801d264:	d012      	beq.n	801d28c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d26c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801d270:	4293      	cmp	r3, r2
 801d272:	d00b      	beq.n	801d28c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	330c      	adds	r3, #12
 801d278:	681b      	ldr	r3, [r3, #0]
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d003      	beq.n	801d286 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	330c      	adds	r3, #12
 801d282:	61bb      	str	r3, [r7, #24]
 801d284:	e002      	b.n	801d28c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d286:	f06f 0303 	mvn.w	r3, #3
 801d28a:	e07d      	b.n	801d388 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d28c:	4b46      	ldr	r3, [pc, #280]	; (801d3a8 <etharp_output+0x1fc>)
 801d28e:	781b      	ldrb	r3, [r3, #0]
 801d290:	4619      	mov	r1, r3
 801d292:	4a46      	ldr	r2, [pc, #280]	; (801d3ac <etharp_output+0x200>)
 801d294:	460b      	mov	r3, r1
 801d296:	005b      	lsls	r3, r3, #1
 801d298:	440b      	add	r3, r1
 801d29a:	00db      	lsls	r3, r3, #3
 801d29c:	4413      	add	r3, r2
 801d29e:	3314      	adds	r3, #20
 801d2a0:	781b      	ldrb	r3, [r3, #0]
 801d2a2:	2b01      	cmp	r3, #1
 801d2a4:	d925      	bls.n	801d2f2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d2a6:	4b40      	ldr	r3, [pc, #256]	; (801d3a8 <etharp_output+0x1fc>)
 801d2a8:	781b      	ldrb	r3, [r3, #0]
 801d2aa:	4619      	mov	r1, r3
 801d2ac:	4a3f      	ldr	r2, [pc, #252]	; (801d3ac <etharp_output+0x200>)
 801d2ae:	460b      	mov	r3, r1
 801d2b0:	005b      	lsls	r3, r3, #1
 801d2b2:	440b      	add	r3, r1
 801d2b4:	00db      	lsls	r3, r3, #3
 801d2b6:	4413      	add	r3, r2
 801d2b8:	3308      	adds	r3, #8
 801d2ba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d2bc:	68fa      	ldr	r2, [r7, #12]
 801d2be:	429a      	cmp	r2, r3
 801d2c0:	d117      	bne.n	801d2f2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d2c2:	69bb      	ldr	r3, [r7, #24]
 801d2c4:	681a      	ldr	r2, [r3, #0]
 801d2c6:	4b38      	ldr	r3, [pc, #224]	; (801d3a8 <etharp_output+0x1fc>)
 801d2c8:	781b      	ldrb	r3, [r3, #0]
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	4937      	ldr	r1, [pc, #220]	; (801d3ac <etharp_output+0x200>)
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	005b      	lsls	r3, r3, #1
 801d2d2:	4403      	add	r3, r0
 801d2d4:	00db      	lsls	r3, r3, #3
 801d2d6:	440b      	add	r3, r1
 801d2d8:	3304      	adds	r3, #4
 801d2da:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d2dc:	429a      	cmp	r2, r3
 801d2de:	d108      	bne.n	801d2f2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d2e0:	4b31      	ldr	r3, [pc, #196]	; (801d3a8 <etharp_output+0x1fc>)
 801d2e2:	781b      	ldrb	r3, [r3, #0]
 801d2e4:	461a      	mov	r2, r3
 801d2e6:	68b9      	ldr	r1, [r7, #8]
 801d2e8:	68f8      	ldr	r0, [r7, #12]
 801d2ea:	f7ff fec5 	bl	801d078 <etharp_output_to_arp_index>
 801d2ee:	4603      	mov	r3, r0
 801d2f0:	e04a      	b.n	801d388 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d2f2:	2300      	movs	r3, #0
 801d2f4:	75fb      	strb	r3, [r7, #23]
 801d2f6:	e031      	b.n	801d35c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d2f8:	7dfa      	ldrb	r2, [r7, #23]
 801d2fa:	492c      	ldr	r1, [pc, #176]	; (801d3ac <etharp_output+0x200>)
 801d2fc:	4613      	mov	r3, r2
 801d2fe:	005b      	lsls	r3, r3, #1
 801d300:	4413      	add	r3, r2
 801d302:	00db      	lsls	r3, r3, #3
 801d304:	440b      	add	r3, r1
 801d306:	3314      	adds	r3, #20
 801d308:	781b      	ldrb	r3, [r3, #0]
 801d30a:	2b01      	cmp	r3, #1
 801d30c:	d923      	bls.n	801d356 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d30e:	7dfa      	ldrb	r2, [r7, #23]
 801d310:	4926      	ldr	r1, [pc, #152]	; (801d3ac <etharp_output+0x200>)
 801d312:	4613      	mov	r3, r2
 801d314:	005b      	lsls	r3, r3, #1
 801d316:	4413      	add	r3, r2
 801d318:	00db      	lsls	r3, r3, #3
 801d31a:	440b      	add	r3, r1
 801d31c:	3308      	adds	r3, #8
 801d31e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d320:	68fa      	ldr	r2, [r7, #12]
 801d322:	429a      	cmp	r2, r3
 801d324:	d117      	bne.n	801d356 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d326:	69bb      	ldr	r3, [r7, #24]
 801d328:	6819      	ldr	r1, [r3, #0]
 801d32a:	7dfa      	ldrb	r2, [r7, #23]
 801d32c:	481f      	ldr	r0, [pc, #124]	; (801d3ac <etharp_output+0x200>)
 801d32e:	4613      	mov	r3, r2
 801d330:	005b      	lsls	r3, r3, #1
 801d332:	4413      	add	r3, r2
 801d334:	00db      	lsls	r3, r3, #3
 801d336:	4403      	add	r3, r0
 801d338:	3304      	adds	r3, #4
 801d33a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d33c:	4299      	cmp	r1, r3
 801d33e:	d10a      	bne.n	801d356 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d340:	4a19      	ldr	r2, [pc, #100]	; (801d3a8 <etharp_output+0x1fc>)
 801d342:	7dfb      	ldrb	r3, [r7, #23]
 801d344:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d346:	7dfb      	ldrb	r3, [r7, #23]
 801d348:	461a      	mov	r2, r3
 801d34a:	68b9      	ldr	r1, [r7, #8]
 801d34c:	68f8      	ldr	r0, [r7, #12]
 801d34e:	f7ff fe93 	bl	801d078 <etharp_output_to_arp_index>
 801d352:	4603      	mov	r3, r0
 801d354:	e018      	b.n	801d388 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d356:	7dfb      	ldrb	r3, [r7, #23]
 801d358:	3301      	adds	r3, #1
 801d35a:	75fb      	strb	r3, [r7, #23]
 801d35c:	7dfb      	ldrb	r3, [r7, #23]
 801d35e:	2b09      	cmp	r3, #9
 801d360:	d9ca      	bls.n	801d2f8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d362:	68ba      	ldr	r2, [r7, #8]
 801d364:	69b9      	ldr	r1, [r7, #24]
 801d366:	68f8      	ldr	r0, [r7, #12]
 801d368:	f000 f822 	bl	801d3b0 <etharp_query>
 801d36c:	4603      	mov	r3, r0
 801d36e:	e00b      	b.n	801d388 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801d376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d37a:	9300      	str	r3, [sp, #0]
 801d37c:	69fb      	ldr	r3, [r7, #28]
 801d37e:	68b9      	ldr	r1, [r7, #8]
 801d380:	68f8      	ldr	r0, [r7, #12]
 801d382:	f001 fd45 	bl	801ee10 <ethernet_output>
 801d386:	4603      	mov	r3, r0
}
 801d388:	4618      	mov	r0, r3
 801d38a:	3720      	adds	r7, #32
 801d38c:	46bd      	mov	sp, r7
 801d38e:	bd80      	pop	{r7, pc}
 801d390:	08022d6c 	.word	0x08022d6c
 801d394:	08022ebc 	.word	0x08022ebc
 801d398:	08022de4 	.word	0x08022de4
 801d39c:	08022f0c 	.word	0x08022f0c
 801d3a0:	08022eac 	.word	0x08022eac
 801d3a4:	0802357c 	.word	0x0802357c
 801d3a8:	200111d0 	.word	0x200111d0
 801d3ac:	200110e0 	.word	0x200110e0

0801d3b0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d3b0:	b580      	push	{r7, lr}
 801d3b2:	b08c      	sub	sp, #48	; 0x30
 801d3b4:	af02      	add	r7, sp, #8
 801d3b6:	60f8      	str	r0, [r7, #12]
 801d3b8:	60b9      	str	r1, [r7, #8]
 801d3ba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	3326      	adds	r3, #38	; 0x26
 801d3c0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d3c2:	23ff      	movs	r3, #255	; 0xff
 801d3c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801d3c8:	2300      	movs	r3, #0
 801d3ca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d3cc:	68bb      	ldr	r3, [r7, #8]
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	68f9      	ldr	r1, [r7, #12]
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f000 fe0e 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 801d3d8:	4603      	mov	r3, r0
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d10c      	bne.n	801d3f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d3de:	68bb      	ldr	r3, [r7, #8]
 801d3e0:	681b      	ldr	r3, [r3, #0]
 801d3e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d3e6:	2be0      	cmp	r3, #224	; 0xe0
 801d3e8:	d006      	beq.n	801d3f8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d3ea:	68bb      	ldr	r3, [r7, #8]
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d003      	beq.n	801d3f8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d3f0:	68bb      	ldr	r3, [r7, #8]
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	d102      	bne.n	801d3fe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d3f8:	f06f 030f 	mvn.w	r3, #15
 801d3fc:	e101      	b.n	801d602 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d3fe:	68fa      	ldr	r2, [r7, #12]
 801d400:	2101      	movs	r1, #1
 801d402:	68b8      	ldr	r0, [r7, #8]
 801d404:	f7ff fb60 	bl	801cac8 <etharp_find_entry>
 801d408:	4603      	mov	r3, r0
 801d40a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d40c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d410:	2b00      	cmp	r3, #0
 801d412:	da02      	bge.n	801d41a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801d414:	8a7b      	ldrh	r3, [r7, #18]
 801d416:	b25b      	sxtb	r3, r3
 801d418:	e0f3      	b.n	801d602 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d41a:	8a7b      	ldrh	r3, [r7, #18]
 801d41c:	2b7e      	cmp	r3, #126	; 0x7e
 801d41e:	d906      	bls.n	801d42e <etharp_query+0x7e>
 801d420:	4b7a      	ldr	r3, [pc, #488]	; (801d60c <etharp_query+0x25c>)
 801d422:	f240 32c1 	movw	r2, #961	; 0x3c1
 801d426:	497a      	ldr	r1, [pc, #488]	; (801d610 <etharp_query+0x260>)
 801d428:	487a      	ldr	r0, [pc, #488]	; (801d614 <etharp_query+0x264>)
 801d42a:	f002 fc4d 	bl	801fcc8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d42e:	8a7b      	ldrh	r3, [r7, #18]
 801d430:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d432:	7c7a      	ldrb	r2, [r7, #17]
 801d434:	4978      	ldr	r1, [pc, #480]	; (801d618 <etharp_query+0x268>)
 801d436:	4613      	mov	r3, r2
 801d438:	005b      	lsls	r3, r3, #1
 801d43a:	4413      	add	r3, r2
 801d43c:	00db      	lsls	r3, r3, #3
 801d43e:	440b      	add	r3, r1
 801d440:	3314      	adds	r3, #20
 801d442:	781b      	ldrb	r3, [r3, #0]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d115      	bne.n	801d474 <etharp_query+0xc4>
    is_new_entry = 1;
 801d448:	2301      	movs	r3, #1
 801d44a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d44c:	7c7a      	ldrb	r2, [r7, #17]
 801d44e:	4972      	ldr	r1, [pc, #456]	; (801d618 <etharp_query+0x268>)
 801d450:	4613      	mov	r3, r2
 801d452:	005b      	lsls	r3, r3, #1
 801d454:	4413      	add	r3, r2
 801d456:	00db      	lsls	r3, r3, #3
 801d458:	440b      	add	r3, r1
 801d45a:	3314      	adds	r3, #20
 801d45c:	2201      	movs	r2, #1
 801d45e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d460:	7c7a      	ldrb	r2, [r7, #17]
 801d462:	496d      	ldr	r1, [pc, #436]	; (801d618 <etharp_query+0x268>)
 801d464:	4613      	mov	r3, r2
 801d466:	005b      	lsls	r3, r3, #1
 801d468:	4413      	add	r3, r2
 801d46a:	00db      	lsls	r3, r3, #3
 801d46c:	440b      	add	r3, r1
 801d46e:	3308      	adds	r3, #8
 801d470:	68fa      	ldr	r2, [r7, #12]
 801d472:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d474:	7c7a      	ldrb	r2, [r7, #17]
 801d476:	4968      	ldr	r1, [pc, #416]	; (801d618 <etharp_query+0x268>)
 801d478:	4613      	mov	r3, r2
 801d47a:	005b      	lsls	r3, r3, #1
 801d47c:	4413      	add	r3, r2
 801d47e:	00db      	lsls	r3, r3, #3
 801d480:	440b      	add	r3, r1
 801d482:	3314      	adds	r3, #20
 801d484:	781b      	ldrb	r3, [r3, #0]
 801d486:	2b01      	cmp	r3, #1
 801d488:	d011      	beq.n	801d4ae <etharp_query+0xfe>
 801d48a:	7c7a      	ldrb	r2, [r7, #17]
 801d48c:	4962      	ldr	r1, [pc, #392]	; (801d618 <etharp_query+0x268>)
 801d48e:	4613      	mov	r3, r2
 801d490:	005b      	lsls	r3, r3, #1
 801d492:	4413      	add	r3, r2
 801d494:	00db      	lsls	r3, r3, #3
 801d496:	440b      	add	r3, r1
 801d498:	3314      	adds	r3, #20
 801d49a:	781b      	ldrb	r3, [r3, #0]
 801d49c:	2b01      	cmp	r3, #1
 801d49e:	d806      	bhi.n	801d4ae <etharp_query+0xfe>
 801d4a0:	4b5a      	ldr	r3, [pc, #360]	; (801d60c <etharp_query+0x25c>)
 801d4a2:	f240 32cd 	movw	r2, #973	; 0x3cd
 801d4a6:	495d      	ldr	r1, [pc, #372]	; (801d61c <etharp_query+0x26c>)
 801d4a8:	485a      	ldr	r0, [pc, #360]	; (801d614 <etharp_query+0x264>)
 801d4aa:	f002 fc0d 	bl	801fcc8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801d4ae:	6a3b      	ldr	r3, [r7, #32]
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d102      	bne.n	801d4ba <etharp_query+0x10a>
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	2b00      	cmp	r3, #0
 801d4b8:	d10c      	bne.n	801d4d4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801d4ba:	68b9      	ldr	r1, [r7, #8]
 801d4bc:	68f8      	ldr	r0, [r7, #12]
 801d4be:	f000 f963 	bl	801d788 <etharp_request>
 801d4c2:	4603      	mov	r3, r0
 801d4c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	d102      	bne.n	801d4d4 <etharp_query+0x124>
      return result;
 801d4ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801d4d2:	e096      	b.n	801d602 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	2b00      	cmp	r3, #0
 801d4d8:	d106      	bne.n	801d4e8 <etharp_query+0x138>
 801d4da:	4b4c      	ldr	r3, [pc, #304]	; (801d60c <etharp_query+0x25c>)
 801d4dc:	f240 32e1 	movw	r2, #993	; 0x3e1
 801d4e0:	494f      	ldr	r1, [pc, #316]	; (801d620 <etharp_query+0x270>)
 801d4e2:	484c      	ldr	r0, [pc, #304]	; (801d614 <etharp_query+0x264>)
 801d4e4:	f002 fbf0 	bl	801fcc8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801d4e8:	7c7a      	ldrb	r2, [r7, #17]
 801d4ea:	494b      	ldr	r1, [pc, #300]	; (801d618 <etharp_query+0x268>)
 801d4ec:	4613      	mov	r3, r2
 801d4ee:	005b      	lsls	r3, r3, #1
 801d4f0:	4413      	add	r3, r2
 801d4f2:	00db      	lsls	r3, r3, #3
 801d4f4:	440b      	add	r3, r1
 801d4f6:	3314      	adds	r3, #20
 801d4f8:	781b      	ldrb	r3, [r3, #0]
 801d4fa:	2b01      	cmp	r3, #1
 801d4fc:	d917      	bls.n	801d52e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801d4fe:	4a49      	ldr	r2, [pc, #292]	; (801d624 <etharp_query+0x274>)
 801d500:	7c7b      	ldrb	r3, [r7, #17]
 801d502:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801d504:	7c7a      	ldrb	r2, [r7, #17]
 801d506:	4613      	mov	r3, r2
 801d508:	005b      	lsls	r3, r3, #1
 801d50a:	4413      	add	r3, r2
 801d50c:	00db      	lsls	r3, r3, #3
 801d50e:	3308      	adds	r3, #8
 801d510:	4a41      	ldr	r2, [pc, #260]	; (801d618 <etharp_query+0x268>)
 801d512:	4413      	add	r3, r2
 801d514:	3304      	adds	r3, #4
 801d516:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d51a:	9200      	str	r2, [sp, #0]
 801d51c:	697a      	ldr	r2, [r7, #20]
 801d51e:	6879      	ldr	r1, [r7, #4]
 801d520:	68f8      	ldr	r0, [r7, #12]
 801d522:	f001 fc75 	bl	801ee10 <ethernet_output>
 801d526:	4603      	mov	r3, r0
 801d528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d52c:	e067      	b.n	801d5fe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d52e:	7c7a      	ldrb	r2, [r7, #17]
 801d530:	4939      	ldr	r1, [pc, #228]	; (801d618 <etharp_query+0x268>)
 801d532:	4613      	mov	r3, r2
 801d534:	005b      	lsls	r3, r3, #1
 801d536:	4413      	add	r3, r2
 801d538:	00db      	lsls	r3, r3, #3
 801d53a:	440b      	add	r3, r1
 801d53c:	3314      	adds	r3, #20
 801d53e:	781b      	ldrb	r3, [r3, #0]
 801d540:	2b01      	cmp	r3, #1
 801d542:	d15c      	bne.n	801d5fe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801d544:	2300      	movs	r3, #0
 801d546:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d54c:	e01c      	b.n	801d588 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801d54e:	69fb      	ldr	r3, [r7, #28]
 801d550:	895a      	ldrh	r2, [r3, #10]
 801d552:	69fb      	ldr	r3, [r7, #28]
 801d554:	891b      	ldrh	r3, [r3, #8]
 801d556:	429a      	cmp	r2, r3
 801d558:	d10a      	bne.n	801d570 <etharp_query+0x1c0>
 801d55a:	69fb      	ldr	r3, [r7, #28]
 801d55c:	681b      	ldr	r3, [r3, #0]
 801d55e:	2b00      	cmp	r3, #0
 801d560:	d006      	beq.n	801d570 <etharp_query+0x1c0>
 801d562:	4b2a      	ldr	r3, [pc, #168]	; (801d60c <etharp_query+0x25c>)
 801d564:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801d568:	492f      	ldr	r1, [pc, #188]	; (801d628 <etharp_query+0x278>)
 801d56a:	482a      	ldr	r0, [pc, #168]	; (801d614 <etharp_query+0x264>)
 801d56c:	f002 fbac 	bl	801fcc8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801d570:	69fb      	ldr	r3, [r7, #28]
 801d572:	7b1b      	ldrb	r3, [r3, #12]
 801d574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d002      	beq.n	801d582 <etharp_query+0x1d2>
        copy_needed = 1;
 801d57c:	2301      	movs	r3, #1
 801d57e:	61bb      	str	r3, [r7, #24]
        break;
 801d580:	e005      	b.n	801d58e <etharp_query+0x1de>
      }
      p = p->next;
 801d582:	69fb      	ldr	r3, [r7, #28]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	61fb      	str	r3, [r7, #28]
    while (p) {
 801d588:	69fb      	ldr	r3, [r7, #28]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d1df      	bne.n	801d54e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801d58e:	69bb      	ldr	r3, [r7, #24]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d007      	beq.n	801d5a4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801d594:	687a      	ldr	r2, [r7, #4]
 801d596:	f44f 7120 	mov.w	r1, #640	; 0x280
 801d59a:	200e      	movs	r0, #14
 801d59c:	f7f9 fcf8 	bl	8016f90 <pbuf_clone>
 801d5a0:	61f8      	str	r0, [r7, #28]
 801d5a2:	e004      	b.n	801d5ae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801d5a8:	69f8      	ldr	r0, [r7, #28]
 801d5aa:	f7f9 fb2f 	bl	8016c0c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801d5ae:	69fb      	ldr	r3, [r7, #28]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d021      	beq.n	801d5f8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801d5b4:	7c7a      	ldrb	r2, [r7, #17]
 801d5b6:	4918      	ldr	r1, [pc, #96]	; (801d618 <etharp_query+0x268>)
 801d5b8:	4613      	mov	r3, r2
 801d5ba:	005b      	lsls	r3, r3, #1
 801d5bc:	4413      	add	r3, r2
 801d5be:	00db      	lsls	r3, r3, #3
 801d5c0:	440b      	add	r3, r1
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d00a      	beq.n	801d5de <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801d5c8:	7c7a      	ldrb	r2, [r7, #17]
 801d5ca:	4913      	ldr	r1, [pc, #76]	; (801d618 <etharp_query+0x268>)
 801d5cc:	4613      	mov	r3, r2
 801d5ce:	005b      	lsls	r3, r3, #1
 801d5d0:	4413      	add	r3, r2
 801d5d2:	00db      	lsls	r3, r3, #3
 801d5d4:	440b      	add	r3, r1
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f7f9 fa71 	bl	8016ac0 <pbuf_free>
      }
      arp_table[i].q = p;
 801d5de:	7c7a      	ldrb	r2, [r7, #17]
 801d5e0:	490d      	ldr	r1, [pc, #52]	; (801d618 <etharp_query+0x268>)
 801d5e2:	4613      	mov	r3, r2
 801d5e4:	005b      	lsls	r3, r3, #1
 801d5e6:	4413      	add	r3, r2
 801d5e8:	00db      	lsls	r3, r3, #3
 801d5ea:	440b      	add	r3, r1
 801d5ec:	69fa      	ldr	r2, [r7, #28]
 801d5ee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801d5f0:	2300      	movs	r3, #0
 801d5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801d5f6:	e002      	b.n	801d5fe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801d5f8:	23ff      	movs	r3, #255	; 0xff
 801d5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801d5fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801d602:	4618      	mov	r0, r3
 801d604:	3728      	adds	r7, #40	; 0x28
 801d606:	46bd      	mov	sp, r7
 801d608:	bd80      	pop	{r7, pc}
 801d60a:	bf00      	nop
 801d60c:	08022d6c 	.word	0x08022d6c
 801d610:	08022f18 	.word	0x08022f18
 801d614:	08022de4 	.word	0x08022de4
 801d618:	200110e0 	.word	0x200110e0
 801d61c:	08022f28 	.word	0x08022f28
 801d620:	08022f0c 	.word	0x08022f0c
 801d624:	200111d0 	.word	0x200111d0
 801d628:	08022f50 	.word	0x08022f50

0801d62c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801d62c:	b580      	push	{r7, lr}
 801d62e:	b08a      	sub	sp, #40	; 0x28
 801d630:	af02      	add	r7, sp, #8
 801d632:	60f8      	str	r0, [r7, #12]
 801d634:	60b9      	str	r1, [r7, #8]
 801d636:	607a      	str	r2, [r7, #4]
 801d638:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801d63a:	2300      	movs	r3, #0
 801d63c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d63e:	68fb      	ldr	r3, [r7, #12]
 801d640:	2b00      	cmp	r3, #0
 801d642:	d106      	bne.n	801d652 <etharp_raw+0x26>
 801d644:	4b3a      	ldr	r3, [pc, #232]	; (801d730 <etharp_raw+0x104>)
 801d646:	f240 4257 	movw	r2, #1111	; 0x457
 801d64a:	493a      	ldr	r1, [pc, #232]	; (801d734 <etharp_raw+0x108>)
 801d64c:	483a      	ldr	r0, [pc, #232]	; (801d738 <etharp_raw+0x10c>)
 801d64e:	f002 fb3b 	bl	801fcc8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801d652:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d656:	211c      	movs	r1, #28
 801d658:	200e      	movs	r0, #14
 801d65a:	f7f8 ff4d 	bl	80164f8 <pbuf_alloc>
 801d65e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801d660:	69bb      	ldr	r3, [r7, #24]
 801d662:	2b00      	cmp	r3, #0
 801d664:	d102      	bne.n	801d66c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801d666:	f04f 33ff 	mov.w	r3, #4294967295
 801d66a:	e05d      	b.n	801d728 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801d66c:	69bb      	ldr	r3, [r7, #24]
 801d66e:	895b      	ldrh	r3, [r3, #10]
 801d670:	2b1b      	cmp	r3, #27
 801d672:	d806      	bhi.n	801d682 <etharp_raw+0x56>
 801d674:	4b2e      	ldr	r3, [pc, #184]	; (801d730 <etharp_raw+0x104>)
 801d676:	f240 4262 	movw	r2, #1122	; 0x462
 801d67a:	4930      	ldr	r1, [pc, #192]	; (801d73c <etharp_raw+0x110>)
 801d67c:	482e      	ldr	r0, [pc, #184]	; (801d738 <etharp_raw+0x10c>)
 801d67e:	f002 fb23 	bl	801fcc8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801d682:	69bb      	ldr	r3, [r7, #24]
 801d684:	685b      	ldr	r3, [r3, #4]
 801d686:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801d688:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801d68a:	4618      	mov	r0, r3
 801d68c:	f7f7 fe26 	bl	80152dc <lwip_htons>
 801d690:	4603      	mov	r3, r0
 801d692:	461a      	mov	r2, r3
 801d694:	697b      	ldr	r3, [r7, #20]
 801d696:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d69e:	2b06      	cmp	r3, #6
 801d6a0:	d006      	beq.n	801d6b0 <etharp_raw+0x84>
 801d6a2:	4b23      	ldr	r3, [pc, #140]	; (801d730 <etharp_raw+0x104>)
 801d6a4:	f240 4269 	movw	r2, #1129	; 0x469
 801d6a8:	4925      	ldr	r1, [pc, #148]	; (801d740 <etharp_raw+0x114>)
 801d6aa:	4823      	ldr	r0, [pc, #140]	; (801d738 <etharp_raw+0x10c>)
 801d6ac:	f002 fb0c 	bl	801fcc8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801d6b0:	697b      	ldr	r3, [r7, #20]
 801d6b2:	3308      	adds	r3, #8
 801d6b4:	2206      	movs	r2, #6
 801d6b6:	6839      	ldr	r1, [r7, #0]
 801d6b8:	4618      	mov	r0, r3
 801d6ba:	f002 fa0f 	bl	801fadc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801d6be:	697b      	ldr	r3, [r7, #20]
 801d6c0:	3312      	adds	r3, #18
 801d6c2:	2206      	movs	r2, #6
 801d6c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	f002 fa08 	bl	801fadc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801d6cc:	697b      	ldr	r3, [r7, #20]
 801d6ce:	330e      	adds	r3, #14
 801d6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d6d2:	6812      	ldr	r2, [r2, #0]
 801d6d4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801d6d6:	697b      	ldr	r3, [r7, #20]
 801d6d8:	3318      	adds	r3, #24
 801d6da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d6dc:	6812      	ldr	r2, [r2, #0]
 801d6de:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801d6e0:	697b      	ldr	r3, [r7, #20]
 801d6e2:	2200      	movs	r2, #0
 801d6e4:	701a      	strb	r2, [r3, #0]
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	f042 0201 	orr.w	r2, r2, #1
 801d6ec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801d6ee:	697b      	ldr	r3, [r7, #20]
 801d6f0:	2200      	movs	r2, #0
 801d6f2:	f042 0208 	orr.w	r2, r2, #8
 801d6f6:	709a      	strb	r2, [r3, #2]
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	2206      	movs	r2, #6
 801d700:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801d702:	697b      	ldr	r3, [r7, #20]
 801d704:	2204      	movs	r2, #4
 801d706:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801d708:	f640 0306 	movw	r3, #2054	; 0x806
 801d70c:	9300      	str	r3, [sp, #0]
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	68ba      	ldr	r2, [r7, #8]
 801d712:	69b9      	ldr	r1, [r7, #24]
 801d714:	68f8      	ldr	r0, [r7, #12]
 801d716:	f001 fb7b 	bl	801ee10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801d71a:	69b8      	ldr	r0, [r7, #24]
 801d71c:	f7f9 f9d0 	bl	8016ac0 <pbuf_free>
  p = NULL;
 801d720:	2300      	movs	r3, #0
 801d722:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801d724:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d728:	4618      	mov	r0, r3
 801d72a:	3720      	adds	r7, #32
 801d72c:	46bd      	mov	sp, r7
 801d72e:	bd80      	pop	{r7, pc}
 801d730:	08022d6c 	.word	0x08022d6c
 801d734:	08022ebc 	.word	0x08022ebc
 801d738:	08022de4 	.word	0x08022de4
 801d73c:	08022f6c 	.word	0x08022f6c
 801d740:	08022fa0 	.word	0x08022fa0

0801d744 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801d744:	b580      	push	{r7, lr}
 801d746:	b088      	sub	sp, #32
 801d748:	af04      	add	r7, sp, #16
 801d74a:	60f8      	str	r0, [r7, #12]
 801d74c:	60b9      	str	r1, [r7, #8]
 801d74e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d750:	68fb      	ldr	r3, [r7, #12]
 801d752:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801d75c:	68fb      	ldr	r3, [r7, #12]
 801d75e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d760:	2201      	movs	r2, #1
 801d762:	9203      	str	r2, [sp, #12]
 801d764:	68ba      	ldr	r2, [r7, #8]
 801d766:	9202      	str	r2, [sp, #8]
 801d768:	4a06      	ldr	r2, [pc, #24]	; (801d784 <etharp_request_dst+0x40>)
 801d76a:	9201      	str	r2, [sp, #4]
 801d76c:	9300      	str	r3, [sp, #0]
 801d76e:	4603      	mov	r3, r0
 801d770:	687a      	ldr	r2, [r7, #4]
 801d772:	68f8      	ldr	r0, [r7, #12]
 801d774:	f7ff ff5a 	bl	801d62c <etharp_raw>
 801d778:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d77a:	4618      	mov	r0, r3
 801d77c:	3710      	adds	r7, #16
 801d77e:	46bd      	mov	sp, r7
 801d780:	bd80      	pop	{r7, pc}
 801d782:	bf00      	nop
 801d784:	08023584 	.word	0x08023584

0801d788 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d788:	b580      	push	{r7, lr}
 801d78a:	b082      	sub	sp, #8
 801d78c:	af00      	add	r7, sp, #0
 801d78e:	6078      	str	r0, [r7, #4]
 801d790:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d792:	4a05      	ldr	r2, [pc, #20]	; (801d7a8 <etharp_request+0x20>)
 801d794:	6839      	ldr	r1, [r7, #0]
 801d796:	6878      	ldr	r0, [r7, #4]
 801d798:	f7ff ffd4 	bl	801d744 <etharp_request_dst>
 801d79c:	4603      	mov	r3, r0
}
 801d79e:	4618      	mov	r0, r3
 801d7a0:	3708      	adds	r7, #8
 801d7a2:	46bd      	mov	sp, r7
 801d7a4:	bd80      	pop	{r7, pc}
 801d7a6:	bf00      	nop
 801d7a8:	0802357c 	.word	0x0802357c

0801d7ac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d7ac:	b580      	push	{r7, lr}
 801d7ae:	b08e      	sub	sp, #56	; 0x38
 801d7b0:	af04      	add	r7, sp, #16
 801d7b2:	6078      	str	r0, [r7, #4]
 801d7b4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d7b6:	4b79      	ldr	r3, [pc, #484]	; (801d99c <icmp_input+0x1f0>)
 801d7b8:	689b      	ldr	r3, [r3, #8]
 801d7ba:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7be:	781b      	ldrb	r3, [r3, #0]
 801d7c0:	f003 030f 	and.w	r3, r3, #15
 801d7c4:	b2db      	uxtb	r3, r3
 801d7c6:	009b      	lsls	r3, r3, #2
 801d7c8:	b2db      	uxtb	r3, r3
 801d7ca:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801d7cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d7ce:	2b13      	cmp	r3, #19
 801d7d0:	f240 80cd 	bls.w	801d96e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	895b      	ldrh	r3, [r3, #10]
 801d7d8:	2b03      	cmp	r3, #3
 801d7da:	f240 80ca 	bls.w	801d972 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	685b      	ldr	r3, [r3, #4]
 801d7e2:	781b      	ldrb	r3, [r3, #0]
 801d7e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d7e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	f000 80b7 	beq.w	801d960 <icmp_input+0x1b4>
 801d7f2:	2b08      	cmp	r3, #8
 801d7f4:	f040 80b7 	bne.w	801d966 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d7f8:	4b69      	ldr	r3, [pc, #420]	; (801d9a0 <icmp_input+0x1f4>)
 801d7fa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d7fc:	4b67      	ldr	r3, [pc, #412]	; (801d99c <icmp_input+0x1f0>)
 801d7fe:	695b      	ldr	r3, [r3, #20]
 801d800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d804:	2be0      	cmp	r3, #224	; 0xe0
 801d806:	f000 80bb 	beq.w	801d980 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d80a:	4b64      	ldr	r3, [pc, #400]	; (801d99c <icmp_input+0x1f0>)
 801d80c:	695b      	ldr	r3, [r3, #20]
 801d80e:	4a63      	ldr	r2, [pc, #396]	; (801d99c <icmp_input+0x1f0>)
 801d810:	6812      	ldr	r2, [r2, #0]
 801d812:	4611      	mov	r1, r2
 801d814:	4618      	mov	r0, r3
 801d816:	f000 fbed 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 801d81a:	4603      	mov	r3, r0
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	f040 80b1 	bne.w	801d984 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	891b      	ldrh	r3, [r3, #8]
 801d826:	2b07      	cmp	r3, #7
 801d828:	f240 80a5 	bls.w	801d976 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d82c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d82e:	330e      	adds	r3, #14
 801d830:	4619      	mov	r1, r3
 801d832:	6878      	ldr	r0, [r7, #4]
 801d834:	f7f9 f8ae 	bl	8016994 <pbuf_add_header>
 801d838:	4603      	mov	r3, r0
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	d04b      	beq.n	801d8d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	891a      	ldrh	r2, [r3, #8]
 801d842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d844:	4413      	add	r3, r2
 801d846:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	891b      	ldrh	r3, [r3, #8]
 801d84c:	8b7a      	ldrh	r2, [r7, #26]
 801d84e:	429a      	cmp	r2, r3
 801d850:	f0c0 809a 	bcc.w	801d988 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d854:	8b7b      	ldrh	r3, [r7, #26]
 801d856:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d85a:	4619      	mov	r1, r3
 801d85c:	200e      	movs	r0, #14
 801d85e:	f7f8 fe4b 	bl	80164f8 <pbuf_alloc>
 801d862:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d864:	697b      	ldr	r3, [r7, #20]
 801d866:	2b00      	cmp	r3, #0
 801d868:	f000 8090 	beq.w	801d98c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d86c:	697b      	ldr	r3, [r7, #20]
 801d86e:	895b      	ldrh	r3, [r3, #10]
 801d870:	461a      	mov	r2, r3
 801d872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d874:	3308      	adds	r3, #8
 801d876:	429a      	cmp	r2, r3
 801d878:	d203      	bcs.n	801d882 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d87a:	6978      	ldr	r0, [r7, #20]
 801d87c:	f7f9 f920 	bl	8016ac0 <pbuf_free>
          goto icmperr;
 801d880:	e085      	b.n	801d98e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d882:	697b      	ldr	r3, [r7, #20]
 801d884:	685b      	ldr	r3, [r3, #4]
 801d886:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801d888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d88a:	4618      	mov	r0, r3
 801d88c:	f002 f926 	bl	801fadc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d892:	4619      	mov	r1, r3
 801d894:	6978      	ldr	r0, [r7, #20]
 801d896:	f7f9 f88d 	bl	80169b4 <pbuf_remove_header>
 801d89a:	4603      	mov	r3, r0
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d009      	beq.n	801d8b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d8a0:	4b40      	ldr	r3, [pc, #256]	; (801d9a4 <icmp_input+0x1f8>)
 801d8a2:	22b6      	movs	r2, #182	; 0xb6
 801d8a4:	4940      	ldr	r1, [pc, #256]	; (801d9a8 <icmp_input+0x1fc>)
 801d8a6:	4841      	ldr	r0, [pc, #260]	; (801d9ac <icmp_input+0x200>)
 801d8a8:	f002 fa0e 	bl	801fcc8 <iprintf>
          pbuf_free(r);
 801d8ac:	6978      	ldr	r0, [r7, #20]
 801d8ae:	f7f9 f907 	bl	8016ac0 <pbuf_free>
          goto icmperr;
 801d8b2:	e06c      	b.n	801d98e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d8b4:	6879      	ldr	r1, [r7, #4]
 801d8b6:	6978      	ldr	r0, [r7, #20]
 801d8b8:	f7f9 fa26 	bl	8016d08 <pbuf_copy>
 801d8bc:	4603      	mov	r3, r0
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d003      	beq.n	801d8ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d8c2:	6978      	ldr	r0, [r7, #20]
 801d8c4:	f7f9 f8fc 	bl	8016ac0 <pbuf_free>
          goto icmperr;
 801d8c8:	e061      	b.n	801d98e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801d8ca:	6878      	ldr	r0, [r7, #4]
 801d8cc:	f7f9 f8f8 	bl	8016ac0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d8d0:	697b      	ldr	r3, [r7, #20]
 801d8d2:	607b      	str	r3, [r7, #4]
 801d8d4:	e00f      	b.n	801d8f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d8d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d8d8:	330e      	adds	r3, #14
 801d8da:	4619      	mov	r1, r3
 801d8dc:	6878      	ldr	r0, [r7, #4]
 801d8de:	f7f9 f869 	bl	80169b4 <pbuf_remove_header>
 801d8e2:	4603      	mov	r3, r0
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d006      	beq.n	801d8f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d8e8:	4b2e      	ldr	r3, [pc, #184]	; (801d9a4 <icmp_input+0x1f8>)
 801d8ea:	22c7      	movs	r2, #199	; 0xc7
 801d8ec:	4930      	ldr	r1, [pc, #192]	; (801d9b0 <icmp_input+0x204>)
 801d8ee:	482f      	ldr	r0, [pc, #188]	; (801d9ac <icmp_input+0x200>)
 801d8f0:	f002 f9ea 	bl	801fcc8 <iprintf>
          goto icmperr;
 801d8f4:	e04b      	b.n	801d98e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	685b      	ldr	r3, [r3, #4]
 801d8fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d8fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d8fe:	4619      	mov	r1, r3
 801d900:	6878      	ldr	r0, [r7, #4]
 801d902:	f7f9 f847 	bl	8016994 <pbuf_add_header>
 801d906:	4603      	mov	r3, r0
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d12b      	bne.n	801d964 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	685b      	ldr	r3, [r3, #4]
 801d910:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d912:	69fb      	ldr	r3, [r7, #28]
 801d914:	681a      	ldr	r2, [r3, #0]
 801d916:	68fb      	ldr	r3, [r7, #12]
 801d918:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d91a:	4b20      	ldr	r3, [pc, #128]	; (801d99c <icmp_input+0x1f0>)
 801d91c:	691a      	ldr	r2, [r3, #16]
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d922:	693b      	ldr	r3, [r7, #16]
 801d924:	2200      	movs	r2, #0
 801d926:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d928:	693b      	ldr	r3, [r7, #16]
 801d92a:	2200      	movs	r2, #0
 801d92c:	709a      	strb	r2, [r3, #2]
 801d92e:	2200      	movs	r2, #0
 801d930:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	22ff      	movs	r2, #255	; 0xff
 801d936:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	2200      	movs	r2, #0
 801d93c:	729a      	strb	r2, [r3, #10]
 801d93e:	2200      	movs	r2, #0
 801d940:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d942:	683b      	ldr	r3, [r7, #0]
 801d944:	9302      	str	r3, [sp, #8]
 801d946:	2301      	movs	r3, #1
 801d948:	9301      	str	r3, [sp, #4]
 801d94a:	2300      	movs	r3, #0
 801d94c:	9300      	str	r3, [sp, #0]
 801d94e:	23ff      	movs	r3, #255	; 0xff
 801d950:	2200      	movs	r2, #0
 801d952:	69f9      	ldr	r1, [r7, #28]
 801d954:	6878      	ldr	r0, [r7, #4]
 801d956:	f000 fa75 	bl	801de44 <ip4_output_if>
 801d95a:	4603      	mov	r3, r0
 801d95c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d95e:	e001      	b.n	801d964 <icmp_input+0x1b8>
      break;
 801d960:	bf00      	nop
 801d962:	e000      	b.n	801d966 <icmp_input+0x1ba>
      break;
 801d964:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801d966:	6878      	ldr	r0, [r7, #4]
 801d968:	f7f9 f8aa 	bl	8016ac0 <pbuf_free>
  return;
 801d96c:	e013      	b.n	801d996 <icmp_input+0x1ea>
    goto lenerr;
 801d96e:	bf00      	nop
 801d970:	e002      	b.n	801d978 <icmp_input+0x1cc>
    goto lenerr;
 801d972:	bf00      	nop
 801d974:	e000      	b.n	801d978 <icmp_input+0x1cc>
        goto lenerr;
 801d976:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	f7f9 f8a1 	bl	8016ac0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d97e:	e00a      	b.n	801d996 <icmp_input+0x1ea>
        goto icmperr;
 801d980:	bf00      	nop
 801d982:	e004      	b.n	801d98e <icmp_input+0x1e2>
        goto icmperr;
 801d984:	bf00      	nop
 801d986:	e002      	b.n	801d98e <icmp_input+0x1e2>
          goto icmperr;
 801d988:	bf00      	nop
 801d98a:	e000      	b.n	801d98e <icmp_input+0x1e2>
          goto icmperr;
 801d98c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d98e:	6878      	ldr	r0, [r7, #4]
 801d990:	f7f9 f896 	bl	8016ac0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d994:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d996:	3728      	adds	r7, #40	; 0x28
 801d998:	46bd      	mov	sp, r7
 801d99a:	bd80      	pop	{r7, pc}
 801d99c:	2000d92c 	.word	0x2000d92c
 801d9a0:	2000d940 	.word	0x2000d940
 801d9a4:	08022fe4 	.word	0x08022fe4
 801d9a8:	0802301c 	.word	0x0802301c
 801d9ac:	08023054 	.word	0x08023054
 801d9b0:	0802307c 	.word	0x0802307c

0801d9b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	b082      	sub	sp, #8
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	6078      	str	r0, [r7, #4]
 801d9bc:	460b      	mov	r3, r1
 801d9be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d9c0:	78fb      	ldrb	r3, [r7, #3]
 801d9c2:	461a      	mov	r2, r3
 801d9c4:	2103      	movs	r1, #3
 801d9c6:	6878      	ldr	r0, [r7, #4]
 801d9c8:	f000 f814 	bl	801d9f4 <icmp_send_response>
}
 801d9cc:	bf00      	nop
 801d9ce:	3708      	adds	r7, #8
 801d9d0:	46bd      	mov	sp, r7
 801d9d2:	bd80      	pop	{r7, pc}

0801d9d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d9d4:	b580      	push	{r7, lr}
 801d9d6:	b082      	sub	sp, #8
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	6078      	str	r0, [r7, #4]
 801d9dc:	460b      	mov	r3, r1
 801d9de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d9e0:	78fb      	ldrb	r3, [r7, #3]
 801d9e2:	461a      	mov	r2, r3
 801d9e4:	210b      	movs	r1, #11
 801d9e6:	6878      	ldr	r0, [r7, #4]
 801d9e8:	f000 f804 	bl	801d9f4 <icmp_send_response>
}
 801d9ec:	bf00      	nop
 801d9ee:	3708      	adds	r7, #8
 801d9f0:	46bd      	mov	sp, r7
 801d9f2:	bd80      	pop	{r7, pc}

0801d9f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	b08c      	sub	sp, #48	; 0x30
 801d9f8:	af04      	add	r7, sp, #16
 801d9fa:	6078      	str	r0, [r7, #4]
 801d9fc:	460b      	mov	r3, r1
 801d9fe:	70fb      	strb	r3, [r7, #3]
 801da00:	4613      	mov	r3, r2
 801da02:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801da04:	f44f 7220 	mov.w	r2, #640	; 0x280
 801da08:	2124      	movs	r1, #36	; 0x24
 801da0a:	2022      	movs	r0, #34	; 0x22
 801da0c:	f7f8 fd74 	bl	80164f8 <pbuf_alloc>
 801da10:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801da12:	69fb      	ldr	r3, [r7, #28]
 801da14:	2b00      	cmp	r3, #0
 801da16:	d04c      	beq.n	801dab2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801da18:	69fb      	ldr	r3, [r7, #28]
 801da1a:	895b      	ldrh	r3, [r3, #10]
 801da1c:	2b23      	cmp	r3, #35	; 0x23
 801da1e:	d806      	bhi.n	801da2e <icmp_send_response+0x3a>
 801da20:	4b26      	ldr	r3, [pc, #152]	; (801dabc <icmp_send_response+0xc8>)
 801da22:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801da26:	4926      	ldr	r1, [pc, #152]	; (801dac0 <icmp_send_response+0xcc>)
 801da28:	4826      	ldr	r0, [pc, #152]	; (801dac4 <icmp_send_response+0xd0>)
 801da2a:	f002 f94d 	bl	801fcc8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	685b      	ldr	r3, [r3, #4]
 801da32:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801da34:	69fb      	ldr	r3, [r7, #28]
 801da36:	685b      	ldr	r3, [r3, #4]
 801da38:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801da3a:	697b      	ldr	r3, [r7, #20]
 801da3c:	78fa      	ldrb	r2, [r7, #3]
 801da3e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801da40:	697b      	ldr	r3, [r7, #20]
 801da42:	78ba      	ldrb	r2, [r7, #2]
 801da44:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801da46:	697b      	ldr	r3, [r7, #20]
 801da48:	2200      	movs	r2, #0
 801da4a:	711a      	strb	r2, [r3, #4]
 801da4c:	2200      	movs	r2, #0
 801da4e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801da50:	697b      	ldr	r3, [r7, #20]
 801da52:	2200      	movs	r2, #0
 801da54:	719a      	strb	r2, [r3, #6]
 801da56:	2200      	movs	r2, #0
 801da58:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801da5a:	69fb      	ldr	r3, [r7, #28]
 801da5c:	685b      	ldr	r3, [r3, #4]
 801da5e:	f103 0008 	add.w	r0, r3, #8
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	685b      	ldr	r3, [r3, #4]
 801da66:	221c      	movs	r2, #28
 801da68:	4619      	mov	r1, r3
 801da6a:	f002 f837 	bl	801fadc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801da6e:	69bb      	ldr	r3, [r7, #24]
 801da70:	68db      	ldr	r3, [r3, #12]
 801da72:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801da74:	f107 030c 	add.w	r3, r7, #12
 801da78:	4618      	mov	r0, r3
 801da7a:	f000 f825 	bl	801dac8 <ip4_route>
 801da7e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801da80:	693b      	ldr	r3, [r7, #16]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d011      	beq.n	801daaa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801da86:	697b      	ldr	r3, [r7, #20]
 801da88:	2200      	movs	r2, #0
 801da8a:	709a      	strb	r2, [r3, #2]
 801da8c:	2200      	movs	r2, #0
 801da8e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801da90:	f107 020c 	add.w	r2, r7, #12
 801da94:	693b      	ldr	r3, [r7, #16]
 801da96:	9302      	str	r3, [sp, #8]
 801da98:	2301      	movs	r3, #1
 801da9a:	9301      	str	r3, [sp, #4]
 801da9c:	2300      	movs	r3, #0
 801da9e:	9300      	str	r3, [sp, #0]
 801daa0:	23ff      	movs	r3, #255	; 0xff
 801daa2:	2100      	movs	r1, #0
 801daa4:	69f8      	ldr	r0, [r7, #28]
 801daa6:	f000 f9cd 	bl	801de44 <ip4_output_if>
  }
  pbuf_free(q);
 801daaa:	69f8      	ldr	r0, [r7, #28]
 801daac:	f7f9 f808 	bl	8016ac0 <pbuf_free>
 801dab0:	e000      	b.n	801dab4 <icmp_send_response+0xc0>
    return;
 801dab2:	bf00      	nop
}
 801dab4:	3720      	adds	r7, #32
 801dab6:	46bd      	mov	sp, r7
 801dab8:	bd80      	pop	{r7, pc}
 801daba:	bf00      	nop
 801dabc:	08022fe4 	.word	0x08022fe4
 801dac0:	080230b0 	.word	0x080230b0
 801dac4:	08023054 	.word	0x08023054

0801dac8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801dac8:	b480      	push	{r7}
 801daca:	b085      	sub	sp, #20
 801dacc:	af00      	add	r7, sp, #0
 801dace:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801dad0:	4b33      	ldr	r3, [pc, #204]	; (801dba0 <ip4_route+0xd8>)
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	60fb      	str	r3, [r7, #12]
 801dad6:	e036      	b.n	801db46 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dade:	f003 0301 	and.w	r3, r3, #1
 801dae2:	b2db      	uxtb	r3, r3
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d02b      	beq.n	801db40 <ip4_route+0x78>
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801daee:	089b      	lsrs	r3, r3, #2
 801daf0:	f003 0301 	and.w	r3, r3, #1
 801daf4:	b2db      	uxtb	r3, r3
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	d022      	beq.n	801db40 <ip4_route+0x78>
 801dafa:	68fb      	ldr	r3, [r7, #12]
 801dafc:	3304      	adds	r3, #4
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	2b00      	cmp	r3, #0
 801db02:	d01d      	beq.n	801db40 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	681a      	ldr	r2, [r3, #0]
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	3304      	adds	r3, #4
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	405a      	eors	r2, r3
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	3308      	adds	r3, #8
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	4013      	ands	r3, r2
 801db18:	2b00      	cmp	r3, #0
 801db1a:	d101      	bne.n	801db20 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801db1c:	68fb      	ldr	r3, [r7, #12]
 801db1e:	e038      	b.n	801db92 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801db26:	f003 0302 	and.w	r3, r3, #2
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d108      	bne.n	801db40 <ip4_route+0x78>
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	681a      	ldr	r2, [r3, #0]
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	330c      	adds	r3, #12
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	429a      	cmp	r2, r3
 801db3a:	d101      	bne.n	801db40 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801db3c:	68fb      	ldr	r3, [r7, #12]
 801db3e:	e028      	b.n	801db92 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801db40:	68fb      	ldr	r3, [r7, #12]
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	60fb      	str	r3, [r7, #12]
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d1c5      	bne.n	801dad8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801db4c:	4b15      	ldr	r3, [pc, #84]	; (801dba4 <ip4_route+0xdc>)
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	2b00      	cmp	r3, #0
 801db52:	d01a      	beq.n	801db8a <ip4_route+0xc2>
 801db54:	4b13      	ldr	r3, [pc, #76]	; (801dba4 <ip4_route+0xdc>)
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801db5c:	f003 0301 	and.w	r3, r3, #1
 801db60:	2b00      	cmp	r3, #0
 801db62:	d012      	beq.n	801db8a <ip4_route+0xc2>
 801db64:	4b0f      	ldr	r3, [pc, #60]	; (801dba4 <ip4_route+0xdc>)
 801db66:	681b      	ldr	r3, [r3, #0]
 801db68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801db6c:	f003 0304 	and.w	r3, r3, #4
 801db70:	2b00      	cmp	r3, #0
 801db72:	d00a      	beq.n	801db8a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801db74:	4b0b      	ldr	r3, [pc, #44]	; (801dba4 <ip4_route+0xdc>)
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	3304      	adds	r3, #4
 801db7a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d004      	beq.n	801db8a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	b2db      	uxtb	r3, r3
 801db86:	2b7f      	cmp	r3, #127	; 0x7f
 801db88:	d101      	bne.n	801db8e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801db8a:	2300      	movs	r3, #0
 801db8c:	e001      	b.n	801db92 <ip4_route+0xca>
  }

  return netif_default;
 801db8e:	4b05      	ldr	r3, [pc, #20]	; (801dba4 <ip4_route+0xdc>)
 801db90:	681b      	ldr	r3, [r3, #0]
}
 801db92:	4618      	mov	r0, r3
 801db94:	3714      	adds	r7, #20
 801db96:	46bd      	mov	sp, r7
 801db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db9c:	4770      	bx	lr
 801db9e:	bf00      	nop
 801dba0:	20011074 	.word	0x20011074
 801dba4:	20011078 	.word	0x20011078

0801dba8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b082      	sub	sp, #8
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801dbb0:	687b      	ldr	r3, [r7, #4]
 801dbb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dbb6:	f003 0301 	and.w	r3, r3, #1
 801dbba:	b2db      	uxtb	r3, r3
 801dbbc:	2b00      	cmp	r3, #0
 801dbbe:	d016      	beq.n	801dbee <ip4_input_accept+0x46>
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	3304      	adds	r3, #4
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	d011      	beq.n	801dbee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801dbca:	4b0b      	ldr	r3, [pc, #44]	; (801dbf8 <ip4_input_accept+0x50>)
 801dbcc:	695a      	ldr	r2, [r3, #20]
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	3304      	adds	r3, #4
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	429a      	cmp	r2, r3
 801dbd6:	d008      	beq.n	801dbea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801dbd8:	4b07      	ldr	r3, [pc, #28]	; (801dbf8 <ip4_input_accept+0x50>)
 801dbda:	695b      	ldr	r3, [r3, #20]
 801dbdc:	6879      	ldr	r1, [r7, #4]
 801dbde:	4618      	mov	r0, r3
 801dbe0:	f000 fa08 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 801dbe4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d001      	beq.n	801dbee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801dbea:	2301      	movs	r3, #1
 801dbec:	e000      	b.n	801dbf0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801dbee:	2300      	movs	r3, #0
}
 801dbf0:	4618      	mov	r0, r3
 801dbf2:	3708      	adds	r7, #8
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	bd80      	pop	{r7, pc}
 801dbf8:	2000d92c 	.word	0x2000d92c

0801dbfc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801dbfc:	b580      	push	{r7, lr}
 801dbfe:	b086      	sub	sp, #24
 801dc00:	af00      	add	r7, sp, #0
 801dc02:	6078      	str	r0, [r7, #4]
 801dc04:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801dc06:	687b      	ldr	r3, [r7, #4]
 801dc08:	685b      	ldr	r3, [r3, #4]
 801dc0a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801dc0c:	697b      	ldr	r3, [r7, #20]
 801dc0e:	781b      	ldrb	r3, [r3, #0]
 801dc10:	091b      	lsrs	r3, r3, #4
 801dc12:	b2db      	uxtb	r3, r3
 801dc14:	2b04      	cmp	r3, #4
 801dc16:	d004      	beq.n	801dc22 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801dc18:	6878      	ldr	r0, [r7, #4]
 801dc1a:	f7f8 ff51 	bl	8016ac0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801dc1e:	2300      	movs	r3, #0
 801dc20:	e107      	b.n	801de32 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801dc22:	697b      	ldr	r3, [r7, #20]
 801dc24:	781b      	ldrb	r3, [r3, #0]
 801dc26:	f003 030f 	and.w	r3, r3, #15
 801dc2a:	b2db      	uxtb	r3, r3
 801dc2c:	009b      	lsls	r3, r3, #2
 801dc2e:	b2db      	uxtb	r3, r3
 801dc30:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801dc32:	697b      	ldr	r3, [r7, #20]
 801dc34:	885b      	ldrh	r3, [r3, #2]
 801dc36:	b29b      	uxth	r3, r3
 801dc38:	4618      	mov	r0, r3
 801dc3a:	f7f7 fb4f 	bl	80152dc <lwip_htons>
 801dc3e:	4603      	mov	r3, r0
 801dc40:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	891b      	ldrh	r3, [r3, #8]
 801dc46:	89ba      	ldrh	r2, [r7, #12]
 801dc48:	429a      	cmp	r2, r3
 801dc4a:	d204      	bcs.n	801dc56 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801dc4c:	89bb      	ldrh	r3, [r7, #12]
 801dc4e:	4619      	mov	r1, r3
 801dc50:	6878      	ldr	r0, [r7, #4]
 801dc52:	f7f8 fdaf 	bl	80167b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801dc56:	687b      	ldr	r3, [r7, #4]
 801dc58:	895b      	ldrh	r3, [r3, #10]
 801dc5a:	89fa      	ldrh	r2, [r7, #14]
 801dc5c:	429a      	cmp	r2, r3
 801dc5e:	d807      	bhi.n	801dc70 <ip4_input+0x74>
 801dc60:	687b      	ldr	r3, [r7, #4]
 801dc62:	891b      	ldrh	r3, [r3, #8]
 801dc64:	89ba      	ldrh	r2, [r7, #12]
 801dc66:	429a      	cmp	r2, r3
 801dc68:	d802      	bhi.n	801dc70 <ip4_input+0x74>
 801dc6a:	89fb      	ldrh	r3, [r7, #14]
 801dc6c:	2b13      	cmp	r3, #19
 801dc6e:	d804      	bhi.n	801dc7a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801dc70:	6878      	ldr	r0, [r7, #4]
 801dc72:	f7f8 ff25 	bl	8016ac0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801dc76:	2300      	movs	r3, #0
 801dc78:	e0db      	b.n	801de32 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801dc7a:	697b      	ldr	r3, [r7, #20]
 801dc7c:	691b      	ldr	r3, [r3, #16]
 801dc7e:	4a6f      	ldr	r2, [pc, #444]	; (801de3c <ip4_input+0x240>)
 801dc80:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801dc82:	697b      	ldr	r3, [r7, #20]
 801dc84:	68db      	ldr	r3, [r3, #12]
 801dc86:	4a6d      	ldr	r2, [pc, #436]	; (801de3c <ip4_input+0x240>)
 801dc88:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dc8a:	4b6c      	ldr	r3, [pc, #432]	; (801de3c <ip4_input+0x240>)
 801dc8c:	695b      	ldr	r3, [r3, #20]
 801dc8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801dc92:	2be0      	cmp	r3, #224	; 0xe0
 801dc94:	d112      	bne.n	801dcbc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801dc96:	683b      	ldr	r3, [r7, #0]
 801dc98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dc9c:	f003 0301 	and.w	r3, r3, #1
 801dca0:	b2db      	uxtb	r3, r3
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	d007      	beq.n	801dcb6 <ip4_input+0xba>
 801dca6:	683b      	ldr	r3, [r7, #0]
 801dca8:	3304      	adds	r3, #4
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	2b00      	cmp	r3, #0
 801dcae:	d002      	beq.n	801dcb6 <ip4_input+0xba>
      netif = inp;
 801dcb0:	683b      	ldr	r3, [r7, #0]
 801dcb2:	613b      	str	r3, [r7, #16]
 801dcb4:	e02a      	b.n	801dd0c <ip4_input+0x110>
    } else {
      netif = NULL;
 801dcb6:	2300      	movs	r3, #0
 801dcb8:	613b      	str	r3, [r7, #16]
 801dcba:	e027      	b.n	801dd0c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801dcbc:	6838      	ldr	r0, [r7, #0]
 801dcbe:	f7ff ff73 	bl	801dba8 <ip4_input_accept>
 801dcc2:	4603      	mov	r3, r0
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d002      	beq.n	801dcce <ip4_input+0xd2>
      netif = inp;
 801dcc8:	683b      	ldr	r3, [r7, #0]
 801dcca:	613b      	str	r3, [r7, #16]
 801dccc:	e01e      	b.n	801dd0c <ip4_input+0x110>
    } else {
      netif = NULL;
 801dcce:	2300      	movs	r3, #0
 801dcd0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801dcd2:	4b5a      	ldr	r3, [pc, #360]	; (801de3c <ip4_input+0x240>)
 801dcd4:	695b      	ldr	r3, [r3, #20]
 801dcd6:	b2db      	uxtb	r3, r3
 801dcd8:	2b7f      	cmp	r3, #127	; 0x7f
 801dcda:	d017      	beq.n	801dd0c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801dcdc:	4b58      	ldr	r3, [pc, #352]	; (801de40 <ip4_input+0x244>)
 801dcde:	681b      	ldr	r3, [r3, #0]
 801dce0:	613b      	str	r3, [r7, #16]
 801dce2:	e00e      	b.n	801dd02 <ip4_input+0x106>
          if (netif == inp) {
 801dce4:	693a      	ldr	r2, [r7, #16]
 801dce6:	683b      	ldr	r3, [r7, #0]
 801dce8:	429a      	cmp	r2, r3
 801dcea:	d006      	beq.n	801dcfa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801dcec:	6938      	ldr	r0, [r7, #16]
 801dcee:	f7ff ff5b 	bl	801dba8 <ip4_input_accept>
 801dcf2:	4603      	mov	r3, r0
 801dcf4:	2b00      	cmp	r3, #0
 801dcf6:	d108      	bne.n	801dd0a <ip4_input+0x10e>
 801dcf8:	e000      	b.n	801dcfc <ip4_input+0x100>
            continue;
 801dcfa:	bf00      	nop
        NETIF_FOREACH(netif) {
 801dcfc:	693b      	ldr	r3, [r7, #16]
 801dcfe:	681b      	ldr	r3, [r3, #0]
 801dd00:	613b      	str	r3, [r7, #16]
 801dd02:	693b      	ldr	r3, [r7, #16]
 801dd04:	2b00      	cmp	r3, #0
 801dd06:	d1ed      	bne.n	801dce4 <ip4_input+0xe8>
 801dd08:	e000      	b.n	801dd0c <ip4_input+0x110>
            break;
 801dd0a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dd0c:	4b4b      	ldr	r3, [pc, #300]	; (801de3c <ip4_input+0x240>)
 801dd0e:	691b      	ldr	r3, [r3, #16]
 801dd10:	6839      	ldr	r1, [r7, #0]
 801dd12:	4618      	mov	r0, r3
 801dd14:	f000 f96e 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 801dd18:	4603      	mov	r3, r0
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d105      	bne.n	801dd2a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801dd1e:	4b47      	ldr	r3, [pc, #284]	; (801de3c <ip4_input+0x240>)
 801dd20:	691b      	ldr	r3, [r3, #16]
 801dd22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801dd26:	2be0      	cmp	r3, #224	; 0xe0
 801dd28:	d104      	bne.n	801dd34 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801dd2a:	6878      	ldr	r0, [r7, #4]
 801dd2c:	f7f8 fec8 	bl	8016ac0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801dd30:	2300      	movs	r3, #0
 801dd32:	e07e      	b.n	801de32 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801dd34:	693b      	ldr	r3, [r7, #16]
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d104      	bne.n	801dd44 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801dd3a:	6878      	ldr	r0, [r7, #4]
 801dd3c:	f7f8 fec0 	bl	8016ac0 <pbuf_free>
    return ERR_OK;
 801dd40:	2300      	movs	r3, #0
 801dd42:	e076      	b.n	801de32 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801dd44:	697b      	ldr	r3, [r7, #20]
 801dd46:	88db      	ldrh	r3, [r3, #6]
 801dd48:	b29b      	uxth	r3, r3
 801dd4a:	461a      	mov	r2, r3
 801dd4c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801dd50:	4013      	ands	r3, r2
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d00b      	beq.n	801dd6e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801dd56:	6878      	ldr	r0, [r7, #4]
 801dd58:	f000 fc92 	bl	801e680 <ip4_reass>
 801dd5c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801dd5e:	687b      	ldr	r3, [r7, #4]
 801dd60:	2b00      	cmp	r3, #0
 801dd62:	d101      	bne.n	801dd68 <ip4_input+0x16c>
      return ERR_OK;
 801dd64:	2300      	movs	r3, #0
 801dd66:	e064      	b.n	801de32 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	685b      	ldr	r3, [r3, #4]
 801dd6c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801dd6e:	4a33      	ldr	r2, [pc, #204]	; (801de3c <ip4_input+0x240>)
 801dd70:	693b      	ldr	r3, [r7, #16]
 801dd72:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801dd74:	4a31      	ldr	r2, [pc, #196]	; (801de3c <ip4_input+0x240>)
 801dd76:	683b      	ldr	r3, [r7, #0]
 801dd78:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801dd7a:	4a30      	ldr	r2, [pc, #192]	; (801de3c <ip4_input+0x240>)
 801dd7c:	697b      	ldr	r3, [r7, #20]
 801dd7e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801dd80:	697b      	ldr	r3, [r7, #20]
 801dd82:	781b      	ldrb	r3, [r3, #0]
 801dd84:	f003 030f 	and.w	r3, r3, #15
 801dd88:	b2db      	uxtb	r3, r3
 801dd8a:	009b      	lsls	r3, r3, #2
 801dd8c:	b2db      	uxtb	r3, r3
 801dd8e:	b29a      	uxth	r2, r3
 801dd90:	4b2a      	ldr	r3, [pc, #168]	; (801de3c <ip4_input+0x240>)
 801dd92:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801dd94:	89fb      	ldrh	r3, [r7, #14]
 801dd96:	4619      	mov	r1, r3
 801dd98:	6878      	ldr	r0, [r7, #4]
 801dd9a:	f7f8 fe0b 	bl	80169b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801dd9e:	697b      	ldr	r3, [r7, #20]
 801dda0:	7a5b      	ldrb	r3, [r3, #9]
 801dda2:	2b11      	cmp	r3, #17
 801dda4:	d006      	beq.n	801ddb4 <ip4_input+0x1b8>
 801dda6:	2b11      	cmp	r3, #17
 801dda8:	dc13      	bgt.n	801ddd2 <ip4_input+0x1d6>
 801ddaa:	2b01      	cmp	r3, #1
 801ddac:	d00c      	beq.n	801ddc8 <ip4_input+0x1cc>
 801ddae:	2b06      	cmp	r3, #6
 801ddb0:	d005      	beq.n	801ddbe <ip4_input+0x1c2>
 801ddb2:	e00e      	b.n	801ddd2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801ddb4:	6839      	ldr	r1, [r7, #0]
 801ddb6:	6878      	ldr	r0, [r7, #4]
 801ddb8:	f7fe fc68 	bl	801c68c <udp_input>
        break;
 801ddbc:	e026      	b.n	801de0c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801ddbe:	6839      	ldr	r1, [r7, #0]
 801ddc0:	6878      	ldr	r0, [r7, #4]
 801ddc2:	f7fa fcb1 	bl	8018728 <tcp_input>
        break;
 801ddc6:	e021      	b.n	801de0c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801ddc8:	6839      	ldr	r1, [r7, #0]
 801ddca:	6878      	ldr	r0, [r7, #4]
 801ddcc:	f7ff fcee 	bl	801d7ac <icmp_input>
        break;
 801ddd0:	e01c      	b.n	801de0c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ddd2:	4b1a      	ldr	r3, [pc, #104]	; (801de3c <ip4_input+0x240>)
 801ddd4:	695b      	ldr	r3, [r3, #20]
 801ddd6:	6939      	ldr	r1, [r7, #16]
 801ddd8:	4618      	mov	r0, r3
 801ddda:	f000 f90b 	bl	801dff4 <ip4_addr_isbroadcast_u32>
 801ddde:	4603      	mov	r3, r0
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d10f      	bne.n	801de04 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801dde4:	4b15      	ldr	r3, [pc, #84]	; (801de3c <ip4_input+0x240>)
 801dde6:	695b      	ldr	r3, [r3, #20]
 801dde8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801ddec:	2be0      	cmp	r3, #224	; 0xe0
 801ddee:	d009      	beq.n	801de04 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801ddf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801ddf4:	4619      	mov	r1, r3
 801ddf6:	6878      	ldr	r0, [r7, #4]
 801ddf8:	f7f8 fe4f 	bl	8016a9a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ddfc:	2102      	movs	r1, #2
 801ddfe:	6878      	ldr	r0, [r7, #4]
 801de00:	f7ff fdd8 	bl	801d9b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801de04:	6878      	ldr	r0, [r7, #4]
 801de06:	f7f8 fe5b 	bl	8016ac0 <pbuf_free>
        break;
 801de0a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801de0c:	4b0b      	ldr	r3, [pc, #44]	; (801de3c <ip4_input+0x240>)
 801de0e:	2200      	movs	r2, #0
 801de10:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801de12:	4b0a      	ldr	r3, [pc, #40]	; (801de3c <ip4_input+0x240>)
 801de14:	2200      	movs	r2, #0
 801de16:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801de18:	4b08      	ldr	r3, [pc, #32]	; (801de3c <ip4_input+0x240>)
 801de1a:	2200      	movs	r2, #0
 801de1c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801de1e:	4b07      	ldr	r3, [pc, #28]	; (801de3c <ip4_input+0x240>)
 801de20:	2200      	movs	r2, #0
 801de22:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801de24:	4b05      	ldr	r3, [pc, #20]	; (801de3c <ip4_input+0x240>)
 801de26:	2200      	movs	r2, #0
 801de28:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801de2a:	4b04      	ldr	r3, [pc, #16]	; (801de3c <ip4_input+0x240>)
 801de2c:	2200      	movs	r2, #0
 801de2e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801de30:	2300      	movs	r3, #0
}
 801de32:	4618      	mov	r0, r3
 801de34:	3718      	adds	r7, #24
 801de36:	46bd      	mov	sp, r7
 801de38:	bd80      	pop	{r7, pc}
 801de3a:	bf00      	nop
 801de3c:	2000d92c 	.word	0x2000d92c
 801de40:	20011074 	.word	0x20011074

0801de44 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801de44:	b580      	push	{r7, lr}
 801de46:	b08a      	sub	sp, #40	; 0x28
 801de48:	af04      	add	r7, sp, #16
 801de4a:	60f8      	str	r0, [r7, #12]
 801de4c:	60b9      	str	r1, [r7, #8]
 801de4e:	607a      	str	r2, [r7, #4]
 801de50:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801de52:	68bb      	ldr	r3, [r7, #8]
 801de54:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d009      	beq.n	801de70 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801de5c:	68bb      	ldr	r3, [r7, #8]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d003      	beq.n	801de6a <ip4_output_if+0x26>
 801de62:	68bb      	ldr	r3, [r7, #8]
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	2b00      	cmp	r3, #0
 801de68:	d102      	bne.n	801de70 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801de6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de6c:	3304      	adds	r3, #4
 801de6e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801de70:	78fa      	ldrb	r2, [r7, #3]
 801de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de74:	9302      	str	r3, [sp, #8]
 801de76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801de7a:	9301      	str	r3, [sp, #4]
 801de7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801de80:	9300      	str	r3, [sp, #0]
 801de82:	4613      	mov	r3, r2
 801de84:	687a      	ldr	r2, [r7, #4]
 801de86:	6979      	ldr	r1, [r7, #20]
 801de88:	68f8      	ldr	r0, [r7, #12]
 801de8a:	f000 f805 	bl	801de98 <ip4_output_if_src>
 801de8e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801de90:	4618      	mov	r0, r3
 801de92:	3718      	adds	r7, #24
 801de94:	46bd      	mov	sp, r7
 801de96:	bd80      	pop	{r7, pc}

0801de98 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b088      	sub	sp, #32
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	60f8      	str	r0, [r7, #12]
 801dea0:	60b9      	str	r1, [r7, #8]
 801dea2:	607a      	str	r2, [r7, #4]
 801dea4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	7b9b      	ldrb	r3, [r3, #14]
 801deaa:	2b01      	cmp	r3, #1
 801deac:	d006      	beq.n	801debc <ip4_output_if_src+0x24>
 801deae:	4b4b      	ldr	r3, [pc, #300]	; (801dfdc <ip4_output_if_src+0x144>)
 801deb0:	f44f 7255 	mov.w	r2, #852	; 0x354
 801deb4:	494a      	ldr	r1, [pc, #296]	; (801dfe0 <ip4_output_if_src+0x148>)
 801deb6:	484b      	ldr	r0, [pc, #300]	; (801dfe4 <ip4_output_if_src+0x14c>)
 801deb8:	f001 ff06 	bl	801fcc8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	d060      	beq.n	801df84 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801dec2:	2314      	movs	r3, #20
 801dec4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801dec6:	2114      	movs	r1, #20
 801dec8:	68f8      	ldr	r0, [r7, #12]
 801deca:	f7f8 fd63 	bl	8016994 <pbuf_add_header>
 801dece:	4603      	mov	r3, r0
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d002      	beq.n	801deda <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ded4:	f06f 0301 	mvn.w	r3, #1
 801ded8:	e07c      	b.n	801dfd4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801deda:	68fb      	ldr	r3, [r7, #12]
 801dedc:	685b      	ldr	r3, [r3, #4]
 801dede:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	895b      	ldrh	r3, [r3, #10]
 801dee4:	2b13      	cmp	r3, #19
 801dee6:	d806      	bhi.n	801def6 <ip4_output_if_src+0x5e>
 801dee8:	4b3c      	ldr	r3, [pc, #240]	; (801dfdc <ip4_output_if_src+0x144>)
 801deea:	f44f 7262 	mov.w	r2, #904	; 0x388
 801deee:	493e      	ldr	r1, [pc, #248]	; (801dfe8 <ip4_output_if_src+0x150>)
 801def0:	483c      	ldr	r0, [pc, #240]	; (801dfe4 <ip4_output_if_src+0x14c>)
 801def2:	f001 fee9 	bl	801fcc8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801def6:	69fb      	ldr	r3, [r7, #28]
 801def8:	78fa      	ldrb	r2, [r7, #3]
 801defa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801defc:	69fb      	ldr	r3, [r7, #28]
 801defe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801df02:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	681a      	ldr	r2, [r3, #0]
 801df08:	69fb      	ldr	r3, [r7, #28]
 801df0a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801df0c:	8b7b      	ldrh	r3, [r7, #26]
 801df0e:	089b      	lsrs	r3, r3, #2
 801df10:	b29b      	uxth	r3, r3
 801df12:	b2db      	uxtb	r3, r3
 801df14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df18:	b2da      	uxtb	r2, r3
 801df1a:	69fb      	ldr	r3, [r7, #28]
 801df1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801df1e:	69fb      	ldr	r3, [r7, #28]
 801df20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801df24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	891b      	ldrh	r3, [r3, #8]
 801df2a:	4618      	mov	r0, r3
 801df2c:	f7f7 f9d6 	bl	80152dc <lwip_htons>
 801df30:	4603      	mov	r3, r0
 801df32:	461a      	mov	r2, r3
 801df34:	69fb      	ldr	r3, [r7, #28]
 801df36:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801df38:	69fb      	ldr	r3, [r7, #28]
 801df3a:	2200      	movs	r2, #0
 801df3c:	719a      	strb	r2, [r3, #6]
 801df3e:	2200      	movs	r2, #0
 801df40:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801df42:	4b2a      	ldr	r3, [pc, #168]	; (801dfec <ip4_output_if_src+0x154>)
 801df44:	881b      	ldrh	r3, [r3, #0]
 801df46:	4618      	mov	r0, r3
 801df48:	f7f7 f9c8 	bl	80152dc <lwip_htons>
 801df4c:	4603      	mov	r3, r0
 801df4e:	461a      	mov	r2, r3
 801df50:	69fb      	ldr	r3, [r7, #28]
 801df52:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801df54:	4b25      	ldr	r3, [pc, #148]	; (801dfec <ip4_output_if_src+0x154>)
 801df56:	881b      	ldrh	r3, [r3, #0]
 801df58:	3301      	adds	r3, #1
 801df5a:	b29a      	uxth	r2, r3
 801df5c:	4b23      	ldr	r3, [pc, #140]	; (801dfec <ip4_output_if_src+0x154>)
 801df5e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801df60:	68bb      	ldr	r3, [r7, #8]
 801df62:	2b00      	cmp	r3, #0
 801df64:	d104      	bne.n	801df70 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801df66:	4b22      	ldr	r3, [pc, #136]	; (801dff0 <ip4_output_if_src+0x158>)
 801df68:	681a      	ldr	r2, [r3, #0]
 801df6a:	69fb      	ldr	r3, [r7, #28]
 801df6c:	60da      	str	r2, [r3, #12]
 801df6e:	e003      	b.n	801df78 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801df70:	68bb      	ldr	r3, [r7, #8]
 801df72:	681a      	ldr	r2, [r3, #0]
 801df74:	69fb      	ldr	r3, [r7, #28]
 801df76:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801df78:	69fb      	ldr	r3, [r7, #28]
 801df7a:	2200      	movs	r2, #0
 801df7c:	729a      	strb	r2, [r3, #10]
 801df7e:	2200      	movs	r2, #0
 801df80:	72da      	strb	r2, [r3, #11]
 801df82:	e00f      	b.n	801dfa4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801df84:	68fb      	ldr	r3, [r7, #12]
 801df86:	895b      	ldrh	r3, [r3, #10]
 801df88:	2b13      	cmp	r3, #19
 801df8a:	d802      	bhi.n	801df92 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801df8c:	f06f 0301 	mvn.w	r3, #1
 801df90:	e020      	b.n	801dfd4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	685b      	ldr	r3, [r3, #4]
 801df96:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801df98:	69fb      	ldr	r3, [r7, #28]
 801df9a:	691b      	ldr	r3, [r3, #16]
 801df9c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801df9e:	f107 0314 	add.w	r3, r7, #20
 801dfa2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801dfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d00c      	beq.n	801dfc6 <ip4_output_if_src+0x12e>
 801dfac:	68fb      	ldr	r3, [r7, #12]
 801dfae:	891a      	ldrh	r2, [r3, #8]
 801dfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801dfb4:	429a      	cmp	r2, r3
 801dfb6:	d906      	bls.n	801dfc6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801dfb8:	687a      	ldr	r2, [r7, #4]
 801dfba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dfbc:	68f8      	ldr	r0, [r7, #12]
 801dfbe:	f000 fd53 	bl	801ea68 <ip4_frag>
 801dfc2:	4603      	mov	r3, r0
 801dfc4:	e006      	b.n	801dfd4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfc8:	695b      	ldr	r3, [r3, #20]
 801dfca:	687a      	ldr	r2, [r7, #4]
 801dfcc:	68f9      	ldr	r1, [r7, #12]
 801dfce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dfd0:	4798      	blx	r3
 801dfd2:	4603      	mov	r3, r0
}
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	3720      	adds	r7, #32
 801dfd8:	46bd      	mov	sp, r7
 801dfda:	bd80      	pop	{r7, pc}
 801dfdc:	080230dc 	.word	0x080230dc
 801dfe0:	08023110 	.word	0x08023110
 801dfe4:	0802311c 	.word	0x0802311c
 801dfe8:	08023144 	.word	0x08023144
 801dfec:	200111d2 	.word	0x200111d2
 801dff0:	08023578 	.word	0x08023578

0801dff4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801dff4:	b480      	push	{r7}
 801dff6:	b085      	sub	sp, #20
 801dff8:	af00      	add	r7, sp, #0
 801dffa:	6078      	str	r0, [r7, #4]
 801dffc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e008:	d002      	beq.n	801e010 <ip4_addr_isbroadcast_u32+0x1c>
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d101      	bne.n	801e014 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e010:	2301      	movs	r3, #1
 801e012:	e02a      	b.n	801e06a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e014:	683b      	ldr	r3, [r7, #0]
 801e016:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801e01a:	f003 0302 	and.w	r3, r3, #2
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d101      	bne.n	801e026 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e022:	2300      	movs	r3, #0
 801e024:	e021      	b.n	801e06a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e026:	683b      	ldr	r3, [r7, #0]
 801e028:	3304      	adds	r3, #4
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	687a      	ldr	r2, [r7, #4]
 801e02e:	429a      	cmp	r2, r3
 801e030:	d101      	bne.n	801e036 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e032:	2300      	movs	r3, #0
 801e034:	e019      	b.n	801e06a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e036:	68fa      	ldr	r2, [r7, #12]
 801e038:	683b      	ldr	r3, [r7, #0]
 801e03a:	3304      	adds	r3, #4
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	405a      	eors	r2, r3
 801e040:	683b      	ldr	r3, [r7, #0]
 801e042:	3308      	adds	r3, #8
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	4013      	ands	r3, r2
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d10d      	bne.n	801e068 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e04c:	683b      	ldr	r3, [r7, #0]
 801e04e:	3308      	adds	r3, #8
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	43da      	mvns	r2, r3
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e058:	683b      	ldr	r3, [r7, #0]
 801e05a:	3308      	adds	r3, #8
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e060:	429a      	cmp	r2, r3
 801e062:	d101      	bne.n	801e068 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e064:	2301      	movs	r3, #1
 801e066:	e000      	b.n	801e06a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e068:	2300      	movs	r3, #0
  }
}
 801e06a:	4618      	mov	r0, r3
 801e06c:	3714      	adds	r7, #20
 801e06e:	46bd      	mov	sp, r7
 801e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e074:	4770      	bx	lr
	...

0801e078 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801e078:	b580      	push	{r7, lr}
 801e07a:	b084      	sub	sp, #16
 801e07c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801e07e:	2300      	movs	r3, #0
 801e080:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801e082:	4b12      	ldr	r3, [pc, #72]	; (801e0cc <ip_reass_tmr+0x54>)
 801e084:	681b      	ldr	r3, [r3, #0]
 801e086:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801e088:	e018      	b.n	801e0bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	7fdb      	ldrb	r3, [r3, #31]
 801e08e:	2b00      	cmp	r3, #0
 801e090:	d00b      	beq.n	801e0aa <ip_reass_tmr+0x32>
      r->timer--;
 801e092:	68fb      	ldr	r3, [r7, #12]
 801e094:	7fdb      	ldrb	r3, [r3, #31]
 801e096:	3b01      	subs	r3, #1
 801e098:	b2da      	uxtb	r2, r3
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801e09e:	68fb      	ldr	r3, [r7, #12]
 801e0a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	60fb      	str	r3, [r7, #12]
 801e0a8:	e008      	b.n	801e0bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801e0aa:	68fb      	ldr	r3, [r7, #12]
 801e0ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801e0ae:	68fb      	ldr	r3, [r7, #12]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801e0b4:	68b9      	ldr	r1, [r7, #8]
 801e0b6:	6878      	ldr	r0, [r7, #4]
 801e0b8:	f000 f80a 	bl	801e0d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801e0bc:	68fb      	ldr	r3, [r7, #12]
 801e0be:	2b00      	cmp	r3, #0
 801e0c0:	d1e3      	bne.n	801e08a <ip_reass_tmr+0x12>
    }
  }
}
 801e0c2:	bf00      	nop
 801e0c4:	bf00      	nop
 801e0c6:	3710      	adds	r7, #16
 801e0c8:	46bd      	mov	sp, r7
 801e0ca:	bd80      	pop	{r7, pc}
 801e0cc:	200111d4 	.word	0x200111d4

0801e0d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e0d0:	b580      	push	{r7, lr}
 801e0d2:	b088      	sub	sp, #32
 801e0d4:	af00      	add	r7, sp, #0
 801e0d6:	6078      	str	r0, [r7, #4]
 801e0d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801e0da:	2300      	movs	r3, #0
 801e0dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e0de:	683a      	ldr	r2, [r7, #0]
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	429a      	cmp	r2, r3
 801e0e4:	d105      	bne.n	801e0f2 <ip_reass_free_complete_datagram+0x22>
 801e0e6:	4b45      	ldr	r3, [pc, #276]	; (801e1fc <ip_reass_free_complete_datagram+0x12c>)
 801e0e8:	22ab      	movs	r2, #171	; 0xab
 801e0ea:	4945      	ldr	r1, [pc, #276]	; (801e200 <ip_reass_free_complete_datagram+0x130>)
 801e0ec:	4845      	ldr	r0, [pc, #276]	; (801e204 <ip_reass_free_complete_datagram+0x134>)
 801e0ee:	f001 fdeb 	bl	801fcc8 <iprintf>
  if (prev != NULL) {
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d00a      	beq.n	801e10e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e0f8:	683b      	ldr	r3, [r7, #0]
 801e0fa:	681b      	ldr	r3, [r3, #0]
 801e0fc:	687a      	ldr	r2, [r7, #4]
 801e0fe:	429a      	cmp	r2, r3
 801e100:	d005      	beq.n	801e10e <ip_reass_free_complete_datagram+0x3e>
 801e102:	4b3e      	ldr	r3, [pc, #248]	; (801e1fc <ip_reass_free_complete_datagram+0x12c>)
 801e104:	22ad      	movs	r2, #173	; 0xad
 801e106:	4940      	ldr	r1, [pc, #256]	; (801e208 <ip_reass_free_complete_datagram+0x138>)
 801e108:	483e      	ldr	r0, [pc, #248]	; (801e204 <ip_reass_free_complete_datagram+0x134>)
 801e10a:	f001 fddd 	bl	801fcc8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	685b      	ldr	r3, [r3, #4]
 801e112:	685b      	ldr	r3, [r3, #4]
 801e114:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801e116:	697b      	ldr	r3, [r7, #20]
 801e118:	889b      	ldrh	r3, [r3, #4]
 801e11a:	b29b      	uxth	r3, r3
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d12a      	bne.n	801e176 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	685b      	ldr	r3, [r3, #4]
 801e124:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801e126:	697b      	ldr	r3, [r7, #20]
 801e128:	681a      	ldr	r2, [r3, #0]
 801e12a:	687b      	ldr	r3, [r7, #4]
 801e12c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e12e:	69bb      	ldr	r3, [r7, #24]
 801e130:	6858      	ldr	r0, [r3, #4]
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	3308      	adds	r3, #8
 801e136:	2214      	movs	r2, #20
 801e138:	4619      	mov	r1, r3
 801e13a:	f001 fccf 	bl	801fadc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e13e:	2101      	movs	r1, #1
 801e140:	69b8      	ldr	r0, [r7, #24]
 801e142:	f7ff fc47 	bl	801d9d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e146:	69b8      	ldr	r0, [r7, #24]
 801e148:	f7f8 fd48 	bl	8016bdc <pbuf_clen>
 801e14c:	4603      	mov	r3, r0
 801e14e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e150:	8bfa      	ldrh	r2, [r7, #30]
 801e152:	8a7b      	ldrh	r3, [r7, #18]
 801e154:	4413      	add	r3, r2
 801e156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e15a:	db05      	blt.n	801e168 <ip_reass_free_complete_datagram+0x98>
 801e15c:	4b27      	ldr	r3, [pc, #156]	; (801e1fc <ip_reass_free_complete_datagram+0x12c>)
 801e15e:	22bc      	movs	r2, #188	; 0xbc
 801e160:	492a      	ldr	r1, [pc, #168]	; (801e20c <ip_reass_free_complete_datagram+0x13c>)
 801e162:	4828      	ldr	r0, [pc, #160]	; (801e204 <ip_reass_free_complete_datagram+0x134>)
 801e164:	f001 fdb0 	bl	801fcc8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e168:	8bfa      	ldrh	r2, [r7, #30]
 801e16a:	8a7b      	ldrh	r3, [r7, #18]
 801e16c:	4413      	add	r3, r2
 801e16e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801e170:	69b8      	ldr	r0, [r7, #24]
 801e172:	f7f8 fca5 	bl	8016ac0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801e176:	687b      	ldr	r3, [r7, #4]
 801e178:	685b      	ldr	r3, [r3, #4]
 801e17a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801e17c:	e01f      	b.n	801e1be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801e17e:	69bb      	ldr	r3, [r7, #24]
 801e180:	685b      	ldr	r3, [r3, #4]
 801e182:	617b      	str	r3, [r7, #20]
    pcur = p;
 801e184:	69bb      	ldr	r3, [r7, #24]
 801e186:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801e188:	697b      	ldr	r3, [r7, #20]
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801e18e:	68f8      	ldr	r0, [r7, #12]
 801e190:	f7f8 fd24 	bl	8016bdc <pbuf_clen>
 801e194:	4603      	mov	r3, r0
 801e196:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e198:	8bfa      	ldrh	r2, [r7, #30]
 801e19a:	8a7b      	ldrh	r3, [r7, #18]
 801e19c:	4413      	add	r3, r2
 801e19e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e1a2:	db05      	blt.n	801e1b0 <ip_reass_free_complete_datagram+0xe0>
 801e1a4:	4b15      	ldr	r3, [pc, #84]	; (801e1fc <ip_reass_free_complete_datagram+0x12c>)
 801e1a6:	22cc      	movs	r2, #204	; 0xcc
 801e1a8:	4918      	ldr	r1, [pc, #96]	; (801e20c <ip_reass_free_complete_datagram+0x13c>)
 801e1aa:	4816      	ldr	r0, [pc, #88]	; (801e204 <ip_reass_free_complete_datagram+0x134>)
 801e1ac:	f001 fd8c 	bl	801fcc8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e1b0:	8bfa      	ldrh	r2, [r7, #30]
 801e1b2:	8a7b      	ldrh	r3, [r7, #18]
 801e1b4:	4413      	add	r3, r2
 801e1b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801e1b8:	68f8      	ldr	r0, [r7, #12]
 801e1ba:	f7f8 fc81 	bl	8016ac0 <pbuf_free>
  while (p != NULL) {
 801e1be:	69bb      	ldr	r3, [r7, #24]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d1dc      	bne.n	801e17e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801e1c4:	6839      	ldr	r1, [r7, #0]
 801e1c6:	6878      	ldr	r0, [r7, #4]
 801e1c8:	f000 f8c2 	bl	801e350 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e1cc:	4b10      	ldr	r3, [pc, #64]	; (801e210 <ip_reass_free_complete_datagram+0x140>)
 801e1ce:	881b      	ldrh	r3, [r3, #0]
 801e1d0:	8bfa      	ldrh	r2, [r7, #30]
 801e1d2:	429a      	cmp	r2, r3
 801e1d4:	d905      	bls.n	801e1e2 <ip_reass_free_complete_datagram+0x112>
 801e1d6:	4b09      	ldr	r3, [pc, #36]	; (801e1fc <ip_reass_free_complete_datagram+0x12c>)
 801e1d8:	22d2      	movs	r2, #210	; 0xd2
 801e1da:	490e      	ldr	r1, [pc, #56]	; (801e214 <ip_reass_free_complete_datagram+0x144>)
 801e1dc:	4809      	ldr	r0, [pc, #36]	; (801e204 <ip_reass_free_complete_datagram+0x134>)
 801e1de:	f001 fd73 	bl	801fcc8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e1e2:	4b0b      	ldr	r3, [pc, #44]	; (801e210 <ip_reass_free_complete_datagram+0x140>)
 801e1e4:	881a      	ldrh	r2, [r3, #0]
 801e1e6:	8bfb      	ldrh	r3, [r7, #30]
 801e1e8:	1ad3      	subs	r3, r2, r3
 801e1ea:	b29a      	uxth	r2, r3
 801e1ec:	4b08      	ldr	r3, [pc, #32]	; (801e210 <ip_reass_free_complete_datagram+0x140>)
 801e1ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801e1f0:	8bfb      	ldrh	r3, [r7, #30]
}
 801e1f2:	4618      	mov	r0, r3
 801e1f4:	3720      	adds	r7, #32
 801e1f6:	46bd      	mov	sp, r7
 801e1f8:	bd80      	pop	{r7, pc}
 801e1fa:	bf00      	nop
 801e1fc:	08023174 	.word	0x08023174
 801e200:	080231b0 	.word	0x080231b0
 801e204:	080231bc 	.word	0x080231bc
 801e208:	080231e4 	.word	0x080231e4
 801e20c:	080231f8 	.word	0x080231f8
 801e210:	200111d8 	.word	0x200111d8
 801e214:	08023218 	.word	0x08023218

0801e218 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801e218:	b580      	push	{r7, lr}
 801e21a:	b08a      	sub	sp, #40	; 0x28
 801e21c:	af00      	add	r7, sp, #0
 801e21e:	6078      	str	r0, [r7, #4]
 801e220:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801e222:	2300      	movs	r3, #0
 801e224:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801e226:	2300      	movs	r3, #0
 801e228:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801e22a:	2300      	movs	r3, #0
 801e22c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801e22e:	2300      	movs	r3, #0
 801e230:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801e232:	2300      	movs	r3, #0
 801e234:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801e236:	4b28      	ldr	r3, [pc, #160]	; (801e2d8 <ip_reass_remove_oldest_datagram+0xc0>)
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e23c:	e030      	b.n	801e2a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801e23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e240:	695a      	ldr	r2, [r3, #20]
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	68db      	ldr	r3, [r3, #12]
 801e246:	429a      	cmp	r2, r3
 801e248:	d10c      	bne.n	801e264 <ip_reass_remove_oldest_datagram+0x4c>
 801e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e24c:	699a      	ldr	r2, [r3, #24]
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	691b      	ldr	r3, [r3, #16]
 801e252:	429a      	cmp	r2, r3
 801e254:	d106      	bne.n	801e264 <ip_reass_remove_oldest_datagram+0x4c>
 801e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e258:	899a      	ldrh	r2, [r3, #12]
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	889b      	ldrh	r3, [r3, #4]
 801e25e:	b29b      	uxth	r3, r3
 801e260:	429a      	cmp	r2, r3
 801e262:	d014      	beq.n	801e28e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801e264:	693b      	ldr	r3, [r7, #16]
 801e266:	3301      	adds	r3, #1
 801e268:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801e26a:	6a3b      	ldr	r3, [r7, #32]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d104      	bne.n	801e27a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801e270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e272:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e274:	69fb      	ldr	r3, [r7, #28]
 801e276:	61bb      	str	r3, [r7, #24]
 801e278:	e009      	b.n	801e28e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e27c:	7fda      	ldrb	r2, [r3, #31]
 801e27e:	6a3b      	ldr	r3, [r7, #32]
 801e280:	7fdb      	ldrb	r3, [r3, #31]
 801e282:	429a      	cmp	r2, r3
 801e284:	d803      	bhi.n	801e28e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e288:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801e28a:	69fb      	ldr	r3, [r7, #28]
 801e28c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e290:	681b      	ldr	r3, [r3, #0]
 801e292:	2b00      	cmp	r3, #0
 801e294:	d001      	beq.n	801e29a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801e296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e298:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801e29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e29c:	681b      	ldr	r3, [r3, #0]
 801e29e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d1cb      	bne.n	801e23e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801e2a6:	6a3b      	ldr	r3, [r7, #32]
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d008      	beq.n	801e2be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801e2ac:	69b9      	ldr	r1, [r7, #24]
 801e2ae:	6a38      	ldr	r0, [r7, #32]
 801e2b0:	f7ff ff0e 	bl	801e0d0 <ip_reass_free_complete_datagram>
 801e2b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801e2b6:	697a      	ldr	r2, [r7, #20]
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	4413      	add	r3, r2
 801e2bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801e2be:	697a      	ldr	r2, [r7, #20]
 801e2c0:	683b      	ldr	r3, [r7, #0]
 801e2c2:	429a      	cmp	r2, r3
 801e2c4:	da02      	bge.n	801e2cc <ip_reass_remove_oldest_datagram+0xb4>
 801e2c6:	693b      	ldr	r3, [r7, #16]
 801e2c8:	2b01      	cmp	r3, #1
 801e2ca:	dcac      	bgt.n	801e226 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801e2cc:	697b      	ldr	r3, [r7, #20]
}
 801e2ce:	4618      	mov	r0, r3
 801e2d0:	3728      	adds	r7, #40	; 0x28
 801e2d2:	46bd      	mov	sp, r7
 801e2d4:	bd80      	pop	{r7, pc}
 801e2d6:	bf00      	nop
 801e2d8:	200111d4 	.word	0x200111d4

0801e2dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801e2dc:	b580      	push	{r7, lr}
 801e2de:	b084      	sub	sp, #16
 801e2e0:	af00      	add	r7, sp, #0
 801e2e2:	6078      	str	r0, [r7, #4]
 801e2e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e2e6:	2004      	movs	r0, #4
 801e2e8:	f7f7 fcd0 	bl	8015c8c <memp_malloc>
 801e2ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d110      	bne.n	801e316 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801e2f4:	6839      	ldr	r1, [r7, #0]
 801e2f6:	6878      	ldr	r0, [r7, #4]
 801e2f8:	f7ff ff8e 	bl	801e218 <ip_reass_remove_oldest_datagram>
 801e2fc:	4602      	mov	r2, r0
 801e2fe:	683b      	ldr	r3, [r7, #0]
 801e300:	4293      	cmp	r3, r2
 801e302:	dc03      	bgt.n	801e30c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801e304:	2004      	movs	r0, #4
 801e306:	f7f7 fcc1 	bl	8015c8c <memp_malloc>
 801e30a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801e30c:	68fb      	ldr	r3, [r7, #12]
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d101      	bne.n	801e316 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801e312:	2300      	movs	r3, #0
 801e314:	e016      	b.n	801e344 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801e316:	2220      	movs	r2, #32
 801e318:	2100      	movs	r1, #0
 801e31a:	68f8      	ldr	r0, [r7, #12]
 801e31c:	f001 fbec 	bl	801faf8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	220f      	movs	r2, #15
 801e324:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801e326:	4b09      	ldr	r3, [pc, #36]	; (801e34c <ip_reass_enqueue_new_datagram+0x70>)
 801e328:	681a      	ldr	r2, [r3, #0]
 801e32a:	68fb      	ldr	r3, [r7, #12]
 801e32c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801e32e:	4a07      	ldr	r2, [pc, #28]	; (801e34c <ip_reass_enqueue_new_datagram+0x70>)
 801e330:	68fb      	ldr	r3, [r7, #12]
 801e332:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801e334:	68fb      	ldr	r3, [r7, #12]
 801e336:	3308      	adds	r3, #8
 801e338:	2214      	movs	r2, #20
 801e33a:	6879      	ldr	r1, [r7, #4]
 801e33c:	4618      	mov	r0, r3
 801e33e:	f001 fbcd 	bl	801fadc <memcpy>
  return ipr;
 801e342:	68fb      	ldr	r3, [r7, #12]
}
 801e344:	4618      	mov	r0, r3
 801e346:	3710      	adds	r7, #16
 801e348:	46bd      	mov	sp, r7
 801e34a:	bd80      	pop	{r7, pc}
 801e34c:	200111d4 	.word	0x200111d4

0801e350 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e350:	b580      	push	{r7, lr}
 801e352:	b082      	sub	sp, #8
 801e354:	af00      	add	r7, sp, #0
 801e356:	6078      	str	r0, [r7, #4]
 801e358:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801e35a:	4b10      	ldr	r3, [pc, #64]	; (801e39c <ip_reass_dequeue_datagram+0x4c>)
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	687a      	ldr	r2, [r7, #4]
 801e360:	429a      	cmp	r2, r3
 801e362:	d104      	bne.n	801e36e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	4a0c      	ldr	r2, [pc, #48]	; (801e39c <ip_reass_dequeue_datagram+0x4c>)
 801e36a:	6013      	str	r3, [r2, #0]
 801e36c:	e00d      	b.n	801e38a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801e36e:	683b      	ldr	r3, [r7, #0]
 801e370:	2b00      	cmp	r3, #0
 801e372:	d106      	bne.n	801e382 <ip_reass_dequeue_datagram+0x32>
 801e374:	4b0a      	ldr	r3, [pc, #40]	; (801e3a0 <ip_reass_dequeue_datagram+0x50>)
 801e376:	f240 1245 	movw	r2, #325	; 0x145
 801e37a:	490a      	ldr	r1, [pc, #40]	; (801e3a4 <ip_reass_dequeue_datagram+0x54>)
 801e37c:	480a      	ldr	r0, [pc, #40]	; (801e3a8 <ip_reass_dequeue_datagram+0x58>)
 801e37e:	f001 fca3 	bl	801fcc8 <iprintf>
    prev->next = ipr->next;
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	681a      	ldr	r2, [r3, #0]
 801e386:	683b      	ldr	r3, [r7, #0]
 801e388:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801e38a:	6879      	ldr	r1, [r7, #4]
 801e38c:	2004      	movs	r0, #4
 801e38e:	f7f7 fcf3 	bl	8015d78 <memp_free>
}
 801e392:	bf00      	nop
 801e394:	3708      	adds	r7, #8
 801e396:	46bd      	mov	sp, r7
 801e398:	bd80      	pop	{r7, pc}
 801e39a:	bf00      	nop
 801e39c:	200111d4 	.word	0x200111d4
 801e3a0:	08023174 	.word	0x08023174
 801e3a4:	0802323c 	.word	0x0802323c
 801e3a8:	080231bc 	.word	0x080231bc

0801e3ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801e3ac:	b580      	push	{r7, lr}
 801e3ae:	b08c      	sub	sp, #48	; 0x30
 801e3b0:	af00      	add	r7, sp, #0
 801e3b2:	60f8      	str	r0, [r7, #12]
 801e3b4:	60b9      	str	r1, [r7, #8]
 801e3b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801e3b8:	2300      	movs	r3, #0
 801e3ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801e3bc:	2301      	movs	r3, #1
 801e3be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801e3c0:	68bb      	ldr	r3, [r7, #8]
 801e3c2:	685b      	ldr	r3, [r3, #4]
 801e3c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e3c6:	69fb      	ldr	r3, [r7, #28]
 801e3c8:	885b      	ldrh	r3, [r3, #2]
 801e3ca:	b29b      	uxth	r3, r3
 801e3cc:	4618      	mov	r0, r3
 801e3ce:	f7f6 ff85 	bl	80152dc <lwip_htons>
 801e3d2:	4603      	mov	r3, r0
 801e3d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801e3d6:	69fb      	ldr	r3, [r7, #28]
 801e3d8:	781b      	ldrb	r3, [r3, #0]
 801e3da:	f003 030f 	and.w	r3, r3, #15
 801e3de:	b2db      	uxtb	r3, r3
 801e3e0:	009b      	lsls	r3, r3, #2
 801e3e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801e3e4:	7e7b      	ldrb	r3, [r7, #25]
 801e3e6:	b29b      	uxth	r3, r3
 801e3e8:	8b7a      	ldrh	r2, [r7, #26]
 801e3ea:	429a      	cmp	r2, r3
 801e3ec:	d202      	bcs.n	801e3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e3ee:	f04f 33ff 	mov.w	r3, #4294967295
 801e3f2:	e135      	b.n	801e660 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801e3f4:	7e7b      	ldrb	r3, [r7, #25]
 801e3f6:	b29b      	uxth	r3, r3
 801e3f8:	8b7a      	ldrh	r2, [r7, #26]
 801e3fa:	1ad3      	subs	r3, r2, r3
 801e3fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801e3fe:	69fb      	ldr	r3, [r7, #28]
 801e400:	88db      	ldrh	r3, [r3, #6]
 801e402:	b29b      	uxth	r3, r3
 801e404:	4618      	mov	r0, r3
 801e406:	f7f6 ff69 	bl	80152dc <lwip_htons>
 801e40a:	4603      	mov	r3, r0
 801e40c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e410:	b29b      	uxth	r3, r3
 801e412:	00db      	lsls	r3, r3, #3
 801e414:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801e416:	68bb      	ldr	r3, [r7, #8]
 801e418:	685b      	ldr	r3, [r3, #4]
 801e41a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e41e:	2200      	movs	r2, #0
 801e420:	701a      	strb	r2, [r3, #0]
 801e422:	2200      	movs	r2, #0
 801e424:	705a      	strb	r2, [r3, #1]
 801e426:	2200      	movs	r2, #0
 801e428:	709a      	strb	r2, [r3, #2]
 801e42a:	2200      	movs	r2, #0
 801e42c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801e42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e430:	8afa      	ldrh	r2, [r7, #22]
 801e432:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801e434:	8afa      	ldrh	r2, [r7, #22]
 801e436:	8b7b      	ldrh	r3, [r7, #26]
 801e438:	4413      	add	r3, r2
 801e43a:	b29a      	uxth	r2, r3
 801e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e43e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801e440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e442:	88db      	ldrh	r3, [r3, #6]
 801e444:	b29b      	uxth	r3, r3
 801e446:	8afa      	ldrh	r2, [r7, #22]
 801e448:	429a      	cmp	r2, r3
 801e44a:	d902      	bls.n	801e452 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e44c:	f04f 33ff 	mov.w	r3, #4294967295
 801e450:	e106      	b.n	801e660 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	685b      	ldr	r3, [r3, #4]
 801e456:	627b      	str	r3, [r7, #36]	; 0x24
 801e458:	e068      	b.n	801e52c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e45c:	685b      	ldr	r3, [r3, #4]
 801e45e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801e460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e462:	889b      	ldrh	r3, [r3, #4]
 801e464:	b29a      	uxth	r2, r3
 801e466:	693b      	ldr	r3, [r7, #16]
 801e468:	889b      	ldrh	r3, [r3, #4]
 801e46a:	b29b      	uxth	r3, r3
 801e46c:	429a      	cmp	r2, r3
 801e46e:	d235      	bcs.n	801e4dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801e470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e474:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e478:	2b00      	cmp	r3, #0
 801e47a:	d020      	beq.n	801e4be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e47e:	889b      	ldrh	r3, [r3, #4]
 801e480:	b29a      	uxth	r2, r3
 801e482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e484:	88db      	ldrh	r3, [r3, #6]
 801e486:	b29b      	uxth	r3, r3
 801e488:	429a      	cmp	r2, r3
 801e48a:	d307      	bcc.n	801e49c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801e48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e48e:	88db      	ldrh	r3, [r3, #6]
 801e490:	b29a      	uxth	r2, r3
 801e492:	693b      	ldr	r3, [r7, #16]
 801e494:	889b      	ldrh	r3, [r3, #4]
 801e496:	b29b      	uxth	r3, r3
 801e498:	429a      	cmp	r2, r3
 801e49a:	d902      	bls.n	801e4a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e49c:	f04f 33ff 	mov.w	r3, #4294967295
 801e4a0:	e0de      	b.n	801e660 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4a4:	68ba      	ldr	r2, [r7, #8]
 801e4a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4aa:	88db      	ldrh	r3, [r3, #6]
 801e4ac:	b29a      	uxth	r2, r3
 801e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4b0:	889b      	ldrh	r3, [r3, #4]
 801e4b2:	b29b      	uxth	r3, r3
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	d03d      	beq.n	801e534 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e4b8:	2300      	movs	r3, #0
 801e4ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801e4bc:	e03a      	b.n	801e534 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4c0:	88db      	ldrh	r3, [r3, #6]
 801e4c2:	b29a      	uxth	r2, r3
 801e4c4:	693b      	ldr	r3, [r7, #16]
 801e4c6:	889b      	ldrh	r3, [r3, #4]
 801e4c8:	b29b      	uxth	r3, r3
 801e4ca:	429a      	cmp	r2, r3
 801e4cc:	d902      	bls.n	801e4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e4ce:	f04f 33ff 	mov.w	r3, #4294967295
 801e4d2:	e0c5      	b.n	801e660 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	68ba      	ldr	r2, [r7, #8]
 801e4d8:	605a      	str	r2, [r3, #4]
      break;
 801e4da:	e02b      	b.n	801e534 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4de:	889b      	ldrh	r3, [r3, #4]
 801e4e0:	b29a      	uxth	r2, r3
 801e4e2:	693b      	ldr	r3, [r7, #16]
 801e4e4:	889b      	ldrh	r3, [r3, #4]
 801e4e6:	b29b      	uxth	r3, r3
 801e4e8:	429a      	cmp	r2, r3
 801e4ea:	d102      	bne.n	801e4f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e4ec:	f04f 33ff 	mov.w	r3, #4294967295
 801e4f0:	e0b6      	b.n	801e660 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4f4:	889b      	ldrh	r3, [r3, #4]
 801e4f6:	b29a      	uxth	r2, r3
 801e4f8:	693b      	ldr	r3, [r7, #16]
 801e4fa:	88db      	ldrh	r3, [r3, #6]
 801e4fc:	b29b      	uxth	r3, r3
 801e4fe:	429a      	cmp	r2, r3
 801e500:	d202      	bcs.n	801e508 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801e502:	f04f 33ff 	mov.w	r3, #4294967295
 801e506:	e0ab      	b.n	801e660 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801e508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d009      	beq.n	801e522 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801e50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e510:	88db      	ldrh	r3, [r3, #6]
 801e512:	b29a      	uxth	r2, r3
 801e514:	693b      	ldr	r3, [r7, #16]
 801e516:	889b      	ldrh	r3, [r3, #4]
 801e518:	b29b      	uxth	r3, r3
 801e51a:	429a      	cmp	r2, r3
 801e51c:	d001      	beq.n	801e522 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801e51e:	2300      	movs	r3, #0
 801e520:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801e522:	693b      	ldr	r3, [r7, #16]
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801e528:	693b      	ldr	r3, [r7, #16]
 801e52a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e52e:	2b00      	cmp	r3, #0
 801e530:	d193      	bne.n	801e45a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801e532:	e000      	b.n	801e536 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801e534:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e538:	2b00      	cmp	r3, #0
 801e53a:	d12d      	bne.n	801e598 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801e53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d01c      	beq.n	801e57c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e544:	88db      	ldrh	r3, [r3, #6]
 801e546:	b29a      	uxth	r2, r3
 801e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e54a:	889b      	ldrh	r3, [r3, #4]
 801e54c:	b29b      	uxth	r3, r3
 801e54e:	429a      	cmp	r2, r3
 801e550:	d906      	bls.n	801e560 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801e552:	4b45      	ldr	r3, [pc, #276]	; (801e668 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e554:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801e558:	4944      	ldr	r1, [pc, #272]	; (801e66c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801e55a:	4845      	ldr	r0, [pc, #276]	; (801e670 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e55c:	f001 fbb4 	bl	801fcc8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801e560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e562:	68ba      	ldr	r2, [r7, #8]
 801e564:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801e566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e568:	88db      	ldrh	r3, [r3, #6]
 801e56a:	b29a      	uxth	r2, r3
 801e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e56e:	889b      	ldrh	r3, [r3, #4]
 801e570:	b29b      	uxth	r3, r3
 801e572:	429a      	cmp	r2, r3
 801e574:	d010      	beq.n	801e598 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801e576:	2300      	movs	r3, #0
 801e578:	623b      	str	r3, [r7, #32]
 801e57a:	e00d      	b.n	801e598 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801e57c:	68fb      	ldr	r3, [r7, #12]
 801e57e:	685b      	ldr	r3, [r3, #4]
 801e580:	2b00      	cmp	r3, #0
 801e582:	d006      	beq.n	801e592 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801e584:	4b38      	ldr	r3, [pc, #224]	; (801e668 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e586:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801e58a:	493a      	ldr	r1, [pc, #232]	; (801e674 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801e58c:	4838      	ldr	r0, [pc, #224]	; (801e670 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e58e:	f001 fb9b 	bl	801fcc8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801e592:	68fb      	ldr	r3, [r7, #12]
 801e594:	68ba      	ldr	r2, [r7, #8]
 801e596:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d105      	bne.n	801e5aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801e59e:	68fb      	ldr	r3, [r7, #12]
 801e5a0:	7f9b      	ldrb	r3, [r3, #30]
 801e5a2:	f003 0301 	and.w	r3, r3, #1
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d059      	beq.n	801e65e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801e5aa:	6a3b      	ldr	r3, [r7, #32]
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d04f      	beq.n	801e650 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	685b      	ldr	r3, [r3, #4]
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	d006      	beq.n	801e5c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	685b      	ldr	r3, [r3, #4]
 801e5bc:	685b      	ldr	r3, [r3, #4]
 801e5be:	889b      	ldrh	r3, [r3, #4]
 801e5c0:	b29b      	uxth	r3, r3
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d002      	beq.n	801e5cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801e5c6:	2300      	movs	r3, #0
 801e5c8:	623b      	str	r3, [r7, #32]
 801e5ca:	e041      	b.n	801e650 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5ce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e5d6:	e012      	b.n	801e5fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5da:	685b      	ldr	r3, [r3, #4]
 801e5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5e0:	88db      	ldrh	r3, [r3, #6]
 801e5e2:	b29a      	uxth	r2, r3
 801e5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5e6:	889b      	ldrh	r3, [r3, #4]
 801e5e8:	b29b      	uxth	r3, r3
 801e5ea:	429a      	cmp	r2, r3
 801e5ec:	d002      	beq.n	801e5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e5ee:	2300      	movs	r3, #0
 801e5f0:	623b      	str	r3, [r7, #32]
            break;
 801e5f2:	e007      	b.n	801e604 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5f6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801e5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e600:	2b00      	cmp	r3, #0
 801e602:	d1e9      	bne.n	801e5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e604:	6a3b      	ldr	r3, [r7, #32]
 801e606:	2b00      	cmp	r3, #0
 801e608:	d022      	beq.n	801e650 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e60a:	68fb      	ldr	r3, [r7, #12]
 801e60c:	685b      	ldr	r3, [r3, #4]
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d106      	bne.n	801e620 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e612:	4b15      	ldr	r3, [pc, #84]	; (801e668 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e614:	f240 12df 	movw	r2, #479	; 0x1df
 801e618:	4917      	ldr	r1, [pc, #92]	; (801e678 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e61a:	4815      	ldr	r0, [pc, #84]	; (801e670 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e61c:	f001 fb54 	bl	801fcc8 <iprintf>
          LWIP_ASSERT("sanity check",
 801e620:	68fb      	ldr	r3, [r7, #12]
 801e622:	685b      	ldr	r3, [r3, #4]
 801e624:	685b      	ldr	r3, [r3, #4]
 801e626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e628:	429a      	cmp	r2, r3
 801e62a:	d106      	bne.n	801e63a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e62c:	4b0e      	ldr	r3, [pc, #56]	; (801e668 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e62e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e632:	4911      	ldr	r1, [pc, #68]	; (801e678 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e634:	480e      	ldr	r0, [pc, #56]	; (801e670 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e636:	f001 fb47 	bl	801fcc8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e63c:	681b      	ldr	r3, [r3, #0]
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d006      	beq.n	801e650 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e642:	4b09      	ldr	r3, [pc, #36]	; (801e668 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e644:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801e648:	490c      	ldr	r1, [pc, #48]	; (801e67c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e64a:	4809      	ldr	r0, [pc, #36]	; (801e670 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e64c:	f001 fb3c 	bl	801fcc8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e650:	6a3b      	ldr	r3, [r7, #32]
 801e652:	2b00      	cmp	r3, #0
 801e654:	bf14      	ite	ne
 801e656:	2301      	movne	r3, #1
 801e658:	2300      	moveq	r3, #0
 801e65a:	b2db      	uxtb	r3, r3
 801e65c:	e000      	b.n	801e660 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e65e:	2300      	movs	r3, #0
}
 801e660:	4618      	mov	r0, r3
 801e662:	3730      	adds	r7, #48	; 0x30
 801e664:	46bd      	mov	sp, r7
 801e666:	bd80      	pop	{r7, pc}
 801e668:	08023174 	.word	0x08023174
 801e66c:	08023258 	.word	0x08023258
 801e670:	080231bc 	.word	0x080231bc
 801e674:	08023278 	.word	0x08023278
 801e678:	080232b0 	.word	0x080232b0
 801e67c:	080232c0 	.word	0x080232c0

0801e680 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e680:	b580      	push	{r7, lr}
 801e682:	b08e      	sub	sp, #56	; 0x38
 801e684:	af00      	add	r7, sp, #0
 801e686:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	685b      	ldr	r3, [r3, #4]
 801e68c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e690:	781b      	ldrb	r3, [r3, #0]
 801e692:	f003 030f 	and.w	r3, r3, #15
 801e696:	b2db      	uxtb	r3, r3
 801e698:	009b      	lsls	r3, r3, #2
 801e69a:	b2db      	uxtb	r3, r3
 801e69c:	2b14      	cmp	r3, #20
 801e69e:	f040 8171 	bne.w	801e984 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6a4:	88db      	ldrh	r3, [r3, #6]
 801e6a6:	b29b      	uxth	r3, r3
 801e6a8:	4618      	mov	r0, r3
 801e6aa:	f7f6 fe17 	bl	80152dc <lwip_htons>
 801e6ae:	4603      	mov	r3, r0
 801e6b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e6b4:	b29b      	uxth	r3, r3
 801e6b6:	00db      	lsls	r3, r3, #3
 801e6b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6bc:	885b      	ldrh	r3, [r3, #2]
 801e6be:	b29b      	uxth	r3, r3
 801e6c0:	4618      	mov	r0, r3
 801e6c2:	f7f6 fe0b 	bl	80152dc <lwip_htons>
 801e6c6:	4603      	mov	r3, r0
 801e6c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e6cc:	781b      	ldrb	r3, [r3, #0]
 801e6ce:	f003 030f 	and.w	r3, r3, #15
 801e6d2:	b2db      	uxtb	r3, r3
 801e6d4:	009b      	lsls	r3, r3, #2
 801e6d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801e6da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e6de:	b29b      	uxth	r3, r3
 801e6e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e6e2:	429a      	cmp	r2, r3
 801e6e4:	f0c0 8150 	bcc.w	801e988 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e6e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801e6ec:	b29b      	uxth	r3, r3
 801e6ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801e6f0:	1ad3      	subs	r3, r2, r3
 801e6f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e6f4:	6878      	ldr	r0, [r7, #4]
 801e6f6:	f7f8 fa71 	bl	8016bdc <pbuf_clen>
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e6fe:	4b8c      	ldr	r3, [pc, #560]	; (801e930 <ip4_reass+0x2b0>)
 801e700:	881b      	ldrh	r3, [r3, #0]
 801e702:	461a      	mov	r2, r3
 801e704:	8c3b      	ldrh	r3, [r7, #32]
 801e706:	4413      	add	r3, r2
 801e708:	2b0a      	cmp	r3, #10
 801e70a:	dd10      	ble.n	801e72e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e70c:	8c3b      	ldrh	r3, [r7, #32]
 801e70e:	4619      	mov	r1, r3
 801e710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e712:	f7ff fd81 	bl	801e218 <ip_reass_remove_oldest_datagram>
 801e716:	4603      	mov	r3, r0
 801e718:	2b00      	cmp	r3, #0
 801e71a:	f000 8137 	beq.w	801e98c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e71e:	4b84      	ldr	r3, [pc, #528]	; (801e930 <ip4_reass+0x2b0>)
 801e720:	881b      	ldrh	r3, [r3, #0]
 801e722:	461a      	mov	r2, r3
 801e724:	8c3b      	ldrh	r3, [r7, #32]
 801e726:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e728:	2b0a      	cmp	r3, #10
 801e72a:	f300 812f 	bgt.w	801e98c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e72e:	4b81      	ldr	r3, [pc, #516]	; (801e934 <ip4_reass+0x2b4>)
 801e730:	681b      	ldr	r3, [r3, #0]
 801e732:	633b      	str	r3, [r7, #48]	; 0x30
 801e734:	e015      	b.n	801e762 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e738:	695a      	ldr	r2, [r3, #20]
 801e73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e73c:	68db      	ldr	r3, [r3, #12]
 801e73e:	429a      	cmp	r2, r3
 801e740:	d10c      	bne.n	801e75c <ip4_reass+0xdc>
 801e742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e744:	699a      	ldr	r2, [r3, #24]
 801e746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e748:	691b      	ldr	r3, [r3, #16]
 801e74a:	429a      	cmp	r2, r3
 801e74c:	d106      	bne.n	801e75c <ip4_reass+0xdc>
 801e74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e750:	899a      	ldrh	r2, [r3, #12]
 801e752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e754:	889b      	ldrh	r3, [r3, #4]
 801e756:	b29b      	uxth	r3, r3
 801e758:	429a      	cmp	r2, r3
 801e75a:	d006      	beq.n	801e76a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	633b      	str	r3, [r7, #48]	; 0x30
 801e762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e764:	2b00      	cmp	r3, #0
 801e766:	d1e6      	bne.n	801e736 <ip4_reass+0xb6>
 801e768:	e000      	b.n	801e76c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801e76a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801e76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d109      	bne.n	801e786 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e772:	8c3b      	ldrh	r3, [r7, #32]
 801e774:	4619      	mov	r1, r3
 801e776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e778:	f7ff fdb0 	bl	801e2dc <ip_reass_enqueue_new_datagram>
 801e77c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e780:	2b00      	cmp	r3, #0
 801e782:	d11c      	bne.n	801e7be <ip4_reass+0x13e>
      goto nullreturn;
 801e784:	e105      	b.n	801e992 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e788:	88db      	ldrh	r3, [r3, #6]
 801e78a:	b29b      	uxth	r3, r3
 801e78c:	4618      	mov	r0, r3
 801e78e:	f7f6 fda5 	bl	80152dc <lwip_htons>
 801e792:	4603      	mov	r3, r0
 801e794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d110      	bne.n	801e7be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e79e:	89db      	ldrh	r3, [r3, #14]
 801e7a0:	4618      	mov	r0, r3
 801e7a2:	f7f6 fd9b 	bl	80152dc <lwip_htons>
 801e7a6:	4603      	mov	r3, r0
 801e7a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e7ac:	2b00      	cmp	r3, #0
 801e7ae:	d006      	beq.n	801e7be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e7b2:	3308      	adds	r3, #8
 801e7b4:	2214      	movs	r2, #20
 801e7b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801e7b8:	4618      	mov	r0, r3
 801e7ba:	f001 f98f 	bl	801fadc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7c0:	88db      	ldrh	r3, [r3, #6]
 801e7c2:	b29b      	uxth	r3, r3
 801e7c4:	f003 0320 	and.w	r3, r3, #32
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	bf0c      	ite	eq
 801e7cc:	2301      	moveq	r3, #1
 801e7ce:	2300      	movne	r3, #0
 801e7d0:	b2db      	uxtb	r3, r3
 801e7d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e7d4:	69fb      	ldr	r3, [r7, #28]
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	d00e      	beq.n	801e7f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801e7da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e7dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e7de:	4413      	add	r3, r2
 801e7e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e7e2:	8b7a      	ldrh	r2, [r7, #26]
 801e7e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e7e6:	429a      	cmp	r2, r3
 801e7e8:	f0c0 80a0 	bcc.w	801e92c <ip4_reass+0x2ac>
 801e7ec:	8b7b      	ldrh	r3, [r7, #26]
 801e7ee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801e7f2:	4293      	cmp	r3, r2
 801e7f4:	f200 809a 	bhi.w	801e92c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e7f8:	69fa      	ldr	r2, [r7, #28]
 801e7fa:	6879      	ldr	r1, [r7, #4]
 801e7fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e7fe:	f7ff fdd5 	bl	801e3ac <ip_reass_chain_frag_into_datagram_and_validate>
 801e802:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e804:	697b      	ldr	r3, [r7, #20]
 801e806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e80a:	f000 809b 	beq.w	801e944 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e80e:	4b48      	ldr	r3, [pc, #288]	; (801e930 <ip4_reass+0x2b0>)
 801e810:	881a      	ldrh	r2, [r3, #0]
 801e812:	8c3b      	ldrh	r3, [r7, #32]
 801e814:	4413      	add	r3, r2
 801e816:	b29a      	uxth	r2, r3
 801e818:	4b45      	ldr	r3, [pc, #276]	; (801e930 <ip4_reass+0x2b0>)
 801e81a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e81c:	69fb      	ldr	r3, [r7, #28]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d00d      	beq.n	801e83e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801e822:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801e824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e826:	4413      	add	r3, r2
 801e828:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e82c:	8a7a      	ldrh	r2, [r7, #18]
 801e82e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e832:	7f9b      	ldrb	r3, [r3, #30]
 801e834:	f043 0301 	orr.w	r3, r3, #1
 801e838:	b2da      	uxtb	r2, r3
 801e83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e83c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e83e:	697b      	ldr	r3, [r7, #20]
 801e840:	2b01      	cmp	r3, #1
 801e842:	d171      	bne.n	801e928 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e846:	8b9b      	ldrh	r3, [r3, #28]
 801e848:	3314      	adds	r3, #20
 801e84a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e84e:	685b      	ldr	r3, [r3, #4]
 801e850:	685b      	ldr	r3, [r3, #4]
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e858:	685b      	ldr	r3, [r3, #4]
 801e85a:	685b      	ldr	r3, [r3, #4]
 801e85c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e860:	3308      	adds	r3, #8
 801e862:	2214      	movs	r2, #20
 801e864:	4619      	mov	r1, r3
 801e866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801e868:	f001 f938 	bl	801fadc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e86c:	8a3b      	ldrh	r3, [r7, #16]
 801e86e:	4618      	mov	r0, r3
 801e870:	f7f6 fd34 	bl	80152dc <lwip_htons>
 801e874:	4603      	mov	r3, r0
 801e876:	461a      	mov	r2, r3
 801e878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e87a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e87e:	2200      	movs	r2, #0
 801e880:	719a      	strb	r2, [r3, #6]
 801e882:	2200      	movs	r2, #0
 801e884:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e888:	2200      	movs	r2, #0
 801e88a:	729a      	strb	r2, [r3, #10]
 801e88c:	2200      	movs	r2, #0
 801e88e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e892:	685b      	ldr	r3, [r3, #4]
 801e894:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e896:	e00d      	b.n	801e8b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801e898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e89a:	685b      	ldr	r3, [r3, #4]
 801e89c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e89e:	2114      	movs	r1, #20
 801e8a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801e8a2:	f7f8 f887 	bl	80169b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801e8a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801e8a8:	6878      	ldr	r0, [r7, #4]
 801e8aa:	f7f8 f9d7 	bl	8016c5c <pbuf_cat>
      r = iprh->next_pbuf;
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	681b      	ldr	r3, [r3, #0]
 801e8b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801e8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	d1ee      	bne.n	801e898 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e8ba:	4b1e      	ldr	r3, [pc, #120]	; (801e934 <ip4_reass+0x2b4>)
 801e8bc:	681b      	ldr	r3, [r3, #0]
 801e8be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e8c0:	429a      	cmp	r2, r3
 801e8c2:	d102      	bne.n	801e8ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 801e8c4:	2300      	movs	r3, #0
 801e8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e8c8:	e010      	b.n	801e8ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e8ca:	4b1a      	ldr	r3, [pc, #104]	; (801e934 <ip4_reass+0x2b4>)
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e8d0:	e007      	b.n	801e8e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801e8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e8d8:	429a      	cmp	r2, r3
 801e8da:	d006      	beq.n	801e8ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e8e4:	2b00      	cmp	r3, #0
 801e8e6:	d1f4      	bne.n	801e8d2 <ip4_reass+0x252>
 801e8e8:	e000      	b.n	801e8ec <ip4_reass+0x26c>
          break;
 801e8ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e8ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e8ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e8f0:	f7ff fd2e 	bl	801e350 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e8f4:	6878      	ldr	r0, [r7, #4]
 801e8f6:	f7f8 f971 	bl	8016bdc <pbuf_clen>
 801e8fa:	4603      	mov	r3, r0
 801e8fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e8fe:	4b0c      	ldr	r3, [pc, #48]	; (801e930 <ip4_reass+0x2b0>)
 801e900:	881b      	ldrh	r3, [r3, #0]
 801e902:	8c3a      	ldrh	r2, [r7, #32]
 801e904:	429a      	cmp	r2, r3
 801e906:	d906      	bls.n	801e916 <ip4_reass+0x296>
 801e908:	4b0b      	ldr	r3, [pc, #44]	; (801e938 <ip4_reass+0x2b8>)
 801e90a:	f240 229b 	movw	r2, #667	; 0x29b
 801e90e:	490b      	ldr	r1, [pc, #44]	; (801e93c <ip4_reass+0x2bc>)
 801e910:	480b      	ldr	r0, [pc, #44]	; (801e940 <ip4_reass+0x2c0>)
 801e912:	f001 f9d9 	bl	801fcc8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e916:	4b06      	ldr	r3, [pc, #24]	; (801e930 <ip4_reass+0x2b0>)
 801e918:	881a      	ldrh	r2, [r3, #0]
 801e91a:	8c3b      	ldrh	r3, [r7, #32]
 801e91c:	1ad3      	subs	r3, r2, r3
 801e91e:	b29a      	uxth	r2, r3
 801e920:	4b03      	ldr	r3, [pc, #12]	; (801e930 <ip4_reass+0x2b0>)
 801e922:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	e038      	b.n	801e99a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e928:	2300      	movs	r3, #0
 801e92a:	e036      	b.n	801e99a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801e92c:	bf00      	nop
 801e92e:	e00a      	b.n	801e946 <ip4_reass+0x2c6>
 801e930:	200111d8 	.word	0x200111d8
 801e934:	200111d4 	.word	0x200111d4
 801e938:	08023174 	.word	0x08023174
 801e93c:	080232e4 	.word	0x080232e4
 801e940:	080231bc 	.word	0x080231bc
    goto nullreturn_ipr;
 801e944:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e948:	2b00      	cmp	r3, #0
 801e94a:	d106      	bne.n	801e95a <ip4_reass+0x2da>
 801e94c:	4b15      	ldr	r3, [pc, #84]	; (801e9a4 <ip4_reass+0x324>)
 801e94e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801e952:	4915      	ldr	r1, [pc, #84]	; (801e9a8 <ip4_reass+0x328>)
 801e954:	4815      	ldr	r0, [pc, #84]	; (801e9ac <ip4_reass+0x32c>)
 801e956:	f001 f9b7 	bl	801fcc8 <iprintf>
  if (ipr->p == NULL) {
 801e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e95c:	685b      	ldr	r3, [r3, #4]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d116      	bne.n	801e990 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e962:	4b13      	ldr	r3, [pc, #76]	; (801e9b0 <ip4_reass+0x330>)
 801e964:	681b      	ldr	r3, [r3, #0]
 801e966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e968:	429a      	cmp	r2, r3
 801e96a:	d006      	beq.n	801e97a <ip4_reass+0x2fa>
 801e96c:	4b0d      	ldr	r3, [pc, #52]	; (801e9a4 <ip4_reass+0x324>)
 801e96e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e972:	4910      	ldr	r1, [pc, #64]	; (801e9b4 <ip4_reass+0x334>)
 801e974:	480d      	ldr	r0, [pc, #52]	; (801e9ac <ip4_reass+0x32c>)
 801e976:	f001 f9a7 	bl	801fcc8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e97a:	2100      	movs	r1, #0
 801e97c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e97e:	f7ff fce7 	bl	801e350 <ip_reass_dequeue_datagram>
 801e982:	e006      	b.n	801e992 <ip4_reass+0x312>
    goto nullreturn;
 801e984:	bf00      	nop
 801e986:	e004      	b.n	801e992 <ip4_reass+0x312>
    goto nullreturn;
 801e988:	bf00      	nop
 801e98a:	e002      	b.n	801e992 <ip4_reass+0x312>
      goto nullreturn;
 801e98c:	bf00      	nop
 801e98e:	e000      	b.n	801e992 <ip4_reass+0x312>
  }

nullreturn:
 801e990:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801e992:	6878      	ldr	r0, [r7, #4]
 801e994:	f7f8 f894 	bl	8016ac0 <pbuf_free>
  return NULL;
 801e998:	2300      	movs	r3, #0
}
 801e99a:	4618      	mov	r0, r3
 801e99c:	3738      	adds	r7, #56	; 0x38
 801e99e:	46bd      	mov	sp, r7
 801e9a0:	bd80      	pop	{r7, pc}
 801e9a2:	bf00      	nop
 801e9a4:	08023174 	.word	0x08023174
 801e9a8:	08023300 	.word	0x08023300
 801e9ac:	080231bc 	.word	0x080231bc
 801e9b0:	200111d4 	.word	0x200111d4
 801e9b4:	0802330c 	.word	0x0802330c

0801e9b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e9b8:	b580      	push	{r7, lr}
 801e9ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e9bc:	2005      	movs	r0, #5
 801e9be:	f7f7 f965 	bl	8015c8c <memp_malloc>
 801e9c2:	4603      	mov	r3, r0
}
 801e9c4:	4618      	mov	r0, r3
 801e9c6:	bd80      	pop	{r7, pc}

0801e9c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e9c8:	b580      	push	{r7, lr}
 801e9ca:	b082      	sub	sp, #8
 801e9cc:	af00      	add	r7, sp, #0
 801e9ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d106      	bne.n	801e9e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e9d6:	4b07      	ldr	r3, [pc, #28]	; (801e9f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e9d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801e9dc:	4906      	ldr	r1, [pc, #24]	; (801e9f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801e9de:	4807      	ldr	r0, [pc, #28]	; (801e9fc <ip_frag_free_pbuf_custom_ref+0x34>)
 801e9e0:	f001 f972 	bl	801fcc8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e9e4:	6879      	ldr	r1, [r7, #4]
 801e9e6:	2005      	movs	r0, #5
 801e9e8:	f7f7 f9c6 	bl	8015d78 <memp_free>
}
 801e9ec:	bf00      	nop
 801e9ee:	3708      	adds	r7, #8
 801e9f0:	46bd      	mov	sp, r7
 801e9f2:	bd80      	pop	{r7, pc}
 801e9f4:	08023174 	.word	0x08023174
 801e9f8:	0802332c 	.word	0x0802332c
 801e9fc:	080231bc 	.word	0x080231bc

0801ea00 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ea00:	b580      	push	{r7, lr}
 801ea02:	b084      	sub	sp, #16
 801ea04:	af00      	add	r7, sp, #0
 801ea06:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	d106      	bne.n	801ea20 <ipfrag_free_pbuf_custom+0x20>
 801ea12:	4b11      	ldr	r3, [pc, #68]	; (801ea58 <ipfrag_free_pbuf_custom+0x58>)
 801ea14:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ea18:	4910      	ldr	r1, [pc, #64]	; (801ea5c <ipfrag_free_pbuf_custom+0x5c>)
 801ea1a:	4811      	ldr	r0, [pc, #68]	; (801ea60 <ipfrag_free_pbuf_custom+0x60>)
 801ea1c:	f001 f954 	bl	801fcc8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ea20:	68fa      	ldr	r2, [r7, #12]
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	429a      	cmp	r2, r3
 801ea26:	d006      	beq.n	801ea36 <ipfrag_free_pbuf_custom+0x36>
 801ea28:	4b0b      	ldr	r3, [pc, #44]	; (801ea58 <ipfrag_free_pbuf_custom+0x58>)
 801ea2a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ea2e:	490d      	ldr	r1, [pc, #52]	; (801ea64 <ipfrag_free_pbuf_custom+0x64>)
 801ea30:	480b      	ldr	r0, [pc, #44]	; (801ea60 <ipfrag_free_pbuf_custom+0x60>)
 801ea32:	f001 f949 	bl	801fcc8 <iprintf>
  if (pcr->original != NULL) {
 801ea36:	68fb      	ldr	r3, [r7, #12]
 801ea38:	695b      	ldr	r3, [r3, #20]
 801ea3a:	2b00      	cmp	r3, #0
 801ea3c:	d004      	beq.n	801ea48 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ea3e:	68fb      	ldr	r3, [r7, #12]
 801ea40:	695b      	ldr	r3, [r3, #20]
 801ea42:	4618      	mov	r0, r3
 801ea44:	f7f8 f83c 	bl	8016ac0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ea48:	68f8      	ldr	r0, [r7, #12]
 801ea4a:	f7ff ffbd 	bl	801e9c8 <ip_frag_free_pbuf_custom_ref>
}
 801ea4e:	bf00      	nop
 801ea50:	3710      	adds	r7, #16
 801ea52:	46bd      	mov	sp, r7
 801ea54:	bd80      	pop	{r7, pc}
 801ea56:	bf00      	nop
 801ea58:	08023174 	.word	0x08023174
 801ea5c:	08023338 	.word	0x08023338
 801ea60:	080231bc 	.word	0x080231bc
 801ea64:	08023344 	.word	0x08023344

0801ea68 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ea68:	b580      	push	{r7, lr}
 801ea6a:	b094      	sub	sp, #80	; 0x50
 801ea6c:	af02      	add	r7, sp, #8
 801ea6e:	60f8      	str	r0, [r7, #12]
 801ea70:	60b9      	str	r1, [r7, #8]
 801ea72:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ea74:	2300      	movs	r3, #0
 801ea76:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ea7a:	68bb      	ldr	r3, [r7, #8]
 801ea7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ea7e:	3b14      	subs	r3, #20
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	da00      	bge.n	801ea86 <ip4_frag+0x1e>
 801ea84:	3307      	adds	r3, #7
 801ea86:	10db      	asrs	r3, r3, #3
 801ea88:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ea8a:	2314      	movs	r3, #20
 801ea8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ea8e:	68fb      	ldr	r3, [r7, #12]
 801ea90:	685b      	ldr	r3, [r3, #4]
 801ea92:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801ea94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ea96:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ea98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ea9a:	781b      	ldrb	r3, [r3, #0]
 801ea9c:	f003 030f 	and.w	r3, r3, #15
 801eaa0:	b2db      	uxtb	r3, r3
 801eaa2:	009b      	lsls	r3, r3, #2
 801eaa4:	b2db      	uxtb	r3, r3
 801eaa6:	2b14      	cmp	r3, #20
 801eaa8:	d002      	beq.n	801eab0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801eaaa:	f06f 0305 	mvn.w	r3, #5
 801eaae:	e110      	b.n	801ecd2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801eab0:	68fb      	ldr	r3, [r7, #12]
 801eab2:	895b      	ldrh	r3, [r3, #10]
 801eab4:	2b13      	cmp	r3, #19
 801eab6:	d809      	bhi.n	801eacc <ip4_frag+0x64>
 801eab8:	4b88      	ldr	r3, [pc, #544]	; (801ecdc <ip4_frag+0x274>)
 801eaba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801eabe:	4988      	ldr	r1, [pc, #544]	; (801ece0 <ip4_frag+0x278>)
 801eac0:	4888      	ldr	r0, [pc, #544]	; (801ece4 <ip4_frag+0x27c>)
 801eac2:	f001 f901 	bl	801fcc8 <iprintf>
 801eac6:	f06f 0305 	mvn.w	r3, #5
 801eaca:	e102      	b.n	801ecd2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801eace:	88db      	ldrh	r3, [r3, #6]
 801ead0:	b29b      	uxth	r3, r3
 801ead2:	4618      	mov	r0, r3
 801ead4:	f7f6 fc02 	bl	80152dc <lwip_htons>
 801ead8:	4603      	mov	r3, r0
 801eada:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801eadc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801eade:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eae2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801eae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801eae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801eaec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	891b      	ldrh	r3, [r3, #8]
 801eaf2:	3b14      	subs	r3, #20
 801eaf4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801eaf8:	e0e1      	b.n	801ecbe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801eafa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801eafc:	00db      	lsls	r3, r3, #3
 801eafe:	b29b      	uxth	r3, r3
 801eb00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801eb04:	4293      	cmp	r3, r2
 801eb06:	bf28      	it	cs
 801eb08:	4613      	movcs	r3, r2
 801eb0a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801eb0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801eb10:	2114      	movs	r1, #20
 801eb12:	200e      	movs	r0, #14
 801eb14:	f7f7 fcf0 	bl	80164f8 <pbuf_alloc>
 801eb18:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	f000 80d5 	beq.w	801eccc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb24:	895b      	ldrh	r3, [r3, #10]
 801eb26:	2b13      	cmp	r3, #19
 801eb28:	d806      	bhi.n	801eb38 <ip4_frag+0xd0>
 801eb2a:	4b6c      	ldr	r3, [pc, #432]	; (801ecdc <ip4_frag+0x274>)
 801eb2c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801eb30:	496d      	ldr	r1, [pc, #436]	; (801ece8 <ip4_frag+0x280>)
 801eb32:	486c      	ldr	r0, [pc, #432]	; (801ece4 <ip4_frag+0x27c>)
 801eb34:	f001 f8c8 	bl	801fcc8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801eb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb3a:	685b      	ldr	r3, [r3, #4]
 801eb3c:	2214      	movs	r2, #20
 801eb3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801eb40:	4618      	mov	r0, r3
 801eb42:	f000 ffcb 	bl	801fadc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801eb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb48:	685b      	ldr	r3, [r3, #4]
 801eb4a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801eb4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801eb4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801eb52:	e064      	b.n	801ec1e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	895a      	ldrh	r2, [r3, #10]
 801eb58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801eb5a:	1ad3      	subs	r3, r2, r3
 801eb5c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	895b      	ldrh	r3, [r3, #10]
 801eb62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801eb64:	429a      	cmp	r2, r3
 801eb66:	d906      	bls.n	801eb76 <ip4_frag+0x10e>
 801eb68:	4b5c      	ldr	r3, [pc, #368]	; (801ecdc <ip4_frag+0x274>)
 801eb6a:	f240 322d 	movw	r2, #813	; 0x32d
 801eb6e:	495f      	ldr	r1, [pc, #380]	; (801ecec <ip4_frag+0x284>)
 801eb70:	485c      	ldr	r0, [pc, #368]	; (801ece4 <ip4_frag+0x27c>)
 801eb72:	f001 f8a9 	bl	801fcc8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801eb76:	8bfa      	ldrh	r2, [r7, #30]
 801eb78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801eb7c:	4293      	cmp	r3, r2
 801eb7e:	bf28      	it	cs
 801eb80:	4613      	movcs	r3, r2
 801eb82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801eb86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d105      	bne.n	801eb9a <ip4_frag+0x132>
        poff = 0;
 801eb8e:	2300      	movs	r3, #0
 801eb90:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801eb92:	68fb      	ldr	r3, [r7, #12]
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	60fb      	str	r3, [r7, #12]
        continue;
 801eb98:	e041      	b.n	801ec1e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801eb9a:	f7ff ff0d 	bl	801e9b8 <ip_frag_alloc_pbuf_custom_ref>
 801eb9e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801eba0:	69bb      	ldr	r3, [r7, #24]
 801eba2:	2b00      	cmp	r3, #0
 801eba4:	d103      	bne.n	801ebae <ip4_frag+0x146>
        pbuf_free(rambuf);
 801eba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eba8:	f7f7 ff8a 	bl	8016ac0 <pbuf_free>
        goto memerr;
 801ebac:	e08f      	b.n	801ecce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ebae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ebb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ebb6:	4413      	add	r3, r2
 801ebb8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ebbc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ebc0:	9201      	str	r2, [sp, #4]
 801ebc2:	9300      	str	r3, [sp, #0]
 801ebc4:	4603      	mov	r3, r0
 801ebc6:	2241      	movs	r2, #65	; 0x41
 801ebc8:	2000      	movs	r0, #0
 801ebca:	f7f7 fdbf 	bl	801674c <pbuf_alloced_custom>
 801ebce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ebd0:	697b      	ldr	r3, [r7, #20]
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	d106      	bne.n	801ebe4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ebd6:	69b8      	ldr	r0, [r7, #24]
 801ebd8:	f7ff fef6 	bl	801e9c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ebdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ebde:	f7f7 ff6f 	bl	8016ac0 <pbuf_free>
        goto memerr;
 801ebe2:	e074      	b.n	801ecce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ebe4:	68f8      	ldr	r0, [r7, #12]
 801ebe6:	f7f8 f811 	bl	8016c0c <pbuf_ref>
      pcr->original = p;
 801ebea:	69bb      	ldr	r3, [r7, #24]
 801ebec:	68fa      	ldr	r2, [r7, #12]
 801ebee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ebf0:	69bb      	ldr	r3, [r7, #24]
 801ebf2:	4a3f      	ldr	r2, [pc, #252]	; (801ecf0 <ip4_frag+0x288>)
 801ebf4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ebf6:	6979      	ldr	r1, [r7, #20]
 801ebf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ebfa:	f7f8 f82f 	bl	8016c5c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ebfe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ec02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ec06:	1ad3      	subs	r3, r2, r3
 801ec08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ec0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d004      	beq.n	801ec1e <ip4_frag+0x1b6>
        poff = 0;
 801ec14:	2300      	movs	r3, #0
 801ec16:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ec18:	68fb      	ldr	r3, [r7, #12]
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ec1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d196      	bne.n	801eb54 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ec26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ec28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ec2c:	4413      	add	r3, r2
 801ec2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ec30:	68bb      	ldr	r3, [r7, #8]
 801ec32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ec34:	f1a3 0213 	sub.w	r2, r3, #19
 801ec38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ec3c:	429a      	cmp	r2, r3
 801ec3e:	bfcc      	ite	gt
 801ec40:	2301      	movgt	r3, #1
 801ec42:	2300      	movle	r3, #0
 801ec44:	b2db      	uxtb	r3, r3
 801ec46:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ec48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ec4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ec50:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ec52:	6a3b      	ldr	r3, [r7, #32]
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	d002      	beq.n	801ec5e <ip4_frag+0x1f6>
 801ec58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ec5a:	2b00      	cmp	r3, #0
 801ec5c:	d003      	beq.n	801ec66 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ec5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ec60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ec64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ec66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ec68:	4618      	mov	r0, r3
 801ec6a:	f7f6 fb37 	bl	80152dc <lwip_htons>
 801ec6e:	4603      	mov	r3, r0
 801ec70:	461a      	mov	r2, r3
 801ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec74:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ec76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ec78:	3314      	adds	r3, #20
 801ec7a:	b29b      	uxth	r3, r3
 801ec7c:	4618      	mov	r0, r3
 801ec7e:	f7f6 fb2d 	bl	80152dc <lwip_htons>
 801ec82:	4603      	mov	r3, r0
 801ec84:	461a      	mov	r2, r3
 801ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec88:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ec8c:	2200      	movs	r2, #0
 801ec8e:	729a      	strb	r2, [r3, #10]
 801ec90:	2200      	movs	r2, #0
 801ec92:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ec94:	68bb      	ldr	r3, [r7, #8]
 801ec96:	695b      	ldr	r3, [r3, #20]
 801ec98:	687a      	ldr	r2, [r7, #4]
 801ec9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ec9c:	68b8      	ldr	r0, [r7, #8]
 801ec9e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801eca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eca2:	f7f7 ff0d 	bl	8016ac0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801eca6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ecaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ecac:	1ad3      	subs	r3, r2, r3
 801ecae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ecb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ecb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ecb8:	4413      	add	r3, r2
 801ecba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ecbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	f47f af19 	bne.w	801eafa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ecc8:	2300      	movs	r3, #0
 801ecca:	e002      	b.n	801ecd2 <ip4_frag+0x26a>
      goto memerr;
 801eccc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ecce:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ecd2:	4618      	mov	r0, r3
 801ecd4:	3748      	adds	r7, #72	; 0x48
 801ecd6:	46bd      	mov	sp, r7
 801ecd8:	bd80      	pop	{r7, pc}
 801ecda:	bf00      	nop
 801ecdc:	08023174 	.word	0x08023174
 801ece0:	08023350 	.word	0x08023350
 801ece4:	080231bc 	.word	0x080231bc
 801ece8:	0802336c 	.word	0x0802336c
 801ecec:	0802338c 	.word	0x0802338c
 801ecf0:	0801ea01 	.word	0x0801ea01

0801ecf4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ecf4:	b580      	push	{r7, lr}
 801ecf6:	b086      	sub	sp, #24
 801ecf8:	af00      	add	r7, sp, #0
 801ecfa:	6078      	str	r0, [r7, #4]
 801ecfc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ecfe:	230e      	movs	r3, #14
 801ed00:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	895b      	ldrh	r3, [r3, #10]
 801ed06:	2b0e      	cmp	r3, #14
 801ed08:	d96e      	bls.n	801ede8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	7bdb      	ldrb	r3, [r3, #15]
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d106      	bne.n	801ed20 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ed12:	683b      	ldr	r3, [r7, #0]
 801ed14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ed18:	3301      	adds	r3, #1
 801ed1a:	b2da      	uxtb	r2, r3
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	685b      	ldr	r3, [r3, #4]
 801ed24:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ed26:	693b      	ldr	r3, [r7, #16]
 801ed28:	7b1a      	ldrb	r2, [r3, #12]
 801ed2a:	7b5b      	ldrb	r3, [r3, #13]
 801ed2c:	021b      	lsls	r3, r3, #8
 801ed2e:	4313      	orrs	r3, r2
 801ed30:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ed32:	693b      	ldr	r3, [r7, #16]
 801ed34:	781b      	ldrb	r3, [r3, #0]
 801ed36:	f003 0301 	and.w	r3, r3, #1
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d023      	beq.n	801ed86 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ed3e:	693b      	ldr	r3, [r7, #16]
 801ed40:	781b      	ldrb	r3, [r3, #0]
 801ed42:	2b01      	cmp	r3, #1
 801ed44:	d10f      	bne.n	801ed66 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ed46:	693b      	ldr	r3, [r7, #16]
 801ed48:	785b      	ldrb	r3, [r3, #1]
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	d11b      	bne.n	801ed86 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ed4e:	693b      	ldr	r3, [r7, #16]
 801ed50:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ed52:	2b5e      	cmp	r3, #94	; 0x5e
 801ed54:	d117      	bne.n	801ed86 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	7b5b      	ldrb	r3, [r3, #13]
 801ed5a:	f043 0310 	orr.w	r3, r3, #16
 801ed5e:	b2da      	uxtb	r2, r3
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	735a      	strb	r2, [r3, #13]
 801ed64:	e00f      	b.n	801ed86 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ed66:	693b      	ldr	r3, [r7, #16]
 801ed68:	2206      	movs	r2, #6
 801ed6a:	4928      	ldr	r1, [pc, #160]	; (801ee0c <ethernet_input+0x118>)
 801ed6c:	4618      	mov	r0, r3
 801ed6e:	f000 fea5 	bl	801fabc <memcmp>
 801ed72:	4603      	mov	r3, r0
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d106      	bne.n	801ed86 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	7b5b      	ldrb	r3, [r3, #13]
 801ed7c:	f043 0308 	orr.w	r3, r3, #8
 801ed80:	b2da      	uxtb	r2, r3
 801ed82:	687b      	ldr	r3, [r7, #4]
 801ed84:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ed86:	89fb      	ldrh	r3, [r7, #14]
 801ed88:	2b08      	cmp	r3, #8
 801ed8a:	d003      	beq.n	801ed94 <ethernet_input+0xa0>
 801ed8c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801ed90:	d014      	beq.n	801edbc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ed92:	e032      	b.n	801edfa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ed94:	683b      	ldr	r3, [r7, #0]
 801ed96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ed9a:	f003 0308 	and.w	r3, r3, #8
 801ed9e:	2b00      	cmp	r3, #0
 801eda0:	d024      	beq.n	801edec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801eda2:	8afb      	ldrh	r3, [r7, #22]
 801eda4:	4619      	mov	r1, r3
 801eda6:	6878      	ldr	r0, [r7, #4]
 801eda8:	f7f7 fe04 	bl	80169b4 <pbuf_remove_header>
 801edac:	4603      	mov	r3, r0
 801edae:	2b00      	cmp	r3, #0
 801edb0:	d11e      	bne.n	801edf0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801edb2:	6839      	ldr	r1, [r7, #0]
 801edb4:	6878      	ldr	r0, [r7, #4]
 801edb6:	f7fe ff21 	bl	801dbfc <ip4_input>
      break;
 801edba:	e013      	b.n	801ede4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801edbc:	683b      	ldr	r3, [r7, #0]
 801edbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801edc2:	f003 0308 	and.w	r3, r3, #8
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d014      	beq.n	801edf4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801edca:	8afb      	ldrh	r3, [r7, #22]
 801edcc:	4619      	mov	r1, r3
 801edce:	6878      	ldr	r0, [r7, #4]
 801edd0:	f7f7 fdf0 	bl	80169b4 <pbuf_remove_header>
 801edd4:	4603      	mov	r3, r0
 801edd6:	2b00      	cmp	r3, #0
 801edd8:	d10e      	bne.n	801edf8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801edda:	6839      	ldr	r1, [r7, #0]
 801eddc:	6878      	ldr	r0, [r7, #4]
 801edde:	f7fe f8c1 	bl	801cf64 <etharp_input>
      break;
 801ede2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ede4:	2300      	movs	r3, #0
 801ede6:	e00c      	b.n	801ee02 <ethernet_input+0x10e>
    goto free_and_return;
 801ede8:	bf00      	nop
 801edea:	e006      	b.n	801edfa <ethernet_input+0x106>
        goto free_and_return;
 801edec:	bf00      	nop
 801edee:	e004      	b.n	801edfa <ethernet_input+0x106>
        goto free_and_return;
 801edf0:	bf00      	nop
 801edf2:	e002      	b.n	801edfa <ethernet_input+0x106>
        goto free_and_return;
 801edf4:	bf00      	nop
 801edf6:	e000      	b.n	801edfa <ethernet_input+0x106>
        goto free_and_return;
 801edf8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801edfa:	6878      	ldr	r0, [r7, #4]
 801edfc:	f7f7 fe60 	bl	8016ac0 <pbuf_free>
  return ERR_OK;
 801ee00:	2300      	movs	r3, #0
}
 801ee02:	4618      	mov	r0, r3
 801ee04:	3718      	adds	r7, #24
 801ee06:	46bd      	mov	sp, r7
 801ee08:	bd80      	pop	{r7, pc}
 801ee0a:	bf00      	nop
 801ee0c:	0802357c 	.word	0x0802357c

0801ee10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ee10:	b580      	push	{r7, lr}
 801ee12:	b086      	sub	sp, #24
 801ee14:	af00      	add	r7, sp, #0
 801ee16:	60f8      	str	r0, [r7, #12]
 801ee18:	60b9      	str	r1, [r7, #8]
 801ee1a:	607a      	str	r2, [r7, #4]
 801ee1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ee1e:	8c3b      	ldrh	r3, [r7, #32]
 801ee20:	4618      	mov	r0, r3
 801ee22:	f7f6 fa5b 	bl	80152dc <lwip_htons>
 801ee26:	4603      	mov	r3, r0
 801ee28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ee2a:	210e      	movs	r1, #14
 801ee2c:	68b8      	ldr	r0, [r7, #8]
 801ee2e:	f7f7 fdb1 	bl	8016994 <pbuf_add_header>
 801ee32:	4603      	mov	r3, r0
 801ee34:	2b00      	cmp	r3, #0
 801ee36:	d125      	bne.n	801ee84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ee38:	68bb      	ldr	r3, [r7, #8]
 801ee3a:	685b      	ldr	r3, [r3, #4]
 801ee3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ee3e:	693b      	ldr	r3, [r7, #16]
 801ee40:	8afa      	ldrh	r2, [r7, #22]
 801ee42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ee44:	693b      	ldr	r3, [r7, #16]
 801ee46:	2206      	movs	r2, #6
 801ee48:	6839      	ldr	r1, [r7, #0]
 801ee4a:	4618      	mov	r0, r3
 801ee4c:	f000 fe46 	bl	801fadc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ee50:	693b      	ldr	r3, [r7, #16]
 801ee52:	3306      	adds	r3, #6
 801ee54:	2206      	movs	r2, #6
 801ee56:	6879      	ldr	r1, [r7, #4]
 801ee58:	4618      	mov	r0, r3
 801ee5a:	f000 fe3f 	bl	801fadc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801ee64:	2b06      	cmp	r3, #6
 801ee66:	d006      	beq.n	801ee76 <ethernet_output+0x66>
 801ee68:	4b0a      	ldr	r3, [pc, #40]	; (801ee94 <ethernet_output+0x84>)
 801ee6a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ee6e:	490a      	ldr	r1, [pc, #40]	; (801ee98 <ethernet_output+0x88>)
 801ee70:	480a      	ldr	r0, [pc, #40]	; (801ee9c <ethernet_output+0x8c>)
 801ee72:	f000 ff29 	bl	801fcc8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	699b      	ldr	r3, [r3, #24]
 801ee7a:	68b9      	ldr	r1, [r7, #8]
 801ee7c:	68f8      	ldr	r0, [r7, #12]
 801ee7e:	4798      	blx	r3
 801ee80:	4603      	mov	r3, r0
 801ee82:	e002      	b.n	801ee8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ee84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ee86:	f06f 0301 	mvn.w	r3, #1
}
 801ee8a:	4618      	mov	r0, r3
 801ee8c:	3718      	adds	r7, #24
 801ee8e:	46bd      	mov	sp, r7
 801ee90:	bd80      	pop	{r7, pc}
 801ee92:	bf00      	nop
 801ee94:	0802339c 	.word	0x0802339c
 801ee98:	080233d4 	.word	0x080233d4
 801ee9c:	08023408 	.word	0x08023408

0801eea0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801eea0:	b580      	push	{r7, lr}
 801eea2:	b086      	sub	sp, #24
 801eea4:	af00      	add	r7, sp, #0
 801eea6:	6078      	str	r0, [r7, #4]
 801eea8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801eeaa:	683b      	ldr	r3, [r7, #0]
 801eeac:	60bb      	str	r3, [r7, #8]
 801eeae:	2304      	movs	r3, #4
 801eeb0:	60fb      	str	r3, [r7, #12]
 801eeb2:	2300      	movs	r3, #0
 801eeb4:	613b      	str	r3, [r7, #16]
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801eeba:	f107 0308 	add.w	r3, r7, #8
 801eebe:	2100      	movs	r1, #0
 801eec0:	4618      	mov	r0, r3
 801eec2:	f7f3 fac3 	bl	801244c <osMessageCreate>
 801eec6:	4602      	mov	r2, r0
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	2b00      	cmp	r3, #0
 801eed2:	d102      	bne.n	801eeda <sys_mbox_new+0x3a>
    return ERR_MEM;
 801eed4:	f04f 33ff 	mov.w	r3, #4294967295
 801eed8:	e000      	b.n	801eedc <sys_mbox_new+0x3c>

  return ERR_OK;
 801eeda:	2300      	movs	r3, #0
}
 801eedc:	4618      	mov	r0, r3
 801eede:	3718      	adds	r7, #24
 801eee0:	46bd      	mov	sp, r7
 801eee2:	bd80      	pop	{r7, pc}

0801eee4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801eee4:	b580      	push	{r7, lr}
 801eee6:	b084      	sub	sp, #16
 801eee8:	af00      	add	r7, sp, #0
 801eeea:	6078      	str	r0, [r7, #4]
 801eeec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	6839      	ldr	r1, [r7, #0]
 801eef4:	2200      	movs	r2, #0
 801eef6:	4618      	mov	r0, r3
 801eef8:	f7f3 fad0 	bl	801249c <osMessagePut>
 801eefc:	4603      	mov	r3, r0
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d102      	bne.n	801ef08 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ef02:	2300      	movs	r3, #0
 801ef04:	73fb      	strb	r3, [r7, #15]
 801ef06:	e001      	b.n	801ef0c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ef08:	23ff      	movs	r3, #255	; 0xff
 801ef0a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ef0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ef10:	4618      	mov	r0, r3
 801ef12:	3710      	adds	r7, #16
 801ef14:	46bd      	mov	sp, r7
 801ef16:	bd80      	pop	{r7, pc}

0801ef18 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ef18:	b580      	push	{r7, lr}
 801ef1a:	b08c      	sub	sp, #48	; 0x30
 801ef1c:	af00      	add	r7, sp, #0
 801ef1e:	61f8      	str	r0, [r7, #28]
 801ef20:	61b9      	str	r1, [r7, #24]
 801ef22:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801ef24:	f7f3 f902 	bl	801212c <osKernelSysTick>
 801ef28:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ef2a:	697b      	ldr	r3, [r7, #20]
 801ef2c:	2b00      	cmp	r3, #0
 801ef2e:	d017      	beq.n	801ef60 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ef30:	69fb      	ldr	r3, [r7, #28]
 801ef32:	6819      	ldr	r1, [r3, #0]
 801ef34:	f107 0320 	add.w	r3, r7, #32
 801ef38:	697a      	ldr	r2, [r7, #20]
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	f7f3 faee 	bl	801251c <osMessageGet>

    if(event.status == osEventMessage)
 801ef40:	6a3b      	ldr	r3, [r7, #32]
 801ef42:	2b10      	cmp	r3, #16
 801ef44:	d109      	bne.n	801ef5a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef48:	461a      	mov	r2, r3
 801ef4a:	69bb      	ldr	r3, [r7, #24]
 801ef4c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ef4e:	f7f3 f8ed 	bl	801212c <osKernelSysTick>
 801ef52:	4602      	mov	r2, r0
 801ef54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef56:	1ad3      	subs	r3, r2, r3
 801ef58:	e019      	b.n	801ef8e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ef5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ef5e:	e016      	b.n	801ef8e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ef60:	69fb      	ldr	r3, [r7, #28]
 801ef62:	6819      	ldr	r1, [r3, #0]
 801ef64:	463b      	mov	r3, r7
 801ef66:	f04f 32ff 	mov.w	r2, #4294967295
 801ef6a:	4618      	mov	r0, r3
 801ef6c:	f7f3 fad6 	bl	801251c <osMessageGet>
 801ef70:	f107 0320 	add.w	r3, r7, #32
 801ef74:	463a      	mov	r2, r7
 801ef76:	ca07      	ldmia	r2, {r0, r1, r2}
 801ef78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef7e:	461a      	mov	r2, r3
 801ef80:	69bb      	ldr	r3, [r7, #24]
 801ef82:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801ef84:	f7f3 f8d2 	bl	801212c <osKernelSysTick>
 801ef88:	4602      	mov	r2, r0
 801ef8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef8c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ef8e:	4618      	mov	r0, r3
 801ef90:	3730      	adds	r7, #48	; 0x30
 801ef92:	46bd      	mov	sp, r7
 801ef94:	bd80      	pop	{r7, pc}

0801ef96 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ef96:	b480      	push	{r7}
 801ef98:	b083      	sub	sp, #12
 801ef9a:	af00      	add	r7, sp, #0
 801ef9c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	681b      	ldr	r3, [r3, #0]
 801efa2:	2b00      	cmp	r3, #0
 801efa4:	d101      	bne.n	801efaa <sys_mbox_valid+0x14>
    return 0;
 801efa6:	2300      	movs	r3, #0
 801efa8:	e000      	b.n	801efac <sys_mbox_valid+0x16>
  else
    return 1;
 801efaa:	2301      	movs	r3, #1
}
 801efac:	4618      	mov	r0, r3
 801efae:	370c      	adds	r7, #12
 801efb0:	46bd      	mov	sp, r7
 801efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efb6:	4770      	bx	lr

0801efb8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801efb8:	b580      	push	{r7, lr}
 801efba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801efbc:	4803      	ldr	r0, [pc, #12]	; (801efcc <sys_init+0x14>)
 801efbe:	f7f3 f925 	bl	801220c <osMutexCreate>
 801efc2:	4603      	mov	r3, r0
 801efc4:	4a02      	ldr	r2, [pc, #8]	; (801efd0 <sys_init+0x18>)
 801efc6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801efc8:	bf00      	nop
 801efca:	bd80      	pop	{r7, pc}
 801efcc:	0802358c 	.word	0x0802358c
 801efd0:	200111e0 	.word	0x200111e0

0801efd4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801efd4:	b580      	push	{r7, lr}
 801efd6:	b084      	sub	sp, #16
 801efd8:	af00      	add	r7, sp, #0
 801efda:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801efdc:	2300      	movs	r3, #0
 801efde:	60bb      	str	r3, [r7, #8]
 801efe0:	2300      	movs	r3, #0
 801efe2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801efe4:	f107 0308 	add.w	r3, r7, #8
 801efe8:	4618      	mov	r0, r3
 801efea:	f7f3 f90f 	bl	801220c <osMutexCreate>
 801efee:	4602      	mov	r2, r0
 801eff0:	687b      	ldr	r3, [r7, #4]
 801eff2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801eff4:	687b      	ldr	r3, [r7, #4]
 801eff6:	681b      	ldr	r3, [r3, #0]
 801eff8:	2b00      	cmp	r3, #0
 801effa:	d102      	bne.n	801f002 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801effc:	f04f 33ff 	mov.w	r3, #4294967295
 801f000:	e000      	b.n	801f004 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f002:	2300      	movs	r3, #0
}
 801f004:	4618      	mov	r0, r3
 801f006:	3710      	adds	r7, #16
 801f008:	46bd      	mov	sp, r7
 801f00a:	bd80      	pop	{r7, pc}

0801f00c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801f00c:	b580      	push	{r7, lr}
 801f00e:	b082      	sub	sp, #8
 801f010:	af00      	add	r7, sp, #0
 801f012:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	f04f 31ff 	mov.w	r1, #4294967295
 801f01c:	4618      	mov	r0, r3
 801f01e:	f7f3 f90d 	bl	801223c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801f022:	bf00      	nop
 801f024:	3708      	adds	r7, #8
 801f026:	46bd      	mov	sp, r7
 801f028:	bd80      	pop	{r7, pc}

0801f02a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801f02a:	b580      	push	{r7, lr}
 801f02c:	b082      	sub	sp, #8
 801f02e:	af00      	add	r7, sp, #0
 801f030:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	681b      	ldr	r3, [r3, #0]
 801f036:	4618      	mov	r0, r3
 801f038:	f7f3 f94e 	bl	80122d8 <osMutexRelease>
}
 801f03c:	bf00      	nop
 801f03e:	3708      	adds	r7, #8
 801f040:	46bd      	mov	sp, r7
 801f042:	bd80      	pop	{r7, pc}

0801f044 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f044:	b580      	push	{r7, lr}
 801f046:	b08c      	sub	sp, #48	; 0x30
 801f048:	af00      	add	r7, sp, #0
 801f04a:	60f8      	str	r0, [r7, #12]
 801f04c:	60b9      	str	r1, [r7, #8]
 801f04e:	607a      	str	r2, [r7, #4]
 801f050:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801f052:	f107 0314 	add.w	r3, r7, #20
 801f056:	2200      	movs	r2, #0
 801f058:	601a      	str	r2, [r3, #0]
 801f05a:	605a      	str	r2, [r3, #4]
 801f05c:	609a      	str	r2, [r3, #8]
 801f05e:	60da      	str	r2, [r3, #12]
 801f060:	611a      	str	r2, [r3, #16]
 801f062:	615a      	str	r2, [r3, #20]
 801f064:	619a      	str	r2, [r3, #24]
 801f066:	68fb      	ldr	r3, [r7, #12]
 801f068:	617b      	str	r3, [r7, #20]
 801f06a:	68bb      	ldr	r3, [r7, #8]
 801f06c:	61bb      	str	r3, [r7, #24]
 801f06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f070:	b21b      	sxth	r3, r3
 801f072:	83bb      	strh	r3, [r7, #28]
 801f074:	683b      	ldr	r3, [r7, #0]
 801f076:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801f078:	f107 0314 	add.w	r3, r7, #20
 801f07c:	6879      	ldr	r1, [r7, #4]
 801f07e:	4618      	mov	r0, r3
 801f080:	f7f3 f864 	bl	801214c <osThreadCreate>
 801f084:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801f086:	4618      	mov	r0, r3
 801f088:	3730      	adds	r7, #48	; 0x30
 801f08a:	46bd      	mov	sp, r7
 801f08c:	bd80      	pop	{r7, pc}
	...

0801f090 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f090:	b580      	push	{r7, lr}
 801f092:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801f094:	4b04      	ldr	r3, [pc, #16]	; (801f0a8 <sys_arch_protect+0x18>)
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	f04f 31ff 	mov.w	r1, #4294967295
 801f09c:	4618      	mov	r0, r3
 801f09e:	f7f3 f8cd 	bl	801223c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801f0a2:	2301      	movs	r3, #1
}
 801f0a4:	4618      	mov	r0, r3
 801f0a6:	bd80      	pop	{r7, pc}
 801f0a8:	200111e0 	.word	0x200111e0

0801f0ac <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f0ac:	b580      	push	{r7, lr}
 801f0ae:	b082      	sub	sp, #8
 801f0b0:	af00      	add	r7, sp, #0
 801f0b2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f0b4:	4b04      	ldr	r3, [pc, #16]	; (801f0c8 <sys_arch_unprotect+0x1c>)
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	4618      	mov	r0, r3
 801f0ba:	f7f3 f90d 	bl	80122d8 <osMutexRelease>
}
 801f0be:	bf00      	nop
 801f0c0:	3708      	adds	r7, #8
 801f0c2:	46bd      	mov	sp, r7
 801f0c4:	bd80      	pop	{r7, pc}
 801f0c6:	bf00      	nop
 801f0c8:	200111e0 	.word	0x200111e0

0801f0cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801f0cc:	b580      	push	{r7, lr}
 801f0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801f0d0:	2201      	movs	r2, #1
 801f0d2:	490e      	ldr	r1, [pc, #56]	; (801f10c <MX_USB_HOST_Init+0x40>)
 801f0d4:	480e      	ldr	r0, [pc, #56]	; (801f110 <MX_USB_HOST_Init+0x44>)
 801f0d6:	f7f1 f913 	bl	8010300 <USBH_Init>
 801f0da:	4603      	mov	r3, r0
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	d001      	beq.n	801f0e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801f0e0:	f7e2 fd4a 	bl	8001b78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801f0e4:	490b      	ldr	r1, [pc, #44]	; (801f114 <MX_USB_HOST_Init+0x48>)
 801f0e6:	480a      	ldr	r0, [pc, #40]	; (801f110 <MX_USB_HOST_Init+0x44>)
 801f0e8:	f7f1 f9df 	bl	80104aa <USBH_RegisterClass>
 801f0ec:	4603      	mov	r3, r0
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d001      	beq.n	801f0f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801f0f2:	f7e2 fd41 	bl	8001b78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801f0f6:	4806      	ldr	r0, [pc, #24]	; (801f110 <MX_USB_HOST_Init+0x44>)
 801f0f8:	f7f1 fa63 	bl	80105c2 <USBH_Start>
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d001      	beq.n	801f106 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801f102:	f7e2 fd39 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801f106:	bf00      	nop
 801f108:	bd80      	pop	{r7, pc}
 801f10a:	bf00      	nop
 801f10c:	0801f119 	.word	0x0801f119
 801f110:	200111e4 	.word	0x200111e4
 801f114:	20000020 	.word	0x20000020

0801f118 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801f118:	b480      	push	{r7}
 801f11a:	b083      	sub	sp, #12
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	6078      	str	r0, [r7, #4]
 801f120:	460b      	mov	r3, r1
 801f122:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801f124:	78fb      	ldrb	r3, [r7, #3]
 801f126:	3b01      	subs	r3, #1
 801f128:	2b04      	cmp	r3, #4
 801f12a:	d819      	bhi.n	801f160 <USBH_UserProcess+0x48>
 801f12c:	a201      	add	r2, pc, #4	; (adr r2, 801f134 <USBH_UserProcess+0x1c>)
 801f12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f132:	bf00      	nop
 801f134:	0801f161 	.word	0x0801f161
 801f138:	0801f151 	.word	0x0801f151
 801f13c:	0801f161 	.word	0x0801f161
 801f140:	0801f159 	.word	0x0801f159
 801f144:	0801f149 	.word	0x0801f149
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801f148:	4b09      	ldr	r3, [pc, #36]	; (801f170 <USBH_UserProcess+0x58>)
 801f14a:	2203      	movs	r2, #3
 801f14c:	701a      	strb	r2, [r3, #0]
  break;
 801f14e:	e008      	b.n	801f162 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801f150:	4b07      	ldr	r3, [pc, #28]	; (801f170 <USBH_UserProcess+0x58>)
 801f152:	2202      	movs	r2, #2
 801f154:	701a      	strb	r2, [r3, #0]
  break;
 801f156:	e004      	b.n	801f162 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801f158:	4b05      	ldr	r3, [pc, #20]	; (801f170 <USBH_UserProcess+0x58>)
 801f15a:	2201      	movs	r2, #1
 801f15c:	701a      	strb	r2, [r3, #0]
  break;
 801f15e:	e000      	b.n	801f162 <USBH_UserProcess+0x4a>

  default:
  break;
 801f160:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801f162:	bf00      	nop
 801f164:	370c      	adds	r7, #12
 801f166:	46bd      	mov	sp, r7
 801f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f16c:	4770      	bx	lr
 801f16e:	bf00      	nop
 801f170:	200115c8 	.word	0x200115c8

0801f174 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801f174:	b580      	push	{r7, lr}
 801f176:	b08a      	sub	sp, #40	; 0x28
 801f178:	af00      	add	r7, sp, #0
 801f17a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f17c:	f107 0314 	add.w	r3, r7, #20
 801f180:	2200      	movs	r2, #0
 801f182:	601a      	str	r2, [r3, #0]
 801f184:	605a      	str	r2, [r3, #4]
 801f186:	609a      	str	r2, [r3, #8]
 801f188:	60da      	str	r2, [r3, #12]
 801f18a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801f18c:	687b      	ldr	r3, [r7, #4]
 801f18e:	681b      	ldr	r3, [r3, #0]
 801f190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801f194:	d13c      	bne.n	801f210 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801f196:	4b20      	ldr	r3, [pc, #128]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f19a:	4a1f      	ldr	r2, [pc, #124]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f19c:	f043 0301 	orr.w	r3, r3, #1
 801f1a0:	6313      	str	r3, [r2, #48]	; 0x30
 801f1a2:	4b1d      	ldr	r3, [pc, #116]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f1a6:	f003 0301 	and.w	r3, r3, #1
 801f1aa:	613b      	str	r3, [r7, #16]
 801f1ac:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801f1ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801f1b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f1b4:	2302      	movs	r3, #2
 801f1b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f1b8:	2300      	movs	r3, #0
 801f1ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f1bc:	2303      	movs	r3, #3
 801f1be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801f1c0:	230a      	movs	r3, #10
 801f1c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f1c4:	f107 0314 	add.w	r3, r7, #20
 801f1c8:	4619      	mov	r1, r3
 801f1ca:	4814      	ldr	r0, [pc, #80]	; (801f21c <HAL_HCD_MspInit+0xa8>)
 801f1cc:	f7e6 fa4a 	bl	8005664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801f1d0:	4b11      	ldr	r3, [pc, #68]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1d4:	4a10      	ldr	r2, [pc, #64]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f1da:	6353      	str	r3, [r2, #52]	; 0x34
 801f1dc:	4b0e      	ldr	r3, [pc, #56]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f1e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1e4:	60fb      	str	r3, [r7, #12]
 801f1e6:	68fb      	ldr	r3, [r7, #12]
 801f1e8:	4b0b      	ldr	r3, [pc, #44]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1ec:	4a0a      	ldr	r2, [pc, #40]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f1ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801f1f2:	6453      	str	r3, [r2, #68]	; 0x44
 801f1f4:	4b08      	ldr	r3, [pc, #32]	; (801f218 <HAL_HCD_MspInit+0xa4>)
 801f1f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f1f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801f1fc:	60bb      	str	r3, [r7, #8]
 801f1fe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801f200:	2200      	movs	r2, #0
 801f202:	2105      	movs	r1, #5
 801f204:	2043      	movs	r0, #67	; 0x43
 801f206:	f7e4 fb6b 	bl	80038e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801f20a:	2043      	movs	r0, #67	; 0x43
 801f20c:	f7e4 fb84 	bl	8003918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801f210:	bf00      	nop
 801f212:	3728      	adds	r7, #40	; 0x28
 801f214:	46bd      	mov	sp, r7
 801f216:	bd80      	pop	{r7, pc}
 801f218:	40023800 	.word	0x40023800
 801f21c:	40020000 	.word	0x40020000

0801f220 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801f220:	b580      	push	{r7, lr}
 801f222:	b082      	sub	sp, #8
 801f224:	af00      	add	r7, sp, #0
 801f226:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801f22e:	4618      	mov	r0, r3
 801f230:	f7f1 fe7f 	bl	8010f32 <USBH_LL_IncTimer>
}
 801f234:	bf00      	nop
 801f236:	3708      	adds	r7, #8
 801f238:	46bd      	mov	sp, r7
 801f23a:	bd80      	pop	{r7, pc}

0801f23c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801f23c:	b580      	push	{r7, lr}
 801f23e:	b082      	sub	sp, #8
 801f240:	af00      	add	r7, sp, #0
 801f242:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801f24a:	4618      	mov	r0, r3
 801f24c:	f7f1 fec3 	bl	8010fd6 <USBH_LL_Connect>
}
 801f250:	bf00      	nop
 801f252:	3708      	adds	r7, #8
 801f254:	46bd      	mov	sp, r7
 801f256:	bd80      	pop	{r7, pc}

0801f258 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801f258:	b580      	push	{r7, lr}
 801f25a:	b082      	sub	sp, #8
 801f25c:	af00      	add	r7, sp, #0
 801f25e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801f260:	687b      	ldr	r3, [r7, #4]
 801f262:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801f266:	4618      	mov	r0, r3
 801f268:	f7f1 fed8 	bl	801101c <USBH_LL_Disconnect>
}
 801f26c:	bf00      	nop
 801f26e:	3708      	adds	r7, #8
 801f270:	46bd      	mov	sp, r7
 801f272:	bd80      	pop	{r7, pc}

0801f274 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801f274:	b580      	push	{r7, lr}
 801f276:	b082      	sub	sp, #8
 801f278:	af00      	add	r7, sp, #0
 801f27a:	6078      	str	r0, [r7, #4]
 801f27c:	460b      	mov	r3, r1
 801f27e:	70fb      	strb	r3, [r7, #3]
 801f280:	4613      	mov	r3, r2
 801f282:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801f28a:	4618      	mov	r0, r3
 801f28c:	f7f1 ff0d 	bl	80110aa <USBH_LL_NotifyURBChange>
#endif
}
 801f290:	bf00      	nop
 801f292:	3708      	adds	r7, #8
 801f294:	46bd      	mov	sp, r7
 801f296:	bd80      	pop	{r7, pc}

0801f298 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801f298:	b580      	push	{r7, lr}
 801f29a:	b082      	sub	sp, #8
 801f29c:	af00      	add	r7, sp, #0
 801f29e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	f7f1 fe6d 	bl	8010f86 <USBH_LL_PortEnabled>
}
 801f2ac:	bf00      	nop
 801f2ae:	3708      	adds	r7, #8
 801f2b0:	46bd      	mov	sp, r7
 801f2b2:	bd80      	pop	{r7, pc}

0801f2b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801f2b4:	b580      	push	{r7, lr}
 801f2b6:	b082      	sub	sp, #8
 801f2b8:	af00      	add	r7, sp, #0
 801f2ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801f2c2:	4618      	mov	r0, r3
 801f2c4:	f7f1 fe79 	bl	8010fba <USBH_LL_PortDisabled>
}
 801f2c8:	bf00      	nop
 801f2ca:	3708      	adds	r7, #8
 801f2cc:	46bd      	mov	sp, r7
 801f2ce:	bd80      	pop	{r7, pc}

0801f2d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801f2d0:	b580      	push	{r7, lr}
 801f2d2:	b082      	sub	sp, #8
 801f2d4:	af00      	add	r7, sp, #0
 801f2d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801f2de:	2b01      	cmp	r3, #1
 801f2e0:	d12a      	bne.n	801f338 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801f2e2:	4a18      	ldr	r2, [pc, #96]	; (801f344 <USBH_LL_Init+0x74>)
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	4a15      	ldr	r2, [pc, #84]	; (801f344 <USBH_LL_Init+0x74>)
 801f2ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801f2f2:	4b14      	ldr	r3, [pc, #80]	; (801f344 <USBH_LL_Init+0x74>)
 801f2f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801f2f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801f2fa:	4b12      	ldr	r3, [pc, #72]	; (801f344 <USBH_LL_Init+0x74>)
 801f2fc:	2208      	movs	r2, #8
 801f2fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801f300:	4b10      	ldr	r3, [pc, #64]	; (801f344 <USBH_LL_Init+0x74>)
 801f302:	2201      	movs	r2, #1
 801f304:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801f306:	4b0f      	ldr	r3, [pc, #60]	; (801f344 <USBH_LL_Init+0x74>)
 801f308:	2200      	movs	r2, #0
 801f30a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801f30c:	4b0d      	ldr	r3, [pc, #52]	; (801f344 <USBH_LL_Init+0x74>)
 801f30e:	2202      	movs	r2, #2
 801f310:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801f312:	4b0c      	ldr	r3, [pc, #48]	; (801f344 <USBH_LL_Init+0x74>)
 801f314:	2200      	movs	r2, #0
 801f316:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801f318:	480a      	ldr	r0, [pc, #40]	; (801f344 <USBH_LL_Init+0x74>)
 801f31a:	f7e6 fb80 	bl	8005a1e <HAL_HCD_Init>
 801f31e:	4603      	mov	r3, r0
 801f320:	2b00      	cmp	r3, #0
 801f322:	d001      	beq.n	801f328 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801f324:	f7e2 fc28 	bl	8001b78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801f328:	4806      	ldr	r0, [pc, #24]	; (801f344 <USBH_LL_Init+0x74>)
 801f32a:	f7e6 ff64 	bl	80061f6 <HAL_HCD_GetCurrentFrame>
 801f32e:	4603      	mov	r3, r0
 801f330:	4619      	mov	r1, r3
 801f332:	6878      	ldr	r0, [r7, #4]
 801f334:	f7f1 fdee 	bl	8010f14 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801f338:	2300      	movs	r3, #0
}
 801f33a:	4618      	mov	r0, r3
 801f33c:	3708      	adds	r7, #8
 801f33e:	46bd      	mov	sp, r7
 801f340:	bd80      	pop	{r7, pc}
 801f342:	bf00      	nop
 801f344:	200115cc 	.word	0x200115cc

0801f348 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801f348:	b580      	push	{r7, lr}
 801f34a:	b084      	sub	sp, #16
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f350:	2300      	movs	r3, #0
 801f352:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f354:	2300      	movs	r3, #0
 801f356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f35e:	4618      	mov	r0, r3
 801f360:	f7e6 fed3 	bl	800610a <HAL_HCD_Start>
 801f364:	4603      	mov	r3, r0
 801f366:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801f368:	7bfb      	ldrb	r3, [r7, #15]
 801f36a:	4618      	mov	r0, r3
 801f36c:	f000 f95c 	bl	801f628 <USBH_Get_USB_Status>
 801f370:	4603      	mov	r3, r0
 801f372:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f374:	7bbb      	ldrb	r3, [r7, #14]
}
 801f376:	4618      	mov	r0, r3
 801f378:	3710      	adds	r7, #16
 801f37a:	46bd      	mov	sp, r7
 801f37c:	bd80      	pop	{r7, pc}

0801f37e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801f37e:	b580      	push	{r7, lr}
 801f380:	b084      	sub	sp, #16
 801f382:	af00      	add	r7, sp, #0
 801f384:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f386:	2300      	movs	r3, #0
 801f388:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f38a:	2300      	movs	r3, #0
 801f38c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f394:	4618      	mov	r0, r3
 801f396:	f7e6 fedb 	bl	8006150 <HAL_HCD_Stop>
 801f39a:	4603      	mov	r3, r0
 801f39c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801f39e:	7bfb      	ldrb	r3, [r7, #15]
 801f3a0:	4618      	mov	r0, r3
 801f3a2:	f000 f941 	bl	801f628 <USBH_Get_USB_Status>
 801f3a6:	4603      	mov	r3, r0
 801f3a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f3aa:	7bbb      	ldrb	r3, [r7, #14]
}
 801f3ac:	4618      	mov	r0, r3
 801f3ae:	3710      	adds	r7, #16
 801f3b0:	46bd      	mov	sp, r7
 801f3b2:	bd80      	pop	{r7, pc}

0801f3b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801f3b4:	b580      	push	{r7, lr}
 801f3b6:	b084      	sub	sp, #16
 801f3b8:	af00      	add	r7, sp, #0
 801f3ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801f3bc:	2301      	movs	r3, #1
 801f3be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f3c6:	4618      	mov	r0, r3
 801f3c8:	f7e6 ff23 	bl	8006212 <HAL_HCD_GetCurrentSpeed>
 801f3cc:	4603      	mov	r3, r0
 801f3ce:	2b02      	cmp	r3, #2
 801f3d0:	d00c      	beq.n	801f3ec <USBH_LL_GetSpeed+0x38>
 801f3d2:	2b02      	cmp	r3, #2
 801f3d4:	d80d      	bhi.n	801f3f2 <USBH_LL_GetSpeed+0x3e>
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	d002      	beq.n	801f3e0 <USBH_LL_GetSpeed+0x2c>
 801f3da:	2b01      	cmp	r3, #1
 801f3dc:	d003      	beq.n	801f3e6 <USBH_LL_GetSpeed+0x32>
 801f3de:	e008      	b.n	801f3f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801f3e0:	2300      	movs	r3, #0
 801f3e2:	73fb      	strb	r3, [r7, #15]
    break;
 801f3e4:	e008      	b.n	801f3f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801f3e6:	2301      	movs	r3, #1
 801f3e8:	73fb      	strb	r3, [r7, #15]
    break;
 801f3ea:	e005      	b.n	801f3f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 801f3ec:	2302      	movs	r3, #2
 801f3ee:	73fb      	strb	r3, [r7, #15]
    break;
 801f3f0:	e002      	b.n	801f3f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801f3f2:	2301      	movs	r3, #1
 801f3f4:	73fb      	strb	r3, [r7, #15]
    break;
 801f3f6:	bf00      	nop
  }
  return  speed;
 801f3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 801f3fa:	4618      	mov	r0, r3
 801f3fc:	3710      	adds	r7, #16
 801f3fe:	46bd      	mov	sp, r7
 801f400:	bd80      	pop	{r7, pc}

0801f402 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801f402:	b580      	push	{r7, lr}
 801f404:	b084      	sub	sp, #16
 801f406:	af00      	add	r7, sp, #0
 801f408:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f40a:	2300      	movs	r3, #0
 801f40c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f40e:	2300      	movs	r3, #0
 801f410:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f418:	4618      	mov	r0, r3
 801f41a:	f7e6 feb6 	bl	800618a <HAL_HCD_ResetPort>
 801f41e:	4603      	mov	r3, r0
 801f420:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801f422:	7bfb      	ldrb	r3, [r7, #15]
 801f424:	4618      	mov	r0, r3
 801f426:	f000 f8ff 	bl	801f628 <USBH_Get_USB_Status>
 801f42a:	4603      	mov	r3, r0
 801f42c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f42e:	7bbb      	ldrb	r3, [r7, #14]
}
 801f430:	4618      	mov	r0, r3
 801f432:	3710      	adds	r7, #16
 801f434:	46bd      	mov	sp, r7
 801f436:	bd80      	pop	{r7, pc}

0801f438 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801f438:	b580      	push	{r7, lr}
 801f43a:	b082      	sub	sp, #8
 801f43c:	af00      	add	r7, sp, #0
 801f43e:	6078      	str	r0, [r7, #4]
 801f440:	460b      	mov	r3, r1
 801f442:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f44a:	78fa      	ldrb	r2, [r7, #3]
 801f44c:	4611      	mov	r1, r2
 801f44e:	4618      	mov	r0, r3
 801f450:	f7e6 febd 	bl	80061ce <HAL_HCD_HC_GetXferCount>
 801f454:	4603      	mov	r3, r0
}
 801f456:	4618      	mov	r0, r3
 801f458:	3708      	adds	r7, #8
 801f45a:	46bd      	mov	sp, r7
 801f45c:	bd80      	pop	{r7, pc}

0801f45e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801f45e:	b590      	push	{r4, r7, lr}
 801f460:	b089      	sub	sp, #36	; 0x24
 801f462:	af04      	add	r7, sp, #16
 801f464:	6078      	str	r0, [r7, #4]
 801f466:	4608      	mov	r0, r1
 801f468:	4611      	mov	r1, r2
 801f46a:	461a      	mov	r2, r3
 801f46c:	4603      	mov	r3, r0
 801f46e:	70fb      	strb	r3, [r7, #3]
 801f470:	460b      	mov	r3, r1
 801f472:	70bb      	strb	r3, [r7, #2]
 801f474:	4613      	mov	r3, r2
 801f476:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f478:	2300      	movs	r3, #0
 801f47a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f47c:	2300      	movs	r3, #0
 801f47e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801f486:	787c      	ldrb	r4, [r7, #1]
 801f488:	78ba      	ldrb	r2, [r7, #2]
 801f48a:	78f9      	ldrb	r1, [r7, #3]
 801f48c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801f48e:	9302      	str	r3, [sp, #8]
 801f490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f494:	9301      	str	r3, [sp, #4]
 801f496:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f49a:	9300      	str	r3, [sp, #0]
 801f49c:	4623      	mov	r3, r4
 801f49e:	f7e6 fb20 	bl	8005ae2 <HAL_HCD_HC_Init>
 801f4a2:	4603      	mov	r3, r0
 801f4a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801f4a6:	7bfb      	ldrb	r3, [r7, #15]
 801f4a8:	4618      	mov	r0, r3
 801f4aa:	f000 f8bd 	bl	801f628 <USBH_Get_USB_Status>
 801f4ae:	4603      	mov	r3, r0
 801f4b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f4b2:	7bbb      	ldrb	r3, [r7, #14]
}
 801f4b4:	4618      	mov	r0, r3
 801f4b6:	3714      	adds	r7, #20
 801f4b8:	46bd      	mov	sp, r7
 801f4ba:	bd90      	pop	{r4, r7, pc}

0801f4bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801f4bc:	b580      	push	{r7, lr}
 801f4be:	b084      	sub	sp, #16
 801f4c0:	af00      	add	r7, sp, #0
 801f4c2:	6078      	str	r0, [r7, #4]
 801f4c4:	460b      	mov	r3, r1
 801f4c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f4cc:	2300      	movs	r3, #0
 801f4ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f4d6:	78fa      	ldrb	r2, [r7, #3]
 801f4d8:	4611      	mov	r1, r2
 801f4da:	4618      	mov	r0, r3
 801f4dc:	f7e6 fb90 	bl	8005c00 <HAL_HCD_HC_Halt>
 801f4e0:	4603      	mov	r3, r0
 801f4e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801f4e4:	7bfb      	ldrb	r3, [r7, #15]
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	f000 f89e 	bl	801f628 <USBH_Get_USB_Status>
 801f4ec:	4603      	mov	r3, r0
 801f4ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f4f0:	7bbb      	ldrb	r3, [r7, #14]
}
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	3710      	adds	r7, #16
 801f4f6:	46bd      	mov	sp, r7
 801f4f8:	bd80      	pop	{r7, pc}

0801f4fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801f4fa:	b590      	push	{r4, r7, lr}
 801f4fc:	b089      	sub	sp, #36	; 0x24
 801f4fe:	af04      	add	r7, sp, #16
 801f500:	6078      	str	r0, [r7, #4]
 801f502:	4608      	mov	r0, r1
 801f504:	4611      	mov	r1, r2
 801f506:	461a      	mov	r2, r3
 801f508:	4603      	mov	r3, r0
 801f50a:	70fb      	strb	r3, [r7, #3]
 801f50c:	460b      	mov	r3, r1
 801f50e:	70bb      	strb	r3, [r7, #2]
 801f510:	4613      	mov	r3, r2
 801f512:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801f514:	2300      	movs	r3, #0
 801f516:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f518:	2300      	movs	r3, #0
 801f51a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801f522:	787c      	ldrb	r4, [r7, #1]
 801f524:	78ba      	ldrb	r2, [r7, #2]
 801f526:	78f9      	ldrb	r1, [r7, #3]
 801f528:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801f52c:	9303      	str	r3, [sp, #12]
 801f52e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801f530:	9302      	str	r3, [sp, #8]
 801f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f534:	9301      	str	r3, [sp, #4]
 801f536:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f53a:	9300      	str	r3, [sp, #0]
 801f53c:	4623      	mov	r3, r4
 801f53e:	f7e6 fb83 	bl	8005c48 <HAL_HCD_HC_SubmitRequest>
 801f542:	4603      	mov	r3, r0
 801f544:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801f546:	7bfb      	ldrb	r3, [r7, #15]
 801f548:	4618      	mov	r0, r3
 801f54a:	f000 f86d 	bl	801f628 <USBH_Get_USB_Status>
 801f54e:	4603      	mov	r3, r0
 801f550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801f552:	7bbb      	ldrb	r3, [r7, #14]
}
 801f554:	4618      	mov	r0, r3
 801f556:	3714      	adds	r7, #20
 801f558:	46bd      	mov	sp, r7
 801f55a:	bd90      	pop	{r4, r7, pc}

0801f55c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801f55c:	b580      	push	{r7, lr}
 801f55e:	b082      	sub	sp, #8
 801f560:	af00      	add	r7, sp, #0
 801f562:	6078      	str	r0, [r7, #4]
 801f564:	460b      	mov	r3, r1
 801f566:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801f568:	687b      	ldr	r3, [r7, #4]
 801f56a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f56e:	78fa      	ldrb	r2, [r7, #3]
 801f570:	4611      	mov	r1, r2
 801f572:	4618      	mov	r0, r3
 801f574:	f7e6 fe17 	bl	80061a6 <HAL_HCD_HC_GetURBState>
 801f578:	4603      	mov	r3, r0
}
 801f57a:	4618      	mov	r0, r3
 801f57c:	3708      	adds	r7, #8
 801f57e:	46bd      	mov	sp, r7
 801f580:	bd80      	pop	{r7, pc}

0801f582 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801f582:	b580      	push	{r7, lr}
 801f584:	b082      	sub	sp, #8
 801f586:	af00      	add	r7, sp, #0
 801f588:	6078      	str	r0, [r7, #4]
 801f58a:	460b      	mov	r3, r1
 801f58c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801f594:	2b01      	cmp	r3, #1
 801f596:	d103      	bne.n	801f5a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801f598:	78fb      	ldrb	r3, [r7, #3]
 801f59a:	4618      	mov	r0, r3
 801f59c:	f000 f870 	bl	801f680 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801f5a0:	20c8      	movs	r0, #200	; 0xc8
 801f5a2:	f7e3 fe2d 	bl	8003200 <HAL_Delay>
  return USBH_OK;
 801f5a6:	2300      	movs	r3, #0
}
 801f5a8:	4618      	mov	r0, r3
 801f5aa:	3708      	adds	r7, #8
 801f5ac:	46bd      	mov	sp, r7
 801f5ae:	bd80      	pop	{r7, pc}

0801f5b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801f5b0:	b480      	push	{r7}
 801f5b2:	b085      	sub	sp, #20
 801f5b4:	af00      	add	r7, sp, #0
 801f5b6:	6078      	str	r0, [r7, #4]
 801f5b8:	460b      	mov	r3, r1
 801f5ba:	70fb      	strb	r3, [r7, #3]
 801f5bc:	4613      	mov	r3, r2
 801f5be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801f5c0:	687b      	ldr	r3, [r7, #4]
 801f5c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801f5c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801f5c8:	78fb      	ldrb	r3, [r7, #3]
 801f5ca:	68fa      	ldr	r2, [r7, #12]
 801f5cc:	212c      	movs	r1, #44	; 0x2c
 801f5ce:	fb01 f303 	mul.w	r3, r1, r3
 801f5d2:	4413      	add	r3, r2
 801f5d4:	333b      	adds	r3, #59	; 0x3b
 801f5d6:	781b      	ldrb	r3, [r3, #0]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d009      	beq.n	801f5f0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801f5dc:	78fb      	ldrb	r3, [r7, #3]
 801f5de:	68fa      	ldr	r2, [r7, #12]
 801f5e0:	212c      	movs	r1, #44	; 0x2c
 801f5e2:	fb01 f303 	mul.w	r3, r1, r3
 801f5e6:	4413      	add	r3, r2
 801f5e8:	3354      	adds	r3, #84	; 0x54
 801f5ea:	78ba      	ldrb	r2, [r7, #2]
 801f5ec:	701a      	strb	r2, [r3, #0]
 801f5ee:	e008      	b.n	801f602 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801f5f0:	78fb      	ldrb	r3, [r7, #3]
 801f5f2:	68fa      	ldr	r2, [r7, #12]
 801f5f4:	212c      	movs	r1, #44	; 0x2c
 801f5f6:	fb01 f303 	mul.w	r3, r1, r3
 801f5fa:	4413      	add	r3, r2
 801f5fc:	3355      	adds	r3, #85	; 0x55
 801f5fe:	78ba      	ldrb	r2, [r7, #2]
 801f600:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801f602:	2300      	movs	r3, #0
}
 801f604:	4618      	mov	r0, r3
 801f606:	3714      	adds	r7, #20
 801f608:	46bd      	mov	sp, r7
 801f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f60e:	4770      	bx	lr

0801f610 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801f610:	b580      	push	{r7, lr}
 801f612:	b082      	sub	sp, #8
 801f614:	af00      	add	r7, sp, #0
 801f616:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801f618:	6878      	ldr	r0, [r7, #4]
 801f61a:	f7e3 fdf1 	bl	8003200 <HAL_Delay>
}
 801f61e:	bf00      	nop
 801f620:	3708      	adds	r7, #8
 801f622:	46bd      	mov	sp, r7
 801f624:	bd80      	pop	{r7, pc}
	...

0801f628 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801f628:	b480      	push	{r7}
 801f62a:	b085      	sub	sp, #20
 801f62c:	af00      	add	r7, sp, #0
 801f62e:	4603      	mov	r3, r0
 801f630:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801f632:	2300      	movs	r3, #0
 801f634:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801f636:	79fb      	ldrb	r3, [r7, #7]
 801f638:	2b03      	cmp	r3, #3
 801f63a:	d817      	bhi.n	801f66c <USBH_Get_USB_Status+0x44>
 801f63c:	a201      	add	r2, pc, #4	; (adr r2, 801f644 <USBH_Get_USB_Status+0x1c>)
 801f63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f642:	bf00      	nop
 801f644:	0801f655 	.word	0x0801f655
 801f648:	0801f65b 	.word	0x0801f65b
 801f64c:	0801f661 	.word	0x0801f661
 801f650:	0801f667 	.word	0x0801f667
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801f654:	2300      	movs	r3, #0
 801f656:	73fb      	strb	r3, [r7, #15]
    break;
 801f658:	e00b      	b.n	801f672 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801f65a:	2302      	movs	r3, #2
 801f65c:	73fb      	strb	r3, [r7, #15]
    break;
 801f65e:	e008      	b.n	801f672 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801f660:	2301      	movs	r3, #1
 801f662:	73fb      	strb	r3, [r7, #15]
    break;
 801f664:	e005      	b.n	801f672 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801f666:	2302      	movs	r3, #2
 801f668:	73fb      	strb	r3, [r7, #15]
    break;
 801f66a:	e002      	b.n	801f672 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801f66c:	2302      	movs	r3, #2
 801f66e:	73fb      	strb	r3, [r7, #15]
    break;
 801f670:	bf00      	nop
  }
  return usb_status;
 801f672:	7bfb      	ldrb	r3, [r7, #15]
}
 801f674:	4618      	mov	r0, r3
 801f676:	3714      	adds	r7, #20
 801f678:	46bd      	mov	sp, r7
 801f67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f67e:	4770      	bx	lr

0801f680 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801f680:	b580      	push	{r7, lr}
 801f682:	b084      	sub	sp, #16
 801f684:	af00      	add	r7, sp, #0
 801f686:	4603      	mov	r3, r0
 801f688:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801f68a:	79fb      	ldrb	r3, [r7, #7]
 801f68c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801f68e:	79fb      	ldrb	r3, [r7, #7]
 801f690:	2b00      	cmp	r3, #0
 801f692:	d102      	bne.n	801f69a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 801f694:	2300      	movs	r3, #0
 801f696:	73fb      	strb	r3, [r7, #15]
 801f698:	e001      	b.n	801f69e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 801f69a:	2301      	movs	r3, #1
 801f69c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801f69e:	7bfb      	ldrb	r3, [r7, #15]
 801f6a0:	461a      	mov	r2, r3
 801f6a2:	2120      	movs	r1, #32
 801f6a4:	4803      	ldr	r0, [pc, #12]	; (801f6b4 <MX_DriverVbusFS+0x34>)
 801f6a6:	f7e6 f9a1 	bl	80059ec <HAL_GPIO_WritePin>
}
 801f6aa:	bf00      	nop
 801f6ac:	3710      	adds	r7, #16
 801f6ae:	46bd      	mov	sp, r7
 801f6b0:	bd80      	pop	{r7, pc}
 801f6b2:	bf00      	nop
 801f6b4:	40020c00 	.word	0x40020c00

0801f6b8 <__sflush_r>:
 801f6b8:	898a      	ldrh	r2, [r1, #12]
 801f6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6be:	4605      	mov	r5, r0
 801f6c0:	0710      	lsls	r0, r2, #28
 801f6c2:	460c      	mov	r4, r1
 801f6c4:	d458      	bmi.n	801f778 <__sflush_r+0xc0>
 801f6c6:	684b      	ldr	r3, [r1, #4]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	dc05      	bgt.n	801f6d8 <__sflush_r+0x20>
 801f6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	dc02      	bgt.n	801f6d8 <__sflush_r+0x20>
 801f6d2:	2000      	movs	r0, #0
 801f6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f6da:	2e00      	cmp	r6, #0
 801f6dc:	d0f9      	beq.n	801f6d2 <__sflush_r+0x1a>
 801f6de:	2300      	movs	r3, #0
 801f6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f6e4:	682f      	ldr	r7, [r5, #0]
 801f6e6:	602b      	str	r3, [r5, #0]
 801f6e8:	d032      	beq.n	801f750 <__sflush_r+0x98>
 801f6ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f6ec:	89a3      	ldrh	r3, [r4, #12]
 801f6ee:	075a      	lsls	r2, r3, #29
 801f6f0:	d505      	bpl.n	801f6fe <__sflush_r+0x46>
 801f6f2:	6863      	ldr	r3, [r4, #4]
 801f6f4:	1ac0      	subs	r0, r0, r3
 801f6f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f6f8:	b10b      	cbz	r3, 801f6fe <__sflush_r+0x46>
 801f6fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f6fc:	1ac0      	subs	r0, r0, r3
 801f6fe:	2300      	movs	r3, #0
 801f700:	4602      	mov	r2, r0
 801f702:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f704:	6a21      	ldr	r1, [r4, #32]
 801f706:	4628      	mov	r0, r5
 801f708:	47b0      	blx	r6
 801f70a:	1c43      	adds	r3, r0, #1
 801f70c:	89a3      	ldrh	r3, [r4, #12]
 801f70e:	d106      	bne.n	801f71e <__sflush_r+0x66>
 801f710:	6829      	ldr	r1, [r5, #0]
 801f712:	291d      	cmp	r1, #29
 801f714:	d82c      	bhi.n	801f770 <__sflush_r+0xb8>
 801f716:	4a2a      	ldr	r2, [pc, #168]	; (801f7c0 <__sflush_r+0x108>)
 801f718:	40ca      	lsrs	r2, r1
 801f71a:	07d6      	lsls	r6, r2, #31
 801f71c:	d528      	bpl.n	801f770 <__sflush_r+0xb8>
 801f71e:	2200      	movs	r2, #0
 801f720:	6062      	str	r2, [r4, #4]
 801f722:	04d9      	lsls	r1, r3, #19
 801f724:	6922      	ldr	r2, [r4, #16]
 801f726:	6022      	str	r2, [r4, #0]
 801f728:	d504      	bpl.n	801f734 <__sflush_r+0x7c>
 801f72a:	1c42      	adds	r2, r0, #1
 801f72c:	d101      	bne.n	801f732 <__sflush_r+0x7a>
 801f72e:	682b      	ldr	r3, [r5, #0]
 801f730:	b903      	cbnz	r3, 801f734 <__sflush_r+0x7c>
 801f732:	6560      	str	r0, [r4, #84]	; 0x54
 801f734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f736:	602f      	str	r7, [r5, #0]
 801f738:	2900      	cmp	r1, #0
 801f73a:	d0ca      	beq.n	801f6d2 <__sflush_r+0x1a>
 801f73c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f740:	4299      	cmp	r1, r3
 801f742:	d002      	beq.n	801f74a <__sflush_r+0x92>
 801f744:	4628      	mov	r0, r5
 801f746:	f000 f9df 	bl	801fb08 <_free_r>
 801f74a:	2000      	movs	r0, #0
 801f74c:	6360      	str	r0, [r4, #52]	; 0x34
 801f74e:	e7c1      	b.n	801f6d4 <__sflush_r+0x1c>
 801f750:	6a21      	ldr	r1, [r4, #32]
 801f752:	2301      	movs	r3, #1
 801f754:	4628      	mov	r0, r5
 801f756:	47b0      	blx	r6
 801f758:	1c41      	adds	r1, r0, #1
 801f75a:	d1c7      	bne.n	801f6ec <__sflush_r+0x34>
 801f75c:	682b      	ldr	r3, [r5, #0]
 801f75e:	2b00      	cmp	r3, #0
 801f760:	d0c4      	beq.n	801f6ec <__sflush_r+0x34>
 801f762:	2b1d      	cmp	r3, #29
 801f764:	d001      	beq.n	801f76a <__sflush_r+0xb2>
 801f766:	2b16      	cmp	r3, #22
 801f768:	d101      	bne.n	801f76e <__sflush_r+0xb6>
 801f76a:	602f      	str	r7, [r5, #0]
 801f76c:	e7b1      	b.n	801f6d2 <__sflush_r+0x1a>
 801f76e:	89a3      	ldrh	r3, [r4, #12]
 801f770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f774:	81a3      	strh	r3, [r4, #12]
 801f776:	e7ad      	b.n	801f6d4 <__sflush_r+0x1c>
 801f778:	690f      	ldr	r7, [r1, #16]
 801f77a:	2f00      	cmp	r7, #0
 801f77c:	d0a9      	beq.n	801f6d2 <__sflush_r+0x1a>
 801f77e:	0793      	lsls	r3, r2, #30
 801f780:	680e      	ldr	r6, [r1, #0]
 801f782:	bf08      	it	eq
 801f784:	694b      	ldreq	r3, [r1, #20]
 801f786:	600f      	str	r7, [r1, #0]
 801f788:	bf18      	it	ne
 801f78a:	2300      	movne	r3, #0
 801f78c:	eba6 0807 	sub.w	r8, r6, r7
 801f790:	608b      	str	r3, [r1, #8]
 801f792:	f1b8 0f00 	cmp.w	r8, #0
 801f796:	dd9c      	ble.n	801f6d2 <__sflush_r+0x1a>
 801f798:	6a21      	ldr	r1, [r4, #32]
 801f79a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f79c:	4643      	mov	r3, r8
 801f79e:	463a      	mov	r2, r7
 801f7a0:	4628      	mov	r0, r5
 801f7a2:	47b0      	blx	r6
 801f7a4:	2800      	cmp	r0, #0
 801f7a6:	dc06      	bgt.n	801f7b6 <__sflush_r+0xfe>
 801f7a8:	89a3      	ldrh	r3, [r4, #12]
 801f7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f7ae:	81a3      	strh	r3, [r4, #12]
 801f7b0:	f04f 30ff 	mov.w	r0, #4294967295
 801f7b4:	e78e      	b.n	801f6d4 <__sflush_r+0x1c>
 801f7b6:	4407      	add	r7, r0
 801f7b8:	eba8 0800 	sub.w	r8, r8, r0
 801f7bc:	e7e9      	b.n	801f792 <__sflush_r+0xda>
 801f7be:	bf00      	nop
 801f7c0:	20400001 	.word	0x20400001

0801f7c4 <_fflush_r>:
 801f7c4:	b538      	push	{r3, r4, r5, lr}
 801f7c6:	690b      	ldr	r3, [r1, #16]
 801f7c8:	4605      	mov	r5, r0
 801f7ca:	460c      	mov	r4, r1
 801f7cc:	b913      	cbnz	r3, 801f7d4 <_fflush_r+0x10>
 801f7ce:	2500      	movs	r5, #0
 801f7d0:	4628      	mov	r0, r5
 801f7d2:	bd38      	pop	{r3, r4, r5, pc}
 801f7d4:	b118      	cbz	r0, 801f7de <_fflush_r+0x1a>
 801f7d6:	6983      	ldr	r3, [r0, #24]
 801f7d8:	b90b      	cbnz	r3, 801f7de <_fflush_r+0x1a>
 801f7da:	f000 f899 	bl	801f910 <__sinit>
 801f7de:	4b14      	ldr	r3, [pc, #80]	; (801f830 <_fflush_r+0x6c>)
 801f7e0:	429c      	cmp	r4, r3
 801f7e2:	d11b      	bne.n	801f81c <_fflush_r+0x58>
 801f7e4:	686c      	ldr	r4, [r5, #4]
 801f7e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d0ef      	beq.n	801f7ce <_fflush_r+0xa>
 801f7ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f7f0:	07d0      	lsls	r0, r2, #31
 801f7f2:	d404      	bmi.n	801f7fe <_fflush_r+0x3a>
 801f7f4:	0599      	lsls	r1, r3, #22
 801f7f6:	d402      	bmi.n	801f7fe <_fflush_r+0x3a>
 801f7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7fa:	f000 f94c 	bl	801fa96 <__retarget_lock_acquire_recursive>
 801f7fe:	4628      	mov	r0, r5
 801f800:	4621      	mov	r1, r4
 801f802:	f7ff ff59 	bl	801f6b8 <__sflush_r>
 801f806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f808:	07da      	lsls	r2, r3, #31
 801f80a:	4605      	mov	r5, r0
 801f80c:	d4e0      	bmi.n	801f7d0 <_fflush_r+0xc>
 801f80e:	89a3      	ldrh	r3, [r4, #12]
 801f810:	059b      	lsls	r3, r3, #22
 801f812:	d4dd      	bmi.n	801f7d0 <_fflush_r+0xc>
 801f814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f816:	f000 f93f 	bl	801fa98 <__retarget_lock_release_recursive>
 801f81a:	e7d9      	b.n	801f7d0 <_fflush_r+0xc>
 801f81c:	4b05      	ldr	r3, [pc, #20]	; (801f834 <_fflush_r+0x70>)
 801f81e:	429c      	cmp	r4, r3
 801f820:	d101      	bne.n	801f826 <_fflush_r+0x62>
 801f822:	68ac      	ldr	r4, [r5, #8]
 801f824:	e7df      	b.n	801f7e6 <_fflush_r+0x22>
 801f826:	4b04      	ldr	r3, [pc, #16]	; (801f838 <_fflush_r+0x74>)
 801f828:	429c      	cmp	r4, r3
 801f82a:	bf08      	it	eq
 801f82c:	68ec      	ldreq	r4, [r5, #12]
 801f82e:	e7da      	b.n	801f7e6 <_fflush_r+0x22>
 801f830:	080235b4 	.word	0x080235b4
 801f834:	080235d4 	.word	0x080235d4
 801f838:	08023594 	.word	0x08023594

0801f83c <fflush>:
 801f83c:	4601      	mov	r1, r0
 801f83e:	b920      	cbnz	r0, 801f84a <fflush+0xe>
 801f840:	4b04      	ldr	r3, [pc, #16]	; (801f854 <fflush+0x18>)
 801f842:	4905      	ldr	r1, [pc, #20]	; (801f858 <fflush+0x1c>)
 801f844:	6818      	ldr	r0, [r3, #0]
 801f846:	f000 b8e1 	b.w	801fa0c <_fwalk_reent>
 801f84a:	4b04      	ldr	r3, [pc, #16]	; (801f85c <fflush+0x20>)
 801f84c:	6818      	ldr	r0, [r3, #0]
 801f84e:	f7ff bfb9 	b.w	801f7c4 <_fflush_r>
 801f852:	bf00      	nop
 801f854:	080235f4 	.word	0x080235f4
 801f858:	0801f7c5 	.word	0x0801f7c5
 801f85c:	20000050 	.word	0x20000050

0801f860 <std>:
 801f860:	2300      	movs	r3, #0
 801f862:	b510      	push	{r4, lr}
 801f864:	4604      	mov	r4, r0
 801f866:	e9c0 3300 	strd	r3, r3, [r0]
 801f86a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f86e:	6083      	str	r3, [r0, #8]
 801f870:	8181      	strh	r1, [r0, #12]
 801f872:	6643      	str	r3, [r0, #100]	; 0x64
 801f874:	81c2      	strh	r2, [r0, #14]
 801f876:	6183      	str	r3, [r0, #24]
 801f878:	4619      	mov	r1, r3
 801f87a:	2208      	movs	r2, #8
 801f87c:	305c      	adds	r0, #92	; 0x5c
 801f87e:	f000 f93b 	bl	801faf8 <memset>
 801f882:	4b05      	ldr	r3, [pc, #20]	; (801f898 <std+0x38>)
 801f884:	6263      	str	r3, [r4, #36]	; 0x24
 801f886:	4b05      	ldr	r3, [pc, #20]	; (801f89c <std+0x3c>)
 801f888:	62a3      	str	r3, [r4, #40]	; 0x28
 801f88a:	4b05      	ldr	r3, [pc, #20]	; (801f8a0 <std+0x40>)
 801f88c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f88e:	4b05      	ldr	r3, [pc, #20]	; (801f8a4 <std+0x44>)
 801f890:	6224      	str	r4, [r4, #32]
 801f892:	6323      	str	r3, [r4, #48]	; 0x30
 801f894:	bd10      	pop	{r4, pc}
 801f896:	bf00      	nop
 801f898:	0801fd95 	.word	0x0801fd95
 801f89c:	0801fdb7 	.word	0x0801fdb7
 801f8a0:	0801fdef 	.word	0x0801fdef
 801f8a4:	0801fe13 	.word	0x0801fe13

0801f8a8 <_cleanup_r>:
 801f8a8:	4901      	ldr	r1, [pc, #4]	; (801f8b0 <_cleanup_r+0x8>)
 801f8aa:	f000 b8af 	b.w	801fa0c <_fwalk_reent>
 801f8ae:	bf00      	nop
 801f8b0:	0801f7c5 	.word	0x0801f7c5

0801f8b4 <__sfmoreglue>:
 801f8b4:	b570      	push	{r4, r5, r6, lr}
 801f8b6:	2268      	movs	r2, #104	; 0x68
 801f8b8:	1e4d      	subs	r5, r1, #1
 801f8ba:	4355      	muls	r5, r2
 801f8bc:	460e      	mov	r6, r1
 801f8be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f8c2:	f000 f98d 	bl	801fbe0 <_malloc_r>
 801f8c6:	4604      	mov	r4, r0
 801f8c8:	b140      	cbz	r0, 801f8dc <__sfmoreglue+0x28>
 801f8ca:	2100      	movs	r1, #0
 801f8cc:	e9c0 1600 	strd	r1, r6, [r0]
 801f8d0:	300c      	adds	r0, #12
 801f8d2:	60a0      	str	r0, [r4, #8]
 801f8d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f8d8:	f000 f90e 	bl	801faf8 <memset>
 801f8dc:	4620      	mov	r0, r4
 801f8de:	bd70      	pop	{r4, r5, r6, pc}

0801f8e0 <__sfp_lock_acquire>:
 801f8e0:	4801      	ldr	r0, [pc, #4]	; (801f8e8 <__sfp_lock_acquire+0x8>)
 801f8e2:	f000 b8d8 	b.w	801fa96 <__retarget_lock_acquire_recursive>
 801f8e6:	bf00      	nop
 801f8e8:	200118d1 	.word	0x200118d1

0801f8ec <__sfp_lock_release>:
 801f8ec:	4801      	ldr	r0, [pc, #4]	; (801f8f4 <__sfp_lock_release+0x8>)
 801f8ee:	f000 b8d3 	b.w	801fa98 <__retarget_lock_release_recursive>
 801f8f2:	bf00      	nop
 801f8f4:	200118d1 	.word	0x200118d1

0801f8f8 <__sinit_lock_acquire>:
 801f8f8:	4801      	ldr	r0, [pc, #4]	; (801f900 <__sinit_lock_acquire+0x8>)
 801f8fa:	f000 b8cc 	b.w	801fa96 <__retarget_lock_acquire_recursive>
 801f8fe:	bf00      	nop
 801f900:	200118d2 	.word	0x200118d2

0801f904 <__sinit_lock_release>:
 801f904:	4801      	ldr	r0, [pc, #4]	; (801f90c <__sinit_lock_release+0x8>)
 801f906:	f000 b8c7 	b.w	801fa98 <__retarget_lock_release_recursive>
 801f90a:	bf00      	nop
 801f90c:	200118d2 	.word	0x200118d2

0801f910 <__sinit>:
 801f910:	b510      	push	{r4, lr}
 801f912:	4604      	mov	r4, r0
 801f914:	f7ff fff0 	bl	801f8f8 <__sinit_lock_acquire>
 801f918:	69a3      	ldr	r3, [r4, #24]
 801f91a:	b11b      	cbz	r3, 801f924 <__sinit+0x14>
 801f91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f920:	f7ff bff0 	b.w	801f904 <__sinit_lock_release>
 801f924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f928:	6523      	str	r3, [r4, #80]	; 0x50
 801f92a:	4b13      	ldr	r3, [pc, #76]	; (801f978 <__sinit+0x68>)
 801f92c:	4a13      	ldr	r2, [pc, #76]	; (801f97c <__sinit+0x6c>)
 801f92e:	681b      	ldr	r3, [r3, #0]
 801f930:	62a2      	str	r2, [r4, #40]	; 0x28
 801f932:	42a3      	cmp	r3, r4
 801f934:	bf04      	itt	eq
 801f936:	2301      	moveq	r3, #1
 801f938:	61a3      	streq	r3, [r4, #24]
 801f93a:	4620      	mov	r0, r4
 801f93c:	f000 f820 	bl	801f980 <__sfp>
 801f940:	6060      	str	r0, [r4, #4]
 801f942:	4620      	mov	r0, r4
 801f944:	f000 f81c 	bl	801f980 <__sfp>
 801f948:	60a0      	str	r0, [r4, #8]
 801f94a:	4620      	mov	r0, r4
 801f94c:	f000 f818 	bl	801f980 <__sfp>
 801f950:	2200      	movs	r2, #0
 801f952:	60e0      	str	r0, [r4, #12]
 801f954:	2104      	movs	r1, #4
 801f956:	6860      	ldr	r0, [r4, #4]
 801f958:	f7ff ff82 	bl	801f860 <std>
 801f95c:	68a0      	ldr	r0, [r4, #8]
 801f95e:	2201      	movs	r2, #1
 801f960:	2109      	movs	r1, #9
 801f962:	f7ff ff7d 	bl	801f860 <std>
 801f966:	68e0      	ldr	r0, [r4, #12]
 801f968:	2202      	movs	r2, #2
 801f96a:	2112      	movs	r1, #18
 801f96c:	f7ff ff78 	bl	801f860 <std>
 801f970:	2301      	movs	r3, #1
 801f972:	61a3      	str	r3, [r4, #24]
 801f974:	e7d2      	b.n	801f91c <__sinit+0xc>
 801f976:	bf00      	nop
 801f978:	080235f4 	.word	0x080235f4
 801f97c:	0801f8a9 	.word	0x0801f8a9

0801f980 <__sfp>:
 801f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f982:	4607      	mov	r7, r0
 801f984:	f7ff ffac 	bl	801f8e0 <__sfp_lock_acquire>
 801f988:	4b1e      	ldr	r3, [pc, #120]	; (801fa04 <__sfp+0x84>)
 801f98a:	681e      	ldr	r6, [r3, #0]
 801f98c:	69b3      	ldr	r3, [r6, #24]
 801f98e:	b913      	cbnz	r3, 801f996 <__sfp+0x16>
 801f990:	4630      	mov	r0, r6
 801f992:	f7ff ffbd 	bl	801f910 <__sinit>
 801f996:	3648      	adds	r6, #72	; 0x48
 801f998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f99c:	3b01      	subs	r3, #1
 801f99e:	d503      	bpl.n	801f9a8 <__sfp+0x28>
 801f9a0:	6833      	ldr	r3, [r6, #0]
 801f9a2:	b30b      	cbz	r3, 801f9e8 <__sfp+0x68>
 801f9a4:	6836      	ldr	r6, [r6, #0]
 801f9a6:	e7f7      	b.n	801f998 <__sfp+0x18>
 801f9a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f9ac:	b9d5      	cbnz	r5, 801f9e4 <__sfp+0x64>
 801f9ae:	4b16      	ldr	r3, [pc, #88]	; (801fa08 <__sfp+0x88>)
 801f9b0:	60e3      	str	r3, [r4, #12]
 801f9b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f9b6:	6665      	str	r5, [r4, #100]	; 0x64
 801f9b8:	f000 f86c 	bl	801fa94 <__retarget_lock_init_recursive>
 801f9bc:	f7ff ff96 	bl	801f8ec <__sfp_lock_release>
 801f9c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f9c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f9c8:	6025      	str	r5, [r4, #0]
 801f9ca:	61a5      	str	r5, [r4, #24]
 801f9cc:	2208      	movs	r2, #8
 801f9ce:	4629      	mov	r1, r5
 801f9d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f9d4:	f000 f890 	bl	801faf8 <memset>
 801f9d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f9dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f9e0:	4620      	mov	r0, r4
 801f9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f9e4:	3468      	adds	r4, #104	; 0x68
 801f9e6:	e7d9      	b.n	801f99c <__sfp+0x1c>
 801f9e8:	2104      	movs	r1, #4
 801f9ea:	4638      	mov	r0, r7
 801f9ec:	f7ff ff62 	bl	801f8b4 <__sfmoreglue>
 801f9f0:	4604      	mov	r4, r0
 801f9f2:	6030      	str	r0, [r6, #0]
 801f9f4:	2800      	cmp	r0, #0
 801f9f6:	d1d5      	bne.n	801f9a4 <__sfp+0x24>
 801f9f8:	f7ff ff78 	bl	801f8ec <__sfp_lock_release>
 801f9fc:	230c      	movs	r3, #12
 801f9fe:	603b      	str	r3, [r7, #0]
 801fa00:	e7ee      	b.n	801f9e0 <__sfp+0x60>
 801fa02:	bf00      	nop
 801fa04:	080235f4 	.word	0x080235f4
 801fa08:	ffff0001 	.word	0xffff0001

0801fa0c <_fwalk_reent>:
 801fa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fa10:	4606      	mov	r6, r0
 801fa12:	4688      	mov	r8, r1
 801fa14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801fa18:	2700      	movs	r7, #0
 801fa1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801fa1e:	f1b9 0901 	subs.w	r9, r9, #1
 801fa22:	d505      	bpl.n	801fa30 <_fwalk_reent+0x24>
 801fa24:	6824      	ldr	r4, [r4, #0]
 801fa26:	2c00      	cmp	r4, #0
 801fa28:	d1f7      	bne.n	801fa1a <_fwalk_reent+0xe>
 801fa2a:	4638      	mov	r0, r7
 801fa2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fa30:	89ab      	ldrh	r3, [r5, #12]
 801fa32:	2b01      	cmp	r3, #1
 801fa34:	d907      	bls.n	801fa46 <_fwalk_reent+0x3a>
 801fa36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801fa3a:	3301      	adds	r3, #1
 801fa3c:	d003      	beq.n	801fa46 <_fwalk_reent+0x3a>
 801fa3e:	4629      	mov	r1, r5
 801fa40:	4630      	mov	r0, r6
 801fa42:	47c0      	blx	r8
 801fa44:	4307      	orrs	r7, r0
 801fa46:	3568      	adds	r5, #104	; 0x68
 801fa48:	e7e9      	b.n	801fa1e <_fwalk_reent+0x12>
	...

0801fa4c <__libc_init_array>:
 801fa4c:	b570      	push	{r4, r5, r6, lr}
 801fa4e:	4d0d      	ldr	r5, [pc, #52]	; (801fa84 <__libc_init_array+0x38>)
 801fa50:	4c0d      	ldr	r4, [pc, #52]	; (801fa88 <__libc_init_array+0x3c>)
 801fa52:	1b64      	subs	r4, r4, r5
 801fa54:	10a4      	asrs	r4, r4, #2
 801fa56:	2600      	movs	r6, #0
 801fa58:	42a6      	cmp	r6, r4
 801fa5a:	d109      	bne.n	801fa70 <__libc_init_array+0x24>
 801fa5c:	4d0b      	ldr	r5, [pc, #44]	; (801fa8c <__libc_init_array+0x40>)
 801fa5e:	4c0c      	ldr	r4, [pc, #48]	; (801fa90 <__libc_init_array+0x44>)
 801fa60:	f000 fede 	bl	8020820 <_init>
 801fa64:	1b64      	subs	r4, r4, r5
 801fa66:	10a4      	asrs	r4, r4, #2
 801fa68:	2600      	movs	r6, #0
 801fa6a:	42a6      	cmp	r6, r4
 801fa6c:	d105      	bne.n	801fa7a <__libc_init_array+0x2e>
 801fa6e:	bd70      	pop	{r4, r5, r6, pc}
 801fa70:	f855 3b04 	ldr.w	r3, [r5], #4
 801fa74:	4798      	blx	r3
 801fa76:	3601      	adds	r6, #1
 801fa78:	e7ee      	b.n	801fa58 <__libc_init_array+0xc>
 801fa7a:	f855 3b04 	ldr.w	r3, [r5], #4
 801fa7e:	4798      	blx	r3
 801fa80:	3601      	adds	r6, #1
 801fa82:	e7f2      	b.n	801fa6a <__libc_init_array+0x1e>
 801fa84:	080236e4 	.word	0x080236e4
 801fa88:	080236e4 	.word	0x080236e4
 801fa8c:	080236e4 	.word	0x080236e4
 801fa90:	080236e8 	.word	0x080236e8

0801fa94 <__retarget_lock_init_recursive>:
 801fa94:	4770      	bx	lr

0801fa96 <__retarget_lock_acquire_recursive>:
 801fa96:	4770      	bx	lr

0801fa98 <__retarget_lock_release_recursive>:
 801fa98:	4770      	bx	lr
	...

0801fa9c <malloc>:
 801fa9c:	4b02      	ldr	r3, [pc, #8]	; (801faa8 <malloc+0xc>)
 801fa9e:	4601      	mov	r1, r0
 801faa0:	6818      	ldr	r0, [r3, #0]
 801faa2:	f000 b89d 	b.w	801fbe0 <_malloc_r>
 801faa6:	bf00      	nop
 801faa8:	20000050 	.word	0x20000050

0801faac <free>:
 801faac:	4b02      	ldr	r3, [pc, #8]	; (801fab8 <free+0xc>)
 801faae:	4601      	mov	r1, r0
 801fab0:	6818      	ldr	r0, [r3, #0]
 801fab2:	f000 b829 	b.w	801fb08 <_free_r>
 801fab6:	bf00      	nop
 801fab8:	20000050 	.word	0x20000050

0801fabc <memcmp>:
 801fabc:	b510      	push	{r4, lr}
 801fabe:	3901      	subs	r1, #1
 801fac0:	4402      	add	r2, r0
 801fac2:	4290      	cmp	r0, r2
 801fac4:	d101      	bne.n	801faca <memcmp+0xe>
 801fac6:	2000      	movs	r0, #0
 801fac8:	e005      	b.n	801fad6 <memcmp+0x1a>
 801faca:	7803      	ldrb	r3, [r0, #0]
 801facc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801fad0:	42a3      	cmp	r3, r4
 801fad2:	d001      	beq.n	801fad8 <memcmp+0x1c>
 801fad4:	1b18      	subs	r0, r3, r4
 801fad6:	bd10      	pop	{r4, pc}
 801fad8:	3001      	adds	r0, #1
 801fada:	e7f2      	b.n	801fac2 <memcmp+0x6>

0801fadc <memcpy>:
 801fadc:	440a      	add	r2, r1
 801fade:	4291      	cmp	r1, r2
 801fae0:	f100 33ff 	add.w	r3, r0, #4294967295
 801fae4:	d100      	bne.n	801fae8 <memcpy+0xc>
 801fae6:	4770      	bx	lr
 801fae8:	b510      	push	{r4, lr}
 801faea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801faee:	f803 4f01 	strb.w	r4, [r3, #1]!
 801faf2:	4291      	cmp	r1, r2
 801faf4:	d1f9      	bne.n	801faea <memcpy+0xe>
 801faf6:	bd10      	pop	{r4, pc}

0801faf8 <memset>:
 801faf8:	4402      	add	r2, r0
 801fafa:	4603      	mov	r3, r0
 801fafc:	4293      	cmp	r3, r2
 801fafe:	d100      	bne.n	801fb02 <memset+0xa>
 801fb00:	4770      	bx	lr
 801fb02:	f803 1b01 	strb.w	r1, [r3], #1
 801fb06:	e7f9      	b.n	801fafc <memset+0x4>

0801fb08 <_free_r>:
 801fb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fb0a:	2900      	cmp	r1, #0
 801fb0c:	d044      	beq.n	801fb98 <_free_r+0x90>
 801fb0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fb12:	9001      	str	r0, [sp, #4]
 801fb14:	2b00      	cmp	r3, #0
 801fb16:	f1a1 0404 	sub.w	r4, r1, #4
 801fb1a:	bfb8      	it	lt
 801fb1c:	18e4      	addlt	r4, r4, r3
 801fb1e:	f000 f9e1 	bl	801fee4 <__malloc_lock>
 801fb22:	4a1e      	ldr	r2, [pc, #120]	; (801fb9c <_free_r+0x94>)
 801fb24:	9801      	ldr	r0, [sp, #4]
 801fb26:	6813      	ldr	r3, [r2, #0]
 801fb28:	b933      	cbnz	r3, 801fb38 <_free_r+0x30>
 801fb2a:	6063      	str	r3, [r4, #4]
 801fb2c:	6014      	str	r4, [r2, #0]
 801fb2e:	b003      	add	sp, #12
 801fb30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fb34:	f000 b9dc 	b.w	801fef0 <__malloc_unlock>
 801fb38:	42a3      	cmp	r3, r4
 801fb3a:	d908      	bls.n	801fb4e <_free_r+0x46>
 801fb3c:	6825      	ldr	r5, [r4, #0]
 801fb3e:	1961      	adds	r1, r4, r5
 801fb40:	428b      	cmp	r3, r1
 801fb42:	bf01      	itttt	eq
 801fb44:	6819      	ldreq	r1, [r3, #0]
 801fb46:	685b      	ldreq	r3, [r3, #4]
 801fb48:	1949      	addeq	r1, r1, r5
 801fb4a:	6021      	streq	r1, [r4, #0]
 801fb4c:	e7ed      	b.n	801fb2a <_free_r+0x22>
 801fb4e:	461a      	mov	r2, r3
 801fb50:	685b      	ldr	r3, [r3, #4]
 801fb52:	b10b      	cbz	r3, 801fb58 <_free_r+0x50>
 801fb54:	42a3      	cmp	r3, r4
 801fb56:	d9fa      	bls.n	801fb4e <_free_r+0x46>
 801fb58:	6811      	ldr	r1, [r2, #0]
 801fb5a:	1855      	adds	r5, r2, r1
 801fb5c:	42a5      	cmp	r5, r4
 801fb5e:	d10b      	bne.n	801fb78 <_free_r+0x70>
 801fb60:	6824      	ldr	r4, [r4, #0]
 801fb62:	4421      	add	r1, r4
 801fb64:	1854      	adds	r4, r2, r1
 801fb66:	42a3      	cmp	r3, r4
 801fb68:	6011      	str	r1, [r2, #0]
 801fb6a:	d1e0      	bne.n	801fb2e <_free_r+0x26>
 801fb6c:	681c      	ldr	r4, [r3, #0]
 801fb6e:	685b      	ldr	r3, [r3, #4]
 801fb70:	6053      	str	r3, [r2, #4]
 801fb72:	4421      	add	r1, r4
 801fb74:	6011      	str	r1, [r2, #0]
 801fb76:	e7da      	b.n	801fb2e <_free_r+0x26>
 801fb78:	d902      	bls.n	801fb80 <_free_r+0x78>
 801fb7a:	230c      	movs	r3, #12
 801fb7c:	6003      	str	r3, [r0, #0]
 801fb7e:	e7d6      	b.n	801fb2e <_free_r+0x26>
 801fb80:	6825      	ldr	r5, [r4, #0]
 801fb82:	1961      	adds	r1, r4, r5
 801fb84:	428b      	cmp	r3, r1
 801fb86:	bf04      	itt	eq
 801fb88:	6819      	ldreq	r1, [r3, #0]
 801fb8a:	685b      	ldreq	r3, [r3, #4]
 801fb8c:	6063      	str	r3, [r4, #4]
 801fb8e:	bf04      	itt	eq
 801fb90:	1949      	addeq	r1, r1, r5
 801fb92:	6021      	streq	r1, [r4, #0]
 801fb94:	6054      	str	r4, [r2, #4]
 801fb96:	e7ca      	b.n	801fb2e <_free_r+0x26>
 801fb98:	b003      	add	sp, #12
 801fb9a:	bd30      	pop	{r4, r5, pc}
 801fb9c:	200118d4 	.word	0x200118d4

0801fba0 <sbrk_aligned>:
 801fba0:	b570      	push	{r4, r5, r6, lr}
 801fba2:	4e0e      	ldr	r6, [pc, #56]	; (801fbdc <sbrk_aligned+0x3c>)
 801fba4:	460c      	mov	r4, r1
 801fba6:	6831      	ldr	r1, [r6, #0]
 801fba8:	4605      	mov	r5, r0
 801fbaa:	b911      	cbnz	r1, 801fbb2 <sbrk_aligned+0x12>
 801fbac:	f000 f8e2 	bl	801fd74 <_sbrk_r>
 801fbb0:	6030      	str	r0, [r6, #0]
 801fbb2:	4621      	mov	r1, r4
 801fbb4:	4628      	mov	r0, r5
 801fbb6:	f000 f8dd 	bl	801fd74 <_sbrk_r>
 801fbba:	1c43      	adds	r3, r0, #1
 801fbbc:	d00a      	beq.n	801fbd4 <sbrk_aligned+0x34>
 801fbbe:	1cc4      	adds	r4, r0, #3
 801fbc0:	f024 0403 	bic.w	r4, r4, #3
 801fbc4:	42a0      	cmp	r0, r4
 801fbc6:	d007      	beq.n	801fbd8 <sbrk_aligned+0x38>
 801fbc8:	1a21      	subs	r1, r4, r0
 801fbca:	4628      	mov	r0, r5
 801fbcc:	f000 f8d2 	bl	801fd74 <_sbrk_r>
 801fbd0:	3001      	adds	r0, #1
 801fbd2:	d101      	bne.n	801fbd8 <sbrk_aligned+0x38>
 801fbd4:	f04f 34ff 	mov.w	r4, #4294967295
 801fbd8:	4620      	mov	r0, r4
 801fbda:	bd70      	pop	{r4, r5, r6, pc}
 801fbdc:	200118d8 	.word	0x200118d8

0801fbe0 <_malloc_r>:
 801fbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fbe4:	1ccd      	adds	r5, r1, #3
 801fbe6:	f025 0503 	bic.w	r5, r5, #3
 801fbea:	3508      	adds	r5, #8
 801fbec:	2d0c      	cmp	r5, #12
 801fbee:	bf38      	it	cc
 801fbf0:	250c      	movcc	r5, #12
 801fbf2:	2d00      	cmp	r5, #0
 801fbf4:	4607      	mov	r7, r0
 801fbf6:	db01      	blt.n	801fbfc <_malloc_r+0x1c>
 801fbf8:	42a9      	cmp	r1, r5
 801fbfa:	d905      	bls.n	801fc08 <_malloc_r+0x28>
 801fbfc:	230c      	movs	r3, #12
 801fbfe:	603b      	str	r3, [r7, #0]
 801fc00:	2600      	movs	r6, #0
 801fc02:	4630      	mov	r0, r6
 801fc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc08:	4e2e      	ldr	r6, [pc, #184]	; (801fcc4 <_malloc_r+0xe4>)
 801fc0a:	f000 f96b 	bl	801fee4 <__malloc_lock>
 801fc0e:	6833      	ldr	r3, [r6, #0]
 801fc10:	461c      	mov	r4, r3
 801fc12:	bb34      	cbnz	r4, 801fc62 <_malloc_r+0x82>
 801fc14:	4629      	mov	r1, r5
 801fc16:	4638      	mov	r0, r7
 801fc18:	f7ff ffc2 	bl	801fba0 <sbrk_aligned>
 801fc1c:	1c43      	adds	r3, r0, #1
 801fc1e:	4604      	mov	r4, r0
 801fc20:	d14d      	bne.n	801fcbe <_malloc_r+0xde>
 801fc22:	6834      	ldr	r4, [r6, #0]
 801fc24:	4626      	mov	r6, r4
 801fc26:	2e00      	cmp	r6, #0
 801fc28:	d140      	bne.n	801fcac <_malloc_r+0xcc>
 801fc2a:	6823      	ldr	r3, [r4, #0]
 801fc2c:	4631      	mov	r1, r6
 801fc2e:	4638      	mov	r0, r7
 801fc30:	eb04 0803 	add.w	r8, r4, r3
 801fc34:	f000 f89e 	bl	801fd74 <_sbrk_r>
 801fc38:	4580      	cmp	r8, r0
 801fc3a:	d13a      	bne.n	801fcb2 <_malloc_r+0xd2>
 801fc3c:	6821      	ldr	r1, [r4, #0]
 801fc3e:	3503      	adds	r5, #3
 801fc40:	1a6d      	subs	r5, r5, r1
 801fc42:	f025 0503 	bic.w	r5, r5, #3
 801fc46:	3508      	adds	r5, #8
 801fc48:	2d0c      	cmp	r5, #12
 801fc4a:	bf38      	it	cc
 801fc4c:	250c      	movcc	r5, #12
 801fc4e:	4629      	mov	r1, r5
 801fc50:	4638      	mov	r0, r7
 801fc52:	f7ff ffa5 	bl	801fba0 <sbrk_aligned>
 801fc56:	3001      	adds	r0, #1
 801fc58:	d02b      	beq.n	801fcb2 <_malloc_r+0xd2>
 801fc5a:	6823      	ldr	r3, [r4, #0]
 801fc5c:	442b      	add	r3, r5
 801fc5e:	6023      	str	r3, [r4, #0]
 801fc60:	e00e      	b.n	801fc80 <_malloc_r+0xa0>
 801fc62:	6822      	ldr	r2, [r4, #0]
 801fc64:	1b52      	subs	r2, r2, r5
 801fc66:	d41e      	bmi.n	801fca6 <_malloc_r+0xc6>
 801fc68:	2a0b      	cmp	r2, #11
 801fc6a:	d916      	bls.n	801fc9a <_malloc_r+0xba>
 801fc6c:	1961      	adds	r1, r4, r5
 801fc6e:	42a3      	cmp	r3, r4
 801fc70:	6025      	str	r5, [r4, #0]
 801fc72:	bf18      	it	ne
 801fc74:	6059      	strne	r1, [r3, #4]
 801fc76:	6863      	ldr	r3, [r4, #4]
 801fc78:	bf08      	it	eq
 801fc7a:	6031      	streq	r1, [r6, #0]
 801fc7c:	5162      	str	r2, [r4, r5]
 801fc7e:	604b      	str	r3, [r1, #4]
 801fc80:	4638      	mov	r0, r7
 801fc82:	f104 060b 	add.w	r6, r4, #11
 801fc86:	f000 f933 	bl	801fef0 <__malloc_unlock>
 801fc8a:	f026 0607 	bic.w	r6, r6, #7
 801fc8e:	1d23      	adds	r3, r4, #4
 801fc90:	1af2      	subs	r2, r6, r3
 801fc92:	d0b6      	beq.n	801fc02 <_malloc_r+0x22>
 801fc94:	1b9b      	subs	r3, r3, r6
 801fc96:	50a3      	str	r3, [r4, r2]
 801fc98:	e7b3      	b.n	801fc02 <_malloc_r+0x22>
 801fc9a:	6862      	ldr	r2, [r4, #4]
 801fc9c:	42a3      	cmp	r3, r4
 801fc9e:	bf0c      	ite	eq
 801fca0:	6032      	streq	r2, [r6, #0]
 801fca2:	605a      	strne	r2, [r3, #4]
 801fca4:	e7ec      	b.n	801fc80 <_malloc_r+0xa0>
 801fca6:	4623      	mov	r3, r4
 801fca8:	6864      	ldr	r4, [r4, #4]
 801fcaa:	e7b2      	b.n	801fc12 <_malloc_r+0x32>
 801fcac:	4634      	mov	r4, r6
 801fcae:	6876      	ldr	r6, [r6, #4]
 801fcb0:	e7b9      	b.n	801fc26 <_malloc_r+0x46>
 801fcb2:	230c      	movs	r3, #12
 801fcb4:	603b      	str	r3, [r7, #0]
 801fcb6:	4638      	mov	r0, r7
 801fcb8:	f000 f91a 	bl	801fef0 <__malloc_unlock>
 801fcbc:	e7a1      	b.n	801fc02 <_malloc_r+0x22>
 801fcbe:	6025      	str	r5, [r4, #0]
 801fcc0:	e7de      	b.n	801fc80 <_malloc_r+0xa0>
 801fcc2:	bf00      	nop
 801fcc4:	200118d4 	.word	0x200118d4

0801fcc8 <iprintf>:
 801fcc8:	b40f      	push	{r0, r1, r2, r3}
 801fcca:	4b0a      	ldr	r3, [pc, #40]	; (801fcf4 <iprintf+0x2c>)
 801fccc:	b513      	push	{r0, r1, r4, lr}
 801fcce:	681c      	ldr	r4, [r3, #0]
 801fcd0:	b124      	cbz	r4, 801fcdc <iprintf+0x14>
 801fcd2:	69a3      	ldr	r3, [r4, #24]
 801fcd4:	b913      	cbnz	r3, 801fcdc <iprintf+0x14>
 801fcd6:	4620      	mov	r0, r4
 801fcd8:	f7ff fe1a 	bl	801f910 <__sinit>
 801fcdc:	ab05      	add	r3, sp, #20
 801fcde:	9a04      	ldr	r2, [sp, #16]
 801fce0:	68a1      	ldr	r1, [r4, #8]
 801fce2:	9301      	str	r3, [sp, #4]
 801fce4:	4620      	mov	r0, r4
 801fce6:	f000 f933 	bl	801ff50 <_vfiprintf_r>
 801fcea:	b002      	add	sp, #8
 801fcec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fcf0:	b004      	add	sp, #16
 801fcf2:	4770      	bx	lr
 801fcf4:	20000050 	.word	0x20000050

0801fcf8 <rand>:
 801fcf8:	4b16      	ldr	r3, [pc, #88]	; (801fd54 <rand+0x5c>)
 801fcfa:	b510      	push	{r4, lr}
 801fcfc:	681c      	ldr	r4, [r3, #0]
 801fcfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801fd00:	b9b3      	cbnz	r3, 801fd30 <rand+0x38>
 801fd02:	2018      	movs	r0, #24
 801fd04:	f7ff feca 	bl	801fa9c <malloc>
 801fd08:	63a0      	str	r0, [r4, #56]	; 0x38
 801fd0a:	b928      	cbnz	r0, 801fd18 <rand+0x20>
 801fd0c:	4602      	mov	r2, r0
 801fd0e:	4b12      	ldr	r3, [pc, #72]	; (801fd58 <rand+0x60>)
 801fd10:	4812      	ldr	r0, [pc, #72]	; (801fd5c <rand+0x64>)
 801fd12:	214e      	movs	r1, #78	; 0x4e
 801fd14:	f000 f894 	bl	801fe40 <__assert_func>
 801fd18:	4a11      	ldr	r2, [pc, #68]	; (801fd60 <rand+0x68>)
 801fd1a:	4b12      	ldr	r3, [pc, #72]	; (801fd64 <rand+0x6c>)
 801fd1c:	e9c0 2300 	strd	r2, r3, [r0]
 801fd20:	4b11      	ldr	r3, [pc, #68]	; (801fd68 <rand+0x70>)
 801fd22:	6083      	str	r3, [r0, #8]
 801fd24:	230b      	movs	r3, #11
 801fd26:	8183      	strh	r3, [r0, #12]
 801fd28:	2201      	movs	r2, #1
 801fd2a:	2300      	movs	r3, #0
 801fd2c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801fd30:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801fd32:	4a0e      	ldr	r2, [pc, #56]	; (801fd6c <rand+0x74>)
 801fd34:	6920      	ldr	r0, [r4, #16]
 801fd36:	6963      	ldr	r3, [r4, #20]
 801fd38:	490d      	ldr	r1, [pc, #52]	; (801fd70 <rand+0x78>)
 801fd3a:	4342      	muls	r2, r0
 801fd3c:	fb01 2203 	mla	r2, r1, r3, r2
 801fd40:	fba0 0101 	umull	r0, r1, r0, r1
 801fd44:	1c43      	adds	r3, r0, #1
 801fd46:	eb42 0001 	adc.w	r0, r2, r1
 801fd4a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801fd4e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801fd52:	bd10      	pop	{r4, pc}
 801fd54:	20000050 	.word	0x20000050
 801fd58:	080235f8 	.word	0x080235f8
 801fd5c:	0802360f 	.word	0x0802360f
 801fd60:	abcd330e 	.word	0xabcd330e
 801fd64:	e66d1234 	.word	0xe66d1234
 801fd68:	0005deec 	.word	0x0005deec
 801fd6c:	5851f42d 	.word	0x5851f42d
 801fd70:	4c957f2d 	.word	0x4c957f2d

0801fd74 <_sbrk_r>:
 801fd74:	b538      	push	{r3, r4, r5, lr}
 801fd76:	4d06      	ldr	r5, [pc, #24]	; (801fd90 <_sbrk_r+0x1c>)
 801fd78:	2300      	movs	r3, #0
 801fd7a:	4604      	mov	r4, r0
 801fd7c:	4608      	mov	r0, r1
 801fd7e:	602b      	str	r3, [r5, #0]
 801fd80:	f7e3 f83c 	bl	8002dfc <_sbrk>
 801fd84:	1c43      	adds	r3, r0, #1
 801fd86:	d102      	bne.n	801fd8e <_sbrk_r+0x1a>
 801fd88:	682b      	ldr	r3, [r5, #0]
 801fd8a:	b103      	cbz	r3, 801fd8e <_sbrk_r+0x1a>
 801fd8c:	6023      	str	r3, [r4, #0]
 801fd8e:	bd38      	pop	{r3, r4, r5, pc}
 801fd90:	200111dc 	.word	0x200111dc

0801fd94 <__sread>:
 801fd94:	b510      	push	{r4, lr}
 801fd96:	460c      	mov	r4, r1
 801fd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fd9c:	f000 fb9c 	bl	80204d8 <_read_r>
 801fda0:	2800      	cmp	r0, #0
 801fda2:	bfab      	itete	ge
 801fda4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fda6:	89a3      	ldrhlt	r3, [r4, #12]
 801fda8:	181b      	addge	r3, r3, r0
 801fdaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fdae:	bfac      	ite	ge
 801fdb0:	6563      	strge	r3, [r4, #84]	; 0x54
 801fdb2:	81a3      	strhlt	r3, [r4, #12]
 801fdb4:	bd10      	pop	{r4, pc}

0801fdb6 <__swrite>:
 801fdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdba:	461f      	mov	r7, r3
 801fdbc:	898b      	ldrh	r3, [r1, #12]
 801fdbe:	05db      	lsls	r3, r3, #23
 801fdc0:	4605      	mov	r5, r0
 801fdc2:	460c      	mov	r4, r1
 801fdc4:	4616      	mov	r6, r2
 801fdc6:	d505      	bpl.n	801fdd4 <__swrite+0x1e>
 801fdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdcc:	2302      	movs	r3, #2
 801fdce:	2200      	movs	r2, #0
 801fdd0:	f000 f876 	bl	801fec0 <_lseek_r>
 801fdd4:	89a3      	ldrh	r3, [r4, #12]
 801fdd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fdda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fdde:	81a3      	strh	r3, [r4, #12]
 801fde0:	4632      	mov	r2, r6
 801fde2:	463b      	mov	r3, r7
 801fde4:	4628      	mov	r0, r5
 801fde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fdea:	f000 b817 	b.w	801fe1c <_write_r>

0801fdee <__sseek>:
 801fdee:	b510      	push	{r4, lr}
 801fdf0:	460c      	mov	r4, r1
 801fdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdf6:	f000 f863 	bl	801fec0 <_lseek_r>
 801fdfa:	1c43      	adds	r3, r0, #1
 801fdfc:	89a3      	ldrh	r3, [r4, #12]
 801fdfe:	bf15      	itete	ne
 801fe00:	6560      	strne	r0, [r4, #84]	; 0x54
 801fe02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fe06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fe0a:	81a3      	strheq	r3, [r4, #12]
 801fe0c:	bf18      	it	ne
 801fe0e:	81a3      	strhne	r3, [r4, #12]
 801fe10:	bd10      	pop	{r4, pc}

0801fe12 <__sclose>:
 801fe12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fe16:	f000 b831 	b.w	801fe7c <_close_r>
	...

0801fe1c <_write_r>:
 801fe1c:	b538      	push	{r3, r4, r5, lr}
 801fe1e:	4d07      	ldr	r5, [pc, #28]	; (801fe3c <_write_r+0x20>)
 801fe20:	4604      	mov	r4, r0
 801fe22:	4608      	mov	r0, r1
 801fe24:	4611      	mov	r1, r2
 801fe26:	2200      	movs	r2, #0
 801fe28:	602a      	str	r2, [r5, #0]
 801fe2a:	461a      	mov	r2, r3
 801fe2c:	f7e1 fbce 	bl	80015cc <_write>
 801fe30:	1c43      	adds	r3, r0, #1
 801fe32:	d102      	bne.n	801fe3a <_write_r+0x1e>
 801fe34:	682b      	ldr	r3, [r5, #0]
 801fe36:	b103      	cbz	r3, 801fe3a <_write_r+0x1e>
 801fe38:	6023      	str	r3, [r4, #0]
 801fe3a:	bd38      	pop	{r3, r4, r5, pc}
 801fe3c:	200111dc 	.word	0x200111dc

0801fe40 <__assert_func>:
 801fe40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801fe42:	4614      	mov	r4, r2
 801fe44:	461a      	mov	r2, r3
 801fe46:	4b09      	ldr	r3, [pc, #36]	; (801fe6c <__assert_func+0x2c>)
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	4605      	mov	r5, r0
 801fe4c:	68d8      	ldr	r0, [r3, #12]
 801fe4e:	b14c      	cbz	r4, 801fe64 <__assert_func+0x24>
 801fe50:	4b07      	ldr	r3, [pc, #28]	; (801fe70 <__assert_func+0x30>)
 801fe52:	9100      	str	r1, [sp, #0]
 801fe54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801fe58:	4906      	ldr	r1, [pc, #24]	; (801fe74 <__assert_func+0x34>)
 801fe5a:	462b      	mov	r3, r5
 801fe5c:	f000 f81e 	bl	801fe9c <fiprintf>
 801fe60:	f000 fc0c 	bl	802067c <abort>
 801fe64:	4b04      	ldr	r3, [pc, #16]	; (801fe78 <__assert_func+0x38>)
 801fe66:	461c      	mov	r4, r3
 801fe68:	e7f3      	b.n	801fe52 <__assert_func+0x12>
 801fe6a:	bf00      	nop
 801fe6c:	20000050 	.word	0x20000050
 801fe70:	0802366a 	.word	0x0802366a
 801fe74:	08023677 	.word	0x08023677
 801fe78:	080236a5 	.word	0x080236a5

0801fe7c <_close_r>:
 801fe7c:	b538      	push	{r3, r4, r5, lr}
 801fe7e:	4d06      	ldr	r5, [pc, #24]	; (801fe98 <_close_r+0x1c>)
 801fe80:	2300      	movs	r3, #0
 801fe82:	4604      	mov	r4, r0
 801fe84:	4608      	mov	r0, r1
 801fe86:	602b      	str	r3, [r5, #0]
 801fe88:	f7e2 ff83 	bl	8002d92 <_close>
 801fe8c:	1c43      	adds	r3, r0, #1
 801fe8e:	d102      	bne.n	801fe96 <_close_r+0x1a>
 801fe90:	682b      	ldr	r3, [r5, #0]
 801fe92:	b103      	cbz	r3, 801fe96 <_close_r+0x1a>
 801fe94:	6023      	str	r3, [r4, #0]
 801fe96:	bd38      	pop	{r3, r4, r5, pc}
 801fe98:	200111dc 	.word	0x200111dc

0801fe9c <fiprintf>:
 801fe9c:	b40e      	push	{r1, r2, r3}
 801fe9e:	b503      	push	{r0, r1, lr}
 801fea0:	4601      	mov	r1, r0
 801fea2:	ab03      	add	r3, sp, #12
 801fea4:	4805      	ldr	r0, [pc, #20]	; (801febc <fiprintf+0x20>)
 801fea6:	f853 2b04 	ldr.w	r2, [r3], #4
 801feaa:	6800      	ldr	r0, [r0, #0]
 801feac:	9301      	str	r3, [sp, #4]
 801feae:	f000 f84f 	bl	801ff50 <_vfiprintf_r>
 801feb2:	b002      	add	sp, #8
 801feb4:	f85d eb04 	ldr.w	lr, [sp], #4
 801feb8:	b003      	add	sp, #12
 801feba:	4770      	bx	lr
 801febc:	20000050 	.word	0x20000050

0801fec0 <_lseek_r>:
 801fec0:	b538      	push	{r3, r4, r5, lr}
 801fec2:	4d07      	ldr	r5, [pc, #28]	; (801fee0 <_lseek_r+0x20>)
 801fec4:	4604      	mov	r4, r0
 801fec6:	4608      	mov	r0, r1
 801fec8:	4611      	mov	r1, r2
 801feca:	2200      	movs	r2, #0
 801fecc:	602a      	str	r2, [r5, #0]
 801fece:	461a      	mov	r2, r3
 801fed0:	f7e2 ff86 	bl	8002de0 <_lseek>
 801fed4:	1c43      	adds	r3, r0, #1
 801fed6:	d102      	bne.n	801fede <_lseek_r+0x1e>
 801fed8:	682b      	ldr	r3, [r5, #0]
 801feda:	b103      	cbz	r3, 801fede <_lseek_r+0x1e>
 801fedc:	6023      	str	r3, [r4, #0]
 801fede:	bd38      	pop	{r3, r4, r5, pc}
 801fee0:	200111dc 	.word	0x200111dc

0801fee4 <__malloc_lock>:
 801fee4:	4801      	ldr	r0, [pc, #4]	; (801feec <__malloc_lock+0x8>)
 801fee6:	f7ff bdd6 	b.w	801fa96 <__retarget_lock_acquire_recursive>
 801feea:	bf00      	nop
 801feec:	200118d0 	.word	0x200118d0

0801fef0 <__malloc_unlock>:
 801fef0:	4801      	ldr	r0, [pc, #4]	; (801fef8 <__malloc_unlock+0x8>)
 801fef2:	f7ff bdd1 	b.w	801fa98 <__retarget_lock_release_recursive>
 801fef6:	bf00      	nop
 801fef8:	200118d0 	.word	0x200118d0

0801fefc <__sfputc_r>:
 801fefc:	6893      	ldr	r3, [r2, #8]
 801fefe:	3b01      	subs	r3, #1
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	b410      	push	{r4}
 801ff04:	6093      	str	r3, [r2, #8]
 801ff06:	da08      	bge.n	801ff1a <__sfputc_r+0x1e>
 801ff08:	6994      	ldr	r4, [r2, #24]
 801ff0a:	42a3      	cmp	r3, r4
 801ff0c:	db01      	blt.n	801ff12 <__sfputc_r+0x16>
 801ff0e:	290a      	cmp	r1, #10
 801ff10:	d103      	bne.n	801ff1a <__sfputc_r+0x1e>
 801ff12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ff16:	f000 baf1 	b.w	80204fc <__swbuf_r>
 801ff1a:	6813      	ldr	r3, [r2, #0]
 801ff1c:	1c58      	adds	r0, r3, #1
 801ff1e:	6010      	str	r0, [r2, #0]
 801ff20:	7019      	strb	r1, [r3, #0]
 801ff22:	4608      	mov	r0, r1
 801ff24:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ff28:	4770      	bx	lr

0801ff2a <__sfputs_r>:
 801ff2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff2c:	4606      	mov	r6, r0
 801ff2e:	460f      	mov	r7, r1
 801ff30:	4614      	mov	r4, r2
 801ff32:	18d5      	adds	r5, r2, r3
 801ff34:	42ac      	cmp	r4, r5
 801ff36:	d101      	bne.n	801ff3c <__sfputs_r+0x12>
 801ff38:	2000      	movs	r0, #0
 801ff3a:	e007      	b.n	801ff4c <__sfputs_r+0x22>
 801ff3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff40:	463a      	mov	r2, r7
 801ff42:	4630      	mov	r0, r6
 801ff44:	f7ff ffda 	bl	801fefc <__sfputc_r>
 801ff48:	1c43      	adds	r3, r0, #1
 801ff4a:	d1f3      	bne.n	801ff34 <__sfputs_r+0xa>
 801ff4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ff50 <_vfiprintf_r>:
 801ff50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff54:	460d      	mov	r5, r1
 801ff56:	b09d      	sub	sp, #116	; 0x74
 801ff58:	4614      	mov	r4, r2
 801ff5a:	4698      	mov	r8, r3
 801ff5c:	4606      	mov	r6, r0
 801ff5e:	b118      	cbz	r0, 801ff68 <_vfiprintf_r+0x18>
 801ff60:	6983      	ldr	r3, [r0, #24]
 801ff62:	b90b      	cbnz	r3, 801ff68 <_vfiprintf_r+0x18>
 801ff64:	f7ff fcd4 	bl	801f910 <__sinit>
 801ff68:	4b89      	ldr	r3, [pc, #548]	; (8020190 <_vfiprintf_r+0x240>)
 801ff6a:	429d      	cmp	r5, r3
 801ff6c:	d11b      	bne.n	801ffa6 <_vfiprintf_r+0x56>
 801ff6e:	6875      	ldr	r5, [r6, #4]
 801ff70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ff72:	07d9      	lsls	r1, r3, #31
 801ff74:	d405      	bmi.n	801ff82 <_vfiprintf_r+0x32>
 801ff76:	89ab      	ldrh	r3, [r5, #12]
 801ff78:	059a      	lsls	r2, r3, #22
 801ff7a:	d402      	bmi.n	801ff82 <_vfiprintf_r+0x32>
 801ff7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ff7e:	f7ff fd8a 	bl	801fa96 <__retarget_lock_acquire_recursive>
 801ff82:	89ab      	ldrh	r3, [r5, #12]
 801ff84:	071b      	lsls	r3, r3, #28
 801ff86:	d501      	bpl.n	801ff8c <_vfiprintf_r+0x3c>
 801ff88:	692b      	ldr	r3, [r5, #16]
 801ff8a:	b9eb      	cbnz	r3, 801ffc8 <_vfiprintf_r+0x78>
 801ff8c:	4629      	mov	r1, r5
 801ff8e:	4630      	mov	r0, r6
 801ff90:	f000 fb06 	bl	80205a0 <__swsetup_r>
 801ff94:	b1c0      	cbz	r0, 801ffc8 <_vfiprintf_r+0x78>
 801ff96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ff98:	07dc      	lsls	r4, r3, #31
 801ff9a:	d50e      	bpl.n	801ffba <_vfiprintf_r+0x6a>
 801ff9c:	f04f 30ff 	mov.w	r0, #4294967295
 801ffa0:	b01d      	add	sp, #116	; 0x74
 801ffa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffa6:	4b7b      	ldr	r3, [pc, #492]	; (8020194 <_vfiprintf_r+0x244>)
 801ffa8:	429d      	cmp	r5, r3
 801ffaa:	d101      	bne.n	801ffb0 <_vfiprintf_r+0x60>
 801ffac:	68b5      	ldr	r5, [r6, #8]
 801ffae:	e7df      	b.n	801ff70 <_vfiprintf_r+0x20>
 801ffb0:	4b79      	ldr	r3, [pc, #484]	; (8020198 <_vfiprintf_r+0x248>)
 801ffb2:	429d      	cmp	r5, r3
 801ffb4:	bf08      	it	eq
 801ffb6:	68f5      	ldreq	r5, [r6, #12]
 801ffb8:	e7da      	b.n	801ff70 <_vfiprintf_r+0x20>
 801ffba:	89ab      	ldrh	r3, [r5, #12]
 801ffbc:	0598      	lsls	r0, r3, #22
 801ffbe:	d4ed      	bmi.n	801ff9c <_vfiprintf_r+0x4c>
 801ffc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ffc2:	f7ff fd69 	bl	801fa98 <__retarget_lock_release_recursive>
 801ffc6:	e7e9      	b.n	801ff9c <_vfiprintf_r+0x4c>
 801ffc8:	2300      	movs	r3, #0
 801ffca:	9309      	str	r3, [sp, #36]	; 0x24
 801ffcc:	2320      	movs	r3, #32
 801ffce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ffd2:	f8cd 800c 	str.w	r8, [sp, #12]
 801ffd6:	2330      	movs	r3, #48	; 0x30
 801ffd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802019c <_vfiprintf_r+0x24c>
 801ffdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ffe0:	f04f 0901 	mov.w	r9, #1
 801ffe4:	4623      	mov	r3, r4
 801ffe6:	469a      	mov	sl, r3
 801ffe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ffec:	b10a      	cbz	r2, 801fff2 <_vfiprintf_r+0xa2>
 801ffee:	2a25      	cmp	r2, #37	; 0x25
 801fff0:	d1f9      	bne.n	801ffe6 <_vfiprintf_r+0x96>
 801fff2:	ebba 0b04 	subs.w	fp, sl, r4
 801fff6:	d00b      	beq.n	8020010 <_vfiprintf_r+0xc0>
 801fff8:	465b      	mov	r3, fp
 801fffa:	4622      	mov	r2, r4
 801fffc:	4629      	mov	r1, r5
 801fffe:	4630      	mov	r0, r6
 8020000:	f7ff ff93 	bl	801ff2a <__sfputs_r>
 8020004:	3001      	adds	r0, #1
 8020006:	f000 80aa 	beq.w	802015e <_vfiprintf_r+0x20e>
 802000a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802000c:	445a      	add	r2, fp
 802000e:	9209      	str	r2, [sp, #36]	; 0x24
 8020010:	f89a 3000 	ldrb.w	r3, [sl]
 8020014:	2b00      	cmp	r3, #0
 8020016:	f000 80a2 	beq.w	802015e <_vfiprintf_r+0x20e>
 802001a:	2300      	movs	r3, #0
 802001c:	f04f 32ff 	mov.w	r2, #4294967295
 8020020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020024:	f10a 0a01 	add.w	sl, sl, #1
 8020028:	9304      	str	r3, [sp, #16]
 802002a:	9307      	str	r3, [sp, #28]
 802002c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020030:	931a      	str	r3, [sp, #104]	; 0x68
 8020032:	4654      	mov	r4, sl
 8020034:	2205      	movs	r2, #5
 8020036:	f814 1b01 	ldrb.w	r1, [r4], #1
 802003a:	4858      	ldr	r0, [pc, #352]	; (802019c <_vfiprintf_r+0x24c>)
 802003c:	f7e0 f8e8 	bl	8000210 <memchr>
 8020040:	9a04      	ldr	r2, [sp, #16]
 8020042:	b9d8      	cbnz	r0, 802007c <_vfiprintf_r+0x12c>
 8020044:	06d1      	lsls	r1, r2, #27
 8020046:	bf44      	itt	mi
 8020048:	2320      	movmi	r3, #32
 802004a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802004e:	0713      	lsls	r3, r2, #28
 8020050:	bf44      	itt	mi
 8020052:	232b      	movmi	r3, #43	; 0x2b
 8020054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020058:	f89a 3000 	ldrb.w	r3, [sl]
 802005c:	2b2a      	cmp	r3, #42	; 0x2a
 802005e:	d015      	beq.n	802008c <_vfiprintf_r+0x13c>
 8020060:	9a07      	ldr	r2, [sp, #28]
 8020062:	4654      	mov	r4, sl
 8020064:	2000      	movs	r0, #0
 8020066:	f04f 0c0a 	mov.w	ip, #10
 802006a:	4621      	mov	r1, r4
 802006c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020070:	3b30      	subs	r3, #48	; 0x30
 8020072:	2b09      	cmp	r3, #9
 8020074:	d94e      	bls.n	8020114 <_vfiprintf_r+0x1c4>
 8020076:	b1b0      	cbz	r0, 80200a6 <_vfiprintf_r+0x156>
 8020078:	9207      	str	r2, [sp, #28]
 802007a:	e014      	b.n	80200a6 <_vfiprintf_r+0x156>
 802007c:	eba0 0308 	sub.w	r3, r0, r8
 8020080:	fa09 f303 	lsl.w	r3, r9, r3
 8020084:	4313      	orrs	r3, r2
 8020086:	9304      	str	r3, [sp, #16]
 8020088:	46a2      	mov	sl, r4
 802008a:	e7d2      	b.n	8020032 <_vfiprintf_r+0xe2>
 802008c:	9b03      	ldr	r3, [sp, #12]
 802008e:	1d19      	adds	r1, r3, #4
 8020090:	681b      	ldr	r3, [r3, #0]
 8020092:	9103      	str	r1, [sp, #12]
 8020094:	2b00      	cmp	r3, #0
 8020096:	bfbb      	ittet	lt
 8020098:	425b      	neglt	r3, r3
 802009a:	f042 0202 	orrlt.w	r2, r2, #2
 802009e:	9307      	strge	r3, [sp, #28]
 80200a0:	9307      	strlt	r3, [sp, #28]
 80200a2:	bfb8      	it	lt
 80200a4:	9204      	strlt	r2, [sp, #16]
 80200a6:	7823      	ldrb	r3, [r4, #0]
 80200a8:	2b2e      	cmp	r3, #46	; 0x2e
 80200aa:	d10c      	bne.n	80200c6 <_vfiprintf_r+0x176>
 80200ac:	7863      	ldrb	r3, [r4, #1]
 80200ae:	2b2a      	cmp	r3, #42	; 0x2a
 80200b0:	d135      	bne.n	802011e <_vfiprintf_r+0x1ce>
 80200b2:	9b03      	ldr	r3, [sp, #12]
 80200b4:	1d1a      	adds	r2, r3, #4
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	9203      	str	r2, [sp, #12]
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	bfb8      	it	lt
 80200be:	f04f 33ff 	movlt.w	r3, #4294967295
 80200c2:	3402      	adds	r4, #2
 80200c4:	9305      	str	r3, [sp, #20]
 80200c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80201ac <_vfiprintf_r+0x25c>
 80200ca:	7821      	ldrb	r1, [r4, #0]
 80200cc:	2203      	movs	r2, #3
 80200ce:	4650      	mov	r0, sl
 80200d0:	f7e0 f89e 	bl	8000210 <memchr>
 80200d4:	b140      	cbz	r0, 80200e8 <_vfiprintf_r+0x198>
 80200d6:	2340      	movs	r3, #64	; 0x40
 80200d8:	eba0 000a 	sub.w	r0, r0, sl
 80200dc:	fa03 f000 	lsl.w	r0, r3, r0
 80200e0:	9b04      	ldr	r3, [sp, #16]
 80200e2:	4303      	orrs	r3, r0
 80200e4:	3401      	adds	r4, #1
 80200e6:	9304      	str	r3, [sp, #16]
 80200e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80200ec:	482c      	ldr	r0, [pc, #176]	; (80201a0 <_vfiprintf_r+0x250>)
 80200ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80200f2:	2206      	movs	r2, #6
 80200f4:	f7e0 f88c 	bl	8000210 <memchr>
 80200f8:	2800      	cmp	r0, #0
 80200fa:	d03f      	beq.n	802017c <_vfiprintf_r+0x22c>
 80200fc:	4b29      	ldr	r3, [pc, #164]	; (80201a4 <_vfiprintf_r+0x254>)
 80200fe:	bb1b      	cbnz	r3, 8020148 <_vfiprintf_r+0x1f8>
 8020100:	9b03      	ldr	r3, [sp, #12]
 8020102:	3307      	adds	r3, #7
 8020104:	f023 0307 	bic.w	r3, r3, #7
 8020108:	3308      	adds	r3, #8
 802010a:	9303      	str	r3, [sp, #12]
 802010c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802010e:	443b      	add	r3, r7
 8020110:	9309      	str	r3, [sp, #36]	; 0x24
 8020112:	e767      	b.n	801ffe4 <_vfiprintf_r+0x94>
 8020114:	fb0c 3202 	mla	r2, ip, r2, r3
 8020118:	460c      	mov	r4, r1
 802011a:	2001      	movs	r0, #1
 802011c:	e7a5      	b.n	802006a <_vfiprintf_r+0x11a>
 802011e:	2300      	movs	r3, #0
 8020120:	3401      	adds	r4, #1
 8020122:	9305      	str	r3, [sp, #20]
 8020124:	4619      	mov	r1, r3
 8020126:	f04f 0c0a 	mov.w	ip, #10
 802012a:	4620      	mov	r0, r4
 802012c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020130:	3a30      	subs	r2, #48	; 0x30
 8020132:	2a09      	cmp	r2, #9
 8020134:	d903      	bls.n	802013e <_vfiprintf_r+0x1ee>
 8020136:	2b00      	cmp	r3, #0
 8020138:	d0c5      	beq.n	80200c6 <_vfiprintf_r+0x176>
 802013a:	9105      	str	r1, [sp, #20]
 802013c:	e7c3      	b.n	80200c6 <_vfiprintf_r+0x176>
 802013e:	fb0c 2101 	mla	r1, ip, r1, r2
 8020142:	4604      	mov	r4, r0
 8020144:	2301      	movs	r3, #1
 8020146:	e7f0      	b.n	802012a <_vfiprintf_r+0x1da>
 8020148:	ab03      	add	r3, sp, #12
 802014a:	9300      	str	r3, [sp, #0]
 802014c:	462a      	mov	r2, r5
 802014e:	4b16      	ldr	r3, [pc, #88]	; (80201a8 <_vfiprintf_r+0x258>)
 8020150:	a904      	add	r1, sp, #16
 8020152:	4630      	mov	r0, r6
 8020154:	f3af 8000 	nop.w
 8020158:	4607      	mov	r7, r0
 802015a:	1c78      	adds	r0, r7, #1
 802015c:	d1d6      	bne.n	802010c <_vfiprintf_r+0x1bc>
 802015e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020160:	07d9      	lsls	r1, r3, #31
 8020162:	d405      	bmi.n	8020170 <_vfiprintf_r+0x220>
 8020164:	89ab      	ldrh	r3, [r5, #12]
 8020166:	059a      	lsls	r2, r3, #22
 8020168:	d402      	bmi.n	8020170 <_vfiprintf_r+0x220>
 802016a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802016c:	f7ff fc94 	bl	801fa98 <__retarget_lock_release_recursive>
 8020170:	89ab      	ldrh	r3, [r5, #12]
 8020172:	065b      	lsls	r3, r3, #25
 8020174:	f53f af12 	bmi.w	801ff9c <_vfiprintf_r+0x4c>
 8020178:	9809      	ldr	r0, [sp, #36]	; 0x24
 802017a:	e711      	b.n	801ffa0 <_vfiprintf_r+0x50>
 802017c:	ab03      	add	r3, sp, #12
 802017e:	9300      	str	r3, [sp, #0]
 8020180:	462a      	mov	r2, r5
 8020182:	4b09      	ldr	r3, [pc, #36]	; (80201a8 <_vfiprintf_r+0x258>)
 8020184:	a904      	add	r1, sp, #16
 8020186:	4630      	mov	r0, r6
 8020188:	f000 f880 	bl	802028c <_printf_i>
 802018c:	e7e4      	b.n	8020158 <_vfiprintf_r+0x208>
 802018e:	bf00      	nop
 8020190:	080235b4 	.word	0x080235b4
 8020194:	080235d4 	.word	0x080235d4
 8020198:	08023594 	.word	0x08023594
 802019c:	080236a6 	.word	0x080236a6
 80201a0:	080236b0 	.word	0x080236b0
 80201a4:	00000000 	.word	0x00000000
 80201a8:	0801ff2b 	.word	0x0801ff2b
 80201ac:	080236ac 	.word	0x080236ac

080201b0 <_printf_common>:
 80201b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80201b4:	4616      	mov	r6, r2
 80201b6:	4699      	mov	r9, r3
 80201b8:	688a      	ldr	r2, [r1, #8]
 80201ba:	690b      	ldr	r3, [r1, #16]
 80201bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80201c0:	4293      	cmp	r3, r2
 80201c2:	bfb8      	it	lt
 80201c4:	4613      	movlt	r3, r2
 80201c6:	6033      	str	r3, [r6, #0]
 80201c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80201cc:	4607      	mov	r7, r0
 80201ce:	460c      	mov	r4, r1
 80201d0:	b10a      	cbz	r2, 80201d6 <_printf_common+0x26>
 80201d2:	3301      	adds	r3, #1
 80201d4:	6033      	str	r3, [r6, #0]
 80201d6:	6823      	ldr	r3, [r4, #0]
 80201d8:	0699      	lsls	r1, r3, #26
 80201da:	bf42      	ittt	mi
 80201dc:	6833      	ldrmi	r3, [r6, #0]
 80201de:	3302      	addmi	r3, #2
 80201e0:	6033      	strmi	r3, [r6, #0]
 80201e2:	6825      	ldr	r5, [r4, #0]
 80201e4:	f015 0506 	ands.w	r5, r5, #6
 80201e8:	d106      	bne.n	80201f8 <_printf_common+0x48>
 80201ea:	f104 0a19 	add.w	sl, r4, #25
 80201ee:	68e3      	ldr	r3, [r4, #12]
 80201f0:	6832      	ldr	r2, [r6, #0]
 80201f2:	1a9b      	subs	r3, r3, r2
 80201f4:	42ab      	cmp	r3, r5
 80201f6:	dc26      	bgt.n	8020246 <_printf_common+0x96>
 80201f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80201fc:	1e13      	subs	r3, r2, #0
 80201fe:	6822      	ldr	r2, [r4, #0]
 8020200:	bf18      	it	ne
 8020202:	2301      	movne	r3, #1
 8020204:	0692      	lsls	r2, r2, #26
 8020206:	d42b      	bmi.n	8020260 <_printf_common+0xb0>
 8020208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802020c:	4649      	mov	r1, r9
 802020e:	4638      	mov	r0, r7
 8020210:	47c0      	blx	r8
 8020212:	3001      	adds	r0, #1
 8020214:	d01e      	beq.n	8020254 <_printf_common+0xa4>
 8020216:	6823      	ldr	r3, [r4, #0]
 8020218:	68e5      	ldr	r5, [r4, #12]
 802021a:	6832      	ldr	r2, [r6, #0]
 802021c:	f003 0306 	and.w	r3, r3, #6
 8020220:	2b04      	cmp	r3, #4
 8020222:	bf08      	it	eq
 8020224:	1aad      	subeq	r5, r5, r2
 8020226:	68a3      	ldr	r3, [r4, #8]
 8020228:	6922      	ldr	r2, [r4, #16]
 802022a:	bf0c      	ite	eq
 802022c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020230:	2500      	movne	r5, #0
 8020232:	4293      	cmp	r3, r2
 8020234:	bfc4      	itt	gt
 8020236:	1a9b      	subgt	r3, r3, r2
 8020238:	18ed      	addgt	r5, r5, r3
 802023a:	2600      	movs	r6, #0
 802023c:	341a      	adds	r4, #26
 802023e:	42b5      	cmp	r5, r6
 8020240:	d11a      	bne.n	8020278 <_printf_common+0xc8>
 8020242:	2000      	movs	r0, #0
 8020244:	e008      	b.n	8020258 <_printf_common+0xa8>
 8020246:	2301      	movs	r3, #1
 8020248:	4652      	mov	r2, sl
 802024a:	4649      	mov	r1, r9
 802024c:	4638      	mov	r0, r7
 802024e:	47c0      	blx	r8
 8020250:	3001      	adds	r0, #1
 8020252:	d103      	bne.n	802025c <_printf_common+0xac>
 8020254:	f04f 30ff 	mov.w	r0, #4294967295
 8020258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802025c:	3501      	adds	r5, #1
 802025e:	e7c6      	b.n	80201ee <_printf_common+0x3e>
 8020260:	18e1      	adds	r1, r4, r3
 8020262:	1c5a      	adds	r2, r3, #1
 8020264:	2030      	movs	r0, #48	; 0x30
 8020266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802026a:	4422      	add	r2, r4
 802026c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020274:	3302      	adds	r3, #2
 8020276:	e7c7      	b.n	8020208 <_printf_common+0x58>
 8020278:	2301      	movs	r3, #1
 802027a:	4622      	mov	r2, r4
 802027c:	4649      	mov	r1, r9
 802027e:	4638      	mov	r0, r7
 8020280:	47c0      	blx	r8
 8020282:	3001      	adds	r0, #1
 8020284:	d0e6      	beq.n	8020254 <_printf_common+0xa4>
 8020286:	3601      	adds	r6, #1
 8020288:	e7d9      	b.n	802023e <_printf_common+0x8e>
	...

0802028c <_printf_i>:
 802028c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020290:	7e0f      	ldrb	r7, [r1, #24]
 8020292:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020294:	2f78      	cmp	r7, #120	; 0x78
 8020296:	4691      	mov	r9, r2
 8020298:	4680      	mov	r8, r0
 802029a:	460c      	mov	r4, r1
 802029c:	469a      	mov	sl, r3
 802029e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80202a2:	d807      	bhi.n	80202b4 <_printf_i+0x28>
 80202a4:	2f62      	cmp	r7, #98	; 0x62
 80202a6:	d80a      	bhi.n	80202be <_printf_i+0x32>
 80202a8:	2f00      	cmp	r7, #0
 80202aa:	f000 80d8 	beq.w	802045e <_printf_i+0x1d2>
 80202ae:	2f58      	cmp	r7, #88	; 0x58
 80202b0:	f000 80a3 	beq.w	80203fa <_printf_i+0x16e>
 80202b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80202b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80202bc:	e03a      	b.n	8020334 <_printf_i+0xa8>
 80202be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80202c2:	2b15      	cmp	r3, #21
 80202c4:	d8f6      	bhi.n	80202b4 <_printf_i+0x28>
 80202c6:	a101      	add	r1, pc, #4	; (adr r1, 80202cc <_printf_i+0x40>)
 80202c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80202cc:	08020325 	.word	0x08020325
 80202d0:	08020339 	.word	0x08020339
 80202d4:	080202b5 	.word	0x080202b5
 80202d8:	080202b5 	.word	0x080202b5
 80202dc:	080202b5 	.word	0x080202b5
 80202e0:	080202b5 	.word	0x080202b5
 80202e4:	08020339 	.word	0x08020339
 80202e8:	080202b5 	.word	0x080202b5
 80202ec:	080202b5 	.word	0x080202b5
 80202f0:	080202b5 	.word	0x080202b5
 80202f4:	080202b5 	.word	0x080202b5
 80202f8:	08020445 	.word	0x08020445
 80202fc:	08020369 	.word	0x08020369
 8020300:	08020427 	.word	0x08020427
 8020304:	080202b5 	.word	0x080202b5
 8020308:	080202b5 	.word	0x080202b5
 802030c:	08020467 	.word	0x08020467
 8020310:	080202b5 	.word	0x080202b5
 8020314:	08020369 	.word	0x08020369
 8020318:	080202b5 	.word	0x080202b5
 802031c:	080202b5 	.word	0x080202b5
 8020320:	0802042f 	.word	0x0802042f
 8020324:	682b      	ldr	r3, [r5, #0]
 8020326:	1d1a      	adds	r2, r3, #4
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	602a      	str	r2, [r5, #0]
 802032c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020334:	2301      	movs	r3, #1
 8020336:	e0a3      	b.n	8020480 <_printf_i+0x1f4>
 8020338:	6820      	ldr	r0, [r4, #0]
 802033a:	6829      	ldr	r1, [r5, #0]
 802033c:	0606      	lsls	r6, r0, #24
 802033e:	f101 0304 	add.w	r3, r1, #4
 8020342:	d50a      	bpl.n	802035a <_printf_i+0xce>
 8020344:	680e      	ldr	r6, [r1, #0]
 8020346:	602b      	str	r3, [r5, #0]
 8020348:	2e00      	cmp	r6, #0
 802034a:	da03      	bge.n	8020354 <_printf_i+0xc8>
 802034c:	232d      	movs	r3, #45	; 0x2d
 802034e:	4276      	negs	r6, r6
 8020350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020354:	485e      	ldr	r0, [pc, #376]	; (80204d0 <_printf_i+0x244>)
 8020356:	230a      	movs	r3, #10
 8020358:	e019      	b.n	802038e <_printf_i+0x102>
 802035a:	680e      	ldr	r6, [r1, #0]
 802035c:	602b      	str	r3, [r5, #0]
 802035e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020362:	bf18      	it	ne
 8020364:	b236      	sxthne	r6, r6
 8020366:	e7ef      	b.n	8020348 <_printf_i+0xbc>
 8020368:	682b      	ldr	r3, [r5, #0]
 802036a:	6820      	ldr	r0, [r4, #0]
 802036c:	1d19      	adds	r1, r3, #4
 802036e:	6029      	str	r1, [r5, #0]
 8020370:	0601      	lsls	r1, r0, #24
 8020372:	d501      	bpl.n	8020378 <_printf_i+0xec>
 8020374:	681e      	ldr	r6, [r3, #0]
 8020376:	e002      	b.n	802037e <_printf_i+0xf2>
 8020378:	0646      	lsls	r6, r0, #25
 802037a:	d5fb      	bpl.n	8020374 <_printf_i+0xe8>
 802037c:	881e      	ldrh	r6, [r3, #0]
 802037e:	4854      	ldr	r0, [pc, #336]	; (80204d0 <_printf_i+0x244>)
 8020380:	2f6f      	cmp	r7, #111	; 0x6f
 8020382:	bf0c      	ite	eq
 8020384:	2308      	moveq	r3, #8
 8020386:	230a      	movne	r3, #10
 8020388:	2100      	movs	r1, #0
 802038a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802038e:	6865      	ldr	r5, [r4, #4]
 8020390:	60a5      	str	r5, [r4, #8]
 8020392:	2d00      	cmp	r5, #0
 8020394:	bfa2      	ittt	ge
 8020396:	6821      	ldrge	r1, [r4, #0]
 8020398:	f021 0104 	bicge.w	r1, r1, #4
 802039c:	6021      	strge	r1, [r4, #0]
 802039e:	b90e      	cbnz	r6, 80203a4 <_printf_i+0x118>
 80203a0:	2d00      	cmp	r5, #0
 80203a2:	d04d      	beq.n	8020440 <_printf_i+0x1b4>
 80203a4:	4615      	mov	r5, r2
 80203a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80203aa:	fb03 6711 	mls	r7, r3, r1, r6
 80203ae:	5dc7      	ldrb	r7, [r0, r7]
 80203b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80203b4:	4637      	mov	r7, r6
 80203b6:	42bb      	cmp	r3, r7
 80203b8:	460e      	mov	r6, r1
 80203ba:	d9f4      	bls.n	80203a6 <_printf_i+0x11a>
 80203bc:	2b08      	cmp	r3, #8
 80203be:	d10b      	bne.n	80203d8 <_printf_i+0x14c>
 80203c0:	6823      	ldr	r3, [r4, #0]
 80203c2:	07de      	lsls	r6, r3, #31
 80203c4:	d508      	bpl.n	80203d8 <_printf_i+0x14c>
 80203c6:	6923      	ldr	r3, [r4, #16]
 80203c8:	6861      	ldr	r1, [r4, #4]
 80203ca:	4299      	cmp	r1, r3
 80203cc:	bfde      	ittt	le
 80203ce:	2330      	movle	r3, #48	; 0x30
 80203d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80203d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80203d8:	1b52      	subs	r2, r2, r5
 80203da:	6122      	str	r2, [r4, #16]
 80203dc:	f8cd a000 	str.w	sl, [sp]
 80203e0:	464b      	mov	r3, r9
 80203e2:	aa03      	add	r2, sp, #12
 80203e4:	4621      	mov	r1, r4
 80203e6:	4640      	mov	r0, r8
 80203e8:	f7ff fee2 	bl	80201b0 <_printf_common>
 80203ec:	3001      	adds	r0, #1
 80203ee:	d14c      	bne.n	802048a <_printf_i+0x1fe>
 80203f0:	f04f 30ff 	mov.w	r0, #4294967295
 80203f4:	b004      	add	sp, #16
 80203f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80203fa:	4835      	ldr	r0, [pc, #212]	; (80204d0 <_printf_i+0x244>)
 80203fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020400:	6829      	ldr	r1, [r5, #0]
 8020402:	6823      	ldr	r3, [r4, #0]
 8020404:	f851 6b04 	ldr.w	r6, [r1], #4
 8020408:	6029      	str	r1, [r5, #0]
 802040a:	061d      	lsls	r5, r3, #24
 802040c:	d514      	bpl.n	8020438 <_printf_i+0x1ac>
 802040e:	07df      	lsls	r7, r3, #31
 8020410:	bf44      	itt	mi
 8020412:	f043 0320 	orrmi.w	r3, r3, #32
 8020416:	6023      	strmi	r3, [r4, #0]
 8020418:	b91e      	cbnz	r6, 8020422 <_printf_i+0x196>
 802041a:	6823      	ldr	r3, [r4, #0]
 802041c:	f023 0320 	bic.w	r3, r3, #32
 8020420:	6023      	str	r3, [r4, #0]
 8020422:	2310      	movs	r3, #16
 8020424:	e7b0      	b.n	8020388 <_printf_i+0xfc>
 8020426:	6823      	ldr	r3, [r4, #0]
 8020428:	f043 0320 	orr.w	r3, r3, #32
 802042c:	6023      	str	r3, [r4, #0]
 802042e:	2378      	movs	r3, #120	; 0x78
 8020430:	4828      	ldr	r0, [pc, #160]	; (80204d4 <_printf_i+0x248>)
 8020432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020436:	e7e3      	b.n	8020400 <_printf_i+0x174>
 8020438:	0659      	lsls	r1, r3, #25
 802043a:	bf48      	it	mi
 802043c:	b2b6      	uxthmi	r6, r6
 802043e:	e7e6      	b.n	802040e <_printf_i+0x182>
 8020440:	4615      	mov	r5, r2
 8020442:	e7bb      	b.n	80203bc <_printf_i+0x130>
 8020444:	682b      	ldr	r3, [r5, #0]
 8020446:	6826      	ldr	r6, [r4, #0]
 8020448:	6961      	ldr	r1, [r4, #20]
 802044a:	1d18      	adds	r0, r3, #4
 802044c:	6028      	str	r0, [r5, #0]
 802044e:	0635      	lsls	r5, r6, #24
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	d501      	bpl.n	8020458 <_printf_i+0x1cc>
 8020454:	6019      	str	r1, [r3, #0]
 8020456:	e002      	b.n	802045e <_printf_i+0x1d2>
 8020458:	0670      	lsls	r0, r6, #25
 802045a:	d5fb      	bpl.n	8020454 <_printf_i+0x1c8>
 802045c:	8019      	strh	r1, [r3, #0]
 802045e:	2300      	movs	r3, #0
 8020460:	6123      	str	r3, [r4, #16]
 8020462:	4615      	mov	r5, r2
 8020464:	e7ba      	b.n	80203dc <_printf_i+0x150>
 8020466:	682b      	ldr	r3, [r5, #0]
 8020468:	1d1a      	adds	r2, r3, #4
 802046a:	602a      	str	r2, [r5, #0]
 802046c:	681d      	ldr	r5, [r3, #0]
 802046e:	6862      	ldr	r2, [r4, #4]
 8020470:	2100      	movs	r1, #0
 8020472:	4628      	mov	r0, r5
 8020474:	f7df fecc 	bl	8000210 <memchr>
 8020478:	b108      	cbz	r0, 802047e <_printf_i+0x1f2>
 802047a:	1b40      	subs	r0, r0, r5
 802047c:	6060      	str	r0, [r4, #4]
 802047e:	6863      	ldr	r3, [r4, #4]
 8020480:	6123      	str	r3, [r4, #16]
 8020482:	2300      	movs	r3, #0
 8020484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020488:	e7a8      	b.n	80203dc <_printf_i+0x150>
 802048a:	6923      	ldr	r3, [r4, #16]
 802048c:	462a      	mov	r2, r5
 802048e:	4649      	mov	r1, r9
 8020490:	4640      	mov	r0, r8
 8020492:	47d0      	blx	sl
 8020494:	3001      	adds	r0, #1
 8020496:	d0ab      	beq.n	80203f0 <_printf_i+0x164>
 8020498:	6823      	ldr	r3, [r4, #0]
 802049a:	079b      	lsls	r3, r3, #30
 802049c:	d413      	bmi.n	80204c6 <_printf_i+0x23a>
 802049e:	68e0      	ldr	r0, [r4, #12]
 80204a0:	9b03      	ldr	r3, [sp, #12]
 80204a2:	4298      	cmp	r0, r3
 80204a4:	bfb8      	it	lt
 80204a6:	4618      	movlt	r0, r3
 80204a8:	e7a4      	b.n	80203f4 <_printf_i+0x168>
 80204aa:	2301      	movs	r3, #1
 80204ac:	4632      	mov	r2, r6
 80204ae:	4649      	mov	r1, r9
 80204b0:	4640      	mov	r0, r8
 80204b2:	47d0      	blx	sl
 80204b4:	3001      	adds	r0, #1
 80204b6:	d09b      	beq.n	80203f0 <_printf_i+0x164>
 80204b8:	3501      	adds	r5, #1
 80204ba:	68e3      	ldr	r3, [r4, #12]
 80204bc:	9903      	ldr	r1, [sp, #12]
 80204be:	1a5b      	subs	r3, r3, r1
 80204c0:	42ab      	cmp	r3, r5
 80204c2:	dcf2      	bgt.n	80204aa <_printf_i+0x21e>
 80204c4:	e7eb      	b.n	802049e <_printf_i+0x212>
 80204c6:	2500      	movs	r5, #0
 80204c8:	f104 0619 	add.w	r6, r4, #25
 80204cc:	e7f5      	b.n	80204ba <_printf_i+0x22e>
 80204ce:	bf00      	nop
 80204d0:	080236b7 	.word	0x080236b7
 80204d4:	080236c8 	.word	0x080236c8

080204d8 <_read_r>:
 80204d8:	b538      	push	{r3, r4, r5, lr}
 80204da:	4d07      	ldr	r5, [pc, #28]	; (80204f8 <_read_r+0x20>)
 80204dc:	4604      	mov	r4, r0
 80204de:	4608      	mov	r0, r1
 80204e0:	4611      	mov	r1, r2
 80204e2:	2200      	movs	r2, #0
 80204e4:	602a      	str	r2, [r5, #0]
 80204e6:	461a      	mov	r2, r3
 80204e8:	f7e2 fc36 	bl	8002d58 <_read>
 80204ec:	1c43      	adds	r3, r0, #1
 80204ee:	d102      	bne.n	80204f6 <_read_r+0x1e>
 80204f0:	682b      	ldr	r3, [r5, #0]
 80204f2:	b103      	cbz	r3, 80204f6 <_read_r+0x1e>
 80204f4:	6023      	str	r3, [r4, #0]
 80204f6:	bd38      	pop	{r3, r4, r5, pc}
 80204f8:	200111dc 	.word	0x200111dc

080204fc <__swbuf_r>:
 80204fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204fe:	460e      	mov	r6, r1
 8020500:	4614      	mov	r4, r2
 8020502:	4605      	mov	r5, r0
 8020504:	b118      	cbz	r0, 802050e <__swbuf_r+0x12>
 8020506:	6983      	ldr	r3, [r0, #24]
 8020508:	b90b      	cbnz	r3, 802050e <__swbuf_r+0x12>
 802050a:	f7ff fa01 	bl	801f910 <__sinit>
 802050e:	4b21      	ldr	r3, [pc, #132]	; (8020594 <__swbuf_r+0x98>)
 8020510:	429c      	cmp	r4, r3
 8020512:	d12b      	bne.n	802056c <__swbuf_r+0x70>
 8020514:	686c      	ldr	r4, [r5, #4]
 8020516:	69a3      	ldr	r3, [r4, #24]
 8020518:	60a3      	str	r3, [r4, #8]
 802051a:	89a3      	ldrh	r3, [r4, #12]
 802051c:	071a      	lsls	r2, r3, #28
 802051e:	d52f      	bpl.n	8020580 <__swbuf_r+0x84>
 8020520:	6923      	ldr	r3, [r4, #16]
 8020522:	b36b      	cbz	r3, 8020580 <__swbuf_r+0x84>
 8020524:	6923      	ldr	r3, [r4, #16]
 8020526:	6820      	ldr	r0, [r4, #0]
 8020528:	1ac0      	subs	r0, r0, r3
 802052a:	6963      	ldr	r3, [r4, #20]
 802052c:	b2f6      	uxtb	r6, r6
 802052e:	4283      	cmp	r3, r0
 8020530:	4637      	mov	r7, r6
 8020532:	dc04      	bgt.n	802053e <__swbuf_r+0x42>
 8020534:	4621      	mov	r1, r4
 8020536:	4628      	mov	r0, r5
 8020538:	f7ff f944 	bl	801f7c4 <_fflush_r>
 802053c:	bb30      	cbnz	r0, 802058c <__swbuf_r+0x90>
 802053e:	68a3      	ldr	r3, [r4, #8]
 8020540:	3b01      	subs	r3, #1
 8020542:	60a3      	str	r3, [r4, #8]
 8020544:	6823      	ldr	r3, [r4, #0]
 8020546:	1c5a      	adds	r2, r3, #1
 8020548:	6022      	str	r2, [r4, #0]
 802054a:	701e      	strb	r6, [r3, #0]
 802054c:	6963      	ldr	r3, [r4, #20]
 802054e:	3001      	adds	r0, #1
 8020550:	4283      	cmp	r3, r0
 8020552:	d004      	beq.n	802055e <__swbuf_r+0x62>
 8020554:	89a3      	ldrh	r3, [r4, #12]
 8020556:	07db      	lsls	r3, r3, #31
 8020558:	d506      	bpl.n	8020568 <__swbuf_r+0x6c>
 802055a:	2e0a      	cmp	r6, #10
 802055c:	d104      	bne.n	8020568 <__swbuf_r+0x6c>
 802055e:	4621      	mov	r1, r4
 8020560:	4628      	mov	r0, r5
 8020562:	f7ff f92f 	bl	801f7c4 <_fflush_r>
 8020566:	b988      	cbnz	r0, 802058c <__swbuf_r+0x90>
 8020568:	4638      	mov	r0, r7
 802056a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802056c:	4b0a      	ldr	r3, [pc, #40]	; (8020598 <__swbuf_r+0x9c>)
 802056e:	429c      	cmp	r4, r3
 8020570:	d101      	bne.n	8020576 <__swbuf_r+0x7a>
 8020572:	68ac      	ldr	r4, [r5, #8]
 8020574:	e7cf      	b.n	8020516 <__swbuf_r+0x1a>
 8020576:	4b09      	ldr	r3, [pc, #36]	; (802059c <__swbuf_r+0xa0>)
 8020578:	429c      	cmp	r4, r3
 802057a:	bf08      	it	eq
 802057c:	68ec      	ldreq	r4, [r5, #12]
 802057e:	e7ca      	b.n	8020516 <__swbuf_r+0x1a>
 8020580:	4621      	mov	r1, r4
 8020582:	4628      	mov	r0, r5
 8020584:	f000 f80c 	bl	80205a0 <__swsetup_r>
 8020588:	2800      	cmp	r0, #0
 802058a:	d0cb      	beq.n	8020524 <__swbuf_r+0x28>
 802058c:	f04f 37ff 	mov.w	r7, #4294967295
 8020590:	e7ea      	b.n	8020568 <__swbuf_r+0x6c>
 8020592:	bf00      	nop
 8020594:	080235b4 	.word	0x080235b4
 8020598:	080235d4 	.word	0x080235d4
 802059c:	08023594 	.word	0x08023594

080205a0 <__swsetup_r>:
 80205a0:	4b32      	ldr	r3, [pc, #200]	; (802066c <__swsetup_r+0xcc>)
 80205a2:	b570      	push	{r4, r5, r6, lr}
 80205a4:	681d      	ldr	r5, [r3, #0]
 80205a6:	4606      	mov	r6, r0
 80205a8:	460c      	mov	r4, r1
 80205aa:	b125      	cbz	r5, 80205b6 <__swsetup_r+0x16>
 80205ac:	69ab      	ldr	r3, [r5, #24]
 80205ae:	b913      	cbnz	r3, 80205b6 <__swsetup_r+0x16>
 80205b0:	4628      	mov	r0, r5
 80205b2:	f7ff f9ad 	bl	801f910 <__sinit>
 80205b6:	4b2e      	ldr	r3, [pc, #184]	; (8020670 <__swsetup_r+0xd0>)
 80205b8:	429c      	cmp	r4, r3
 80205ba:	d10f      	bne.n	80205dc <__swsetup_r+0x3c>
 80205bc:	686c      	ldr	r4, [r5, #4]
 80205be:	89a3      	ldrh	r3, [r4, #12]
 80205c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80205c4:	0719      	lsls	r1, r3, #28
 80205c6:	d42c      	bmi.n	8020622 <__swsetup_r+0x82>
 80205c8:	06dd      	lsls	r5, r3, #27
 80205ca:	d411      	bmi.n	80205f0 <__swsetup_r+0x50>
 80205cc:	2309      	movs	r3, #9
 80205ce:	6033      	str	r3, [r6, #0]
 80205d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80205d4:	81a3      	strh	r3, [r4, #12]
 80205d6:	f04f 30ff 	mov.w	r0, #4294967295
 80205da:	e03e      	b.n	802065a <__swsetup_r+0xba>
 80205dc:	4b25      	ldr	r3, [pc, #148]	; (8020674 <__swsetup_r+0xd4>)
 80205de:	429c      	cmp	r4, r3
 80205e0:	d101      	bne.n	80205e6 <__swsetup_r+0x46>
 80205e2:	68ac      	ldr	r4, [r5, #8]
 80205e4:	e7eb      	b.n	80205be <__swsetup_r+0x1e>
 80205e6:	4b24      	ldr	r3, [pc, #144]	; (8020678 <__swsetup_r+0xd8>)
 80205e8:	429c      	cmp	r4, r3
 80205ea:	bf08      	it	eq
 80205ec:	68ec      	ldreq	r4, [r5, #12]
 80205ee:	e7e6      	b.n	80205be <__swsetup_r+0x1e>
 80205f0:	0758      	lsls	r0, r3, #29
 80205f2:	d512      	bpl.n	802061a <__swsetup_r+0x7a>
 80205f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80205f6:	b141      	cbz	r1, 802060a <__swsetup_r+0x6a>
 80205f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80205fc:	4299      	cmp	r1, r3
 80205fe:	d002      	beq.n	8020606 <__swsetup_r+0x66>
 8020600:	4630      	mov	r0, r6
 8020602:	f7ff fa81 	bl	801fb08 <_free_r>
 8020606:	2300      	movs	r3, #0
 8020608:	6363      	str	r3, [r4, #52]	; 0x34
 802060a:	89a3      	ldrh	r3, [r4, #12]
 802060c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020610:	81a3      	strh	r3, [r4, #12]
 8020612:	2300      	movs	r3, #0
 8020614:	6063      	str	r3, [r4, #4]
 8020616:	6923      	ldr	r3, [r4, #16]
 8020618:	6023      	str	r3, [r4, #0]
 802061a:	89a3      	ldrh	r3, [r4, #12]
 802061c:	f043 0308 	orr.w	r3, r3, #8
 8020620:	81a3      	strh	r3, [r4, #12]
 8020622:	6923      	ldr	r3, [r4, #16]
 8020624:	b94b      	cbnz	r3, 802063a <__swsetup_r+0x9a>
 8020626:	89a3      	ldrh	r3, [r4, #12]
 8020628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802062c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020630:	d003      	beq.n	802063a <__swsetup_r+0x9a>
 8020632:	4621      	mov	r1, r4
 8020634:	4630      	mov	r0, r6
 8020636:	f000 f84d 	bl	80206d4 <__smakebuf_r>
 802063a:	89a0      	ldrh	r0, [r4, #12]
 802063c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020640:	f010 0301 	ands.w	r3, r0, #1
 8020644:	d00a      	beq.n	802065c <__swsetup_r+0xbc>
 8020646:	2300      	movs	r3, #0
 8020648:	60a3      	str	r3, [r4, #8]
 802064a:	6963      	ldr	r3, [r4, #20]
 802064c:	425b      	negs	r3, r3
 802064e:	61a3      	str	r3, [r4, #24]
 8020650:	6923      	ldr	r3, [r4, #16]
 8020652:	b943      	cbnz	r3, 8020666 <__swsetup_r+0xc6>
 8020654:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020658:	d1ba      	bne.n	80205d0 <__swsetup_r+0x30>
 802065a:	bd70      	pop	{r4, r5, r6, pc}
 802065c:	0781      	lsls	r1, r0, #30
 802065e:	bf58      	it	pl
 8020660:	6963      	ldrpl	r3, [r4, #20]
 8020662:	60a3      	str	r3, [r4, #8]
 8020664:	e7f4      	b.n	8020650 <__swsetup_r+0xb0>
 8020666:	2000      	movs	r0, #0
 8020668:	e7f7      	b.n	802065a <__swsetup_r+0xba>
 802066a:	bf00      	nop
 802066c:	20000050 	.word	0x20000050
 8020670:	080235b4 	.word	0x080235b4
 8020674:	080235d4 	.word	0x080235d4
 8020678:	08023594 	.word	0x08023594

0802067c <abort>:
 802067c:	b508      	push	{r3, lr}
 802067e:	2006      	movs	r0, #6
 8020680:	f000 f890 	bl	80207a4 <raise>
 8020684:	2001      	movs	r0, #1
 8020686:	f7e2 fb5d 	bl	8002d44 <_exit>

0802068a <__swhatbuf_r>:
 802068a:	b570      	push	{r4, r5, r6, lr}
 802068c:	460e      	mov	r6, r1
 802068e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020692:	2900      	cmp	r1, #0
 8020694:	b096      	sub	sp, #88	; 0x58
 8020696:	4614      	mov	r4, r2
 8020698:	461d      	mov	r5, r3
 802069a:	da08      	bge.n	80206ae <__swhatbuf_r+0x24>
 802069c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80206a0:	2200      	movs	r2, #0
 80206a2:	602a      	str	r2, [r5, #0]
 80206a4:	061a      	lsls	r2, r3, #24
 80206a6:	d410      	bmi.n	80206ca <__swhatbuf_r+0x40>
 80206a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80206ac:	e00e      	b.n	80206cc <__swhatbuf_r+0x42>
 80206ae:	466a      	mov	r2, sp
 80206b0:	f000 f894 	bl	80207dc <_fstat_r>
 80206b4:	2800      	cmp	r0, #0
 80206b6:	dbf1      	blt.n	802069c <__swhatbuf_r+0x12>
 80206b8:	9a01      	ldr	r2, [sp, #4]
 80206ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80206be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80206c2:	425a      	negs	r2, r3
 80206c4:	415a      	adcs	r2, r3
 80206c6:	602a      	str	r2, [r5, #0]
 80206c8:	e7ee      	b.n	80206a8 <__swhatbuf_r+0x1e>
 80206ca:	2340      	movs	r3, #64	; 0x40
 80206cc:	2000      	movs	r0, #0
 80206ce:	6023      	str	r3, [r4, #0]
 80206d0:	b016      	add	sp, #88	; 0x58
 80206d2:	bd70      	pop	{r4, r5, r6, pc}

080206d4 <__smakebuf_r>:
 80206d4:	898b      	ldrh	r3, [r1, #12]
 80206d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80206d8:	079d      	lsls	r5, r3, #30
 80206da:	4606      	mov	r6, r0
 80206dc:	460c      	mov	r4, r1
 80206de:	d507      	bpl.n	80206f0 <__smakebuf_r+0x1c>
 80206e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80206e4:	6023      	str	r3, [r4, #0]
 80206e6:	6123      	str	r3, [r4, #16]
 80206e8:	2301      	movs	r3, #1
 80206ea:	6163      	str	r3, [r4, #20]
 80206ec:	b002      	add	sp, #8
 80206ee:	bd70      	pop	{r4, r5, r6, pc}
 80206f0:	ab01      	add	r3, sp, #4
 80206f2:	466a      	mov	r2, sp
 80206f4:	f7ff ffc9 	bl	802068a <__swhatbuf_r>
 80206f8:	9900      	ldr	r1, [sp, #0]
 80206fa:	4605      	mov	r5, r0
 80206fc:	4630      	mov	r0, r6
 80206fe:	f7ff fa6f 	bl	801fbe0 <_malloc_r>
 8020702:	b948      	cbnz	r0, 8020718 <__smakebuf_r+0x44>
 8020704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020708:	059a      	lsls	r2, r3, #22
 802070a:	d4ef      	bmi.n	80206ec <__smakebuf_r+0x18>
 802070c:	f023 0303 	bic.w	r3, r3, #3
 8020710:	f043 0302 	orr.w	r3, r3, #2
 8020714:	81a3      	strh	r3, [r4, #12]
 8020716:	e7e3      	b.n	80206e0 <__smakebuf_r+0xc>
 8020718:	4b0d      	ldr	r3, [pc, #52]	; (8020750 <__smakebuf_r+0x7c>)
 802071a:	62b3      	str	r3, [r6, #40]	; 0x28
 802071c:	89a3      	ldrh	r3, [r4, #12]
 802071e:	6020      	str	r0, [r4, #0]
 8020720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020724:	81a3      	strh	r3, [r4, #12]
 8020726:	9b00      	ldr	r3, [sp, #0]
 8020728:	6163      	str	r3, [r4, #20]
 802072a:	9b01      	ldr	r3, [sp, #4]
 802072c:	6120      	str	r0, [r4, #16]
 802072e:	b15b      	cbz	r3, 8020748 <__smakebuf_r+0x74>
 8020730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020734:	4630      	mov	r0, r6
 8020736:	f000 f863 	bl	8020800 <_isatty_r>
 802073a:	b128      	cbz	r0, 8020748 <__smakebuf_r+0x74>
 802073c:	89a3      	ldrh	r3, [r4, #12]
 802073e:	f023 0303 	bic.w	r3, r3, #3
 8020742:	f043 0301 	orr.w	r3, r3, #1
 8020746:	81a3      	strh	r3, [r4, #12]
 8020748:	89a0      	ldrh	r0, [r4, #12]
 802074a:	4305      	orrs	r5, r0
 802074c:	81a5      	strh	r5, [r4, #12]
 802074e:	e7cd      	b.n	80206ec <__smakebuf_r+0x18>
 8020750:	0801f8a9 	.word	0x0801f8a9

08020754 <_raise_r>:
 8020754:	291f      	cmp	r1, #31
 8020756:	b538      	push	{r3, r4, r5, lr}
 8020758:	4604      	mov	r4, r0
 802075a:	460d      	mov	r5, r1
 802075c:	d904      	bls.n	8020768 <_raise_r+0x14>
 802075e:	2316      	movs	r3, #22
 8020760:	6003      	str	r3, [r0, #0]
 8020762:	f04f 30ff 	mov.w	r0, #4294967295
 8020766:	bd38      	pop	{r3, r4, r5, pc}
 8020768:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802076a:	b112      	cbz	r2, 8020772 <_raise_r+0x1e>
 802076c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020770:	b94b      	cbnz	r3, 8020786 <_raise_r+0x32>
 8020772:	4620      	mov	r0, r4
 8020774:	f000 f830 	bl	80207d8 <_getpid_r>
 8020778:	462a      	mov	r2, r5
 802077a:	4601      	mov	r1, r0
 802077c:	4620      	mov	r0, r4
 802077e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020782:	f000 b817 	b.w	80207b4 <_kill_r>
 8020786:	2b01      	cmp	r3, #1
 8020788:	d00a      	beq.n	80207a0 <_raise_r+0x4c>
 802078a:	1c59      	adds	r1, r3, #1
 802078c:	d103      	bne.n	8020796 <_raise_r+0x42>
 802078e:	2316      	movs	r3, #22
 8020790:	6003      	str	r3, [r0, #0]
 8020792:	2001      	movs	r0, #1
 8020794:	e7e7      	b.n	8020766 <_raise_r+0x12>
 8020796:	2400      	movs	r4, #0
 8020798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802079c:	4628      	mov	r0, r5
 802079e:	4798      	blx	r3
 80207a0:	2000      	movs	r0, #0
 80207a2:	e7e0      	b.n	8020766 <_raise_r+0x12>

080207a4 <raise>:
 80207a4:	4b02      	ldr	r3, [pc, #8]	; (80207b0 <raise+0xc>)
 80207a6:	4601      	mov	r1, r0
 80207a8:	6818      	ldr	r0, [r3, #0]
 80207aa:	f7ff bfd3 	b.w	8020754 <_raise_r>
 80207ae:	bf00      	nop
 80207b0:	20000050 	.word	0x20000050

080207b4 <_kill_r>:
 80207b4:	b538      	push	{r3, r4, r5, lr}
 80207b6:	4d07      	ldr	r5, [pc, #28]	; (80207d4 <_kill_r+0x20>)
 80207b8:	2300      	movs	r3, #0
 80207ba:	4604      	mov	r4, r0
 80207bc:	4608      	mov	r0, r1
 80207be:	4611      	mov	r1, r2
 80207c0:	602b      	str	r3, [r5, #0]
 80207c2:	f7e2 faad 	bl	8002d20 <_kill>
 80207c6:	1c43      	adds	r3, r0, #1
 80207c8:	d102      	bne.n	80207d0 <_kill_r+0x1c>
 80207ca:	682b      	ldr	r3, [r5, #0]
 80207cc:	b103      	cbz	r3, 80207d0 <_kill_r+0x1c>
 80207ce:	6023      	str	r3, [r4, #0]
 80207d0:	bd38      	pop	{r3, r4, r5, pc}
 80207d2:	bf00      	nop
 80207d4:	200111dc 	.word	0x200111dc

080207d8 <_getpid_r>:
 80207d8:	f7e2 ba9a 	b.w	8002d10 <_getpid>

080207dc <_fstat_r>:
 80207dc:	b538      	push	{r3, r4, r5, lr}
 80207de:	4d07      	ldr	r5, [pc, #28]	; (80207fc <_fstat_r+0x20>)
 80207e0:	2300      	movs	r3, #0
 80207e2:	4604      	mov	r4, r0
 80207e4:	4608      	mov	r0, r1
 80207e6:	4611      	mov	r1, r2
 80207e8:	602b      	str	r3, [r5, #0]
 80207ea:	f7e2 fade 	bl	8002daa <_fstat>
 80207ee:	1c43      	adds	r3, r0, #1
 80207f0:	d102      	bne.n	80207f8 <_fstat_r+0x1c>
 80207f2:	682b      	ldr	r3, [r5, #0]
 80207f4:	b103      	cbz	r3, 80207f8 <_fstat_r+0x1c>
 80207f6:	6023      	str	r3, [r4, #0]
 80207f8:	bd38      	pop	{r3, r4, r5, pc}
 80207fa:	bf00      	nop
 80207fc:	200111dc 	.word	0x200111dc

08020800 <_isatty_r>:
 8020800:	b538      	push	{r3, r4, r5, lr}
 8020802:	4d06      	ldr	r5, [pc, #24]	; (802081c <_isatty_r+0x1c>)
 8020804:	2300      	movs	r3, #0
 8020806:	4604      	mov	r4, r0
 8020808:	4608      	mov	r0, r1
 802080a:	602b      	str	r3, [r5, #0]
 802080c:	f7e2 fadd 	bl	8002dca <_isatty>
 8020810:	1c43      	adds	r3, r0, #1
 8020812:	d102      	bne.n	802081a <_isatty_r+0x1a>
 8020814:	682b      	ldr	r3, [r5, #0]
 8020816:	b103      	cbz	r3, 802081a <_isatty_r+0x1a>
 8020818:	6023      	str	r3, [r4, #0]
 802081a:	bd38      	pop	{r3, r4, r5, pc}
 802081c:	200111dc 	.word	0x200111dc

08020820 <_init>:
 8020820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020822:	bf00      	nop
 8020824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020826:	bc08      	pop	{r3}
 8020828:	469e      	mov	lr, r3
 802082a:	4770      	bx	lr

0802082c <_fini>:
 802082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802082e:	bf00      	nop
 8020830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020832:	bc08      	pop	{r3}
 8020834:	469e      	mov	lr, r3
 8020836:	4770      	bx	lr
